!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABANDON_HASH	wallet/wallet.h	/^    static const uint256 ABANDON_HASH;$/;"	m	class:CMerkleTx
ABSENT	test/coins_tests.cpp	/^const static CAmount ABSENT = -2;$/;"	v	file:
ABSENT_FLAGS	test/coins_tests.cpp	/^const static auto ABSENT_FLAGS = {NO_ENTRY};$/;"	v	file:
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/opt\/wificoin\/build-aux\/missing aclocal-1.13$/;"	m
ACLOCAL	secp256k1/Makefile	/^ACLOCAL = ${SHELL} \/opt\/wificoin\/src\/secp256k1\/build-aux\/missing aclocal-1.13$/;"	m
ACLOCAL	univalue/Makefile	/^ACLOCAL = ${SHELL} \/opt\/wificoin\/src\/univalue\/build-aux\/missing aclocal-1.13$/;"	m
ACLOCAL_AMFLAGS	secp256k1/Makefile	/^ACLOCAL_AMFLAGS = -I build-aux\/m4$/;"	m
ACLOCAL_AMFLAGS	univalue/Makefile	/^ACLOCAL_AMFLAGS = -I build-aux\/m4$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	secp256k1/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	univalue/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACQUIRED_AFTER	threadsafety.h	22;"	d
ACQUIRED_AFTER	threadsafety.h	41;"	d
ACQUIRED_BEFORE	threadsafety.h	23;"	d
ACQUIRED_BEFORE	threadsafety.h	42;"	d
ADDR	protocol.cpp	/^const char *ADDR="addr";$/;"	m	namespace:NetMsgType	file:
ADDRESS_COLUMN_WIDTH	qt/rpcconsole.h	/^        ADDRESS_COLUMN_WIDTH = 200,$/;"	e	enum:RPCConsole::ColumnWidths
ADDRMAN_BUCKET_SIZE	addrman.h	177;"	d
ADDRMAN_BUCKET_SIZE_LOG2	addrman.h	145;"	d
ADDRMAN_GETADDR_MAX	addrman.h	172;"	d
ADDRMAN_GETADDR_MAX_PCT	addrman.h	169;"	d
ADDRMAN_HORIZON_DAYS	addrman.h	157;"	d
ADDRMAN_MAX_FAILURES	addrman.h	163;"	d
ADDRMAN_MIN_FAIL_DAYS	addrman.h	166;"	d
ADDRMAN_NEW_BUCKETS_PER_ADDRESS	addrman.h	154;"	d
ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP	addrman.h	151;"	d
ADDRMAN_NEW_BUCKET_COUNT	addrman.h	176;"	d
ADDRMAN_NEW_BUCKET_COUNT_LOG2	addrman.h	142;"	d
ADDRMAN_RETRIES	addrman.h	160;"	d
ADDRMAN_TRIED_BUCKETS_PER_GROUP	addrman.h	148;"	d
ADDRMAN_TRIED_BUCKET_COUNT	addrman.h	175;"	d
ADDRMAN_TRIED_BUCKET_COUNT_LOG2	addrman.h	139;"	d
ADD_SERIALIZE_METHODS	addrdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBanEntry
ADD_SERIALIZE_METHODS	addrman.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddrInfo
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactions
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactionsRequest
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeaderAndShortTxIDs
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:PrefilledTransaction
ADD_SERIALIZE_METHODS	blockencodings.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:TransactionCompressor
ADD_SERIALIZE_METHODS	bloom.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBloomFilter
ADD_SERIALIZE_METHODS	chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockFileInfo
ADD_SERIALIZE_METHODS	chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CDiskBlockIndex
ADD_SERIALIZE_METHODS	chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CDiskBlockPos
ADD_SERIALIZE_METHODS	compressor.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxOutCompressor
ADD_SERIALIZE_METHODS	merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMerkleBlock
ADD_SERIALIZE_METHODS	merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CPartialMerkleTree
ADD_SERIALIZE_METHODS	netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CNetAddr
ADD_SERIALIZE_METHODS	netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CService
ADD_SERIALIZE_METHODS	netaddress.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CSubNet
ADD_SERIALIZE_METHODS	policy/feerate.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CFeeRate
ADD_SERIALIZE_METHODS	primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlock
ADD_SERIALIZE_METHODS	primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeader
ADD_SERIALIZE_METHODS	primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CBlockLocator
ADD_SERIALIZE_METHODS	primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:COutPoint
ADD_SERIALIZE_METHODS	primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxIn
ADD_SERIALIZE_METHODS	primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxOut
ADD_SERIALIZE_METHODS	protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddress
ADD_SERIALIZE_METHODS	protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CInv
ADD_SERIALIZE_METHODS	protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMessageHeader
ADD_SERIALIZE_METHODS	qt/recentrequeststablemodel.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:RecentRequestEntry
ADD_SERIALIZE_METHODS	qt/walletmodel.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:SendCoinsRecipient
ADD_SERIALIZE_METHODS	rest.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CCoin	file:
ADD_SERIALIZE_METHODS	script/script.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CScript
ADD_SERIALIZE_METHODS	serialize.h	160;"	d
ADD_SERIALIZE_METHODS	test/blockencodings_tests.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:TestHeaderAndShortIDs	file:
ADD_SERIALIZE_METHODS	test/dbwrapper_tests.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:StringContentsSerializer	file:
ADD_SERIALIZE_METHODS	test/serialize_tests.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CSerializeMethodsTestSingle	file:
ADD_SERIALIZE_METHODS	txdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CDiskTxPos
ADD_SERIALIZE_METHODS	undo.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockUndo
ADD_SERIALIZE_METHODS	wallet/crypter.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMasterKey
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAccount
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAccountingEntry
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CKeyPool
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMerkleTx
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CWalletKey
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CWalletTx
ADD_SERIALIZE_METHODS	wallet/walletdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CHDChain
ADD_SERIALIZE_METHODS	wallet/walletdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CKeyMetadata
AES128CBCDecrypt	crypto/aes.cpp	/^AES128CBCDecrypt::AES128CBCDecrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)$/;"	f	class:AES128CBCDecrypt
AES128CBCDecrypt	crypto/aes.h	/^class AES128CBCDecrypt$/;"	c
AES128CBCEncrypt	crypto/aes.cpp	/^AES128CBCEncrypt::AES128CBCEncrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)$/;"	f	class:AES128CBCEncrypt
AES128CBCEncrypt	crypto/aes.h	/^class AES128CBCEncrypt$/;"	c
AES128Decrypt	crypto/aes.cpp	/^AES128Decrypt::AES128Decrypt(const unsigned char key[16])$/;"	f	class:AES128Decrypt
AES128Decrypt	crypto/aes.h	/^class AES128Decrypt$/;"	c
AES128Encrypt	crypto/aes.cpp	/^AES128Encrypt::AES128Encrypt(const unsigned char key[16])$/;"	f	class:AES128Encrypt
AES128Encrypt	crypto/aes.h	/^class AES128Encrypt$/;"	c
AES128_KEYSIZE	crypto/aes.h	/^static const int AES128_KEYSIZE = 16;$/;"	v
AES128_ctx	crypto/ctaes/ctaes.h	/^} AES128_ctx;$/;"	t	typeref:struct:__anon84
AES128_decrypt	crypto/ctaes/ctaes.c	/^void AES128_decrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f
AES128_encrypt	crypto/ctaes/ctaes.c	/^void AES128_encrypt(const AES128_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f
AES128_init	crypto/ctaes/ctaes.c	/^void AES128_init(AES128_ctx* ctx, const unsigned char* key16) {$/;"	f
AES192_ctx	crypto/ctaes/ctaes.h	/^} AES192_ctx;$/;"	t	typeref:struct:__anon85
AES192_decrypt	crypto/ctaes/ctaes.c	/^void AES192_decrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f
AES192_encrypt	crypto/ctaes/ctaes.c	/^void AES192_encrypt(const AES192_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f
AES192_init	crypto/ctaes/ctaes.c	/^void AES192_init(AES192_ctx* ctx, const unsigned char* key24) {$/;"	f
AES256CBCDecrypt	crypto/aes.cpp	/^AES256CBCDecrypt::AES256CBCDecrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)$/;"	f	class:AES256CBCDecrypt
AES256CBCDecrypt	crypto/aes.h	/^class AES256CBCDecrypt$/;"	c
AES256CBCEncrypt	crypto/aes.cpp	/^AES256CBCEncrypt::AES256CBCEncrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)$/;"	f	class:AES256CBCEncrypt
AES256CBCEncrypt	crypto/aes.h	/^class AES256CBCEncrypt$/;"	c
AES256Decrypt	crypto/aes.cpp	/^AES256Decrypt::AES256Decrypt(const unsigned char key[32])$/;"	f	class:AES256Decrypt
AES256Decrypt	crypto/aes.h	/^class AES256Decrypt$/;"	c
AES256Encrypt	crypto/aes.cpp	/^AES256Encrypt::AES256Encrypt(const unsigned char key[32])$/;"	f	class:AES256Encrypt
AES256Encrypt	crypto/aes.h	/^class AES256Encrypt$/;"	c
AES256_KEYSIZE	crypto/aes.h	/^static const int AES256_KEYSIZE = 32;$/;"	v
AES256_ctx	crypto/ctaes/ctaes.h	/^} AES256_ctx;$/;"	t	typeref:struct:__anon86
AES256_decrypt	crypto/ctaes/ctaes.c	/^void AES256_decrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f
AES256_encrypt	crypto/ctaes/ctaes.c	/^void AES256_encrypt(const AES256_ctx* ctx, size_t blocks, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f
AES256_init	crypto/ctaes/ctaes.c	/^void AES256_init(AES256_ctx* ctx, const unsigned char* key32) {$/;"	f
AES_BLOCKSIZE	crypto/aes.h	/^static const int AES_BLOCKSIZE = 16;$/;"	v
AES_decrypt	crypto/ctaes/ctaes.c	/^static void AES_decrypt(const AES_state* rounds, int nrounds, unsigned char* plain16, const unsigned char* cipher16) {$/;"	f	file:
AES_encrypt	crypto/ctaes/ctaes.c	/^static void AES_encrypt(const AES_state* rounds, int nrounds, unsigned char* cipher16, const unsigned char* plain16) {$/;"	f	file:
AES_setup	crypto/ctaes/ctaes.c	/^static void AES_setup(AES_state* rounds, const uint8_t* key, int nkeywords, int nrounds)$/;"	f	file:
AES_state	crypto/ctaes/ctaes.h	/^} AES_state;$/;"	t	typeref:struct:__anon83
ALL_TYPES	qt/transactionfilterproxy.h	/^    static const quint32 ALL_TYPES = 0xFFFFFFFF;$/;"	m	class:TransactionFilterProxy
AMOUNT_MINIMUM_COLUMN_WIDTH	qt/receivecoinsdialog.h	/^        AMOUNT_MINIMUM_COLUMN_WIDTH = 180,$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
AMOUNT_MINIMUM_COLUMN_WIDTH	qt/transactionview.h	/^        AMOUNT_MINIMUM_COLUMN_WIDTH = 120,$/;"	e	enum:TransactionView::ColumnWidths
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	secp256k1/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	univalue/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = $(HARDENED_CPPFLAGS)$/;"	m
AM_CXXFLAGS	Makefile	/^AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS)$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	secp256k1/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	univalue/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_LDFLAGS	Makefile	/^AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	secp256k1/Makefile	/^AM_RECURSIVE_TARGETS = cscope check recheck$/;"	m
AM_RECURSIVE_TARGETS	univalue/Makefile	/^AM_RECURSIVE_TARGETS = cscope check recheck$/;"	m
AM_V_AR	Makefile	/^AM_V_AR = $(am__v_AR_$(V))$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CC	secp256k1/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCAS	secp256k1/Makefile	/^AM_V_CCAS = $(am__v_CCAS_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CCLD	secp256k1/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXX	univalue/Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_CXXLD	univalue/Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	secp256k1/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	univalue/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_OBJCXX	Makefile	/^AM_V_OBJCXX = $(am__v_OBJCXX_$(V))$/;"	m
AM_V_OBJCXXLD	Makefile	/^AM_V_OBJCXXLD = $(am__v_OBJCXXLD_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	secp256k1/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	univalue/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	secp256k1/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	univalue/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	secp256k1/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	univalue/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AR	Makefile	/^AR = \/usr\/bin\/ar$/;"	m
AR	leveldb/Makefile	/^AR=xcrun ar$/;"	m
AR	secp256k1/Makefile	/^AR = \/usr\/bin\/ar$/;"	m
AR	univalue/Makefile	/^AR = ar$/;"	m
ARCH_CPU_ARM64_FAMILY	leveldb/port/atomic_pointer.h	239;"	d
ARCH_CPU_ARM64_FAMILY	leveldb/port/atomic_pointer.h	39;"	d
ARCH_CPU_ARM_FAMILY	leveldb/port/atomic_pointer.h	238;"	d
ARCH_CPU_ARM_FAMILY	leveldb/port/atomic_pointer.h	37;"	d
ARCH_CPU_MIPS_FAMILY	leveldb/port/atomic_pointer.h	43;"	d
ARCH_CPU_PPC_FAMILY	leveldb/port/atomic_pointer.h	240;"	d
ARCH_CPU_PPC_FAMILY	leveldb/port/atomic_pointer.h	41;"	d
ARCH_CPU_X86_FAMILY	leveldb/port/atomic_pointer.h	237;"	d
ARCH_CPU_X86_FAMILY	leveldb/port/atomic_pointer.h	33;"	d
ARCH_CPU_X86_FAMILY	leveldb/port/atomic_pointer.h	35;"	d
ARENA_ALIGN	support/lockedpool.h	/^    static const size_t ARENA_ALIGN = 16;$/;"	m	class:LockedPool
ARENA_SIZE	support/lockedpool.h	/^    static const size_t ARENA_SIZE = 256*1024;$/;"	m	class:LockedPool
ARFLAGS	Makefile	/^ARFLAGS = cr$/;"	m
ARG_CHECK	secp256k1/src/secp256k1.c	21;"	d	file:
ARRAYLEN	utilstrencodings.h	20;"	d
ARRAY_SIZE	univalue/test/unitester.cpp	17;"	d	file:
ASIZE	bench/lockedpool.cpp	12;"	d	file:
ASSERT_EQ	leveldb/util/testharness.h	107;"	d
ASSERT_GE	leveldb/util/testharness.h	109;"	d
ASSERT_GT	leveldb/util/testharness.h	110;"	d
ASSERT_LE	leveldb/util/testharness.h	111;"	d
ASSERT_LT	leveldb/util/testharness.h	112;"	d
ASSERT_NE	leveldb/util/testharness.h	108;"	d
ASSERT_OK	leveldb/util/testharness.h	106;"	d
ASSERT_TRUE	leveldb/util/testharness.h	105;"	d
ASYMP_UTF8	qt/coincontroldialog.h	28;"	d
ATYPEUNSUPPORTED	netbase.cpp	/^    ATYPEUNSUPPORTED = 0x08, \/\/! Address type not supported$/;"	e	enum:uint8_t	file:
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/opt\/wificoin\/build-aux\/missing autoconf$/;"	m
AUTOCONF	secp256k1/Makefile	/^AUTOCONF = ${SHELL} \/opt\/wificoin\/src\/secp256k1\/build-aux\/missing autoconf$/;"	m
AUTOCONF	univalue/Makefile	/^AUTOCONF = ${SHELL} \/opt\/wificoin\/src\/univalue\/build-aux\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/opt\/wificoin\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	secp256k1/Makefile	/^AUTOHEADER = ${SHELL} \/opt\/wificoin\/src\/secp256k1\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	univalue/Makefile	/^AUTOHEADER = ${SHELL} \/opt\/wificoin\/src\/univalue\/build-aux\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/opt\/wificoin\/build-aux\/missing automake-1.13$/;"	m
AUTOMAKE	secp256k1/Makefile	/^AUTOMAKE = ${SHELL} \/opt\/wificoin\/src\/secp256k1\/build-aux\/missing automake-1.13$/;"	m
AUTOMAKE	univalue/Makefile	/^AUTOMAKE = ${SHELL} \/opt\/wificoin\/src\/univalue\/build-aux\/missing automake-1.13$/;"	m
AVG_ADDRESS_BROADCAST_INTERVAL	validation.h	/^static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;$/;"	v
AVG_FEEFILTER_BROADCAST_INTERVAL	validation.h	/^static const unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;$/;"	v
AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL	validation.h	/^static const unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 60 * 60;$/;"	v
AWK	Makefile	/^AWK = gawk$/;"	m
AWK	secp256k1/Makefile	/^AWK = gawk$/;"	m
AWK	univalue/Makefile	/^AWK = gawk$/;"	m
Abandon	leveldb/table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
AbandonTransaction	wallet/wallet.cpp	/^bool CWallet::AbandonTransaction(const uint256& hashTx)$/;"	f	class:CWallet
Abandoned	qt/transactionrecord.h	/^        Abandoned,          \/**< Abandoned from the wallet **\/$/;"	e	enum:TransactionStatus::Status
AbortNode	validation.cpp	/^bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage="")$/;"	f	namespace:__anon44
AbortNode	validation.cpp	/^bool AbortNode(const std::string& strMessage, const std::string& userMessage="")$/;"	f	namespace:__anon44
AbortRescan	wallet/wallet.h	/^    void AbortRescan() { fAbortRescan = true; }$/;"	f	class:CWallet
AbstractThresholdConditionChecker	versionbits.h	/^class AbstractThresholdConditionChecker {$/;"	c
AbsurdFee	qt/walletmodel.h	/^        AbsurdFee,$/;"	e	enum:WalletModel::StatusCode
AcceleratedCRC32C	leveldb/port/port_posix_sse.cc	/^uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::port
AcceptBlock	validation.cpp	/^static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)$/;"	f	file:
AcceptBlockHeader	validation.cpp	/^static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)$/;"	f	file:
AcceptConnection	net.cpp	/^void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {$/;"	f	class:CConnman
AcceptToMemoryPool	validation.cpp	/^bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,$/;"	f
AcceptToMemoryPool	wallet/wallet.cpp	/^bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)$/;"	f	class:CMerkleTx
AcceptToMemoryPoolWithTime	validation.cpp	/^static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,$/;"	f	file:
AcceptToMemoryPoolWorker	validation.cpp	/^static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,$/;"	f	file:
AccessByTxid	coins.cpp	/^const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)$/;"	f
AccessCoin	coins.cpp	/^const Coin& CCoinsViewCache::AccessCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
AccountFromValue	wallet/rpcwallet.cpp	/^std::string AccountFromValue(const UniValue& value)$/;"	f
AccountMove	wallet/wallet.cpp	/^bool CWallet::AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment)$/;"	f	class:CWallet
AcentryToJSON	wallet/rpcwallet.cpp	/^void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccount, UniValue& ret)$/;"	f
Acquire	leveldb/util/env_posix.cc	/^  bool Acquire() {$/;"	f	class:leveldb::__anon11::Limiter
Acquire	sync.h	/^    void Acquire()$/;"	f	class:CSemaphoreGrant
AcquireLoad	leveldb/db/db_bench.cc	/^  void AcquireLoad(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Acquire_Load	leveldb/port/atomic_pointer.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Acquire_Load	leveldb/port/port_win.cc	/^void* AtomicPointer::Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
ActivateBestChain	validation.cpp	/^bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {$/;"	f
ActivateBestChainStep	validation.cpp	/^static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)$/;"	f	file:
Add	addrman.h	/^    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	addrman.h	/^    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueue
Add	checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueueControl
Add	leveldb/db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	leveldb/db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type,$/;"	f	class:leveldb::MemTable
Add	leveldb/db/version_set_test.cc	/^  void Add(const char* smallest, const char* largest,$/;"	f	class:leveldb::FindFileTest
Add	leveldb/table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	leveldb/table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	leveldb/table/table_test.cc	/^  void Add(const std::string& key, const Slice& value) {$/;"	f	class:leveldb::Constructor
Add	leveldb/table/table_test.cc	/^  void Add(const std::string& key, const std::string& value) {$/;"	f	class:leveldb::Harness
Add	leveldb/util/bloom_test.cc	/^  void Add(const Slice& s) {$/;"	f	class:leveldb::BloomTest
Add	leveldb/util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
Add	test/script_tests.cpp	/^    TestBuilder& Add(const CScript& _script)$/;"	f	class:__anon80::TestBuilder
AddAccountingEntry	wallet/wallet.cpp	/^bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry)$/;"	f	class:CWallet
AddAccountingEntry	wallet/wallet.cpp	/^bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB *pwalletdb)$/;"	f	class:CWallet
AddAddressKnown	net.h	/^    void AddAddressKnown(const CAddress& _addr)$/;"	f	class:CNode
AddBlock	chain.h	/^     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {$/;"	f	class:CBlockFileInfo
AddBytes	leveldb/db/db_bench.cc	/^  void AddBytes(int64_t n) {$/;"	f	class:leveldb::__anon18::Stats
AddCScript	keystore.cpp	/^bool CBasicKeyStore::AddCScript(const CScript& redeemScript)$/;"	f	class:CBasicKeyStore
AddCScript	wallet/wallet.cpp	/^bool CWallet::AddCScript(const CScript& redeemScript)$/;"	f	class:CWallet
AddCoin	coins.cpp	/^void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possible_overwrite) {$/;"	f	class:CCoinsViewCache
AddCoins	coins.cpp	/^void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check) {$/;"	f
AddCryptedKey	wallet/crypter.cpp	/^bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CCryptoKeyStore
AddCryptedKey	wallet/wallet.cpp	/^bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,$/;"	f	class:CWallet
AddDataToRng	random.cpp	/^static void AddDataToRng(void* data, size_t len) {$/;"	f	file:
AddDestData	wallet/wallet.cpp	/^bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)$/;"	f	class:CWallet
AddFile	leveldb/db/version_edit.h	/^  void AddFile(int level, uint64_t file,$/;"	f	class:leveldb::VersionEdit
AddInputDeletions	leveldb/db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* edit) {$/;"	f	class:leveldb::Compaction
AddInventoryKnown	net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddIterators	leveldb/db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddKey	keystore.cpp	/^bool CKeyStore::AddKey(const CKey &key) {$/;"	f	class:CKeyStore
AddKey	leveldb/table/filter_block.cc	/^void FilterBlockBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FilterBlockBuilder
AddKey	wallet/test/wallet_tests.cpp	/^static void AddKey(CWallet& wallet, const CKey& key)$/;"	f	file:
AddKeyPubKey	keystore.cpp	/^bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)$/;"	f	class:CBasicKeyStore
AddKeyPubKey	wallet/crypter.cpp	/^bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)$/;"	f	class:CCryptoKeyStore
AddKeyPubKey	wallet/wallet.cpp	/^bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)$/;"	f	class:CWallet
AddKeyPubKeyWithDB	wallet/wallet.cpp	/^bool CWallet::AddKeyPubKeyWithDB(CWalletDB &walletdb, const CKey& secret, const CPubKey &pubkey)$/;"	f	class:CWallet
AddLiveFiles	leveldb/db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddLocal	net.cpp	/^bool AddLocal(const CNetAddr &addr, int nScore)$/;"	f
AddLocal	net.cpp	/^bool AddLocal(const CService& addr, int nScore)$/;"	f
AddMessage	leveldb/db/db_bench.cc	/^  void AddMessage(Slice msg) {$/;"	f	class:leveldb::__anon18::Stats
AddNewAddresses	net.cpp	/^void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty)$/;"	f	class:CConnman
AddNode	net.cpp	/^bool CConnman::AddNode(const std::string& strNode)$/;"	f	class:CConnman
AddNode	test/test_wificoin.cpp	/^void CConnmanTest::AddNode(CNode& node)$/;"	f	class:CConnmanTest
AddOneShot	net.cpp	/^void CConnman::AddOneShot(const std::string& strDest)$/;"	f	class:CConnman
AddRandomOutboundPeer	test/DoS_tests.cpp	/^void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic)$/;"	f
AddRecord	leveldb/db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AddRef	net.h	/^    CNode* AddRef()$/;"	f	class:CNode
AddRoundKey	crypto/ctaes/ctaes.c	/^static void AddRoundKey(AES_state* s, const AES_state* round) {$/;"	f	file:
AddTimeData	timedata.cpp	/^void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)$/;"	f
AddToBlock	miner.cpp	/^void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)$/;"	f	class:BlockAssembler
AddToBlockIndex	validation.cpp	/^static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)$/;"	f	file:
AddToCompactExtraTransactions	net_processing.cpp	/^void AddToCompactExtraTransactions(const CTransactionRef& tx)$/;"	f
AddToProcessQueue	scheduler.cpp	/^void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)> func) {$/;"	f	class:SingleThreadedSchedulerClient
AddToSpends	wallet/wallet.cpp	/^void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)$/;"	f	class:CWallet
AddToSpends	wallet/wallet.cpp	/^void CWallet::AddToSpends(const uint256& wtxid)$/;"	f	class:CWallet
AddToWallet	wallet/wallet.cpp	/^bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)$/;"	f	class:CWallet
AddToWalletIfInvolvingMe	wallet/wallet.cpp	/^bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)$/;"	f	class:CWallet
AddTransactionsUpdated	txmempool.cpp	/^void CTxMemPool::AddTransactionsUpdated(unsigned int n)$/;"	f	class:CTxMemPool
AddTx	bench/mempool_eviction.cpp	/^static void AddTx(const CTransaction& tx, const CAmount& nFee, CTxMemPool& pool)$/;"	f	file:
AddTx	wallet/test/wallet_tests.cpp	/^    CWalletTx& AddTx(CRecipient recipient)$/;"	f	class:ListCoinsTestingSetup
AddTx	wallet/test/wallet_tests.cpp	/^static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)$/;"	f	file:
AddWatchOnly	keystore.cpp	/^bool CBasicKeyStore::AddWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
AddWatchOnly	wallet/wallet.cpp	/^bool CWallet::AddWatchOnly(const CScript& dest)$/;"	f	class:CWallet
AddWatchOnly	wallet/wallet.cpp	/^bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)$/;"	f	class:CWallet
Add_	addrman.cpp	/^bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)$/;"	f	class:CAddrMan
AddedNodeInfo	net.h	/^struct AddedNodeInfo$/;"	s
Address	qt/addresstablemodel.h	/^        Address = 1  \/**< WiFicoin address *\/$/;"	e	enum:AddressTableModel::ColumnIndex
Address	qt/bantablemodel.h	/^        Address = 0,$/;"	e	enum:BanTableModel::ColumnIndex
Address	qt/peertablemodel.h	/^        Address = 1,$/;"	e	enum:PeerTableModel::ColumnIndex
AddressBookPage	qt/addressbookpage.cpp	/^AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode, Tabs _tab, QWidget *parent) :$/;"	f	class:AddressBookPage
AddressBookPage	qt/addressbookpage.h	/^class AddressBookPage : public QDialog$/;"	c
AddressRole	qt/transactiontablemodel.h	/^        AddressRole,$/;"	e	enum:TransactionTableModel::RoleIndex
AddressTableEntry	qt/addresstablemodel.cpp	/^    AddressTableEntry() {}$/;"	f	struct:AddressTableEntry
AddressTableEntry	qt/addresstablemodel.cpp	/^    AddressTableEntry(Type _type, const QString &_label, const QString &_address):$/;"	f	struct:AddressTableEntry
AddressTableEntry	qt/addresstablemodel.cpp	/^struct AddressTableEntry$/;"	s	file:
AddressTableEntryLessThan	qt/addresstablemodel.cpp	/^struct AddressTableEntryLessThan$/;"	s	file:
AddressTableModel	qt/addresstablemodel.cpp	/^AddressTableModel::AddressTableModel(CWallet *_wallet, WalletModel *parent) :$/;"	f	class:AddressTableModel
AddressTableModel	qt/addresstablemodel.h	/^class AddressTableModel : public QAbstractTableModel$/;"	c
AddressTablePriv	qt/addresstablemodel.cpp	/^    AddressTablePriv(CWallet *_wallet, AddressTableModel *_parent):$/;"	f	class:AddressTablePriv
AddressTablePriv	qt/addresstablemodel.cpp	/^class AddressTablePriv$/;"	c	file:
AddrmanToStream	test/net_tests.cpp	/^CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)$/;"	f
AdvertiseLocal	net.cpp	/^void AdvertiseLocal(CNode *pnode)$/;"	f
AfterFile	leveldb/db/version_set.cc	/^static bool AfterFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
AlertNotify	validation.cpp	/^static void AlertNotify(const std::string& strMessage)$/;"	f	file:
All	qt/transactionview.h	/^        All,$/;"	e	enum:TransactionView::DateEnum
AllEntriesFor	leveldb/db/db_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
Allocate	leveldb/util/arena.h	/^inline char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	leveldb/util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFallback	leveldb/util/arena.cc	/^char* Arena::AllocateFallback(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFileRange	util.cpp	/^void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {$/;"	f
AllocateLocked	support/lockedpool.cpp	/^void *PosixLockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)$/;"	f	class:PosixLockedPageAllocator
AllocateLocked	support/lockedpool.cpp	/^void *Win32LockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)$/;"	f	class:Win32LockedPageAllocator
AllocateNewBlock	leveldb/util/arena.cc	/^char* Arena::AllocateNewBlock(size_t block_bytes) {$/;"	f	class:leveldb::Arena
Allocation	secp256k1/src/asm/field_10x26_arm.s	/^	Allocation:$/;"	l
Amount	qt/recentrequeststablemodel.h	/^        Amount = 3,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
Amount	qt/transactiontablemodel.h	/^        Amount = 5$/;"	e	enum:TransactionTableModel::ColumnIndex
AmountErrMsg	ui_interface.cpp	/^std::string AmountErrMsg(const char* const optname, const std::string& strValue)$/;"	f
AmountExceedsBalance	qt/walletmodel.h	/^        AmountExceedsBalance,$/;"	e	enum:WalletModel::StatusCode
AmountFromValue	wificoin-tx.cpp	/^static CAmount AmountFromValue(const UniValue& value)$/;"	f	file:
AmountFromValue	rpc/server.cpp	/^CAmount AmountFromValue(const UniValue& value)$/;"	f
AmountHighWarn	ui_interface.cpp	/^std::string AmountHighWarn(const std::string& optname)$/;"	f
AmountRole	qt/transactiontablemodel.h	/^        AmountRole,$/;"	e	enum:TransactionTableModel::RoleIndex
AmountSpinBox	qt/wificoinamountfield.cpp	/^    explicit AmountSpinBox(QWidget *parent):$/;"	f	class:AmountSpinBox
AmountSpinBox	qt/wificoinamountfield.cpp	/^class AmountSpinBox: public QAbstractSpinBox$/;"	c	file:
AmountWithFeeExceedsBalance	qt/walletmodel.h	/^        AmountWithFeeExceedsBalance,$/;"	e	enum:WalletModel::StatusCode
AnnotatedMixin	sync.h	/^class LOCKABLE AnnotatedMixin : public PARENT$/;"	c
AppInit	wificoind.cpp	/^bool AppInit(int argc, char* argv[])$/;"	f
AppInitBasicSetup	init.cpp	/^bool AppInitBasicSetup()$/;"	f
AppInitLockDataDirectory	init.cpp	/^bool AppInitLockDataDirectory()$/;"	f
AppInitMain	init.cpp	/^bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)$/;"	f
AppInitParameterInteraction	init.cpp	/^bool AppInitParameterInteraction()$/;"	f
AppInitRPC	wificoin-cli.cpp	/^static int AppInitRPC(int argc, char* argv[])$/;"	f	file:
AppInitRawTx	wificoin-tx.cpp	/^static int AppInitRawTx(int argc, char* argv[])$/;"	f	file:
AppInitSanityChecks	init.cpp	/^bool AppInitSanityChecks()$/;"	f
AppInitServers	init.cpp	/^bool AppInitServers(boost::thread_group& threadGroup)$/;"	f
Append	leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Append(const Slice& data) {$/;"	f	class:leveldb::TestWritableFile
Append	leveldb/db/leveldbutil.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon23::StdoutPrinter
Append	leveldb/db/log_test.cc	/^    virtual Status Append(const Slice& slice) {$/;"	f	class:leveldb::log::LogTest::StringDest
Append	leveldb/db/write_batch.cc	/^void WriteBatchInternal::Append(WriteBatch* dst, const WriteBatch* src) {$/;"	f	class:leveldb::WriteBatchInternal
Append	leveldb/helpers/memenv/memenv.cc	/^  Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon16::FileState
Append	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon16::WritableFileImpl
Append	leveldb/table/table_test.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::StringSink
Append	leveldb/util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon11::PosixWritableFile
Append	leveldb/util/env_win.cc	/^Status Win32WritableFile::Append(const Slice& data)$/;"	f	class:leveldb::Win32::Win32WritableFile
AppendEscapedStringTo	leveldb/util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	leveldb/db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendNumberTo	leveldb/util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
AppendParamsHelpMessages	chainparamsbase.cpp	/^void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)$/;"	f
AppendVersion	leveldb/db/version_set.cc	/^void VersionSet::AppendVersion(Version* v) {$/;"	f	class:leveldb::VersionSet
AppendWithSpace	leveldb/db/db_bench.cc	/^static void AppendWithSpace(std::string* str, Slice msg) {$/;"	f	namespace:leveldb::__anon18
Apply	leveldb/db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
ApplyDelta	txmempool.cpp	/^void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const$/;"	f	class:CTxMemPool
ApplyStats	rpc/blockchain.cpp	/^static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)$/;"	f	file:
ApplyTxInUndo	validation.cpp	/^int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)$/;"	f
ApproximateBestSubset	wallet/wallet.cpp	/^static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,$/;"	f	file:
ApproximateMemoryUsage	leveldb/db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	leveldb/db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	leveldb/table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ApproximateOffsetOf	leveldb/table/table_test.cc	/^  uint64_t ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::TableConstructor
ArchiveFile	leveldb/db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon26::Repairer	file:
AreInputsStandard	policy/policy.cpp	/^bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)$/;"	f
AreThreadsServicingQueue	scheduler.cpp	/^bool CScheduler::AreThreadsServicingQueue() const {$/;"	f	class:CScheduler
Arena	leveldb/util/arena.cc	/^Arena::Arena() : memory_usage_(0) {$/;"	f	class:leveldb::Arena
Arena	leveldb/util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
Arena	support/lockedpool.cpp	/^Arena::Arena(void *base_in, size_t size_in, size_t alignment_in):$/;"	f	class:Arena
Arena	support/lockedpool.h	/^class Arena$/;"	c
ArenaTest	leveldb/util/arena_test.cc	/^class ArenaTest { };$/;"	c	namespace:leveldb	file:
ArgsManager	util.h	/^class ArgsManager$/;"	c
ArithToUint256	arith_uint256.cpp	/^uint256 ArithToUint256(const arith_uint256 &a)$/;"	f
ArrayToString	test/arith_uint256_tests.cpp	/^std::string ArrayToString(const unsigned char A[], unsigned int width)$/;"	f
ArrayToString	test/uint256_tests.cpp	/^std::string ArrayToString(const unsigned char A[], unsigned int width)$/;"	f
AsWit	test/script_tests.cpp	/^    TestBuilder& AsWit()$/;"	f	class:__anon80::TestBuilder
AskFor	net.cpp	/^void CNode::AskFor(const CInv& inv)$/;"	f	class:CNode
AskPassphraseDialog	qt/askpassphrasedialog.cpp	/^AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent) :$/;"	f	class:AskPassphraseDialog
AskPassphraseDialog	qt/askpassphrasedialog.h	/^class AskPassphraseDialog : public QDialog$/;"	c
AssemblerForTest	test/miner_tests.cpp	/^static BlockAssembler AssemblerForTest(const CChainParams& params) {$/;"	f	file:
AssertFailException	secp256k1/src/java/org/wificoin/NativeSecp256k1Util.java	/^      public AssertFailException(String message) {$/;"	m	class:NativeSecp256k1Util.AssertFailException
AssertFailException	secp256k1/src/java/org/wificoin/NativeSecp256k1Util.java	/^    public static class AssertFailException extends Exception {$/;"	c	class:NativeSecp256k1Util
AssertHeld	leveldb/port/port_posix.h	/^  void AssertHeld() { }$/;"	f	class:leveldb::port::Mutex
AssertHeld	leveldb/port/port_win.cc	/^void Mutex::AssertHeld() {$/;"	f	class:leveldb::port::Mutex
AssertLockHeld	sync.h	85;"	d
AssertLockHeldInternal	sync.cpp	/^void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)$/;"	f
AssertLockHeldInternal	sync.h	/^void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}$/;"	f
AtomicCounter	leveldb/db/db_test.cc	/^  AtomicCounter() : count_(0) { }$/;"	f	class:leveldb::__anon29::AtomicCounter
AtomicCounter	leveldb/db/db_test.cc	/^class AtomicCounter {$/;"	c	namespace:leveldb::__anon29	file:
AtomicPointer	leveldb/port/atomic_pointer.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/atomic_pointer.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/atomic_pointer.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	leveldb/port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	leveldb/port/port_win.cc	/^AtomicPointer::AtomicPointer(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/port_win.h	/^  AtomicPointer() : rep_(NULL) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/port_win.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
Attempt	addrman.h	/^    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
AttemptToEvictConnection	net.cpp	/^bool CConnman::AttemptToEvictConnection()$/;"	f	class:CConnman
Attempt_	addrman.cpp	/^void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)$/;"	f	class:CAddrMan
AutoCompactTest	leveldb/db/autocompact_test.cc	/^  AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
AutoCompactTest	leveldb/db/autocompact_test.cc	/^class AutoCompactTest {$/;"	c	namespace:leveldb	file:
AvailableCoins	wallet/wallet.cpp	/^void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t &nMaximumCount, const int &nMinDepth, const int &nMaxDepth) const$/;"	f	class:CWallet
AvailableDataFormatsString	rest.cpp	/^static std::string AvailableDataFormatsString()$/;"	f	file:
Average	leveldb/util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
B	test/util_tests.cpp	319;"	d	file:
B	test/util_tests.cpp	341;"	d	file:
BANSUBNET_COLUMN_WIDTH	qt/rpcconsole.h	/^        BANSUBNET_COLUMN_WIDTH = 200,$/;"	e	enum:RPCConsole::ColumnWidths
BANTIME_COLUMN_WIDTH	qt/rpcconsole.h	/^        BANTIME_COLUMN_WIDTH = 250$/;"	e	enum:RPCConsole::ColumnWidths
BATCHES	bench/checkqueue.cpp	/^static const size_t BATCHES = 101;$/;"	v	file:
BATCH_SIZE	bench/checkqueue.cpp	/^static const size_t BATCH_SIZE = 30;$/;"	v	file:
BCLog	util.h	/^namespace BCLog {$/;"	n
BDB_CFLAGS	Makefile	/^BDB_CFLAGS = $/;"	m
BDB_CPPFLAGS	Makefile	/^BDB_CPPFLAGS =  -I\/usr\/include\/libdb4\/$/;"	m
BDB_LIBS	Makefile	/^BDB_LIBS = -ldb_cxx-4.8$/;"	m
BE32	secp256k1/src/hash_impl.h	272;"	d
BE32	secp256k1/src/hash_impl.h	31;"	d
BE32	secp256k1/src/hash_impl.h	33;"	d
BEGIN	utilstrencodings.h	16;"	d
BENCHMARK	bench/bench.h	78;"	d
BENCHMARKS	Makefile	/^BENCHMARKS = $/;"	m
BENCHMARKS	leveldb/Makefile	/^BENCHMARKS = \\$/;"	m
BENCH_BINARY	Makefile	/^BENCH_BINARY = bench\/bench_wificoin$(EXEEXT)$/;"	m
BENCH_SRCDIR	Makefile	/^BENCH_SRCDIR = bench$/;"	m
BF_EXPLICIT	net.cpp	/^    BF_EXPLICIT     = (1U << 0),$/;"	e	enum:BindFlags	file:
BF_NONE	net.cpp	/^    BF_NONE         = 0,$/;"	e	enum:BindFlags	file:
BF_REPORT_ERROR	net.cpp	/^    BF_REPORT_ERROR = (1U << 1),$/;"	e	enum:BindFlags	file:
BF_WHITELIST	net.cpp	/^    BF_WHITELIST    = (1U << 2),$/;"	e	enum:BindFlags	file:
BGItem	leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon11::PosixEnv	file:
BGQueue	leveldb/util/env_posix.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon11::PosixEnv	file:
BGThread	leveldb/util/env_posix.cc	/^void PosixEnv::BGThread() {$/;"	f	class:leveldb::__anon11::PosixEnv
BGThreadWrapper	leveldb/util/env_posix.cc	/^  static void* BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon11::PosixEnv	file:
BGWork	leveldb/db/db_impl.cc	/^void DBImpl::BGWork(void* db) {$/;"	f	class:leveldb::DBImpl
BINARY_OP	leveldb/util/testharness.h	77;"	d
BINARY_OP	leveldb/util/testharness.h	93;"	d
BIND	netbase.cpp	/^    BIND = 0x02,$/;"	e	enum:uint8_t	file:
BIP0031_VERSION	version.h	/^static const int BIP0031_VERSION = 60000;$/;"	v
BIP22ValidationResult	rpc/mining.cpp	/^static UniValue BIP22ValidationResult(const CValidationState& state)$/;"	f	file:
BIP32Hash	hash.cpp	/^void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])$/;"	f
BIP32_EXTKEY_SIZE	pubkey.h	/^const unsigned int BIP32_EXTKEY_SIZE = 74;$/;"	v
BIP32_HARDENED_KEY_LIMIT	wallet/wallet.cpp	/^const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;$/;"	v
BIP34Hash	consensus/params.h	/^    uint256 BIP34Hash;$/;"	m	struct:Consensus::Params
BIP34Height	consensus/params.h	/^    int BIP34Height;$/;"	m	struct:Consensus::Params
BIP65Height	consensus/params.h	/^    int BIP65Height;$/;"	m	struct:Consensus::Params
BIP66Height	consensus/params.h	/^    int BIP66Height;$/;"	m	struct:Consensus::Params
BIP70_MAX_PAYMENTREQUEST_SIZE	qt/paymentserver.h	/^static const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;$/;"	v
BIP70_MESSAGE_PAYMENTACK	qt/paymentserver.cpp	/^const char* BIP70_MESSAGE_PAYMENTACK = "PaymentACK";$/;"	v
BIP70_MESSAGE_PAYMENTREQUEST	qt/paymentserver.cpp	/^const char* BIP70_MESSAGE_PAYMENTREQUEST = "PaymentRequest";$/;"	v
BIP71_MIMETYPE_PAYMENT	qt/paymentserver.cpp	/^const char* BIP71_MIMETYPE_PAYMENT = "application\/wificoin-payment";$/;"	v
BIP71_MIMETYPE_PAYMENTACK	qt/paymentserver.cpp	/^const char* BIP71_MIMETYPE_PAYMENTACK = "application\/wificoin-paymentack";$/;"	v
BIP71_MIMETYPE_PAYMENTREQUEST	qt/paymentserver.cpp	/^const char* BIP71_MIMETYPE_PAYMENTREQUEST = "application\/wificoin-paymentrequest";$/;"	v
BIP9Deployment	consensus/params.h	/^struct BIP9Deployment {$/;"	s	namespace:Consensus
BIP9SoftForkDesc	rpc/blockchain.cpp	/^static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Consensus::DeploymentPos id)$/;"	f	file:
BIP9SoftForkDescPushBack	rpc/blockchain.cpp	/^void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)$/;"	f
BIP9Stats	versionbits.h	/^struct BIP9Stats {$/;"	s
WIFICOINCONSENSUS_API_VER	script/wificoinconsensus.h	36;"	d
WIFICOIN_ADDRDB_H	addrdb.h	7;"	d
WIFICOIN_ADDRMAN_H	addrman.h	7;"	d
WIFICOIN_AMOUNT_H	amount.h	7;"	d
WIFICOIN_ARITH_UINT256_H	arith_uint256.h	7;"	d
WIFICOIN_BASE58_H	base58.h	15;"	d
WIFICOIN_BENCH_BENCH_H	bench/bench.h	6;"	d
WIFICOIN_WIFICOINCONSENSUS_H	script/wificoinconsensus.h	7;"	d
WIFICOIN_BLOCK_ENCODINGS_H	blockencodings.h	6;"	d
WIFICOIN_BLOOM_H	bloom.h	6;"	d
WIFICOIN_CHAINPARAMSBASE_H	chainparamsbase.h	6;"	d
WIFICOIN_CHAINPARAMSSEEDS_H	chainparamsseeds.h	2;"	d
WIFICOIN_CHAINPARAMS_H	chainparams.h	7;"	d
WIFICOIN_CHAIN_H	chain.h	7;"	d
WIFICOIN_CHECKPOINTS_H	checkpoints.h	6;"	d
WIFICOIN_CHECKQUEUE_H	checkqueue.h	6;"	d
WIFICOIN_CLIENTVERSION_H	clientversion.h	6;"	d
WIFICOIN_CLI_NAME	Makefile	/^WIFICOIN_CLI_NAME = wificoin-cli$/;"	m
WIFICOIN_COINS_H	coins.h	7;"	d
WIFICOIN_COMPAT_BYTESWAP_H	compat/byteswap.h	6;"	d
WIFICOIN_COMPAT_ENDIAN_H	compat/endian.h	6;"	d
WIFICOIN_COMPAT_H	compat.h	7;"	d
WIFICOIN_COMPAT_SANITY_H	compat/sanity.h	6;"	d
WIFICOIN_COMPRESSOR_H	compressor.h	7;"	d
WIFICOIN_CONFIG_H	config/wificoin-config.h	6;"	d
WIFICOIN_CONFIG_INCLUDES	Makefile	/^WIFICOIN_CONFIG_INCLUDES = -I$(builddir)\/config$/;"	m
WIFICOIN_CONF_FILENAME	util.cpp	/^const char * const WIFICOIN_CONF_FILENAME = "wificoin.conf";$/;"	v
WIFICOIN_CONSENSUS_CONSENSUS_H	consensus/consensus.h	7;"	d
WIFICOIN_CONSENSUS_PARAMS_H	consensus/params.h	7;"	d
WIFICOIN_CONSENSUS_TX_VERIFY_H	consensus/tx_verify.h	6;"	d
WIFICOIN_CONSENSUS_VALIDATION_H	consensus/validation.h	7;"	d
WIFICOIN_CONSENSUS_VERSIONBITS	versionbits.h	6;"	d
WIFICOIN_CORE_H	Makefile	/^WIFICOIN_CORE_H = \\$/;"	m
WIFICOIN_CORE_IO_H	core_io.h	6;"	d
WIFICOIN_CORE_MEMUSAGE_H	core_memusage.h	6;"	d
WIFICOIN_CRYPTO_AES_H	crypto/aes.h	8;"	d
WIFICOIN_CRYPTO_CHACHA20_H	crypto/chacha20.h	6;"	d
WIFICOIN_CRYPTO_COMMON_H	crypto/common.h	6;"	d
WIFICOIN_CRYPTO_HMAC_SHA256_H	crypto/hmac_sha256.h	6;"	d
WIFICOIN_CRYPTO_HMAC_SHA512_H	crypto/hmac_sha512.h	6;"	d
WIFICOIN_CRYPTO_RIPEMD160_H	crypto/ripemd160.h	6;"	d
WIFICOIN_CRYPTO_SHA1_H	crypto/sha1.h	6;"	d
WIFICOIN_CRYPTO_SHA256_H	crypto/sha256.h	6;"	d
WIFICOIN_CRYPTO_SHA512_H	crypto/sha512.h	6;"	d
WIFICOIN_DAEMON_NAME	Makefile	/^WIFICOIN_DAEMON_NAME = wificoind$/;"	m
WIFICOIN_DBWRAPPER_H	dbwrapper.h	6;"	d
WIFICOIN_FS_H	fs.h	6;"	d
WIFICOIN_GUI_NAME	Makefile	/^WIFICOIN_GUI_NAME = wificoin-qt$/;"	m
WIFICOIN_HASH_H	hash.h	7;"	d
WIFICOIN_HTTPRPC_H	httprpc.h	6;"	d
WIFICOIN_HTTPSERVER_H	httpserver.h	6;"	d
WIFICOIN_INCLUDES	Makefile	/^WIFICOIN_INCLUDES = -I$(builddir) -I$(builddir)\/obj $(BDB_CPPFLAGS) \\$/;"	m
WIFICOIN_INDIRECTMAP_H	indirectmap.h	6;"	d
WIFICOIN_INIT_H	init.h	7;"	d
WIFICOIN_IPC_CONNECT_TIMEOUT	qt/paymentserver.cpp	/^const int WIFICOIN_IPC_CONNECT_TIMEOUT = 1000; \/\/ milliseconds$/;"	v
WIFICOIN_KEYSTORE_H	keystore.h	7;"	d
WIFICOIN_KEY_H	key.h	7;"	d
WIFICOIN_LIMITEDMAP_H	limitedmap.h	6;"	d
WIFICOIN_MEMUSAGE_H	memusage.h	6;"	d
WIFICOIN_MERKLE	consensus/merkle.h	6;"	d
WIFICOIN_MERKLEBLOCK_H	merkleblock.h	7;"	d
WIFICOIN_MINER_H	miner.h	7;"	d
WIFICOIN_NETADDRESS_H	netaddress.h	6;"	d
WIFICOIN_NETBASE_H	netbase.h	6;"	d
WIFICOIN_NETMESSAGEMAKER_H	netmessagemaker.h	7;"	d
WIFICOIN_NET_H	net.h	7;"	d
WIFICOIN_NET_PROCESSING_H	net_processing.h	7;"	d
WIFICOIN_NOUI_H	noui.h	6;"	d
WIFICOIN_PID_FILENAME	util.cpp	/^const char * const WIFICOIN_PID_FILENAME = "wificoind.pid";$/;"	v
WIFICOIN_POLICYESTIMATOR_H	policy/fees.h	6;"	d
WIFICOIN_POLICY_FEERATE_H	policy/feerate.h	7;"	d
WIFICOIN_POLICY_POLICY_H	policy/policy.h	7;"	d
WIFICOIN_POLICY_RBF_H	policy/rbf.h	6;"	d
WIFICOIN_POW_H	pow.h	7;"	d
WIFICOIN_PRIMITIVES_BLOCK_H	primitives/block.h	7;"	d
WIFICOIN_PRIMITIVES_TRANSACTION_H	primitives/transaction.h	7;"	d
WIFICOIN_PROTOCOL_H	protocol.h	11;"	d
WIFICOIN_PUBKEY_H	pubkey.h	7;"	d
WIFICOIN_QT_ADDRESSBOOKPAGE_H	qt/addressbookpage.h	6;"	d
WIFICOIN_QT_ADDRESSTABLEMODEL_H	qt/addresstablemodel.h	6;"	d
WIFICOIN_QT_ASKPASSPHRASEDIALOG_H	qt/askpassphrasedialog.h	6;"	d
WIFICOIN_QT_BANTABLEMODEL_H	qt/bantablemodel.h	6;"	d
WIFICOIN_QT_WIFICOINADDRESSVALIDATOR_H	qt/wificoinaddressvalidator.h	6;"	d
WIFICOIN_QT_WIFICOINAMOUNTFIELD_H	qt/wificoinamountfield.h	6;"	d
WIFICOIN_QT_WIFICOINGUI_H	qt/wificoingui.h	6;"	d
WIFICOIN_QT_WIFICOINUNITS_H	qt/wificoinunits.h	6;"	d
WIFICOIN_QT_CALLBACK_H	qt/callback.h	2;"	d
WIFICOIN_QT_CLIENTMODEL_H	qt/clientmodel.h	6;"	d
WIFICOIN_QT_COINCONTROLDIALOG_H	qt/coincontroldialog.h	6;"	d
WIFICOIN_QT_COINCONTROLTREEWIDGET_H	qt/coincontroltreewidget.h	6;"	d
WIFICOIN_QT_CSVMODELWRITER_H	qt/csvmodelwriter.h	6;"	d
WIFICOIN_QT_EDITADDRESSDIALOG_H	qt/editaddressdialog.h	6;"	d
WIFICOIN_QT_GUICONSTANTS_H	qt/guiconstants.h	6;"	d
WIFICOIN_QT_GUIUTIL_H	qt/guiutil.h	6;"	d
WIFICOIN_QT_INTRO_H	qt/intro.h	6;"	d
WIFICOIN_QT_MACDOCKICONHANDLER_H	qt/macdockiconhandler.h	6;"	d
WIFICOIN_QT_MACNOTIFICATIONHANDLER_H	qt/macnotificationhandler.h	6;"	d
WIFICOIN_QT_MODALOVERLAY_H	qt/modaloverlay.h	6;"	d
WIFICOIN_QT_NETWORKSTYLE_H	qt/networkstyle.h	6;"	d
WIFICOIN_QT_NOTIFICATOR_H	qt/notificator.h	6;"	d
WIFICOIN_QT_OPENURIDIALOG_H	qt/openuridialog.h	6;"	d
WIFICOIN_QT_OPTIONSDIALOG_H	qt/optionsdialog.h	6;"	d
WIFICOIN_QT_OPTIONSMODEL_H	qt/optionsmodel.h	6;"	d
WIFICOIN_QT_OVERVIEWPAGE_H	qt/overviewpage.h	6;"	d
WIFICOIN_QT_PAYMENTREQUESTPLUS_H	qt/paymentrequestplus.h	6;"	d
WIFICOIN_QT_PAYMENTSERVER_H	qt/paymentserver.h	6;"	d
WIFICOIN_QT_PEERTABLEMODEL_H	qt/peertablemodel.h	6;"	d
WIFICOIN_QT_PLATFORMSTYLE_H	qt/platformstyle.h	6;"	d
WIFICOIN_QT_QVALIDATEDLINEEDIT_H	qt/qvalidatedlineedit.h	6;"	d
WIFICOIN_QT_QVALUECOMBOBOX_H	qt/qvaluecombobox.h	6;"	d
WIFICOIN_QT_RECEIVECOINSDIALOG_H	qt/receivecoinsdialog.h	6;"	d
WIFICOIN_QT_RECEIVEREQUESTDIALOG_H	qt/receiverequestdialog.h	6;"	d
WIFICOIN_QT_RECENTREQUESTSTABLEMODEL_H	qt/recentrequeststablemodel.h	6;"	d
WIFICOIN_QT_RPCCONSOLE_H	qt/rpcconsole.h	6;"	d
WIFICOIN_QT_SENDCOINSDIALOG_H	qt/sendcoinsdialog.h	6;"	d
WIFICOIN_QT_SENDCOINSENTRY_H	qt/sendcoinsentry.h	6;"	d
WIFICOIN_QT_SIGNVERIFYMESSAGEDIALOG_H	qt/signverifymessagedialog.h	6;"	d
WIFICOIN_QT_SPLASHSCREEN_H	qt/splashscreen.h	6;"	d
WIFICOIN_QT_TEST_COMPATTESTS_H	qt/test/compattests.h	6;"	d
WIFICOIN_QT_TEST_PAYMENTSERVERTESTS_H	qt/test/paymentservertests.h	6;"	d
WIFICOIN_QT_TEST_RPC_NESTED_TESTS_H	qt/test/rpcnestedtests.h	6;"	d
WIFICOIN_QT_TEST_URITESTS_H	qt/test/uritests.h	6;"	d
WIFICOIN_QT_TEST_WALLETTESTS_H	qt/test/wallettests.h	2;"	d
WIFICOIN_QT_TRAFFICGRAPHWIDGET_H	qt/trafficgraphwidget.h	6;"	d
WIFICOIN_QT_TRANSACTIONDESCDIALOG_H	qt/transactiondescdialog.h	6;"	d
WIFICOIN_QT_TRANSACTIONDESC_H	qt/transactiondesc.h	6;"	d
WIFICOIN_QT_TRANSACTIONFILTERPROXY_H	qt/transactionfilterproxy.h	6;"	d
WIFICOIN_QT_TRANSACTIONRECORD_H	qt/transactionrecord.h	6;"	d
WIFICOIN_QT_TRANSACTIONTABLEMODEL_H	qt/transactiontablemodel.h	6;"	d
WIFICOIN_QT_TRANSACTIONVIEW_H	qt/transactionview.h	6;"	d
WIFICOIN_QT_UTILITYDIALOG_H	qt/utilitydialog.h	6;"	d
WIFICOIN_QT_WALLETFRAME_H	qt/walletframe.h	6;"	d
WIFICOIN_QT_WALLETMODELTRANSACTION_H	qt/walletmodeltransaction.h	6;"	d
WIFICOIN_QT_WALLETMODEL_H	qt/walletmodel.h	6;"	d
WIFICOIN_QT_WALLETVIEW_H	qt/walletview.h	6;"	d
WIFICOIN_QT_WINSHUTDOWNMONITOR_H	qt/winshutdownmonitor.h	6;"	d
WIFICOIN_RANDOM_H	random.h	7;"	d
WIFICOIN_REVERSELOCK_H	reverselock.h	6;"	d
WIFICOIN_REVERSE_ITERATOR_H	reverse_iterator.h	4;"	d
WIFICOIN_RPCCLIENT_H	rpc/client.h	7;"	d
WIFICOIN_RPCPROTOCOL_H	rpc/protocol.h	7;"	d
WIFICOIN_RPCREGISTER_H	rpc/register.h	6;"	d
WIFICOIN_RPCSERVER_H	rpc/server.h	7;"	d
WIFICOIN_RPC_BLOCKCHAIN_H	rpc/blockchain.h	6;"	d
WIFICOIN_RPC_MINING_H	rpc/mining.h	6;"	d
WIFICOIN_SCHEDULER_H	scheduler.h	6;"	d
WIFICOIN_SCRIPT_INTERPRETER_H	script/interpreter.h	7;"	d
WIFICOIN_SCRIPT_ISMINE_H	script/ismine.h	7;"	d
WIFICOIN_SCRIPT_SCRIPT_ERROR_H	script/script_error.h	7;"	d
WIFICOIN_SCRIPT_SCRIPT_H	script/script.h	7;"	d
WIFICOIN_SCRIPT_SIGCACHE_H	script/sigcache.h	7;"	d
WIFICOIN_SCRIPT_SIGN_H	script/sign.h	7;"	d
WIFICOIN_SCRIPT_STANDARD_H	script/standard.h	7;"	d
WIFICOIN_SERIALIZE_H	serialize.h	7;"	d
WIFICOIN_STREAMS_H	streams.h	7;"	d
WIFICOIN_SUPPORT_ALLOCATORS_SECURE_H	support/allocators/secure.h	7;"	d
WIFICOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H	support/allocators/zeroafterfree.h	7;"	d
WIFICOIN_SUPPORT_CLEANSE_H	support/cleanse.h	7;"	d
WIFICOIN_SUPPORT_EVENTS_H	support/events.h	6;"	d
WIFICOIN_SUPPORT_LOCKEDPOOL_H	support/lockedpool.h	6;"	d
WIFICOIN_SYNC_H	sync.h	7;"	d
WIFICOIN_TESTS	Makefile	/^WIFICOIN_TESTS = test\/arith_uint256_tests.cpp \\$/;"	m
WIFICOIN_TEST_SCRIPTNUM10_H	test/scriptnum10.h	7;"	d
WIFICOIN_TEST_TEST_WIFICOIN_H	test/test_wificoin.h	6;"	d
WIFICOIN_THREADINTERRUPT_H	threadinterrupt.h	6;"	d
WIFICOIN_THREADSAFETY_H	threadsafety.h	7;"	d
WIFICOIN_TIMEDATA_H	timedata.h	6;"	d
WIFICOIN_TIMEDATA_MAX_SAMPLES	timedata.cpp	45;"	d	file:
WIFICOIN_TORCONTROL_H	torcontrol.h	9;"	d
WIFICOIN_TXDB_H	txdb.h	7;"	d
WIFICOIN_TXMEMPOOL_H	txmempool.h	7;"	d
WIFICOIN_TX_NAME	Makefile	/^WIFICOIN_TX_NAME = wificoin-tx$/;"	m
WIFICOIN_UINT256_H	uint256.h	7;"	d
WIFICOIN_UI_INTERFACE_H	ui_interface.h	7;"	d
WIFICOIN_UNDO_H	undo.h	7;"	d
WIFICOIN_UNIVALUE_UNIVALUE_ESCAPES_H	univalue/lib/univalue_escapes.h	3;"	d
WIFICOIN_UTILMONEYSTR_H	utilmoneystr.h	10;"	d
WIFICOIN_UTILSTRENCODINGS_H	utilstrencodings.h	10;"	d
WIFICOIN_UTILTIME_H	utiltime.h	7;"	d
WIFICOIN_UTIL_H	util.h	11;"	d
WIFICOIN_VALIDATIONINTERFACE_H	validationinterface.h	7;"	d
WIFICOIN_VALIDATION_H	validation.h	7;"	d
WIFICOIN_VERSION_H	version.h	6;"	d
WIFICOIN_WALLET_COINCONTROL_H	wallet/coincontrol.h	6;"	d
WIFICOIN_WALLET_CRYPTER_H	wallet/crypter.h	6;"	d
WIFICOIN_WALLET_DB_H	wallet/db.h	7;"	d
WIFICOIN_WALLET_FEEBUMPER_H	wallet/feebumper.h	6;"	d
WIFICOIN_WALLET_RPCWALLET_H	wallet/rpcwallet.h	6;"	d
WIFICOIN_WALLET_TEST_FIXTURE_H	wallet/test/wallet_test_fixture.h	6;"	d
WIFICOIN_WALLET_WALLETDB_H	wallet/walletdb.h	7;"	d
WIFICOIN_WALLET_WALLET_H	wallet/wallet.h	7;"	d
WIFICOIN_WARNINGS_H	warnings.h	7;"	d
WIFICOIN_ZMQ_ZMQABSTRACTNOTIFIER_H	zmq/zmqabstractnotifier.h	6;"	d
WIFICOIN_ZMQ_ZMQCONFIG_H	zmq/zmqconfig.h	6;"	d
WIFICOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H	zmq/zmqnotificationinterface.h	6;"	d
WIFICOIN_ZMQ_ZMQPUBLISHNOTIFIER_H	zmq/zmqpublishnotifier.h	6;"	d
BITER	bench/lockedpool.cpp	13;"	d	file:
BITS_PER_SAMPLE	qt/notificator.cpp	/^const int BITS_PER_SAMPLE = 8;$/;"	v
BIT_RANGE	crypto/ctaes/ctaes.c	258;"	d	file:
BIT_RANGE_LEFT	crypto/ctaes/ctaes.c	260;"	d	file:
BIT_RANGE_RIGHT	crypto/ctaes/ctaes.c	261;"	d	file:
BLOCK	protocol.cpp	/^const char *BLOCK="block";$/;"	m	namespace:NetMsgType	file:
BLOCK	txmempool.h	/^    BLOCK,       \/\/! Removed for block$/;"	m	class:MemPoolRemovalReason
BLOCKFILE_CHUNK_SIZE	validation.h	/^static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; \/\/ 16 MiB$/;"	v
BLOCKTXN	protocol.cpp	/^const char *BLOCKTXN="blocktxn";$/;"	m	namespace:NetMsgType	file:
BLOCK_CHAIN_SIZE	qt/intro.cpp	/^static const uint64_t BLOCK_CHAIN_SIZE = 150;$/;"	v	file:
BLOCK_DOWNLOAD_TIMEOUT_BASE	validation.h	/^static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;$/;"	v
BLOCK_DOWNLOAD_TIMEOUT_PER_PEER	validation.h	/^static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;$/;"	v
BLOCK_DOWNLOAD_WINDOW	validation.h	/^static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;$/;"	v
BLOCK_FAILED_CHILD	chain.h	/^    BLOCK_FAILED_CHILD       =   64, \/\/!< descends from failed block$/;"	e	enum:uint32_t
BLOCK_FAILED_MASK	chain.h	/^    BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,$/;"	e	enum:uint32_t
BLOCK_FAILED_VALID	chain.h	/^    BLOCK_FAILED_VALID       =   32, \/\/!< stage after last reached validness failed$/;"	e	enum:uint32_t
BLOCK_HAVE_DATA	chain.h	/^    BLOCK_HAVE_DATA          =    8, \/\/!< full block available in blk*.dat$/;"	e	enum:uint32_t
BLOCK_HAVE_MASK	chain.h	/^    BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,$/;"	e	enum:uint32_t
BLOCK_HAVE_UNDO	chain.h	/^    BLOCK_HAVE_UNDO          =   16, \/\/!< undo data available in rev*.dat$/;"	e	enum:uint32_t
BLOCK_OPT_WITNESS	chain.h	/^    BLOCK_OPT_WITNESS       =   128, \/\/!< block data in blk*.data was received with a witness-enforcing client$/;"	e	enum:uint32_t
BLOCK_SOURCE_DISK	qt/clientmodel.h	/^    BLOCK_SOURCE_DISK,$/;"	e	enum:BlockSource
BLOCK_SOURCE_NETWORK	qt/clientmodel.h	/^    BLOCK_SOURCE_NETWORK$/;"	e	enum:BlockSource
BLOCK_SOURCE_NONE	qt/clientmodel.h	/^    BLOCK_SOURCE_NONE,$/;"	e	enum:BlockSource
BLOCK_SOURCE_REINDEX	qt/clientmodel.h	/^    BLOCK_SOURCE_REINDEX,$/;"	e	enum:BlockSource
BLOCK_STALLING_TIMEOUT	validation.h	/^static const unsigned int BLOCK_STALLING_TIMEOUT = 2;$/;"	v
BLOCK_TEST	leveldb/table/table_test.cc	/^  BLOCK_TEST,$/;"	e	enum:leveldb::TestType	file:
BLOCK_VALID_CHAIN	chain.h	/^    BLOCK_VALID_CHAIN        =    4,$/;"	e	enum:uint32_t
BLOCK_VALID_HEADER	chain.h	/^    BLOCK_VALID_HEADER       =    1,$/;"	e	enum:uint32_t
BLOCK_VALID_MASK	chain.h	/^    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |$/;"	e	enum:uint32_t
BLOCK_VALID_SCRIPTS	chain.h	/^    BLOCK_VALID_SCRIPTS      =    5,$/;"	e	enum:uint32_t
BLOCK_VALID_TRANSACTIONS	chain.h	/^    BLOCK_VALID_TRANSACTIONS =    3,$/;"	e	enum:uint32_t
BLOCK_VALID_TREE	chain.h	/^    BLOCK_VALID_TREE         =    2,$/;"	e	enum:uint32_t
BLOCK_VALID_UNKNOWN	chain.h	/^    BLOCK_VALID_UNKNOWN      =    0,$/;"	e	enum:uint32_t
BLOOM_UPDATE_ALL	bloom.h	/^    BLOOM_UPDATE_ALL = 1,$/;"	e	enum:bloomflags
BLOOM_UPDATE_MASK	bloom.h	/^    BLOOM_UPDATE_MASK = 3,$/;"	e	enum:bloomflags
BLOOM_UPDATE_NONE	bloom.h	/^    BLOOM_UPDATE_NONE = 0,$/;"	e	enum:bloomflags
BLOOM_UPDATE_P2PUBKEY_ONLY	bloom.h	/^    BLOOM_UPDATE_P2PUBKEY_ONLY = 2,$/;"	e	enum:bloomflags
BM_LogAndApply	leveldb/db/db_test.cc	/^void BM_LogAndApply(int iters, int num_base_files) {$/;"	f	namespace:leveldb
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banning)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banscore)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_bantime)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_mapOrphans)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(stale_tip_peer_management)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_create)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_delete)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_find)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_getaddr)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_new_collisions)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_ports)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_select)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_simple)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(addrman_tried_collisions)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)$/;"	f
BOOST_AUTO_TEST_CASE	test/addrman_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)$/;"	f
BOOST_AUTO_TEST_CASE	test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(arena_tests)$/;"	f
BOOST_AUTO_TEST_CASE	test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(lockedpool_tests_live)$/;"	f
BOOST_AUTO_TEST_CASE	test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(lockedpool_tests_mock)$/;"	f
BOOST_AUTO_TEST_CASE	test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(BinaryOperatorTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetFeeTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(MoneyRangeTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/amount_tests.cpp	/^BOOST_AUTO_TEST_CASE(ToStringTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( basics ) \/\/ constructors, equality, inequality$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( bitwiseOperators )$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( comparison ) \/\/ <= >= < >$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( divide )$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( getmaxcoverage ) \/\/ some more tests just to get 100% coverage$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( methods ) \/\/ GetHex SetHex size() GetLow64 GetSerializeSize, Serialize, Unserialize$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( multiply )$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( plusMinus )$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( shifts ) { \/\/ "<<"  ">>"  "<<="  ">>="$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( unaryOperators ) \/\/ !    ~    -$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE(bignum_SetCompact)$/;"	f
BOOST_AUTO_TEST_CASE	test/base32_tests.cpp	/^BOOST_AUTO_TEST_CASE(base32_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_DecodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_EncodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_keys_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)$/;"	f
BOOST_AUTO_TEST_CASE	test/base64_tests.cpp	/^BOOST_AUTO_TEST_CASE(base64_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test1) {$/;"	f
BOOST_AUTO_TEST_CASE	test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test2) {$/;"	f
BOOST_AUTO_TEST_CASE	test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test3) {$/;"	f
BOOST_AUTO_TEST_CASE	test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/blockencodings_tests.cpp	/^BOOST_AUTO_TEST_CASE(TransactionsRequestSerializationTest) {$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_key)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_match)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_1)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_2)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(rolling_bloom)$/;"	f
BOOST_AUTO_TEST_CASE	test/bswap_tests.cpp	/^BOOST_AUTO_TEST_CASE(bswap_tests)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Max)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_One)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Zero)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkqueue_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)$/;"	f
BOOST_AUTO_TEST_CASE	test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_access)$/;"	f
BOOST_AUTO_TEST_CASE	test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_add)$/;"	f
BOOST_AUTO_TEST_CASE	test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_serialization)$/;"	f
BOOST_AUTO_TEST_CASE	test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_spend)$/;"	f
BOOST_AUTO_TEST_CASE	test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(ccoins_write)$/;"	f
BOOST_AUTO_TEST_CASE	test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/compress_tests.cpp	/^BOOST_AUTO_TEST_CASE(compress_amounts)$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(aes_cbc_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(aes_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(chacha20_testvector)$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(countbits_tests)$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hmac_sha256_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(ripemd160_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha1_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha256_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha512_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_erase_ok)$/;"	f
BOOST_AUTO_TEST_CASE	test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_erase_parallel_ok)$/;"	f
BOOST_AUTO_TEST_CASE	test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_generations)$/;"	f
BOOST_AUTO_TEST_CASE	test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(cuckoocache_hit_rate_ok)$/;"	f
BOOST_AUTO_TEST_CASE	test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_cuckoocache_no_fakes)$/;"	f
BOOST_AUTO_TEST_CASE	test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(dbwrapper)$/;"	f
BOOST_AUTO_TEST_CASE	test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(dbwrapper_batch)$/;"	f
BOOST_AUTO_TEST_CASE	test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(dbwrapper_iterator)$/;"	f
BOOST_AUTO_TEST_CASE	test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)$/;"	f
BOOST_AUTO_TEST_CASE	test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(existing_data_reindex)$/;"	f
BOOST_AUTO_TEST_CASE	test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(iterator_ordering)$/;"	f
BOOST_AUTO_TEST_CASE	test/dbwrapper_tests.cpp	/^BOOST_AUTO_TEST_CASE(iterator_string_ordering)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolarg)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolargno)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubledash)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(intarg)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(stringarg)$/;"	f
BOOST_AUTO_TEST_CASE	test/hash_tests.cpp	/^BOOST_AUTO_TEST_CASE(murmurhash3)$/;"	f
BOOST_AUTO_TEST_CASE	test/hash_tests.cpp	/^BOOST_AUTO_TEST_CASE(siphash)$/;"	f
BOOST_AUTO_TEST_CASE	test/key_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_test1)$/;"	f
BOOST_AUTO_TEST_CASE	test/limitedmap_tests.cpp	/^BOOST_AUTO_TEST_CASE(limitedmap_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/main_tests.cpp	/^BOOST_AUTO_TEST_CASE(block_subsidy_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/main_tests.cpp	/^BOOST_AUTO_TEST_CASE(subsidy_limit_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/main_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_combiner_all)$/;"	f
BOOST_AUTO_TEST_CASE	test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolIndexingTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolRemoveTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/merkle_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/miner_tests.cpp	/^BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_IsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_Sign)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_verify)$/;"	f
BOOST_AUTO_TEST_CASE	test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrdb_read)$/;"	f
BOOST_AUTO_TEST_CASE	test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)$/;"	f
BOOST_AUTO_TEST_CASE	test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(cnode_listen_port)$/;"	f
BOOST_AUTO_TEST_CASE	test/net_tests.cpp	/^BOOST_AUTO_TEST_CASE(cnode_simple_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_getgroup)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_networks)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_properties)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_splithost)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(onioncat_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(subnet_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/pmt_tests.cpp	/^BOOST_AUTO_TEST_CASE(pmt_malleability)$/;"	f
BOOST_AUTO_TEST_CASE	test/pmt_tests.cpp	/^BOOST_AUTO_TEST_CASE(pmt_test1)$/;"	f
BOOST_AUTO_TEST_CASE	test/policyestimator_tests.cpp	/^BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)$/;"	f
BOOST_AUTO_TEST_CASE	test/prevector_tests.cpp	/^BOOST_AUTO_TEST_CASE(PrevectorTestInt)$/;"	f
BOOST_AUTO_TEST_CASE	test/raii_event_tests.cpp	/^BOOST_AUTO_TEST_CASE(raii_event_creation)$/;"	f
BOOST_AUTO_TEST_CASE	test/raii_event_tests.cpp	/^BOOST_AUTO_TEST_CASE(raii_event_order)$/;"	f
BOOST_AUTO_TEST_CASE	test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(fastrandom_randbits)$/;"	f
BOOST_AUTO_TEST_CASE	test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(fastrandom_tests)$/;"	f
BOOST_AUTO_TEST_CASE	test/random_tests.cpp	/^BOOST_AUTO_TEST_CASE(osrandom_tests)$/;"	f
BOOST_AUTO_TEST_CASE	test/reverselock_tests.cpp	/^BOOST_AUTO_TEST_CASE(reverselock_basics)$/;"	f
BOOST_AUTO_TEST_CASE	test/reverselock_tests.cpp	/^BOOST_AUTO_TEST_CASE(reverselock_errors)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(json_parse_errors)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_ban)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_convert_values_generatetoaddress)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_rawparams)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_rawsign)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_togglenetwork)$/;"	f
BOOST_AUTO_TEST_CASE	test/sanity_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_sanity)$/;"	f
BOOST_AUTO_TEST_CASE	test/scheduler_tests.cpp	/^BOOST_AUTO_TEST_CASE(manythreads)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(AreInputsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(is)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(norecurse)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(set)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(sign)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(switchover)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_IsMine)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_standard_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_Solver_success)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_FindAndDelete)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_GetScriptAsm)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_HasValidOps)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_IsPushOnly_on_invalid_scripts)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_PushData)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_build)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_combineSigs)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_json_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_push)$/;"	f
BOOST_AUTO_TEST_CASE	test/scriptnum_tests.cpp	/^BOOST_AUTO_TEST_CASE(creation)$/;"	f
BOOST_AUTO_TEST_CASE	test/scriptnum_tests.cpp	/^BOOST_AUTO_TEST_CASE(operators)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(class_methods)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(compactsize)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubles)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubles_conversion)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(floats)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(floats_conversion)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(insert_delete)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(noncanonical)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(sizes)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(varints)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(varints_bitpatterns)$/;"	f
BOOST_AUTO_TEST_CASE	test/sighash_tests.cpp	/^BOOST_AUTO_TEST_CASE(sighash_from_data)$/;"	f
BOOST_AUTO_TEST_CASE	test/sighash_tests.cpp	/^BOOST_AUTO_TEST_CASE(sighash_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/sigopcount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetSigOpCount)$/;"	f
BOOST_AUTO_TEST_CASE	test/sigopcount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetTxSigOpCost)$/;"	f
BOOST_AUTO_TEST_CASE	test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(findearliestatleast_edge_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(findearliestatleast_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(getlocator_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(skiplist_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(streams_serializedata_xor)$/;"	f
BOOST_AUTO_TEST_CASE	test/streams_tests.cpp	/^BOOST_AUTO_TEST_CASE(streams_vector_writer)$/;"	f
BOOST_AUTO_TEST_CASE	test/timedata_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_MedianFilter)$/;"	f
BOOST_AUTO_TEST_CASE	test/torcontrol_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseTorReplyMapping)$/;"	f
BOOST_AUTO_TEST_CASE	test/torcontrol_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_SplitTorReplyLine)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_transaction_tests)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_Get)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_IsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_witness)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(tx_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(tx_valid)$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( basics ) \/\/ constructors, equality, inequality$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( comparison ) \/\/ <= >= < >$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( conversion )$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( methods ) \/\/ GetHex SetHex begin() end() size() GetLow64 GetSerializeSize, Serialize, Unserialize$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_array)$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_constructor)$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_object)$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_readwrite)$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_set)$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_typecheck)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(gettime)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(strprintf_numbers)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_FormatParagraph)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_FormatSubVersion)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseDouble)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseInt32)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseInt64)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseUInt32)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseUInt64)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_FormatMoney)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetArg)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_HexStr)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_IsHex)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_IsHexNumber)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseHex)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseMoney)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseParameters)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_TimingResistantEqual)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_criticalsection)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)$/;"	f
BOOST_AUTO_TEST_CASE	test/versionbits_tests.cpp	/^BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)$/;"	f
BOOST_AUTO_TEST_CASE	test/versionbits_tests.cpp	/^BOOST_AUTO_TEST_CASE(versionbits_test)$/;"	f
BOOST_AUTO_TEST_CASE	wallet/test/accounting_tests.cpp	/^BOOST_AUTO_TEST_CASE(acc_orderupgrade)$/;"	f
BOOST_AUTO_TEST_CASE	wallet/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(decrypt) {$/;"	f
BOOST_AUTO_TEST_CASE	wallet/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(encrypt) {$/;"	f
BOOST_AUTO_TEST_CASE	wallet/test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(passphrase) {$/;"	f
BOOST_AUTO_TEST_CASE	wallet/test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(ApproximateBestSubset)$/;"	f
BOOST_AUTO_TEST_CASE	wallet/test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(ComputeTimeSmart)$/;"	f
BOOST_AUTO_TEST_CASE	wallet/test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(LoadReceiveRequests)$/;"	f
BOOST_AUTO_TEST_CASE	wallet/test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(coin_selection_tests)$/;"	f
BOOST_CHRONO_LIB	Makefile	/^BOOST_CHRONO_LIB = -lboost_chrono-mt$/;"	m
BOOST_CPPFLAGS	Makefile	/^BOOST_CPPFLAGS = -DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC -pthread -I\/usr\/include -DBOOST_NO_SCOPED_ENUMS -DBOOST_NO_CXX11_SCOPED_ENUMS$/;"	m
BOOST_FILESYSTEM_LIB	Makefile	/^BOOST_FILESYSTEM_LIB = -lboost_filesystem$/;"	m
BOOST_FIXTURE_TEST_CASE	test/txvalidationcache_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/txvalidationcache_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)$/;"	f
BOOST_FIXTURE_TEST_CASE	wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)$/;"	f
BOOST_FIXTURE_TEST_CASE	wallet/test/wallet_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)$/;"	f
BOOST_LDFLAGS	Makefile	/^BOOST_LDFLAGS = -L\/usr\/lib64$/;"	m
BOOST_LIBS	Makefile	/^BOOST_LIBS = -L\/usr\/lib64 -lboost_system -lboost_filesystem -lboost_program_options-mt -lboost_thread -lboost_chrono-mt$/;"	m
BOOST_PROGRAM_OPTIONS_LIB	Makefile	/^BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options-mt$/;"	m
BOOST_SYSTEM_LIB	Makefile	/^BOOST_SYSTEM_LIB = -lboost_system$/;"	m
BOOST_TEST_MODULE	test/test_wificoin_main.cpp	5;"	d	file:
BOOST_THREAD_LIB	Makefile	/^BOOST_THREAD_LIB = -lboost_thread$/;"	m
BOOST_UNIT_TEST_FRAMEWORK_LIB	Makefile	/^BOOST_UNIT_TEST_FRAMEWORK_LIB = -lboost_unit_test_framework-mt$/;"	m
BREW	Makefile	/^BREW = $/;"	m
BREW	secp256k1/Makefile	/^BREW = $/;"	m
WFC	qt/wificoinunits.h	/^        WFC,$/;"	e	enum:WiFicoinUnits::Unit
BTN_ABORT	ui_interface.h	/^        BTN_ABORT   = 0x00040000U, \/\/ QMessageBox::Abort$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_APPLY	ui_interface.h	/^        BTN_APPLY   = 0x02000000U, \/\/ QMessageBox::Apply$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CANCEL	ui_interface.h	/^        BTN_CANCEL  = 0x00400000U, \/\/ QMessageBox::Cancel$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CLOSE	ui_interface.h	/^        BTN_CLOSE   = 0x00200000U, \/\/ QMessageBox::Close$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_DISCARD	ui_interface.h	/^        BTN_DISCARD = 0x00800000U, \/\/ QMessageBox::Discard$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_HELP	ui_interface.h	/^        BTN_HELP    = 0x01000000U, \/\/ QMessageBox::Help$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_IGNORE	ui_interface.h	/^        BTN_IGNORE  = 0x00100000U, \/\/ QMessageBox::Ignore$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_MASK	ui_interface.h	/^        BTN_MASK = (BTN_OK | BTN_YES | BTN_NO | BTN_ABORT | BTN_RETRY | BTN_IGNORE |$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_NO	ui_interface.h	/^        BTN_NO      = 0x00010000U, \/\/ QMessageBox::No$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_OK	ui_interface.h	/^        BTN_OK      = 0x00000400U, \/\/ QMessageBox::Ok$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RESET	ui_interface.h	/^        BTN_RESET   = 0x04000000U, \/\/ QMessageBox::Reset$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RETRY	ui_interface.h	/^        BTN_RETRY   = 0x00080000U, \/\/ QMessageBox::Retry$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_YES	ui_interface.h	/^        BTN_YES     = 0x00004000U, \/\/ QMessageBox::Yes$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BUFFER_SIZE	bench/crypto_hash.cpp	/^static const uint64_t BUFFER_SIZE = 1000*1000;$/;"	v	file:
BUILD_DESC	clientversion.cpp	62;"	d	file:
BUILD_DESC	clientversion.cpp	64;"	d	file:
BUILD_DESC	clientversion.cpp	66;"	d	file:
BUILD_DESC_FROM_COMMIT	clientversion.cpp	54;"	d	file:
BUILD_DESC_FROM_UNKNOWN	clientversion.cpp	57;"	d	file:
BUILD_DESC_WITH_SUFFIX	clientversion.cpp	51;"	d	file:
BUILD_EXEEXT	secp256k1/Makefile	/^BUILD_EXEEXT = $/;"	m
BUILD_EXEEXT	univalue/Makefile	/^BUILD_EXEEXT = $/;"	m
BUILD_OBJEXT	secp256k1/Makefile	/^BUILD_OBJEXT = $/;"	m
BUILD_SUFFIX	obj/build.h	1;"	d
BYTES_PER_PIXEL	qt/notificator.cpp	/^const int BYTES_PER_PIXEL = 4;$/;"	v
BackgroundCall	leveldb/db/db_impl.cc	/^void DBImpl::BackgroundCall() {$/;"	f	class:leveldb::DBImpl
BackgroundCompaction	leveldb/db/db_impl.cc	/^void DBImpl::BackgroundCompaction() {$/;"	f	class:leveldb::DBImpl
Backup	wallet/db.cpp	/^bool CWalletDBWrapper::Backup(const std::string& strDest)$/;"	f	class:CWalletDBWrapper
BackupSettings	qt/optionsmodel.cpp	/^static void BackupSettings(const fs::path& filename, const QSettings& src)$/;"	f	file:
BackupWallet	wallet/wallet.cpp	/^bool CWallet::BackupWallet(const std::string& strDest)$/;"	f	class:CWallet
Ban	net.cpp	/^void CConnman::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {$/;"	f	class:CConnman
Ban	net.cpp	/^void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {$/;"	f	class:CConnman
BanReason	addrdb.h	/^typedef enum BanReason$/;"	g
BanReason	addrdb.h	/^} BanReason;$/;"	t	typeref:enum:BanReason
BanReasonManuallyAdded	addrdb.h	/^    BanReasonManuallyAdded    = 2$/;"	e	enum:BanReason
BanReasonNodeMisbehaving	addrdb.h	/^    BanReasonNodeMisbehaving  = 1,$/;"	e	enum:BanReason
BanReasonUnknown	addrdb.h	/^    BanReasonUnknown          = 0,$/;"	e	enum:BanReason
BanTableModel	qt/bantablemodel.cpp	/^BanTableModel::BanTableModel(ClientModel *parent) :$/;"	f	class:BanTableModel
BanTableModel	qt/bantablemodel.h	/^class BanTableModel : public QAbstractTableModel$/;"	c
BanTablePriv	qt/bantablemodel.cpp	/^class BanTablePriv$/;"	c	file:
BannedListChanged	qt/clientmodel.cpp	/^static void BannedListChanged(ClientModel *clientmodel)$/;"	f	file:
BannedListChanged	ui_interface.h	/^    boost::signals2::signal<void (void)> BannedListChanged;$/;"	m	class:CClientUIInterface
BannedNodeLessThan	qt/bantablemodel.h	/^    BannedNodeLessThan(int nColumn, Qt::SortOrder fOrder) :$/;"	f	class:BannedNodeLessThan
BannedNodeLessThan	qt/bantablemodel.h	/^class BannedNodeLessThan$/;"	c
BannedSetIsDirty	net.cpp	/^bool CConnman::BannedSetIsDirty()$/;"	f	class:CConnman
Bantime	qt/bantablemodel.h	/^        Bantime = 1$/;"	e	enum:BanTableModel::ColumnIndex
Base58CheckEncode	bench/base58.cpp	/^BENCHMARK(Base58CheckEncode);$/;"	v
Base58CheckEncode	bench/base58.cpp	/^static void Base58CheckEncode(benchmark::State& state)$/;"	f	file:
Base58Decode	bench/base58.cpp	/^BENCHMARK(Base58Decode);$/;"	v
Base58Decode	bench/base58.cpp	/^static void Base58Decode(benchmark::State& state)$/;"	f	file:
Base58Encode	bench/base58.cpp	/^BENCHMARK(Base58Encode);$/;"	v
Base58Encode	bench/base58.cpp	/^static void Base58Encode(benchmark::State& state)$/;"	f	file:
Base58Prefix	chainparams.h	/^    const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }$/;"	f	class:CChainParams
Base58Type	chainparams.h	/^    enum Base58Type {$/;"	g	class:CChainParams
BaseParams	chainparamsbase.cpp	/^const CBaseChainParams& BaseParams()$/;"	f
BaseSignatureChecker	script/interpreter.h	/^class BaseSignatureChecker$/;"	c
BaseSignatureCreator	script/sign.h	/^    BaseSignatureCreator(const CKeyStore* keystoreIn) : keystore(keystoreIn) {}$/;"	f	class:BaseSignatureCreator
BaseSignatureCreator	script/sign.h	/^class BaseSignatureCreator {$/;"	c
BasicTestingSetup	test/test_wificoin.cpp	/^BasicTestingSetup::BasicTestingSetup(const std::string& chainName)$/;"	f	class:BasicTestingSetup
BasicTestingSetup	test/test_wificoin.h	/^struct BasicTestingSetup {$/;"	s
BatchWrite	coins.cpp	/^bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }$/;"	f	class:CCoinsView
BatchWrite	coins.cpp	/^bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }$/;"	f	class:CCoinsViewBacked
BatchWrite	coins.cpp	/^bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
BatchWrite	txdb.cpp	/^bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {$/;"	f	class:CCoinsViewDB
BeforeFile	leveldb/db/version_set.cc	/^static bool BeforeFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
BenchFunction	bench/bench.h	/^    typedef std::function<void(State&)> BenchFunction;$/;"	t	namespace:benchmark
BenchLockedPool	bench/lockedpool.cpp	/^BENCHMARK(BenchLockedPool);$/;"	v
BenchLockedPool	bench/lockedpool.cpp	/^static void BenchLockedPool(benchmark::State& state)$/;"	f	file:
BenchRunner	bench/bench.cpp	/^benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func)$/;"	f	class:benchmark::BenchRunner
BenchRunner	bench/bench.h	/^    class BenchRunner$/;"	c	namespace:benchmark
Benchmark	leveldb/db/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	leveldb/db/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	leveldb/doc/bench/db_bench_sqlite3.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	leveldb/doc/bench/db_bench_sqlite3.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	leveldb/doc/bench/db_bench_tree_db.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	leveldb/doc/bench/db_bench_tree_db.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
BenchmarkMap	bench/bench.h	/^        typedef std::map<std::string, BenchFunction> BenchmarkMap;$/;"	t	class:benchmark::BenchRunner
Between	leveldb/db/db_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
Between	leveldb/table/table_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
BigString	leveldb/db/log_test.cc	/^static std::string BigString(const std::string& partial_string, size_t n) {$/;"	f	namespace:leveldb::log
Bind	net.cpp	/^bool CConnman::Bind(const CService &addr, unsigned int flags) {$/;"	f	class:CConnman
BindFlags	net.cpp	/^enum BindFlags {$/;"	g	file:
BindListenPort	net.cpp	/^bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, bool fWhitelisted)$/;"	f	class:CConnman
BindWallet	wallet/wallet.h	/^    void BindWallet(CWallet *pwalletIn)$/;"	f	class:CWalletTx
WiFicoinAddressCheckValidator	qt/wificoinaddressvalidator.cpp	/^WiFicoinAddressCheckValidator::WiFicoinAddressCheckValidator(QObject *parent) :$/;"	f	class:WiFicoinAddressCheckValidator
WiFicoinAddressCheckValidator	qt/wificoinaddressvalidator.h	/^class WiFicoinAddressCheckValidator : public QValidator$/;"	c
WiFicoinAddressEntryValidator	qt/wificoinaddressvalidator.cpp	/^WiFicoinAddressEntryValidator::WiFicoinAddressEntryValidator(QObject *parent) :$/;"	f	class:WiFicoinAddressEntryValidator
WiFicoinAddressEntryValidator	qt/wificoinaddressvalidator.h	/^class WiFicoinAddressEntryValidator : public QValidator$/;"	c
WiFicoinAmountField	qt/wificoinamountfield.cpp	/^WiFicoinAmountField::WiFicoinAmountField(QWidget *parent) :$/;"	f	class:WiFicoinAmountField
WiFicoinAmountField	qt/wificoinamountfield.h	/^class WiFicoinAmountField: public QWidget$/;"	c
WiFicoinApplication	qt/wificoin.cpp	/^WiFicoinApplication::WiFicoinApplication(int &argc, char **argv):$/;"	f	class:WiFicoinApplication
WiFicoinApplication	qt/wificoin.cpp	/^class WiFicoinApplication: public QApplication$/;"	c	file:
WiFicoinCore	qt/wificoin.cpp	/^WiFicoinCore::WiFicoinCore():$/;"	f	class:WiFicoinCore
WiFicoinCore	qt/wificoin.cpp	/^class WiFicoinCore: public QObject$/;"	c	file:
WiFicoinGUI	qt/wificoingui.cpp	/^WiFicoinGUI::WiFicoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :$/;"	f	class:WiFicoinGUI
WiFicoinGUI	qt/wificoingui.h	/^class WiFicoinGUI : public QMainWindow$/;"	c
WiFicoinUnit	qt/wificoinunits.h	/^typedef WiFicoinUnits::Unit WiFicoinUnit;$/;"	t
WiFicoinUnits	qt/wificoinunits.cpp	/^WiFicoinUnits::WiFicoinUnits(QObject *parent):$/;"	f	class:WiFicoinUnits
WiFicoinUnits	qt/wificoinunits.h	/^class WiFicoinUnits: public QAbstractListModel$/;"	c
Block	leveldb/table/block.cc	/^Block::Block(const BlockContents& contents)$/;"	f	class:leveldb::Block
Block	leveldb/table/block.h	/^class Block {$/;"	c	namespace:leveldb
BlockAssembler	miner.cpp	/^BlockAssembler::BlockAssembler(const CChainParams& params) : BlockAssembler(params, DefaultOptions(params)) {}$/;"	f	class:BlockAssembler
BlockAssembler	miner.cpp	/^BlockAssembler::BlockAssembler(const CChainParams& params, const Options& options) : chainparams(params)$/;"	f	class:BlockAssembler
BlockAssembler	miner.h	/^class BlockAssembler$/;"	c
BlockBuildMerkleTree	test/merkle_tests.cpp	/^static uint256 BlockBuildMerkleTree(const CBlock& block, bool* fMutated, std::vector<uint256>& vMerkleTree)$/;"	f	file:
BlockBuilder	leveldb/table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	leveldb/table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockChecked	net_processing.cpp	/^void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {$/;"	f	class:PeerLogicValidation
BlockChecked	validationinterface.cpp	/^    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;$/;"	m	struct:MainSignalsInstance	file:
BlockChecked	validationinterface.cpp	/^void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {$/;"	f	class:CMainSignals
BlockChecked	validationinterface.h	/^    virtual void BlockChecked(const CBlock&, const CValidationState&) {}$/;"	f	class:CValidationInterface
BlockConnected	net_processing.cpp	/^void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {$/;"	f	class:PeerLogicValidation
BlockConnected	validation.cpp	/^    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {$/;"	f	class:ConnectTrace
BlockConnected	validationinterface.cpp	/^    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;$/;"	m	struct:MainSignalsInstance	file:
BlockConnected	validationinterface.cpp	/^void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {$/;"	f	class:CMainSignals
BlockConnected	validationinterface.h	/^    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}$/;"	f	class:CValidationInterface
BlockConnected	wallet/wallet.cpp	/^void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {$/;"	f	class:CWallet
BlockConnected	zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)$/;"	f	class:CZMQNotificationInterface
BlockConstructor	leveldb/table/table_test.cc	/^  explicit BlockConstructor(const Comparator* cmp)$/;"	f	class:leveldb::BlockConstructor
BlockConstructor	leveldb/table/table_test.cc	/^class BlockConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
BlockContents	leveldb/table/format.h	/^struct BlockContents {$/;"	s	namespace:leveldb
BlockDisconnected	validationinterface.cpp	/^    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;$/;"	m	struct:MainSignalsInstance	file:
BlockDisconnected	validationinterface.cpp	/^void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {$/;"	f	class:CMainSignals
BlockDisconnected	validationinterface.h	/^    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}$/;"	f	class:CValidationInterface
BlockDisconnected	wallet/wallet.cpp	/^void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {$/;"	f	class:CWallet
BlockDisconnected	zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)$/;"	f	class:CZMQNotificationInterface
BlockFunction	leveldb/table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon39	file:
BlockGetMerkleBranch	test/merkle_tests.cpp	/^static std::vector<uint256> BlockGetMerkleBranch(const CBlock& block, const std::vector<uint256>& vMerkleTree, int nIndex)$/;"	f	file:
BlockHandle	leveldb/table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	leveldb/table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockHasher	validation.h	/^struct BlockHasher$/;"	s
BlockMap	validation.h	/^typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;$/;"	t
BlockMerkleBranch	consensus/merkle.cpp	/^std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)$/;"	f
BlockMerkleRoot	consensus/merkle.cpp	/^uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BlockNotifyCallback	init.cpp	/^static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)$/;"	f	file:
BlockNotifyGenesisWait	init.cpp	/^static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)$/;"	f	file:
BlockReader	leveldb/table/table.cc	/^Iterator* Table::BlockReader(void* arg,$/;"	f	class:leveldb::Table
BlockSource	qt/clientmodel.h	/^enum BlockSource {$/;"	g
BlockSpan	policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::BlockSpan() const$/;"	f	class:CBlockPolicyEstimator
BlockTipChanged	qt/clientmodel.cpp	/^static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex, bool fHeader)$/;"	f	file:
BlockTransactions	blockencodings.h	/^    BlockTransactions() {}$/;"	f	class:BlockTransactions
BlockTransactions	blockencodings.h	/^    BlockTransactions(const BlockTransactionsRequest& req) :$/;"	f	class:BlockTransactions
BlockTransactions	blockencodings.h	/^class BlockTransactions {$/;"	c
BlockTransactionsRequest	blockencodings.h	/^class BlockTransactionsRequest {$/;"	c
BlockTxCount	blockencodings.h	/^    size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }$/;"	f	class:CBlockHeaderAndShortTxIDs
BlockWitnessMerkleRoot	consensus/merkle.cpp	/^uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BloomFilterPolicy	leveldb/util/bloom.cc	/^  explicit BloomFilterPolicy(int bits_per_key)$/;"	f	class:leveldb::__anon10::BloomFilterPolicy
BloomFilterPolicy	leveldb/util/bloom.cc	/^class BloomFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb::__anon10	file:
BloomHash	leveldb/util/bloom.cc	/^static uint32_t BloomHash(const Slice& key) {$/;"	f	namespace:leveldb::__anon10
BloomTest	leveldb/util/bloom_test.cc	/^  BloomTest() : policy_(NewBloomFilterPolicy(10)) { }$/;"	f	class:leveldb::BloomTest
BloomTest	leveldb/util/bloom_test.cc	/^class BloomTest {$/;"	c	namespace:leveldb	file:
Broadcast	validationinterface.cpp	/^    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;$/;"	m	struct:MainSignalsInstance	file:
Broadcast	validationinterface.cpp	/^void CMainSignals::Broadcast(int64_t nBestBlockTime, CConnman* connman) {$/;"	f	class:CMainSignals
Build	leveldb/db/corruption_test.cc	/^  void Build(int n) {$/;"	f	class:leveldb::CorruptionTest
Build	leveldb/db/fault_injection_test.cc	/^  void Build(int start_idx, int num_vals) {$/;"	f	class:leveldb::FaultInjectionTest
Build	leveldb/util/bloom_test.cc	/^  void Build() {$/;"	f	class:leveldb::BloomTest
BuildBatchGroup	leveldb/db/db_impl.cc	/^WriteBatch* DBImpl::BuildBatchGroup(Writer** last_writer) {$/;"	f	class:leveldb::DBImpl
BuildBlockTestCase	test/blockencodings_tests.cpp	/^static CBlock BuildBlockTestCase() {$/;"	f	file:
BuildCreditingTransaction	bench/verify_script.cpp	/^static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)$/;"	f	file:
BuildCreditingTransaction	test/script_tests.cpp	/^CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue = 0)$/;"	f
BuildSkip	chain.cpp	/^void CBlockIndex::BuildSkip()$/;"	f	class:CBlockIndex
BuildSpendingTransaction	bench/verify_script.cpp	/^static CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)$/;"	f	file:
BuildSpendingTransaction	test/script_tests.cpp	/^CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CMutableTransaction& txCredit)$/;"	f
BuildTable	leveldb/db/builder.cc	/^Status BuildTable(const std::string& dbname,$/;"	f	namespace:leveldb
BuildTxs	test/sigopcount_tests.cpp	/^void BuildTxs(CMutableTransaction& spendingTx, CCoinsViewCache& coins, CMutableTransaction& creationTx, const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& witness)$/;"	f
Builder	leveldb/db/version_set.cc	/^  Builder(VersionSet* vset, Version* base)$/;"	f	class:leveldb::VersionSet::Builder
Builder	leveldb/db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet	file:
BumpFee	qt/test/wallettests.cpp	/^void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, std::string expectError, bool cancel)$/;"	f	namespace:__anon108
BumpFeeResult	wallet/feebumper.h	/^enum class BumpFeeResult$/;"	c
BySmallestKey	leveldb/db/version_set.cc	/^  struct BySmallestKey {$/;"	s	class:leveldb::VersionSet::Builder	file:
ByteSize	leveldb/db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
BytesToKeySHA512AES	wallet/crypter.cpp	/^int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const$/;"	f	class:CCrypter
BytewiseComparator	leveldb/util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	leveldb/util/comparator.cc	/^  BytewiseComparatorImpl() { }$/;"	f	class:leveldb::__anon9::BytewiseComparatorImpl
BytewiseComparatorImpl	leveldb/util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon9	file:
CADDRESS_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CADDRESS_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CADDRMAN_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CADDRMAN_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CADDR_TIME_VERSION	version.h	/^static const int CADDR_TIME_VERSION = 31402;$/;"	v
CAccount	wallet/wallet.h	/^    CAccount()$/;"	f	class:CAccount
CAccount	wallet/wallet.h	/^class CAccount$/;"	c
CAccountingEntry	wallet/wallet.h	/^    CAccountingEntry()$/;"	f	class:CAccountingEntry
CAccountingEntry	wallet/wallet.h	/^class CAccountingEntry$/;"	c
CAddrDB	addrdb.cpp	/^CAddrDB::CAddrDB()$/;"	f	class:CAddrDB
CAddrDB	addrdb.h	/^class CAddrDB$/;"	c
CAddrInfo	addrman.h	/^    CAddrInfo() : CAddress(), source()$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^    CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^class CAddrInfo : public CAddress$/;"	c
CAddrMan	addrman.h	/^    CAddrMan()$/;"	f	class:CAddrMan
CAddrMan	addrman.h	/^class CAddrMan$/;"	c
CAddrManCorrupted	test/net_tests.cpp	/^class CAddrManCorrupted : public CAddrManSerializationMock$/;"	c	file:
CAddrManSerializationMock	test/net_tests.cpp	/^class CAddrManSerializationMock : public CAddrMan$/;"	c	file:
CAddrManTest	test/addrman_tests.cpp	/^    CAddrManTest(bool makeDeterministic = true)$/;"	f	class:CAddrManTest
CAddrManTest	test/addrman_tests.cpp	/^class CAddrManTest : public CAddrMan$/;"	c	file:
CAddrManUncorrupted	test/net_tests.cpp	/^class CAddrManUncorrupted : public CAddrManSerializationMock$/;"	c	file:
CAddress	protocol.cpp	/^CAddress::CAddress() : CService()$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(CService ipIn, ServiceFlags nServicesIn) : CService(ipIn)$/;"	f	class:CAddress
CAddress	protocol.h	/^class CAddress : public CService$/;"	c
CAddressBookData	wallet/wallet.h	/^    CAddressBookData() : purpose("unknown") {}$/;"	f	class:CAddressBookData
CAddressBookData	wallet/wallet.h	/^class CAddressBookData$/;"	c
CAffectedKeysVisitor	wallet/wallet.cpp	/^    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}$/;"	f	class:CAffectedKeysVisitor
CAffectedKeysVisitor	wallet/wallet.cpp	/^class CAffectedKeysVisitor : public boost::static_visitor<void> {$/;"	c	file:
CAmount	amount.h	/^typedef int64_t CAmount;$/;"	t
CAutoFile	streams.h	/^    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn)$/;"	f	class:CAutoFile
CAutoFile	streams.h	/^class CAutoFile$/;"	c
CBANENTRY_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CBANENTRY_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CBCDecrypt	crypto/aes.cpp	/^static int CBCDecrypt(const T& dec, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)$/;"	f	file:
CBCEncrypt	crypto/aes.cpp	/^static int CBCEncrypt(const T& enc, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)$/;"	f	file:
CBLOCKHEADER_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CBLOCKHEADER_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CBLOCKLOCATOR_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CBLOCKLOCATOR_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CBLOCKMERKLEROOT	test/test_wificoin_fuzzy.cpp	/^    CBLOCKMERKLEROOT,$/;"	e	enum:TEST_ID	file:
CBLOCKUNDO_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CBLOCKUNDO_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CBLOCK_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CBLOCK_DESERIALIZE=0,$/;"	e	enum:TEST_ID	file:
CBLOOMFILTER_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CBLOOMFILTER_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CBanDB	addrdb.cpp	/^CBanDB::CBanDB()$/;"	f	class:CBanDB
CBanDB	addrdb.h	/^class CBanDB$/;"	c
CBanEntry	addrdb.h	/^    CBanEntry()$/;"	f	class:CBanEntry
CBanEntry	addrdb.h	/^    CBanEntry(int64_t nCreateTimeIn)$/;"	f	class:CBanEntry
CBanEntry	addrdb.h	/^class CBanEntry$/;"	c
CBase58Data	base58.cpp	/^CBase58Data::CBase58Data()$/;"	f	class:CBase58Data
CBase58Data	base58.h	/^class CBase58Data$/;"	c
CBaseChainParams	chainparamsbase.h	/^    CBaseChainParams() {}$/;"	f	class:CBaseChainParams
CBaseChainParams	chainparamsbase.h	/^class CBaseChainParams$/;"	c
CBaseMainParams	chainparamsbase.cpp	/^    CBaseMainParams()$/;"	f	class:CBaseMainParams
CBaseMainParams	chainparamsbase.cpp	/^class CBaseMainParams : public CBaseChainParams$/;"	c	file:
CBaseRegTestParams	chainparamsbase.cpp	/^    CBaseRegTestParams()$/;"	f	class:CBaseRegTestParams
CBaseRegTestParams	chainparamsbase.cpp	/^class CBaseRegTestParams : public CBaseChainParams$/;"	c	file:
CBaseTestNetParams	chainparamsbase.cpp	/^    CBaseTestNetParams()$/;"	f	class:CBaseTestNetParams
CBaseTestNetParams	chainparamsbase.cpp	/^class CBaseTestNetParams : public CBaseChainParams$/;"	c	file:
CBasicKeyStore	keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CWiFicoinAddress	base58.h	/^    CWiFicoinAddress() {}$/;"	f	class:CWiFicoinAddress
CWiFicoinAddress	base58.h	/^    CWiFicoinAddress(const CTxDestination &dest) { Set(dest); }$/;"	f	class:CWiFicoinAddress
CWiFicoinAddress	base58.h	/^    CWiFicoinAddress(const char* pszAddress) { SetString(pszAddress); }$/;"	f	class:CWiFicoinAddress
CWiFicoinAddress	base58.h	/^    CWiFicoinAddress(const std::string& strAddress) { SetString(strAddress); }$/;"	f	class:CWiFicoinAddress
CWiFicoinAddress	base58.h	/^class CWiFicoinAddress : public CBase58Data {$/;"	c
CWiFicoinAddressVisitor	base58.cpp	/^    CWiFicoinAddressVisitor(CWiFicoinAddress* addrIn) : addr(addrIn) {}$/;"	f	class:__anon46::CWiFicoinAddressVisitor
CWiFicoinAddressVisitor	base58.cpp	/^class CWiFicoinAddressVisitor : public boost::static_visitor<bool>$/;"	c	namespace:__anon46	file:
CWiFicoinExtKey	base58.h	/^typedef CWiFicoinExtKeyBase<CExtKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_SECRET_KEY> CWiFicoinExtKey;$/;"	t
CWiFicoinExtKeyBase	base58.h	/^    CWiFicoinExtKeyBase() {}$/;"	f	class:CWiFicoinExtKeyBase
CWiFicoinExtKeyBase	base58.h	/^    CWiFicoinExtKeyBase(const K &key) {$/;"	f	class:CWiFicoinExtKeyBase
CWiFicoinExtKeyBase	base58.h	/^    CWiFicoinExtKeyBase(const std::string& strBase58c) {$/;"	f	class:CWiFicoinExtKeyBase
CWiFicoinExtKeyBase	base58.h	/^template<typename K, int Size, CChainParams::Base58Type Type> class CWiFicoinExtKeyBase : public CBase58Data$/;"	c
CWiFicoinExtPubKey	base58.h	/^typedef CWiFicoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBLIC_KEY> CWiFicoinExtPubKey;$/;"	t
CWiFicoinLevelDBLogger	dbwrapper.cpp	/^class CWiFicoinLevelDBLogger : public leveldb::Logger {$/;"	c	file:
CWiFicoinSecret	base58.h	/^    CWiFicoinSecret() {}$/;"	f	class:CWiFicoinSecret
CWiFicoinSecret	base58.h	/^    CWiFicoinSecret(const CKey& vchSecret) { SetKey(vchSecret); }$/;"	f	class:CWiFicoinSecret
CWiFicoinSecret	base58.h	/^class CWiFicoinSecret : public CBase58Data$/;"	c
CBlock	primitives/block.h	/^    CBlock()$/;"	f	class:CBlock
CBlock	primitives/block.h	/^    CBlock(const CBlockHeader &header)$/;"	f	class:CBlock
CBlock	primitives/block.h	/^class CBlock : public CBlockHeader$/;"	c
CBlockFileInfo	chain.h	/^     CBlockFileInfo() {$/;"	f	class:CBlockFileInfo
CBlockFileInfo	chain.h	/^class CBlockFileInfo$/;"	c
CBlockHeader	primitives/block.h	/^    CBlockHeader()$/;"	f	class:CBlockHeader
CBlockHeader	primitives/block.h	/^class CBlockHeader$/;"	c
CBlockHeaderAndShortTxIDs	blockencodings.cpp	/^CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	blockencodings.h	/^    CBlockHeaderAndShortTxIDs() {}$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	blockencodings.h	/^class CBlockHeaderAndShortTxIDs {$/;"	c
CBlockIndex	chain.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	chain.h	/^    CBlockIndex(const CBlockHeader& block)$/;"	f	class:CBlockIndex
CBlockIndex	chain.h	/^class CBlockIndex$/;"	c
CBlockIndexWorkComparator	validation.cpp	/^    struct CBlockIndexWorkComparator$/;"	s	namespace:__anon43	file:
CBlockLocator	primitives/block.h	/^    CBlockLocator() {}$/;"	f	struct:CBlockLocator
CBlockLocator	primitives/block.h	/^    CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}$/;"	f	struct:CBlockLocator
CBlockLocator	primitives/block.h	/^struct CBlockLocator$/;"	s
CBlockPolicyEstimator	policy/fees.cpp	/^CBlockPolicyEstimator::CBlockPolicyEstimator()$/;"	f	class:CBlockPolicyEstimator
CBlockPolicyEstimator	policy/fees.h	/^class CBlockPolicyEstimator$/;"	c
CBlockReject	net_processing.cpp	/^struct CBlockReject {$/;"	s	namespace:__anon50	file:
CBlockTemplate	miner.h	/^struct CBlockTemplate$/;"	s
CBlockTreeDB	txdb.cpp	/^CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() \/ "blocks" \/ "index", nCacheSize, fMemory, fWipe) {$/;"	f	class:CBlockTreeDB
CBlockTreeDB	txdb.h	/^class CBlockTreeDB : public CDBWrapper$/;"	c
CBlockUndo	undo.h	/^class CBlockUndo$/;"	c
CBloomFilter	bloom.cpp	/^CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweakIn) :$/;"	f	class:CBloomFilter
CBloomFilter	bloom.cpp	/^CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweakIn, unsigned char nFlagsIn) :$/;"	f	class:CBloomFilter
CBloomFilter	bloom.h	/^    CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}$/;"	f	class:CBloomFilter
CBloomFilter	bloom.h	/^class CBloomFilter$/;"	c
CBufferedFile	streams.h	/^    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :$/;"	f	class:CBufferedFile
CBufferedFile	streams.h	/^class CBufferedFile$/;"	c
CC	Makefile	/^CC = gcc$/;"	m
CC	secp256k1/Makefile	/^CC = gcc$/;"	m
CC	univalue/Makefile	/^CC = gcc$/;"	m
CCACHE	Makefile	/^CCACHE = $/;"	m
CCAS	secp256k1/Makefile	/^CCAS = gcc$/;"	m
CCASCOMPILE	secp256k1/Makefile	/^CCASCOMPILE = $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)$/;"	m
CCASDEPMODE	secp256k1/Makefile	/^CCASDEPMODE = depmode=gcc3$/;"	m
CCASFLAGS	secp256k1/Makefile	/^CCASFLAGS = -g -O2$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	secp256k1/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	univalue/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CCLD	secp256k1/Makefile	/^CCLD = $(CC)$/;"	m
CCOINS_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CCOINS_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CC_FOR_BUILD	secp256k1/Makefile	/^CC_FOR_BUILD = gcc$/;"	m
CChain	chain.h	/^class CChain {$/;"	c
CChainParams	chainparams.h	/^    CChainParams() {}$/;"	f	class:CChainParams
CChainParams	chainparams.h	/^class CChainParams$/;"	c
CCheckQueue	checkqueue.h	/^    CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}$/;"	f	class:CCheckQueue
CCheckQueue	checkqueue.h	/^class CCheckQueue$/;"	c
CCheckQueueControl	checkqueue.h	/^    explicit CCheckQueueControl(CCheckQueue<T> * const pqueueIn) : pqueue(pqueueIn), fDone(false)$/;"	f	class:CCheckQueueControl
CCheckQueueControl	checkqueue.h	/^class CCheckQueueControl$/;"	c
CCheckQueueSpeed	bench/checkqueue.cpp	/^BENCHMARK(CCheckQueueSpeed);$/;"	v
CCheckQueueSpeed	bench/checkqueue.cpp	/^static void CCheckQueueSpeed(benchmark::State& state)$/;"	f	file:
CCheckQueueSpeedPrevectorJob	bench/checkqueue.cpp	/^BENCHMARK(CCheckQueueSpeedPrevectorJob);$/;"	v
CCheckQueueSpeedPrevectorJob	bench/checkqueue.cpp	/^static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)$/;"	f	file:
CCheckpointData	chainparams.h	/^struct CCheckpointData {$/;"	s
CClientUIInterface	ui_interface.h	/^class CClientUIInterface$/;"	c
CCoin	rest.cpp	/^    CCoin() : nHeight(0) {}$/;"	f	struct:CCoin
CCoin	rest.cpp	/^    CCoin(Coin&& in) : nHeight(in.nHeight), out(std::move(in.out)) {}$/;"	f	struct:CCoin
CCoin	rest.cpp	/^struct CCoin {$/;"	s	file:
CCoinControl	wallet/coincontrol.h	/^    CCoinControl()$/;"	f	class:CCoinControl
CCoinControl	wallet/coincontrol.h	/^class CCoinControl$/;"	c
CCoinControlWidgetItem	qt/coincontroldialog.h	/^    CCoinControlWidgetItem(QTreeWidget *parent, int type = Type) : QTreeWidgetItem(parent, type) {}$/;"	f	class:CCoinControlWidgetItem
CCoinControlWidgetItem	qt/coincontroldialog.h	/^    CCoinControlWidgetItem(QTreeWidgetItem *parent, int type = Type) : QTreeWidgetItem(parent, type) {}$/;"	f	class:CCoinControlWidgetItem
CCoinControlWidgetItem	qt/coincontroldialog.h	/^    CCoinControlWidgetItem(int type = Type) : QTreeWidgetItem(type) {}$/;"	f	class:CCoinControlWidgetItem
CCoinControlWidgetItem	qt/coincontroldialog.h	/^class CCoinControlWidgetItem : public QTreeWidgetItem$/;"	c
CCoins	txdb.cpp	/^    CCoins() : fCoinBase(false), vout(0), nHeight(0) { }$/;"	f	class:__anon77::CCoins
CCoins	txdb.cpp	/^class CCoins$/;"	c	namespace:__anon77	file:
CCoinsCacheEntry	coins.h	/^    CCoinsCacheEntry() : flags(0) {}$/;"	f	struct:CCoinsCacheEntry
CCoinsCacheEntry	coins.h	/^    explicit CCoinsCacheEntry(Coin&& coin_) : coin(std::move(coin_)), flags(0) {}$/;"	f	struct:CCoinsCacheEntry
CCoinsCacheEntry	coins.h	/^struct CCoinsCacheEntry$/;"	s
CCoinsCaching	bench/ccoins_caching.cpp	/^BENCHMARK(CCoinsCaching);$/;"	v
CCoinsCaching	bench/ccoins_caching.cpp	/^static void CCoinsCaching(benchmark::State& state)$/;"	f	file:
CCoinsMap	coins.h	/^typedef std::unordered_map<COutPoint, CCoinsCacheEntry, SaltedOutpointHasher> CCoinsMap;$/;"	t
CCoinsStats	rpc/blockchain.cpp	/^    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nBogoSize(0), nDiskSize(0), nTotalAmount(0) {}$/;"	f	struct:CCoinsStats
CCoinsStats	rpc/blockchain.cpp	/^struct CCoinsStats$/;"	s	file:
CCoinsView	coins.h	/^class CCoinsView$/;"	c
CCoinsViewBacked	coins.cpp	/^CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }$/;"	f	class:CCoinsViewBacked
CCoinsViewBacked	coins.h	/^class CCoinsViewBacked : public CCoinsView$/;"	c
CCoinsViewCache	coins.cpp	/^CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}$/;"	f	class:CCoinsViewCache
CCoinsViewCache	coins.h	/^class CCoinsViewCache : public CCoinsViewBacked$/;"	c
CCoinsViewCacheTest	test/coins_tests.cpp	/^    CCoinsViewCacheTest(CCoinsView* _base) : CCoinsViewCache(_base) {}$/;"	f	class:__anon79::CCoinsViewCacheTest
CCoinsViewCacheTest	test/coins_tests.cpp	/^class CCoinsViewCacheTest : public CCoinsViewCache$/;"	c	namespace:__anon79	file:
CCoinsViewCursor	coins.h	/^    CCoinsViewCursor(const uint256 &hashBlockIn): hashBlock(hashBlockIn) {}$/;"	f	class:CCoinsViewCursor
CCoinsViewCursor	coins.h	/^class CCoinsViewCursor$/;"	c
CCoinsViewDB	txdb.cpp	/^CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() \/ "chainstate", nCacheSize, fMemory, fWipe, true) $/;"	f	class:CCoinsViewDB
CCoinsViewDB	txdb.h	/^class CCoinsViewDB : public CCoinsView$/;"	c
CCoinsViewDBCursor	txdb.h	/^    CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):$/;"	f	class:CCoinsViewDBCursor
CCoinsViewDBCursor	txdb.h	/^class CCoinsViewDBCursor: public CCoinsViewCursor$/;"	c
CCoinsViewErrorCatcher	init.cpp	/^    CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}$/;"	f	class:CCoinsViewErrorCatcher
CCoinsViewErrorCatcher	init.cpp	/^class CCoinsViewErrorCatcher : public CCoinsViewBacked$/;"	c	file:
CCoinsViewMemPool	txmempool.cpp	/^CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }$/;"	f	class:CCoinsViewMemPool
CCoinsViewMemPool	txmempool.h	/^class CCoinsViewMemPool : public CCoinsViewBacked$/;"	c
CCoinsViewTest	test/coins_tests.cpp	/^class CCoinsViewTest : public CCoinsView$/;"	c	namespace:__anon79	file:
CCombinedBan	qt/bantablemodel.h	/^struct CCombinedBan {$/;"	s
CCompactSize	serialize.h	/^    CCompactSize(uint64_t& nIn) : n(nIn) { }$/;"	f	class:CCompactSize
CCompactSize	serialize.h	/^class CCompactSize$/;"	c
CConditionVariable	sync.h	/^typedef boost::condition_variable CConditionVariable;$/;"	t
CConnectionFailed	wificoin-cli.cpp	/^    explicit inline CConnectionFailed(const std::string& msg) :$/;"	f	class:CConnectionFailed
CConnectionFailed	wificoin-cli.cpp	/^class CConnectionFailed : public std::runtime_error$/;"	c	file:
CConnman	net.cpp	/^CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSeed1(nSeed1In)$/;"	f	class:CConnman
CConnman	net.h	/^class CConnman$/;"	c
CConnmanTest	test/test_wificoin.h	/^struct CConnmanTest {$/;"	s
CCriticalBlock	sync.h	/^typedef CMutexLock<CCriticalSection> CCriticalBlock;$/;"	t
CCriticalSection	sync.h	/^class CCriticalSection : public AnnotatedMixin<boost::recursive_mutex>$/;"	c
CCrypter	wallet/crypter.h	/^    CCrypter()$/;"	f	class:CCrypter
CCrypter	wallet/crypter.h	/^class CCrypter$/;"	c
CCryptoKeyStore	wallet/crypter.h	/^    CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)$/;"	f	class:CCryptoKeyStore
CCryptoKeyStore	wallet/crypter.h	/^class CCryptoKeyStore : public CBasicKeyStore$/;"	c
CDB	wallet/db.cpp	/^CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr)$/;"	f	class:CDB
CDB	wallet/db.h	/^class CDB$/;"	c
CDBBatch	dbwrapper.h	/^    CDBBatch(const CDBWrapper &_parent) : parent(_parent), ssKey(SER_DISK, CLIENT_VERSION), ssValue(SER_DISK, CLIENT_VERSION), size_estimate(0) { };$/;"	f	class:CDBBatch
CDBBatch	dbwrapper.h	/^class CDBBatch$/;"	c
CDBEnv	wallet/db.cpp	/^CDBEnv::CDBEnv() : dbenv(nullptr)$/;"	f	class:CDBEnv
CDBEnv	wallet/db.h	/^class CDBEnv$/;"	c
CDBIterator	dbwrapper.h	/^    CDBIterator(const CDBWrapper &_parent, leveldb::Iterator *_piter) :$/;"	f	class:CDBIterator
CDBIterator	dbwrapper.h	/^class CDBIterator$/;"	c
CDBWrapper	dbwrapper.cpp	/^CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)$/;"	f	class:CDBWrapper
CDBWrapper	dbwrapper.h	/^class CDBWrapper$/;"	c
CDISKBLOCKINDEX_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CDISKBLOCKINDEX_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CDNSSeedData	chainparams.h	/^    CDNSSeedData(const std::string &strHost, bool supportsServiceBitsFilteringIn) : host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}$/;"	f	struct:CDNSSeedData
CDNSSeedData	chainparams.h	/^struct CDNSSeedData {$/;"	s
CDataStream	streams.h	/^    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(int nTypeIn, int nVersionIn, Args&&... args)$/;"	f	class:CDataStream
CDataStream	streams.h	/^    explicit CDataStream(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
CDataStream	streams.h	/^class CDataStream$/;"	c
CDiskBlockIndex	chain.h	/^    CDiskBlockIndex() {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	chain.h	/^    explicit CDiskBlockIndex(const CBlockIndex* pindex) : CBlockIndex(*pindex) {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	chain.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskBlockPos	chain.h	/^    CDiskBlockPos() {$/;"	f	struct:CDiskBlockPos
CDiskBlockPos	chain.h	/^    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {$/;"	f	struct:CDiskBlockPos
CDiskBlockPos	chain.h	/^struct CDiskBlockPos$/;"	s
CDiskTxPos	txdb.h	/^    CDiskTxPos() {$/;"	f	struct:CDiskTxPos
CDiskTxPos	txdb.h	/^    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {$/;"	f	struct:CDiskTxPos
CDiskTxPos	txdb.h	/^struct CDiskTxPos : public CDiskBlockPos$/;"	s
CENT	amount.h	/^static const CAmount CENT = 1000000;$/;"	v
CExtKey	key.h	/^struct CExtKey {$/;"	s
CExtPubKey	pubkey.h	/^struct CExtPubKey {$/;"	s
CFLAGS	Makefile	/^CFLAGS = -g -O2 -g3 -O0$/;"	m
CFLAGS	secp256k1/Makefile	/^CFLAGS = -g -O2 -W -std=c89 -pedantic -Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes -Wno-unused-function -Wno-long-long -Wno-overlength-strings -fvisibility=hidden -O3$/;"	m
CFLAGS	univalue/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS_FOR_BUILD	secp256k1/Makefile	/^CFLAGS_FOR_BUILD = -g -O2 $(am__append_9)$/;"	m
CFeeBumper	wallet/feebumper.cpp	/^CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee)$/;"	f	class:CFeeBumper
CFeeBumper	wallet/feebumper.h	/^class CFeeBumper$/;"	c
CFeeRate	policy/feerate.cpp	/^CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)$/;"	f	class:CFeeRate
CFeeRate	policy/feerate.h	/^    CFeeRate() : nSatoshisPerK(0) { }$/;"	f	class:CFeeRate
CFeeRate	policy/feerate.h	/^    CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }$/;"	f	class:CFeeRate
CFeeRate	policy/feerate.h	/^    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }$/;"	f	class:CFeeRate
CFeeRate	policy/feerate.h	/^class CFeeRate$/;"	c
CFlatData	serialize.h	/^    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }$/;"	f	class:CFlatData
CFlatData	serialize.h	/^    explicit CFlatData(prevector<N, T, S, D> &v)$/;"	f	class:CFlatData
CFlatData	serialize.h	/^    explicit CFlatData(std::vector<T,TAl> &v)$/;"	f	class:CFlatData
CFlatData	serialize.h	/^class CFlatData$/;"	c
CHAIN_STATE_SIZE	qt/intro.cpp	/^static const uint64_t CHAIN_STATE_SIZE = 3;$/;"	v	file:
CHAIN_SYNC_TIMEOUT	net_processing.h	/^static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; \/\/ 20 minutes$/;"	v
CHANNELS	qt/notificator.cpp	/^const int CHANNELS = 4;$/;"	v
CHARS_ALPHA_NUM	utilstrencodings.cpp	/^static const std::string CHARS_ALPHA_NUM = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";$/;"	v	file:
CHDChain	wallet/walletdb.h	/^    CHDChain() { SetNull(); }$/;"	f	class:CHDChain
CHDChain	wallet/walletdb.h	/^class CHDChain$/;"	c
CHECK	secp256k1/src/util.h	46;"	d
CHECK	secp256k1/src/util.h	52;"	d
CHECKASSIGNMENTOPERATOR	test/arith_uint256_tests.cpp	227;"	d	file:
CHECKBITWISEOPERATOR	test/arith_uint256_tests.cpp	223;"	d	file:
CHECKERS	test/versionbits_tests.cpp	35;"	d	file:
CHECKSUM_OFFSET	protocol.h	/^        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,$/;"	e	enum:CMessageHeader::__anon48
CHECKSUM_SIZE	protocol.h	/^        CHECKSUM_SIZE = 4,$/;"	e	enum:CMessageHeader::__anon48
CHMAC_SHA256	crypto/hmac_sha256.cpp	/^CHMAC_SHA256::CHMAC_SHA256(const unsigned char* key, size_t keylen)$/;"	f	class:CHMAC_SHA256
CHMAC_SHA256	crypto/hmac_sha256.h	/^class CHMAC_SHA256$/;"	c
CHMAC_SHA512	crypto/hmac_sha512.cpp	/^CHMAC_SHA512::CHMAC_SHA512(const unsigned char* key, size_t keylen)$/;"	f	class:CHMAC_SHA512
CHMAC_SHA512	crypto/hmac_sha512.h	/^class CHMAC_SHA512$/;"	c
CHash160	hash.h	/^class CHash160 {$/;"	c
CHash256	hash.h	/^class CHash256 {$/;"	c
CHashVerifier	hash.h	/^    CHashVerifier(Source* source_) : CHashWriter(source_->GetType(), source_->GetVersion()), source(source_) {}$/;"	f	class:CHashVerifier
CHashVerifier	hash.h	/^class CHashVerifier : public CHashWriter$/;"	c
CHashWriter	hash.h	/^    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}$/;"	f	class:CHashWriter
CHashWriter	hash.h	/^class CHashWriter$/;"	c
CINV_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CINV_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CImportingNow	init.cpp	/^    CImportingNow() {$/;"	f	struct:CImportingNow
CImportingNow	init.cpp	/^struct CImportingNow$/;"	s	file:
CInit	util.cpp	/^    CInit()$/;"	f	class:CInit
CInit	util.cpp	/^class CInit$/;"	c	file:
CInputCoin	wallet/wallet.h	/^    CInputCoin(const CWalletTx* walletTx, unsigned int i)$/;"	f	class:CInputCoin
CInputCoin	wallet/wallet.h	/^class CInputCoin {$/;"	c
CInv	protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(int typeIn, const uint256& hashIn) : type(typeIn), hash(hashIn) {}$/;"	f	class:CInv
CInv	protocol.h	/^class CInv$/;"	c
CKey	key.h	/^    CKey() : fValid(false), fCompressed(false)$/;"	f	class:CKey
CKey	key.h	/^class CKey$/;"	c
CKeyID	pubkey.h	/^    CKeyID() : uint160() {}$/;"	f	class:CKeyID
CKeyID	pubkey.h	/^    CKeyID(const uint160& in) : uint160(in) {}$/;"	f	class:CKeyID
CKeyID	pubkey.h	/^class CKeyID : public uint160$/;"	c
CKeyMetadata	wallet/walletdb.h	/^    CKeyMetadata()$/;"	f	class:CKeyMetadata
CKeyMetadata	wallet/walletdb.h	/^    CKeyMetadata(int64_t nCreateTime_)$/;"	f	class:CKeyMetadata
CKeyMetadata	wallet/walletdb.h	/^class CKeyMetadata$/;"	c
CKeyPool	wallet/wallet.cpp	/^CKeyPool::CKeyPool()$/;"	f	class:CKeyPool
CKeyPool	wallet/wallet.cpp	/^CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)$/;"	f	class:CKeyPool
CKeyPool	wallet/wallet.h	/^class CKeyPool$/;"	c
CKeyStore	keystore.h	/^class CKeyStore$/;"	c
CKeyingMaterial	keystore.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CKeyingMaterial	wallet/crypter.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLASSPATH_ENV	secp256k1/Makefile	/^CLASSPATH_ENV = CLASSPATH=$(JAVA_GUAVA)$/;"	m
CLEANFILES	Makefile	/^CLEANFILES = $(EXTRA_LIBRARIES) *.gcda *.gcno compat\/*.gcda \\$/;"	m
CLEANFILES	secp256k1/Makefile	/^CLEANFILES = $(gen_context_BIN) src\/ecmult_static_context.h $(JAVAROOT)\/$(JAVAORG)\/*.class .stamp-java$/;"	m
CLEAN_WIFICOIN_BENCH	Makefile	/^CLEAN_WIFICOIN_BENCH = bench\/*.gcda bench\/*.gcno $(GENERATED_TEST_FILES)$/;"	m
CLEAN_WIFICOIN_TEST	Makefile	/^CLEAN_WIFICOIN_TEST = test\/*.gcda test\/*.gcno $(GENERATED_TEST_FILES)$/;"	m
CLEAN_FLAGS	test/coins_tests.cpp	/^const static auto CLEAN_FLAGS = {char(0), FRESH};$/;"	v	file:
CLIENT_VERSION	clientversion.h	/^static const int CLIENT_VERSION =$/;"	v
CLIENT_VERSION_BUILD	Makefile	/^CLIENT_VERSION_BUILD = 0$/;"	m
CLIENT_VERSION_BUILD	config/wificoin-config.h	12;"	d
CLIENT_VERSION_IS_RELEASE	Makefile	/^CLIENT_VERSION_IS_RELEASE = true$/;"	m
CLIENT_VERSION_IS_RELEASE	config/wificoin-config.h	15;"	d
CLIENT_VERSION_MAJOR	Makefile	/^CLIENT_VERSION_MAJOR = 0$/;"	m
CLIENT_VERSION_MAJOR	config/wificoin-config.h	18;"	d
CLIENT_VERSION_MINOR	Makefile	/^CLIENT_VERSION_MINOR = 15$/;"	m
CLIENT_VERSION_MINOR	config/wificoin-config.h	21;"	d
CLIENT_VERSION_REVISION	Makefile	/^CLIENT_VERSION_REVISION = 1$/;"	m
CLIENT_VERSION_REVISION	config/wificoin-config.h	24;"	d
CLIENT_VERSION_SUFFIX	clientversion.cpp	21;"	d	file:
CLockLocation	sync.cpp	/^    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)$/;"	f	struct:CLockLocation
CLockLocation	sync.cpp	/^struct CLockLocation {$/;"	s	file:
CLogCategoryActive	util.h	/^struct CLogCategoryActive$/;"	s
CLogCategoryDesc	util.cpp	/^struct CLogCategoryDesc$/;"	s	file:
CMDUNSUPPORTED	netbase.cpp	/^    CMDUNSUPPORTED = 0x07,   \/\/! Command not supported$/;"	e	enum:uint8_t	file:
CMD_ERROR	qt/rpcconsole.h	/^        CMD_ERROR$/;"	e	enum:RPCConsole::MessageClass
CMD_REPLY	qt/rpcconsole.h	/^        CMD_REPLY,$/;"	e	enum:RPCConsole::MessageClass
CMD_REQUEST	qt/rpcconsole.h	/^        CMD_REQUEST,$/;"	e	enum:RPCConsole::MessageClass
CMESSAGEHEADER_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CMESSAGEHEADER_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CMPCTBLOCK	protocol.cpp	/^const char *CMPCTBLOCK="cmpctblock";$/;"	m	namespace:NetMsgType	file:
CMainCleanup	validation.cpp	/^    CMainCleanup() {}$/;"	f	class:CMainCleanup
CMainCleanup	validation.cpp	/^class CMainCleanup$/;"	c	file:
CMainParams	chainparams.cpp	/^    CMainParams() {$/;"	f	class:CMainParams
CMainParams	chainparams.cpp	/^class CMainParams : public CChainParams {$/;"	c	file:
CMainSignals	validationinterface.h	/^class CMainSignals {$/;"	c
CMasterKey	wallet/crypter.h	/^    CMasterKey()$/;"	f	class:CMasterKey
CMasterKey	wallet/crypter.h	/^class CMasterKey$/;"	c
CMedianFilter	timedata.h	/^    CMedianFilter(unsigned int _size, T initial_value) : nSize(_size)$/;"	f	class:CMedianFilter
CMedianFilter	timedata.h	/^class CMedianFilter$/;"	c
CMerkleBlock	merkleblock.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)$/;"	f	class:CMerkleBlock
CMerkleBlock	merkleblock.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)$/;"	f	class:CMerkleBlock
CMerkleBlock	merkleblock.h	/^    CMerkleBlock() {}$/;"	f	class:CMerkleBlock
CMerkleBlock	merkleblock.h	/^class CMerkleBlock$/;"	c
CMerkleTx	wallet/wallet.h	/^    CMerkleTx()$/;"	f	class:CMerkleTx
CMerkleTx	wallet/wallet.h	/^    CMerkleTx(CTransactionRef arg)$/;"	f	class:CMerkleTx
CMerkleTx	wallet/wallet.h	/^class CMerkleTx$/;"	c
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)$/;"	f	class:CMessageHeader
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CMessageHeader	protocol.h	/^class CMessageHeader$/;"	c
CMutableTransaction	primitives/transaction.cpp	/^CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}$/;"	f	class:CMutableTransaction
CMutableTransaction	primitives/transaction.cpp	/^CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}$/;"	f	class:CMutableTransaction
CMutableTransaction	primitives/transaction.h	/^    CMutableTransaction(deserialize_type, Stream& s) {$/;"	f	struct:CMutableTransaction
CMutableTransaction	primitives/transaction.h	/^struct CMutableTransaction$/;"	s
CMutexLock	sync.h	/^class SCOPED_LOCKABLE CMutexLock$/;"	c
CNETADDR_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CNETADDR_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CNetAddr	netaddress.cpp	/^CNetAddr::CNetAddr()$/;"	f	class:CNetAddr
CNetAddr	netaddress.cpp	/^CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope)$/;"	f	class:CNetAddr
CNetAddr	netaddress.cpp	/^CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)$/;"	f	class:CNetAddr
CNetAddr	netaddress.h	/^class CNetAddr$/;"	c
CNetCleanup	net.cpp	/^    CNetCleanup() {}$/;"	f	class:CNetCleanup
CNetCleanup	net.cpp	/^class CNetCleanup$/;"	c	file:
CNetMessage	net.h	/^    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {$/;"	f	class:CNetMessage
CNetMessage	net.h	/^class CNetMessage {$/;"	c
CNetMsgMaker	netmessagemaker.h	/^    CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}$/;"	f	class:CNetMsgMaker
CNetMsgMaker	netmessagemaker.h	/^class CNetMsgMaker$/;"	c
CNetProcessingCleanup	net_processing.cpp	/^    CNetProcessingCleanup() {}$/;"	f	class:CNetProcessingCleanup
CNetProcessingCleanup	net_processing.cpp	/^class CNetProcessingCleanup$/;"	c	file:
CNoDestination	script/standard.h	/^class CNoDestination {$/;"	c
CNode	net.cpp	/^CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string& addrNameIn, bool fInboundIn) :$/;"	f	class:CNode
CNode	net.h	/^class CNode$/;"	c
CNodeCombinedStats	qt/peertablemodel.h	/^struct CNodeCombinedStats {$/;"	s
CNodeState	net_processing.cpp	/^    CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {$/;"	f	struct:__anon50::CNodeState
CNodeState	net_processing.cpp	/^struct CNodeState {$/;"	s	namespace:__anon50	file:
CNodeStateStats	net_processing.h	/^struct CNodeStateStats {$/;"	s
CNodeStats	net.h	/^class CNodeStats$/;"	c
COIN	amount.h	/^static const CAmount COIN = 100000000;$/;"	v
COINBASE_FLAGS	validation.cpp	/^CScript COINBASE_FLAGS;$/;"	v
COINBASE_MATURITY	consensus/consensus.h	/^static const int COINBASE_MATURITY = 100;$/;"	v
COLOR_BAREADDRESS	qt/guiconstants.h	27;"	d
COLOR_BLACK	qt/guiconstants.h	35;"	d
COLOR_NEGATIVE	qt/guiconstants.h	25;"	d
COLOR_TX_STATUS_DANGER	qt/guiconstants.h	33;"	d
COLOR_TX_STATUS_OFFLINE	qt/guiconstants.h	31;"	d
COLOR_TX_STATUS_OPENUNTILDATE	qt/guiconstants.h	29;"	d
COLOR_UNCONFIRMED	qt/guiconstants.h	23;"	d
COLUMN_ADDRESS	qt/coincontroldialog.h	/^        COLUMN_ADDRESS,$/;"	e	enum:CoinControlDialog::__anon106
COLUMN_AMOUNT	qt/coincontroldialog.h	/^        COLUMN_AMOUNT,$/;"	e	enum:CoinControlDialog::__anon106
COLUMN_CHECKBOX	qt/coincontroldialog.h	/^        COLUMN_CHECKBOX = 0,$/;"	e	enum:CoinControlDialog::__anon106
COLUMN_CONFIRMATIONS	qt/coincontroldialog.h	/^        COLUMN_CONFIRMATIONS,$/;"	e	enum:CoinControlDialog::__anon106
COLUMN_DATE	qt/coincontroldialog.h	/^        COLUMN_DATE,$/;"	e	enum:CoinControlDialog::__anon106
COLUMN_LABEL	qt/coincontroldialog.h	/^        COLUMN_LABEL,$/;"	e	enum:CoinControlDialog::__anon106
COLUMN_TXHASH	qt/coincontroldialog.h	/^        COLUMN_TXHASH,$/;"	e	enum:CoinControlDialog::__anon106
COLUMN_VOUT_INDEX	qt/coincontroldialog.h	/^        COLUMN_VOUT_INDEX,$/;"	e	enum:CoinControlDialog::__anon106
COMMAND_SIZE	protocol.h	/^        COMMAND_SIZE = 12,$/;"	e	enum:CMessageHeader::__anon48
COMMON_LIB	secp256k1/Makefile	/^COMMON_LIB = $/;"	m
COMPACTSIZE	serialize.h	356;"	d
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	secp256k1/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	secp256k1/Makefile	/^CONFIG_CLEAN_FILES = libsecp256k1.pc$/;"	m
CONFIG_CLEAN_FILES	univalue/Makefile	/^CONFIG_CLEAN_FILES = pc\/libunivalue.pc pc\/libunivalue-uninstalled.pc$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	secp256k1/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	univalue/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/config\/wificoin-config.h$/;"	m
CONFIG_HEADER	secp256k1/Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/libsecp256k1-config.h$/;"	m
CONFIG_HEADER	univalue/Makefile	/^CONFIG_HEADER = univalue-config.h$/;"	m
CONFLICT	txmempool.h	/^    CONFLICT,    \/\/! Removed for conflict with in-block transaction$/;"	m	class:MemPoolRemovalReason
CONNECT	netbase.cpp	/^    CONNECT = 0x01,$/;"	e	enum:uint8_t	file:
CONNECTIONS_ALL	net.h	/^        CONNECTIONS_ALL = (CONNECTIONS_IN | CONNECTIONS_OUT),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_ALL	qt/clientmodel.h	/^    CONNECTIONS_ALL  = (CONNECTIONS_IN | CONNECTIONS_OUT),$/;"	e	enum:NumConnections
CONNECTIONS_IN	net.h	/^        CONNECTIONS_IN = (1U << 0),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_IN	qt/clientmodel.h	/^    CONNECTIONS_IN   = (1U << 0),$/;"	e	enum:NumConnections
CONNECTIONS_NONE	net.h	/^        CONNECTIONS_NONE = 0,$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_NONE	qt/clientmodel.h	/^    CONNECTIONS_NONE = 0,$/;"	e	enum:NumConnections
CONNECTIONS_OUT	net.h	/^        CONNECTIONS_OUT = (1U << 1),$/;"	e	enum:CConnman::NumConnections
CONNECTIONS_OUT	qt/clientmodel.h	/^    CONNECTIONS_OUT  = (1U << 1),$/;"	e	enum:NumConnections
CONNREFUSED	netbase.cpp	/^    CONNREFUSED = 0x05,      \/\/! Connection refused$/;"	e	enum:uint8_t	file:
CONSERVATIVE	policy/fees.h	/^    CONSERVATIVE, \/\/! Force estimateSmartFee to use conservative estimates$/;"	m	class:FeeEstimateMode
CONSERVATIVE	policy/fees.h	/^    CONSERVATIVE,$/;"	m	class:FeeReason
CONSOLE_HISTORY	qt/rpcconsole.cpp	/^const int CONSOLE_HISTORY = 50;$/;"	v
CONTINUE_EXECUTION	wificoin-cli.cpp	/^static const int CONTINUE_EXECUTION=-1;$/;"	v	file:
CONTINUE_EXECUTION	wificoin-tx.cpp	/^static const int CONTINUE_EXECUTION=-1;$/;"	v	file:
COOKIEAUTH_FILE	rpc/protocol.cpp	/^static const std::string COOKIEAUTH_FILE = ".cookie";$/;"	v	file:
COOKIEAUTH_USER	rpc/protocol.cpp	/^static const std::string COOKIEAUTH_USER = "__cookie__";$/;"	v	file:
COPYRIGHT_HOLDERS	Makefile	/^COPYRIGHT_HOLDERS = The %s developers$/;"	m
COPYRIGHT_HOLDERS	config/wificoin-config.h	27;"	d
COPYRIGHT_HOLDERS_FINAL	Makefile	/^COPYRIGHT_HOLDERS_FINAL = The WiFicoin Core developers$/;"	m
COPYRIGHT_HOLDERS_FINAL	config/wificoin-config.h	30;"	d
COPYRIGHT_HOLDERS_SUBSTITUTION	Makefile	/^COPYRIGHT_HOLDERS_SUBSTITUTION = WiFicoin Core$/;"	m
COPYRIGHT_HOLDERS_SUBSTITUTION	config/wificoin-config.h	33;"	d
COPYRIGHT_STR	clientversion.h	25;"	d
COPYRIGHT_YEAR	Makefile	/^COPYRIGHT_YEAR = 2017$/;"	m
COPYRIGHT_YEAR	config/wificoin-config.h	36;"	d
COrphanTx	net_processing.cpp	/^struct COrphanTx {$/;"	s	file:
COrphanTx	test/DoS_tests.cpp	/^struct COrphanTx {$/;"	s	file:
COutPoint	primitives/transaction.h	/^    COutPoint(): n((uint32_t) -1) { }$/;"	f	class:COutPoint
COutPoint	primitives/transaction.h	/^    COutPoint(const uint256& hashIn, uint32_t nIn): hash(hashIn), n(nIn) { }$/;"	f	class:COutPoint
COutPoint	primitives/transaction.h	/^class COutPoint$/;"	c
COutput	wallet/wallet.h	/^    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fSafeIn)$/;"	f	class:COutput
COutput	wallet/wallet.h	/^class COutput$/;"	c
COutputEntry	wallet/wallet.h	/^struct COutputEntry$/;"	s
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPP	secp256k1/Makefile	/^CPP = gcc -E$/;"	m
CPP	univalue/Makefile	/^CPP = gcc -E$/;"	m
CPPFILT	Makefile	/^CPPFILT = \/usr\/bin\/c++filt$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS =  -DDEBUG -DDEBUG_LOCKORDER -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS$/;"	m
CPPFLAGS	secp256k1/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	univalue/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS_FOR_BUILD	secp256k1/Makefile	/^CPPFLAGS_FOR_BUILD =  $(am__append_8)$/;"	m
CPP_FOR_BUILD	secp256k1/Makefile	/^CPP_FOR_BUILD = gcc -E$/;"	m
CPUID_F1_ECX_RDRAND	random.cpp	/^static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;$/;"	v	file:
CPartialMerkleTree	merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	merkleblock.h	/^class CPartialMerkleTree$/;"	c
CPartialMerkleTreeTester	test/pmt_tests.cpp	/^class CPartialMerkleTreeTester : public CPartialMerkleTree$/;"	c	file:
CPrivKey	key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CPubKey	pubkey.h	/^    CPubKey()$/;"	f	class:CPubKey
CPubKey	pubkey.h	/^    CPubKey(const T pbegin, const T pend)$/;"	f	class:CPubKey
CPubKey	pubkey.h	/^    CPubKey(const std::vector<unsigned char>& _vch)$/;"	f	class:CPubKey
CPubKey	pubkey.h	/^class CPubKey$/;"	c
CRC	leveldb/util/crc32c_test.cc	/^class CRC { };$/;"	c	namespace:leveldb::crc32c	file:
CRIPEMD160	crypto/ripemd160.cpp	/^CRIPEMD160::CRIPEMD160() : bytes(0)$/;"	f	class:CRIPEMD160
CRIPEMD160	crypto/ripemd160.h	/^class CRIPEMD160$/;"	c
CRPCCommand	rpc/server.h	/^class CRPCCommand$/;"	c
CRPCConvertParam	rpc/client.cpp	/^class CRPCConvertParam$/;"	c	file:
CRPCConvertTable	rpc/client.cpp	/^CRPCConvertTable::CRPCConvertTable()$/;"	f	class:CRPCConvertTable
CRPCConvertTable	rpc/client.cpp	/^class CRPCConvertTable$/;"	c	file:
CRPCSignals	rpc/server.cpp	/^static struct CRPCSignals$/;"	s	file:
CRPCTable	rpc/server.cpp	/^CRPCTable::CRPCTable()$/;"	f	class:CRPCTable
CRPCTable	rpc/server.h	/^class CRPCTable$/;"	c
CRYPTO_CFLAGS	Makefile	/^CRYPTO_CFLAGS =  $/;"	m
CRYPTO_CFLAGS	secp256k1/Makefile	/^CRYPTO_CFLAGS =  $/;"	m
CRYPTO_LIBS	Makefile	/^CRYPTO_LIBS = -lcrypto  $/;"	m
CRYPTO_LIBS	secp256k1/Makefile	/^CRYPTO_LIBS = -lcrypto  $/;"	m
CRecipient	wallet/wallet.h	/^struct CRecipient$/;"	s
CRegTestParams	chainparams.cpp	/^    CRegTestParams() {$/;"	f	class:CRegTestParams
CRegTestParams	chainparams.cpp	/^class CRegTestParams : public CChainParams {$/;"	c	file:
CReserveKey	wallet/wallet.h	/^    CReserveKey(CWallet* pwalletIn)$/;"	f	class:CReserveKey
CReserveKey	wallet/wallet.h	/^class CReserveKey : public CReserveScript$/;"	c
CReserveScript	script/script.h	/^    CReserveScript() {}$/;"	f	class:CReserveScript
CReserveScript	script/script.h	/^class CReserveScript$/;"	c
CRollingBloomFilter	bloom.cpp	/^CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const double fpRate)$/;"	f	class:CRollingBloomFilter
CRollingBloomFilter	bloom.h	/^class CRollingBloomFilter$/;"	c
CSCOPE	secp256k1/Makefile	/^CSCOPE = cscope$/;"	m
CSCOPE	univalue/Makefile	/^CSCOPE = cscope$/;"	m
CSERVICE_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CSERVICE_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CSHA1	crypto/sha1.cpp	/^CSHA1::CSHA1() : bytes(0)$/;"	f	class:CSHA1
CSHA1	crypto/sha1.h	/^class CSHA1$/;"	c
CSHA256	crypto/sha256.cpp	/^CSHA256::CSHA256() : bytes(0)$/;"	f	class:CSHA256
CSHA256	crypto/sha256.h	/^class CSHA256$/;"	c
CSHA512	crypto/sha512.cpp	/^CSHA512::CSHA512() : bytes(0)$/;"	f	class:CSHA512
CSHA512	crypto/sha512.h	/^class CSHA512$/;"	c
CSVModelWriter	qt/csvmodelwriter.cpp	/^CSVModelWriter::CSVModelWriter(const QString &_filename, QObject *parent) :$/;"	f	class:CSVModelWriter
CSVModelWriter	qt/csvmodelwriter.h	/^class CSVModelWriter : public QObject$/;"	c
CScheduler	scheduler.cpp	/^CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)$/;"	f	class:CScheduler
CScheduler	scheduler.h	/^class CScheduler$/;"	c
CScript	script/script.h	/^    CScript() { }$/;"	f	class:CScript
CScript	script/script.h	/^    CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }$/;"	f	class:CScript
CScript	script/script.h	/^    CScript(const_iterator pbegin, const_iterator pend) : CScriptBase(pbegin, pend) { }$/;"	f	class:CScript
CScript	script/script.h	/^    CScript(int64_t b)        { operator<<(b); }$/;"	f	class:CScript
CScript	script/script.h	/^    CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }$/;"	f	class:CScript
CScript	script/script.h	/^    explicit CScript(const CScriptNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script/script.h	/^    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script/script.h	/^    explicit CScript(opcodetype b)     { operator<<(b); }$/;"	f	class:CScript
CScript	script/script.h	/^class CScript : public CScriptBase$/;"	c
CScriptBase	script/script.h	/^typedef prevector<28, unsigned char> CScriptBase;$/;"	t
CScriptCheck	validation.h	/^    CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}$/;"	f	class:CScriptCheck
CScriptCheck	validation.h	/^    CScriptCheck(const CScript& scriptPubKeyIn, const CAmount amountIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :$/;"	f	class:CScriptCheck
CScriptCheck	validation.h	/^class CScriptCheck$/;"	c
CScriptCompressor	compressor.h	/^    CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }$/;"	f	class:CScriptCompressor
CScriptCompressor	compressor.h	/^class CScriptCompressor$/;"	c
CScriptID	script/standard.cpp	/^CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}$/;"	f	class:CScriptID
CScriptID	script/standard.h	/^    CScriptID() : uint160() {}$/;"	f	class:CScriptID
CScriptID	script/standard.h	/^    CScriptID(const uint160& in) : uint160(in) {}$/;"	f	class:CScriptID
CScriptID	script/standard.h	/^class CScriptID : public uint160$/;"	c
CScriptNum	script/script.h	/^    explicit CScriptNum(const int64_t& n)$/;"	f	class:CScriptNum
CScriptNum	script/script.h	/^    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,$/;"	f	class:CScriptNum
CScriptNum	script/script.h	/^class CScriptNum$/;"	c
CScriptNum10	test/scriptnum10.h	/^    explicit CScriptNum10(const int64_t& n)$/;"	f	class:CScriptNum10
CScriptNum10	test/scriptnum10.h	/^    explicit CScriptNum10(const std::vector<unsigned char>& vch, bool fRequireMinimal,$/;"	f	class:CScriptNum10
CScriptNum10	test/scriptnum10.h	/^class CScriptNum10$/;"	c
CScriptVisitor	script/standard.cpp	/^    CScriptVisitor(CScript *scriptin) { script = scriptin; }$/;"	f	class:__anon104::CScriptVisitor
CScriptVisitor	script/standard.cpp	/^class CScriptVisitor : public boost::static_visitor<bool>$/;"	c	namespace:__anon104	file:
CScriptWitness	script/script.h	/^    CScriptWitness() { }$/;"	f	struct:CScriptWitness
CScriptWitness	script/script.h	/^struct CScriptWitness$/;"	s
CSemaphore	sync.h	/^    CSemaphore(int init) : value(init) {}$/;"	f	class:CSemaphore
CSemaphore	sync.h	/^class CSemaphore$/;"	c
CSemaphoreGrant	sync.h	/^    CSemaphoreGrant() : sem(nullptr), fHaveGrant(false) {}$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^    CSemaphoreGrant(CSemaphore& sema, bool fTry = false) : sem(&sema), fHaveGrant(false)$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^class CSemaphoreGrant$/;"	c
CSerActionSerialize	serialize.h	/^struct CSerActionSerialize$/;"	s
CSerActionUnserialize	serialize.h	/^struct CSerActionUnserialize$/;"	s
CSerializeData	support/allocators/zeroafterfree.h	/^typedef std::vector<char, zero_after_free_allocator<char> > CSerializeData;$/;"	t
CSerializeMethodsTestMany	test/serialize_tests.cpp	/^class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle$/;"	c	file:
CSerializeMethodsTestSingle	test/serialize_tests.cpp	/^    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, CTransaction txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), charstrval(charstrvalin), txval(MakeTransactionRef(txvalin)){}$/;"	f	class:CSerializeMethodsTestSingle
CSerializeMethodsTestSingle	test/serialize_tests.cpp	/^class CSerializeMethodsTestSingle$/;"	c	file:
CSerializedNetMsg	net.h	/^struct CSerializedNetMsg$/;"	s
CService	netaddress.cpp	/^CService::CService()$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), port(ntohs(addr.sin_port))$/;"	f	class:CService
CService	netaddress.cpp	/^CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr, addr.sin6_scope_id), port(ntohs(addr.sin6_port))$/;"	f	class:CService
CService	netaddress.h	/^class CService : public CNetAddr$/;"	c
CSignatureCache	script/sigcache.cpp	/^    CSignatureCache()$/;"	f	class:__anon96::CSignatureCache
CSignatureCache	script/sigcache.cpp	/^class CSignatureCache$/;"	c	namespace:__anon96	file:
CSipHasher	hash.cpp	/^CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)$/;"	f	class:CSipHasher
CSipHasher	hash.h	/^class CSipHasher$/;"	c
CSizeComputer	serialize.h	/^    CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}$/;"	f	class:CSizeComputer
CSizeComputer	serialize.h	/^class CSizeComputer$/;"	c
CSubNet	netaddress.cpp	/^CSubNet::CSubNet():$/;"	f	class:CSubNet
CSubNet	netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr):$/;"	f	class:CSubNet
CSubNet	netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr, const CNetAddr &mask)$/;"	f	class:CSubNet
CSubNet	netaddress.cpp	/^CSubNet::CSubNet(const CNetAddr &addr, int32_t mask)$/;"	f	class:CSubNet
CSubNet	netaddress.h	/^class CSubNet$/;"	c
CTAES_DIST	Makefile	/^CTAES_DIST = crypto\/ctaes\/bench.c crypto\/ctaes\/ctaes.c \\$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTAGS	secp256k1/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	univalue/Makefile	/^CTAGS = ctags$/;"	m
CTRANSACTION_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CTRANSACTION_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CTXOUTCOMPRESSOR_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CTXOUTCOMPRESSOR_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CTXUNDO_DESERIALIZE	test/test_wificoin_fuzzy.cpp	/^    CTXUNDO_DESERIALIZE,$/;"	e	enum:TEST_ID	file:
CT_DELETED	ui_interface.h	/^    CT_DELETED$/;"	e	enum:ChangeType
CT_NEW	ui_interface.h	/^    CT_NEW,$/;"	e	enum:ChangeType
CT_UPDATED	ui_interface.h	/^    CT_UPDATED,$/;"	e	enum:ChangeType
CTestNetParams	chainparams.cpp	/^    CTestNetParams() {$/;"	f	class:CTestNetParams
CTestNetParams	chainparams.cpp	/^class CTestNetParams : public CChainParams {$/;"	c	file:
CThreadInterrupt	threadinterrupt.h	/^class CThreadInterrupt$/;"	c
CTransaction	primitives/transaction.cpp	/^CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0), hash() {}$/;"	f	class:CTransaction
CTransaction	primitives/transaction.cpp	/^CTransaction::CTransaction(CMutableTransaction &&tx) : nVersion(tx.nVersion), vin(std::move(tx.vin)), vout(std::move(tx.vout)), nLockTime(tx.nLockTime), hash(ComputeHash()) {}$/;"	f	class:CTransaction
CTransaction	primitives/transaction.cpp	/^CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime), hash(ComputeHash()) {}$/;"	f	class:CTransaction
CTransaction	primitives/transaction.h	/^    CTransaction(deserialize_type, Stream& s) : CTransaction(CMutableTransaction(deserialize, s)) {}$/;"	f	class:CTransaction
CTransaction	primitives/transaction.h	/^class CTransaction$/;"	c
CTransactionRef	primitives/transaction.h	/^typedef std::shared_ptr<const CTransaction> CTransactionRef;$/;"	t
CTransactionSignatureSerializer	script/interpreter.cpp	/^    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :$/;"	f	class:__anon99::CTransactionSignatureSerializer
CTransactionSignatureSerializer	script/interpreter.cpp	/^class CTransactionSignatureSerializer {$/;"	c	namespace:__anon99	file:
CTranslationInterface	util.h	/^class CTranslationInterface$/;"	c
CTxDestination	script/standard.h	/^typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;$/;"	t
CTxIn	primitives/transaction.cpp	/^CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)$/;"	f	class:CTxIn
CTxIn	primitives/transaction.cpp	/^CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)$/;"	f	class:CTxIn
CTxIn	primitives/transaction.h	/^    CTxIn()$/;"	f	class:CTxIn
CTxIn	primitives/transaction.h	/^class CTxIn$/;"	c
CTxMemPool	txmempool.cpp	/^CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :$/;"	f	class:CTxMemPool
CTxMemPool	txmempool.h	/^class CTxMemPool$/;"	c
CTxMemPoolEntry	txmempool.cpp	/^CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,$/;"	f	class:CTxMemPoolEntry
CTxMemPoolEntry	txmempool.cpp	/^CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)$/;"	f	class:CTxMemPoolEntry
CTxMemPoolEntry	txmempool.h	/^class CTxMemPoolEntry$/;"	c
CTxMemPoolModifiedEntry	miner.h	/^    CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)$/;"	f	struct:CTxMemPoolModifiedEntry
CTxMemPoolModifiedEntry	miner.h	/^struct CTxMemPoolModifiedEntry {$/;"	s
CTxOut	primitives/transaction.cpp	/^CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)$/;"	f	class:CTxOut
CTxOut	primitives/transaction.h	/^    CTxOut()$/;"	f	class:CTxOut
CTxOut	primitives/transaction.h	/^class CTxOut$/;"	c
CTxOutCompressor	compressor.h	/^    CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }$/;"	f	class:CTxOutCompressor
CTxOutCompressor	compressor.h	/^class CTxOutCompressor$/;"	c
CTxUndo	undo.h	/^class CTxUndo$/;"	c
CURRENCY_UNIT	policy/feerate.cpp	/^const std::string CURRENCY_UNIT = "WFC";$/;"	v
CURRENT_VERSION	addrdb.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CBanEntry
CURRENT_VERSION	primitives/transaction.h	/^    static const int32_t CURRENT_VERSION=2;$/;"	m	class:CTransaction
CURRENT_VERSION	qt/recentrequeststablemodel.h	/^    static const int CURRENT_VERSION = 1;$/;"	m	class:RecentRequestEntry
CURRENT_VERSION	qt/walletmodel.h	/^    static const int CURRENT_VERSION = 1;$/;"	m	class:SendCoinsRecipient
CURRENT_VERSION	wallet/walletdb.h	/^    static const int CURRENT_VERSION        = VERSION_HD_CHAIN_SPLIT;$/;"	m	class:CHDChain
CURRENT_VERSION	wallet/walletdb.h	/^    static const int CURRENT_VERSION=VERSION_WITH_HDDATA;$/;"	m	class:CKeyMetadata
CURVE_B	secp256k1/src/group_impl.h	/^const int CURVE_B = 2;$/;"	v
CURVE_B	secp256k1/src/group_impl.h	/^const int CURVE_B = 4;$/;"	v
CURVE_B	secp256k1/src/group_impl.h	/^const int CURVE_B = 7;$/;"	v
CUpdatedBlock	rpc/blockchain.cpp	/^struct CUpdatedBlock$/;"	s	file:
CValidationInterface	validationinterface.h	/^class CValidationInterface {$/;"	c
CValidationState	consensus/validation.h	/^    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}$/;"	f	class:CValidationState
CValidationState	consensus/validation.h	/^class CValidationState {$/;"	c
CVarInt	serialize.h	/^    CVarInt(I& nIn) : n(nIn) { }$/;"	f	class:CVarInt
CVarInt	serialize.h	/^class CVarInt$/;"	c
CVectorWriter	streams.h	/^    CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn) : nType(nTypeIn), nVersion(nVersionIn), vchData(vchDataIn), nPos(nPosIn)$/;"	f	class:CVectorWriter
CVectorWriter	streams.h	/^    CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn, Args&&... args) : CVectorWriter(nTypeIn, nVersionIn, vchDataIn, nPosIn)$/;"	f	class:CVectorWriter
CVectorWriter	streams.h	/^class CVectorWriter$/;"	c
CVerifyDB	validation.cpp	/^CVerifyDB::CVerifyDB()$/;"	f	class:CVerifyDB
CVerifyDB	validation.h	/^class CVerifyDB {$/;"	c
CWaitableCriticalSection	sync.h	/^typedef AnnotatedMixin<boost::mutex> CWaitableCriticalSection;$/;"	t
CWallet	wallet/wallet.h	/^    CWallet(): dbw(new CWalletDBWrapper())$/;"	f	class:CWallet
CWallet	wallet/wallet.h	/^    CWallet(std::unique_ptr<CWalletDBWrapper> dbw_in) : dbw(std::move(dbw_in))$/;"	f	class:CWallet
CWallet	wallet/wallet.h	/^class CWallet : public CCryptoKeyStore, public CValidationInterface$/;"	c
CWalletDB	wallet/walletdb.h	/^    CWalletDB(CWalletDBWrapper& dbw, const char* pszMode = "r+", bool _fFlushOnClose = true) :$/;"	f	class:CWalletDB
CWalletDB	wallet/walletdb.h	/^class CWalletDB$/;"	c
CWalletDBWrapper	wallet/db.h	/^    CWalletDBWrapper() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(nullptr)$/;"	f	class:CWalletDBWrapper
CWalletDBWrapper	wallet/db.h	/^    CWalletDBWrapper(CDBEnv *env_in, const std::string &strFile_in) :$/;"	f	class:CWalletDBWrapper
CWalletDBWrapper	wallet/db.h	/^class CWalletDBWrapper$/;"	c
CWalletKey	wallet/wallet.cpp	/^CWalletKey::CWalletKey(int64_t nExpires)$/;"	f	class:CWalletKey
CWalletKey	wallet/wallet.h	/^class CWalletKey$/;"	c
CWalletRef	wallet/wallet.h	/^typedef CWallet* CWalletRef;$/;"	t
CWalletScanState	wallet/walletdb.cpp	/^    CWalletScanState() {$/;"	f	class:CWalletScanState
CWalletScanState	wallet/walletdb.cpp	/^class CWalletScanState {$/;"	c	file:
CWalletTx	wallet/wallet.h	/^    CWalletTx()$/;"	f	class:CWalletTx
CWalletTx	wallet/wallet.h	/^    CWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))$/;"	f	class:CWalletTx
CWalletTx	wallet/wallet.h	/^class CWalletTx : public CMerkleTx$/;"	c
CXX	Makefile	/^CXX = g++ -std=c++11$/;"	m
CXX	univalue/Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	univalue/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -std=c++11 -E$/;"	m
CXXCPP	univalue/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	univalue/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2 -g3 -O0 -Wall -Wextra -Wformat -Wvla -Wformat-security -Wno-unused-parameter$/;"	m
CXXFLAGS	univalue/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	univalue/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CXXLINK	univalue/Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	secp256k1/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	univalue/Makefile	/^CYGPATH_W = echo$/;"	m
CZMQAbstractNotifier	zmq/zmqabstractnotifier.h	/^    CZMQAbstractNotifier() : psocket(0) { }$/;"	f	class:CZMQAbstractNotifier
CZMQAbstractNotifier	zmq/zmqabstractnotifier.h	/^class CZMQAbstractNotifier$/;"	c
CZMQAbstractPublishNotifier	zmq/zmqpublishnotifier.h	/^class CZMQAbstractPublishNotifier : public CZMQAbstractNotifier$/;"	c
CZMQNotificationInterface	zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface::CZMQNotificationInterface() : pcontext(nullptr)$/;"	f	class:CZMQNotificationInterface
CZMQNotificationInterface	zmq/zmqnotificationinterface.h	/^class CZMQNotificationInterface : public CValidationInterface$/;"	c
CZMQNotifierFactory	zmq/zmqabstractnotifier.h	/^typedef CZMQAbstractNotifier* (*CZMQNotifierFactory)();$/;"	t
CZMQPublishHashBlockNotifier	zmq/zmqpublishnotifier.h	/^class CZMQPublishHashBlockNotifier : public CZMQAbstractPublishNotifier$/;"	c
CZMQPublishHashTransactionNotifier	zmq/zmqpublishnotifier.h	/^class CZMQPublishHashTransactionNotifier : public CZMQAbstractPublishNotifier$/;"	c
CZMQPublishRawBlockNotifier	zmq/zmqpublishnotifier.h	/^class CZMQPublishRawBlockNotifier : public CZMQAbstractPublishNotifier$/;"	c
CZMQPublishRawTransactionNotifier	zmq/zmqpublishnotifier.h	/^class CZMQPublishRawTransactionNotifier : public CZMQAbstractPublishNotifier$/;"	c
Cache	leveldb/include/leveldb/cache.h	/^  Cache() { }$/;"	f	class:leveldb::Cache
Cache	leveldb/include/leveldb/cache.h	/^class Cache {$/;"	c	namespace:leveldb
CacheTest	leveldb/util/cache_test.cc	/^  CacheTest() : cache_(NewLRUCache(kCacheSize)) {$/;"	f	class:leveldb::CacheTest
CacheTest	leveldb/util/cache_test.cc	/^class CacheTest {$/;"	c	namespace:leveldb	file:
CachingTransactionSignatureChecker	script/sigcache.h	/^    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn), store(storeIn) {}$/;"	f	class:CachingTransactionSignatureChecker
CachingTransactionSignatureChecker	script/sigcache.h	/^class CachingTransactionSignatureChecker : public TransactionSignatureChecker$/;"	c
CalcHash	merkleblock.cpp	/^uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {$/;"	f	class:CPartialMerkleTree
CalcTreeWidth	merkleblock.h	/^    unsigned int CalcTreeWidth(int height) {$/;"	f	class:CPartialMerkleTree
CalculateCurrentUsage	validation.cpp	/^static uint64_t CalculateCurrentUsage()$/;"	f	file:
CalculateDescendants	txmempool.cpp	/^void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants)$/;"	f	class:CTxMemPool
CalculateKeyedNetGroup	net.cpp	/^uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const$/;"	f	class:CConnman
CalculateMaximumSignedTxSize	wallet/feebumper.cpp	/^int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)$/;"	f
CalculateMemPoolAncestors	txmempool.cpp	/^bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents \/* = true *\/) const$/;"	f	class:CTxMemPool
CalculateNextWorkRequired	pow.cpp	/^unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)$/;"	f
CalculateSequenceLocks	consensus/tx_verify.cpp	/^std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
CallRPC	wificoin-cli.cpp	/^UniValue CallRPC(const std::string& strMethod, const UniValue& params)$/;"	f
CallRPC	test/rpc_tests.cpp	/^UniValue CallRPC(std::string args)$/;"	f
Callback	qt/callback.h	/^class Callback : public QObject$/;"	c
CanAccelerateCRC32C	leveldb/util/crc32c.cc	/^static bool CanAccelerateCRC32C() {$/;"	f	namespace:leveldb::crc32c
CanAppend	leveldb/db/recovery_test.cc	/^  bool CanAppend() {$/;"	f	class:leveldb::RecoveryTest
CanDirectFetch	net_processing.cpp	/^bool CanDirectFetch(const Consensus::Params &consensusParams)$/;"	f	namespace:__anon50
CanSupportFeature	wallet/wallet.h	/^    bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }$/;"	f	class:CWallet
CastToBool	script/interpreter.cpp	/^bool CastToBool(const valtype& vch)$/;"	f
Ch	crypto/sha256.cpp	/^uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }$/;"	f	namespace:__anon87::sha256
Ch	crypto/sha512.cpp	/^uint64_t inline Ch(uint64_t x, uint64_t y, uint64_t z) { return z ^ (x & (y ^ z)); }$/;"	f	namespace:__anon88::sha512
Ch	secp256k1/src/hash_impl.h	16;"	d
Ch	secp256k1/src/hash_impl.h	279;"	d
ChaCha20	crypto/chacha20.cpp	/^ChaCha20::ChaCha20()$/;"	f	class:ChaCha20
ChaCha20	crypto/chacha20.cpp	/^ChaCha20::ChaCha20(const unsigned char* k, size_t keylen)$/;"	f	class:ChaCha20
ChaCha20	crypto/chacha20.h	/^class ChaCha20$/;"	c
ChainCode	hash.h	/^typedef uint256 ChainCode;$/;"	t
ChainCode	pubkey.h	/^typedef uint256 ChainCode;$/;"	t
ChainNameFromCommandLine	chainparamsbase.cpp	/^std::string ChainNameFromCommandLine()$/;"	f
ChainSyncTimeoutState	net_processing.cpp	/^    struct ChainSyncTimeoutState {$/;"	s	struct:__anon50::CNodeState	file:
ChainTxData	chainparams.h	/^struct ChainTxData {$/;"	s
Change	leveldb/db/skiplist_test.cc	/^  void Change(ReaderState s) {$/;"	f	class:leveldb::TestState
ChangeOptions	leveldb/db/db_test.cc	/^  bool ChangeOptions() {$/;"	f	class:leveldb::DBTest
ChangeOptions	leveldb/table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
ChangePass	qt/askpassphrasedialog.h	/^        ChangePass, \/**< Ask old passphrase + new passphrase twice *\/$/;"	e	enum:AskPassphraseDialog::Mode
ChangeType	ui_interface.h	/^enum ChangeType$/;"	g
ChangeWalletPassphrase	wallet/wallet.cpp	/^bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)$/;"	f	class:CWallet
Check	addrman.h	/^    void Check()$/;"	f	class:CAddrMan
Check	key.cpp	/^bool CKey::Check(const unsigned char *vch) {$/;"	f	class:CKey
Check	leveldb/db/corruption_test.cc	/^  void Check(int min_expected, int max_expected) {$/;"	f	class:leveldb::CorruptionTest
CheckAccessCoin	test/coins_tests.cpp	/^void CheckAccessCoin(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)$/;"	f
CheckAdd	test/scriptnum_tests.cpp	/^static void CheckAdd(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckAddCoin	test/coins_tests.cpp	/^void CheckAddCoin(Args&&... args)$/;"	f
CheckAddCoinBase	test/coins_tests.cpp	/^void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)$/;"	f
CheckBlock	validation.cpp	/^bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)$/;"	f
CheckBlockHeader	validation.cpp	/^static bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)$/;"	f	file:
CheckBlockIndex	validation.cpp	/^void static CheckBlockIndex(const Consensus::Params& consensusParams)$/;"	f	file:
CheckCompare	test/scriptnum_tests.cpp	/^static void CheckCompare(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckCondition	leveldb/db/c_test.c	35;"	d	file:
CheckCreateInt	test/scriptnum_tests.cpp	/^static void CheckCreateInt(const int64_t& num)$/;"	f	file:
CheckCreateVch	test/scriptnum_tests.cpp	/^static void CheckCreateVch(const int64_t& num)$/;"	f	file:
CheckDel	leveldb/db/c_test.c	/^static void CheckDel(void* ptr, const char* k, size_t klen) {$/;"	f	file:
CheckDiskSpace	validation.cpp	/^bool CheckDiskSpace(uint64_t nAdditionalBytes)$/;"	f
CheckEqual	leveldb/db/c_test.c	/^static void CheckEqual(const char* expected, const char* v, size_t n) {$/;"	f	file:
CheckFinalTx	validation.cpp	/^bool CheckFinalTx(const CTransaction &tx, int flags)$/;"	f
CheckForStaleTipAndEvictPeers	net_processing.cpp	/^void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)$/;"	f	class:PeerLogicValidation
CheckForkWarningConditions	validation.cpp	/^static void CheckForkWarningConditions()$/;"	f	file:
CheckForkWarningConditionsOnNewFork	validation.cpp	/^static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)$/;"	f	file:
CheckGet	leveldb/db/c_test.c	/^static void CheckGet($/;"	f	file:
CheckIncomingNonce	net.cpp	/^bool CConnman::CheckIncomingNonce(uint64_t nonce)$/;"	f	class:CConnman
CheckInitialOffsetRecord	leveldb/db/log_test.cc	/^  void CheckInitialOffsetRecord(uint64_t initial_offset,$/;"	f	class:leveldb::log::LogTest
CheckInputs	validation.cpp	/^bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)$/;"	f
CheckInputsFromMempoolAndCache	validation.cpp	/^static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, CTxMemPool& pool,$/;"	f	file:
CheckIter	leveldb/db/c_test.c	/^static void CheckIter(leveldb_iterator_t* iter,$/;"	f	file:
CheckLockTime	script/interpreter.cpp	/^bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const$/;"	f	class:TransactionSignatureChecker
CheckLockTime	script/interpreter.h	/^    virtual bool CheckLockTime(const CScriptNum& nLockTime) const$/;"	f	class:BaseSignatureChecker
CheckLowS	pubkey.cpp	/^\/* static *\/ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {$/;"	f	class:CPubKey
CheckMinimalPush	script/interpreter.cpp	/^bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {$/;"	f	file:
CheckNegate	test/scriptnum_tests.cpp	/^static void CheckNegate(const int64_t& num)$/;"	f	file:
CheckNoError	leveldb/db/c_test.c	29;"	d	file:
CheckOffsetPastEndReturnsNoRecords	leveldb/db/log_test.cc	/^  void CheckOffsetPastEndReturnsNoRecords(uint64_t offset_past_end) {$/;"	f	class:leveldb::log::LogTest
CheckParseTorReplyMapping	test/torcontrol_tests.cpp	/^void CheckParseTorReplyMapping(std::string input, std::map<std::string,std::string> expected)$/;"	f
CheckProofOfWork	pow.cpp	/^bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)$/;"	f
CheckPubKeyEncoding	script/interpreter.cpp	/^bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, const SigVersion &sigversion, ScriptError* serror) {$/;"	f	file:
CheckPut	leveldb/db/c_test.c	/^static void CheckPut(void* ptr,$/;"	f	file:
CheckSequence	script/interpreter.cpp	/^bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) const$/;"	f	class:TransactionSignatureChecker
CheckSequence	script/interpreter.h	/^    virtual bool CheckSequence(const CScriptNum& nSequence) const$/;"	f	class:BaseSignatureChecker
CheckSequenceLocks	validation.cpp	/^bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool useExistingLockPoints)$/;"	f
CheckSig	script/interpreter.cpp	/^bool TransactionSignatureChecker::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:TransactionSignatureChecker
CheckSig	script/interpreter.h	/^    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:BaseSignatureChecker
CheckSignatureEncoding	script/interpreter.cpp	/^bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror) {$/;"	f
CheckSort	test/mempool_tests.cpp	/^void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)$/;"	f
CheckSpendCoins	test/coins_tests.cpp	/^void CheckSpendCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)$/;"	f
CheckSplitTorReplyLine	test/torcontrol_tests.cpp	/^void CheckSplitTorReplyLine(std::string input, std::string command, std::string args)$/;"	f
CheckSubtract	test/scriptnum_tests.cpp	/^static void CheckSubtract(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckTransaction	consensus/tx_verify.cpp	/^bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)$/;"	f
CheckTxInputs	consensus/tx_verify.cpp	/^bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)$/;"	f	class:Consensus
CheckTxScriptsSanity	core_read.cpp	/^bool CheckTxScriptsSanity(const CMutableTransaction& tx)$/;"	f
CheckUniqueFileid	wallet/db.cpp	/^void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)$/;"	f	namespace:__anon47
CheckWarmup	rest.cpp	/^static bool CheckWarmup(HTTPRequest* req)$/;"	f	file:
CheckWithFlag	test/transaction_tests.cpp	/^void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& input, int flags, bool success)$/;"	f
CheckWriteCoins	test/coins_tests.cpp	/^void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected_value, char parent_flags, char child_flags, char expected_flags)$/;"	f
Check_	addrman.cpp	/^int CAddrMan::Check_()$/;"	f	class:CAddrMan
Checker	script/sign.cpp	/^const BaseSignatureChecker& DummySignatureCreator::Checker() const$/;"	f	class:DummySignatureCreator
CheckpointLSN	wallet/db.cpp	/^void CDBEnv::CheckpointLSN(const std::string& strFile)$/;"	f	class:CDBEnv
Checkpoints	chainparams.h	/^    const CCheckpointData& Checkpoints() const { return checkpointData; }$/;"	f	class:CChainParams
Checkpoints	checkpoints.cpp	/^namespace Checkpoints {$/;"	n	file:
Checkpoints	checkpoints.h	/^namespace Checkpoints$/;"	n
Class	qt/notificator.h	/^    enum Class$/;"	g	class:Notificator
CleanKey	wallet/crypter.h	/^    void CleanKey()$/;"	f	class:CCrypter
Cleanup	leveldb/include/leveldb/iterator.h	/^  struct Cleanup {$/;"	s	class:leveldb::Iterator
CleanupBlockRevFiles	init.cpp	/^void CleanupBlockRevFiles()$/;"	f
CleanupCompaction	leveldb/db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupFunction	leveldb/include/leveldb/iterator.h	/^  typedef void (*CleanupFunction)(void* arg1, void* arg2);$/;"	t	class:leveldb::Iterator
CleanupIteratorState	leveldb/db/db_impl.cc	/^static void CleanupIteratorState(void* arg1, void* arg2) {$/;"	f	namespace:leveldb::__anon27
Clear	addrman.h	/^    void Clear()$/;"	f	class:CAddrMan
Clear	coins.h	/^    void Clear() {$/;"	f	class:Coin
Clear	dbwrapper.h	/^    void Clear()$/;"	f	class:CDBBatch
Clear	leveldb/db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	leveldb/db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	leveldb/db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	leveldb/util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
Clear	torcontrol.cpp	/^    void Clear()$/;"	f	class:TorControlReply
Clear	versionbits.cpp	/^void VersionBitsCache::Clear()$/;"	f	class:VersionBitsCache
ClearBanned	net.cpp	/^void CConnman::ClearBanned()$/;"	f	class:CConnman
ClearCurrent	policy/fees.cpp	/^void TxConfirmStats::ClearCurrent(unsigned int nBlockHeight)$/;"	f	class:TxConfirmStats
ClearDatadirCache	util.cpp	/^void ClearDatadirCache()$/;"	f
ClearNew	addrman.cpp	/^void CAddrMan::ClearNew(int nUBucket, int nUBucketPos)$/;"	f	class:CAddrMan
ClearNodes	test/test_wificoin.cpp	/^void CConnmanTest::ClearNodes()$/;"	f	class:CConnmanTest
ClearPrioritisation	txmempool.cpp	/^void CTxMemPool::ClearPrioritisation(const uint256 hash)$/;"	f	class:CTxMemPool
ClearSavedValue	leveldb/db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon20::DBIter	file:
ClickableLabel	qt/guiutil.h	/^    class ClickableLabel : public QLabel$/;"	c	namespace:GUIUtil
ClickableProgressBar	qt/guiutil.h	/^    class ClickableProgressBar : public QProgressBar$/;"	c	namespace:GUIUtil
ClientAllowed	httpserver.cpp	/^static bool ClientAllowed(const CNetAddr& netaddr)$/;"	f	file:
ClientModel	qt/clientmodel.cpp	/^ClientModel::ClientModel(OptionsModel *_optionsModel, QObject *parent) :$/;"	f	class:ClientModel
ClientModel	qt/clientmodel.h	/^class ClientModel : public QObject$/;"	c
ClipToRange	leveldb/db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	leveldb/db/db_test.cc	/^  void Close() {$/;"	f	class:leveldb::DBTest
Close	leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Close() {$/;"	f	class:leveldb::TestWritableFile
Close	leveldb/db/leveldbutil.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon23::StdoutPrinter
Close	leveldb/db/log_test.cc	/^    virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Close	leveldb/db/recovery_test.cc	/^  void Close() {$/;"	f	class:leveldb::RecoveryTest
Close	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon16::WritableFileImpl
Close	leveldb/table/table_test.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Close	leveldb/util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon11::PosixWritableFile
Close	leveldb/util/env_win.cc	/^Status Win32WritableFile::Close()$/;"	f	class:leveldb::Win32::Win32WritableFile
Close	wallet/db.cpp	/^void CDB::Close()$/;"	f	class:CDB
Close	wallet/db.cpp	/^void CDBEnv::Close()$/;"	f	class:CDBEnv
CloseDB	leveldb/db/fault_injection_test.cc	/^  void CloseDB() {$/;"	f	class:leveldb::FaultInjectionTest
CloseDb	wallet/db.cpp	/^void CDBEnv::CloseDb(const std::string& strFile)$/;"	f	class:CDBEnv
CloseSocket	netbase.cpp	/^bool CloseSocket(SOCKET& hSocket)$/;"	f
CloseSocketDisconnect	net.cpp	/^void CNode::CloseSocketDisconnect()$/;"	f	class:CNode
CmpCompare	leveldb/db/c_test.c	/^static int CmpCompare(void* arg, const char* a, size_t alen,$/;"	f	file:
CmpDestroy	leveldb/db/c_test.c	/^static void CmpDestroy(void* arg) { }$/;"	f	file:
CmpName	leveldb/db/c_test.c	/^static const char* CmpName(void* arg) {$/;"	f	file:
Code	leveldb/include/leveldb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Coding	leveldb/util/coding_test.cc	/^class Coding { };$/;"	c	namespace:leveldb	file:
Coin	coins.h	/^    Coin() : fCoinBase(false), nHeight(0) { }$/;"	f	class:Coin
Coin	coins.h	/^    Coin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : out(std::move(outIn)), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) {}$/;"	f	class:Coin
Coin	coins.h	/^    Coin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : out(outIn), fCoinBase(fCoinBaseIn),nHeight(nHeightIn) {}$/;"	f	class:Coin
Coin	coins.h	/^class Coin$/;"	c
CoinControlDialog	qt/coincontroldialog.cpp	/^CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:CoinControlDialog
CoinControlDialog	qt/coincontroldialog.h	/^class CoinControlDialog : public QDialog$/;"	c
CoinControlFeatures	qt/optionsmodel.h	/^        CoinControlFeatures,    \/\/ bool$/;"	e	enum:OptionsModel::OptionID
CoinControlTreeWidget	qt/coincontroltreewidget.cpp	/^CoinControlTreeWidget::CoinControlTreeWidget(QWidget *parent) :$/;"	f	class:CoinControlTreeWidget
CoinControlTreeWidget	qt/coincontroltreewidget.h	/^class CoinControlTreeWidget : public QTreeWidget$/;"	c
CoinEntry	txdb.cpp	/^    CoinEntry(const COutPoint* ptr) : outpoint(const_cast<COutPoint*>(ptr)), key(DB_COIN)  {}$/;"	f	struct:__anon76::CoinEntry
CoinEntry	txdb.cpp	/^struct CoinEntry {$/;"	s	namespace:__anon76	file:
CoinSelection	bench/coin_selection.cpp	/^BENCHMARK(CoinSelection);$/;"	v
CoinSelection	bench/coin_selection.cpp	/^static void CoinSelection(benchmark::State& state)$/;"	f	file:
CoinSet	wallet/test/wallet_tests.cpp	/^typedef std::set<CInputCoin> CoinSet;$/;"	t	file:
ColorizeIcon	qt/platformstyle.cpp	/^QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)$/;"	f	namespace:__anon113
ColorizeIcon	qt/platformstyle.cpp	/^QIcon ColorizeIcon(const QString& filename, const QColor& colorbase)$/;"	f	namespace:__anon113
ColorizeImage	qt/platformstyle.cpp	/^QImage ColorizeImage(const QString& filename, const QColor& colorbase)$/;"	f	namespace:__anon113
Column	qt/csvmodelwriter.h	/^    struct Column$/;"	s	class:CSVModelWriter
ColumnIndex	qt/addresstablemodel.h	/^    enum ColumnIndex {$/;"	g	class:AddressTableModel
ColumnIndex	qt/bantablemodel.h	/^    enum ColumnIndex {$/;"	g	class:BanTableModel
ColumnIndex	qt/peertablemodel.h	/^    enum ColumnIndex {$/;"	g	class:PeerTableModel
ColumnIndex	qt/recentrequeststablemodel.h	/^    enum ColumnIndex {$/;"	g	class:RecentRequestsTableModel
ColumnIndex	qt/transactiontablemodel.h	/^    enum ColumnIndex {$/;"	g	class:TransactionTableModel
ColumnWidths	qt/receivecoinsdialog.h	/^    enum ColumnWidths {$/;"	g	class:ReceiveCoinsDialog
ColumnWidths	qt/rpcconsole.h	/^    enum ColumnWidths$/;"	g	class:RPCConsole
ColumnWidths	qt/transactionview.h	/^    enum ColumnWidths {$/;"	g	class:TransactionView
CombineMultisig	script/sign.cpp	/^static std::vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,$/;"	f	file:
CombineSignatures	script/sign.cpp	/^SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,$/;"	f
CombineSignatures	script/sign.cpp	/^static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,$/;"	f	file:
CombinerAll	net.h	/^struct CombinerAll$/;"	s
Command	torcontrol.cpp	/^bool TorControlConnection::Command(const std::string &cmd, const ReplyHandlerCB& reply_handler)$/;"	f	class:TorControlConnection
CommandLineRPC	wificoin-cli.cpp	/^int CommandLineRPC(int argc, char *argv[])$/;"	f
CommandLineRawTx	wificoin-tx.cpp	/^static int CommandLineRawTx(int argc, char* argv[])$/;"	f	file:
CommitTransaction	wallet/wallet.cpp	/^bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state)$/;"	f	class:CWallet
Compact	leveldb/db/db_bench.cc	/^  void Compact(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Compact	leveldb/db/db_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Compact	streams.h	/^    inline void Compact()$/;"	f	class:CDataStream
CompactMemTable	leveldb/db/db_impl.cc	/^void DBImpl::CompactMemTable() {$/;"	f	class:leveldb::DBImpl
CompactMemTable	leveldb/db/recovery_test.cc	/^  void CompactMemTable() {$/;"	f	class:leveldb::RecoveryTest
CompactRange	dbwrapper.h	/^    void CompactRange(const K& key_begin, const K& key_end) const$/;"	f	class:CDBWrapper
CompactRange	leveldb/db/db_impl.cc	/^void DBImpl::CompactRange(const Slice* begin, const Slice* end) {$/;"	f	class:leveldb::DBImpl
CompactRange	leveldb/db/db_test.cc	/^  virtual void CompactRange(const Slice* start, const Slice* end) {$/;"	f	class:leveldb::ModelDB
CompactRange	leveldb/db/version_set.cc	/^Compaction* VersionSet::CompactRange($/;"	f	class:leveldb::VersionSet
Compaction	leveldb/db/version_set.cc	/^Compaction::Compaction(const Options* options, int level)$/;"	f	class:leveldb::Compaction
Compaction	leveldb/db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionState	leveldb/db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	leveldb/db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl	file:
CompactionStats	leveldb/db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) { }$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	leveldb/db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	leveldb/db/skiplist_test.cc	/^struct Comparator {$/;"	s	namespace:leveldb	file:
Comparator	leveldb/include/leveldb/comparator.h	/^class Comparator {$/;"	c	namespace:leveldb
Compare	leveldb/db/c.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	struct:leveldb_comparator_t
Compare	leveldb/db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	leveldb/db/dbformat.h	/^inline int InternalKeyComparator::Compare($/;"	f	class:leveldb::InternalKeyComparator
Compare	leveldb/table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter	file:
Compare	leveldb/table/table_test.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon40::ReverseKeyComparator
Compare	leveldb/util/comparator.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon9::BytewiseComparatorImpl
Compare	uint256.h	/^    inline int Compare(const base_blob& other) const { return memcmp(data, other.data, sizeof(data)); }$/;"	f	class:base_blob
CompareBlocksByHeight	rpc/blockchain.cpp	/^struct CompareBlocksByHeight$/;"	s	file:
CompareCTxMemPoolIter	miner.h	/^struct CompareCTxMemPoolIter {$/;"	s
CompareDepthAndScore	txmempool.cpp	/^bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb)$/;"	f	class:CTxMemPool
CompareInvMempoolOrder	net_processing.cpp	/^    CompareInvMempoolOrder(CTxMemPool *_mempool)$/;"	f	class:CompareInvMempoolOrder
CompareInvMempoolOrder	net_processing.cpp	/^class CompareInvMempoolOrder$/;"	c	file:
CompareIteratorByHash	txmempool.h	/^    struct CompareIteratorByHash {$/;"	s	class:CTxMemPool
CompareIterators	leveldb/db/db_test.cc	/^static bool CompareIterators(int step,$/;"	f	namespace:leveldb
CompareModifiedEntry	miner.h	/^struct CompareModifiedEntry {$/;"	s
CompareNetGroupKeyed	net.cpp	/^static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {$/;"	f	file:
CompareNodeBlockTime	net.cpp	/^static bool CompareNodeBlockTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
CompareNodeTXTime	net.cpp	/^static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
CompareTo	arith_uint256.cpp	/^int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const$/;"	f	class:base_uint
CompareTo	base58.cpp	/^int CBase58Data::CompareTo(const CBase58Data& b58) const$/;"	f	class:CBase58Data
CompareTxIterByAncestorCount	miner.h	/^struct CompareTxIterByAncestorCount {$/;"	s
CompareTxMemPoolEntryByAncestorFee	txmempool.h	/^class CompareTxMemPoolEntryByAncestorFee$/;"	c
CompareTxMemPoolEntryByDescendantScore	txmempool.h	/^class CompareTxMemPoolEntryByDescendantScore$/;"	c
CompareTxMemPoolEntryByEntryTime	txmempool.h	/^class CompareTxMemPoolEntryByEntryTime$/;"	c
CompareTxMemPoolEntryByScore	txmempool.h	/^class CompareTxMemPoolEntryByScore$/;"	c
CompareValueOnly	wallet/wallet.cpp	/^struct CompareValueOnly$/;"	s	file:
CompatTests	qt/test/compattests.h	/^class CompatTests : public QObject$/;"	c
Compress	compressor.cpp	/^bool CScriptCompressor::Compress(std::vector<unsigned char> &out) const$/;"	f	class:CScriptCompressor
CompressAmount	compressor.cpp	/^uint64_t CTxOutCompressor::CompressAmount(uint64_t n)$/;"	f	class:CTxOutCompressor
CompressibleString	leveldb/util/testutil.cc	/^extern Slice CompressibleString(Random* rnd, double compressed_fraction,$/;"	f	namespace:leveldb::test
CompressionType	leveldb/include/leveldb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
ComputeBlockVersion	validation.cpp	/^int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
ComputeEntry	script/sigcache.cpp	/^    ComputeEntry(uint256& entry, const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubkey)$/;"	f	class:__anon96::CSignatureCache
ComputeHash	primitives/transaction.cpp	/^uint256 CTransaction::ComputeHash() const$/;"	f	class:CTransaction
ComputeMerkleBranch	consensus/merkle.cpp	/^std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {$/;"	f
ComputeMerkleRoot	consensus/merkle.cpp	/^uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated) {$/;"	f
ComputeMerkleRootFromBranch	consensus/merkle.cpp	/^uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {$/;"	f
ComputeResponse	torcontrol.cpp	/^static std::vector<uint8_t> ComputeResponse(const std::string &key, const std::vector<uint8_t> &cookie,  const std::vector<uint8_t> &clientNonce, const std::vector<uint8_t> &serverNonce)$/;"	f	file:
ComputeTimeSmart	wallet/wallet.cpp	/^unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const$/;"	f	class:CWallet
ConcurrentReader	leveldb/db/skiplist_test.cc	/^static void ConcurrentReader(void* arg) {$/;"	f	namespace:leveldb
ConcurrentTest	leveldb/db/skiplist_test.cc	/^  ConcurrentTest() : list_(Comparator(), &arena_) { }$/;"	f	class:leveldb::ConcurrentTest
ConcurrentTest	leveldb/db/skiplist_test.cc	/^class ConcurrentTest {$/;"	c	namespace:leveldb	file:
CondVar	leveldb/port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	leveldb/port/port_posix.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	leveldb/port/port_posix.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	leveldb/port/port_win.cc	/^CondVar::CondVar(Mutex* mu) :$/;"	f	class:leveldb::port::CondVar
CondVar	leveldb/port/port_win.h	/^class CondVar {$/;"	c	namespace:leveldb::port
ConfirmMessage	qt/test/wallettests.cpp	/^void ConfirmMessage(QString* text = nullptr)$/;"	f	namespace:__anon108
ConfirmSend	qt/test/wallettests.cpp	/^void ConfirmSend(QString* text = nullptr, bool cancel = false)$/;"	f	namespace:__anon108
Confirmed	qt/transactionrecord.h	/^        Confirmed,          \/**< Have 6 or more confirmations (normal tx) or fully mature (mined tx) **\/$/;"	e	enum:TransactionStatus::Status
ConfirmedRole	qt/transactiontablemodel.h	/^        ConfirmedRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Confirming	qt/transactionrecord.h	/^        Confirming,         \/**< Confirmed, but waiting for the recommended number of confirmations **\/$/;"	e	enum:TransactionStatus::Status
Conflicted	qt/transactionrecord.h	/^        Conflicted,         \/**< Conflicts with other transaction or mempool **\/$/;"	e	enum:TransactionStatus::Status
Connect	torcontrol.cpp	/^bool TorControlConnection::Connect(const std::string &target, const ConnectionCB& _connected, const ConnectionCB&  _disconnected)$/;"	f	class:TorControlConnection
ConnectBlock	validation.cpp	/^static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,$/;"	f	file:
ConnectNode	net.cpp	/^CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)$/;"	f	class:CConnman
ConnectSocket	netbase.cpp	/^bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)$/;"	f
ConnectSocketByName	netbase.cpp	/^bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed)$/;"	f
ConnectSocketDirectly	netbase.cpp	/^bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)$/;"	f	file:
ConnectThroughProxy	netbase.cpp	/^static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)$/;"	f	file:
ConnectTip	validation.cpp	/^bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)$/;"	f	file:
ConnectTrace	validation.cpp	/^    ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {$/;"	f	class:ConnectTrace
ConnectTrace	validation.cpp	/^class ConnectTrace {$/;"	c	file:
ConnectWallet	qt/splashscreen.cpp	/^void SplashScreen::ConnectWallet(CWallet* wallet)$/;"	f	class:SplashScreen
Connected	addrman.h	/^    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Connected_	addrman.cpp	/^void CAddrMan::Connected_(const CService& addr, int64_t nTime)$/;"	f	class:CAddrMan
ConnectionCB	torcontrol.cpp	/^    typedef std::function<void(TorControlConnection&)> ConnectionCB;$/;"	t	class:TorControlConnection	file:
Consensus	consensus/params.h	/^namespace Consensus {$/;"	n
Consensus	consensus/tx_verify.h	/^namespace Consensus {$/;"	n
Consensus	miner.h	/^namespace Consensus { struct Params; };$/;"	n
ConsiderEviction	net_processing.cpp	/^void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)$/;"	f	class:PeerLogicValidation
Constructor	leveldb/table/table_test.cc	/^  explicit Constructor(const Comparator* cmp) : data_(STLLessThan(cmp)) { }$/;"	f	class:leveldb::Constructor
Constructor	leveldb/table/table_test.cc	/^class Constructor {$/;"	c	namespace:leveldb	file:
ConsumeDecimalNumber	leveldb/util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
Contains	chain.h	/^    bool Contains(const CBlockIndex *pindex) const {$/;"	f	class:CChain
Contains	leveldb/db/skiplist.h	/^bool SkipList<Key,Comparator>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	leveldb/db/db_test.cc	/^  std::string Contents() {$/;"	f	class:leveldb::DBTest
Contents	leveldb/db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ContextualCheckBlock	validation.cpp	/^static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)$/;"	f	file:
ContextualCheckBlockHeader	validation.cpp	/^static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)$/;"	f	file:
ControlMutex	checkqueue.h	/^    boost::mutex ControlMutex;$/;"	m	class:CCheckQueue
ConvertLogFilesToTables	leveldb/db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon26::Repairer	file:
ConvertLogToTable	leveldb/db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon26::Repairer	file:
CopyFrom	qt/walletmodel.cpp	/^void WalletModel::UnlockContext::CopyFrom(const UnlockContext& rhs)$/;"	f	class:WalletModel::UnlockContext
CopySettings	qt/optionsmodel.cpp	/^static void CopySettings(QSettings& dst, const QSettings& src)$/;"	f	file:
CopyState	leveldb/util/status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:leveldb::Status
CopyString	leveldb/db/c.cc	/^static char* CopyString(const std::string& str) {$/;"	f	file:
CopyrightHolders	util.cpp	/^std::string CopyrightHolders(const std::string& strPrefix)$/;"	f
Correct_Queue	test/checkqueue_tests.cpp	/^typedef CCheckQueue<FakeCheckCheckCompletion> Correct_Queue;$/;"	t	file:
Correct_Queue_range	test/checkqueue_tests.cpp	/^void Correct_Queue_range(std::vector<size_t> range)$/;"	f
Corrupt	leveldb/db/corruption_test.cc	/^  void Corrupt(FileType filetype, int offset, int bytes_to_corrupt) {$/;"	f	class:leveldb::CorruptionTest
Corruption	leveldb/db/dumpfile.cc	/^  virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::__anon19::CorruptionReporter
Corruption	leveldb/db/log_test.cc	/^    virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::log::LogTest::ReportCollector
Corruption	leveldb/include/leveldb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
CorruptionError	leveldb/table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter	file:
CorruptionPossible	consensus/validation.h	/^    bool CorruptionPossible() const {$/;"	f	class:CValidationState
CorruptionReporter	leveldb/db/dumpfile.cc	/^class CorruptionReporter : public log::Reader::Reporter {$/;"	c	namespace:leveldb::__anon19	file:
CorruptionTest	leveldb/db/corruption_test.cc	/^  CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
CorruptionTest	leveldb/db/corruption_test.cc	/^class CorruptionTest {$/;"	c	namespace:leveldb	file:
Count	leveldb/db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
CountBits	crypto/common.h	/^uint64_t static inline CountBits(uint64_t x)$/;"	f
CountFiles	leveldb/db/db_test.cc	/^  int CountFiles() {$/;"	f	class:leveldb::DBTest
CountWitnessSigOps	script/interpreter.cpp	/^size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags)$/;"	f
Crc32c	leveldb/db/db_bench.cc	/^  void Crc32c(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Create	addrman.cpp	/^CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)$/;"	f	class:CAddrMan
Create	test/addrman_tests.cpp	/^    CAddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr)$/;"	f	class:CAddrManTest
Create	zmq/zmqabstractnotifier.h	/^    static CZMQAbstractNotifier* Create()$/;"	f	class:CZMQAbstractNotifier
Create	zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface* CZMQNotificationInterface::Create()$/;"	f	class:CZMQNotificationInterface
CreateAndProcessBlock	test/test_wificoin.cpp	/^TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)$/;"	f	class:TestChain100Setup
CreateBaseChainParams	chainparamsbase.cpp	/^std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)$/;"	f
CreateBlockIndex	test/miner_tests.cpp	/^CBlockIndex CreateBlockIndex(int nHeight)$/;"	f
CreateChainParams	chainparams.cpp	/^std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)$/;"	f
CreateCreditAndSpend	test/transaction_tests.cpp	/^void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)$/;"	f
CreateDir	leveldb/helpers/memenv/memenv.cc	/^  virtual Status CreateDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
CreateDir	leveldb/include/leveldb/env.h	/^  Status CreateDir(const std::string& d) { return target_->CreateDir(d); }$/;"	f	class:leveldb::EnvWrapper
CreateDir	leveldb/util/env_posix.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon11::PosixEnv
CreateDir	leveldb/util/env_win.cc	/^Status Win32Env::CreateDir( const std::string& dirname )$/;"	f	class:leveldb::Win32::Win32Env
CreateDirInner	leveldb/util/env_win.cc	/^static Status CreateDirInner( const std::string& dirname )$/;"	f	namespace:leveldb::Win32
CreateFilter	leveldb/db/c.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	struct:leveldb_filterpolicy_t
CreateFilter	leveldb/db/dbformat.cc	/^void InternalFilterPolicy::CreateFilter(const Slice* keys, int n,$/;"	f	class:leveldb::InternalFilterPolicy
CreateFilter	leveldb/table/filter_block_test.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::TestHashFilter
CreateFilter	leveldb/util/bloom.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::__anon10::BloomFilterPolicy
CreateGenesisBlock	chainparams.cpp	/^static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)$/;"	f	file:
CreateGenesisBlock	chainparams.cpp	/^static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)$/;"	f	file:
CreateInstance	support/lockedpool.cpp	/^void LockedPoolManager::CreateInstance()$/;"	f	class:LockedPoolManager
CreateInternal	test/netbase_tests.cpp	/^static CNetAddr CreateInternal(const char* host)$/;"	f	file:
CreateNewBlock	miner.cpp	/^std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx)$/;"	f	class:BlockAssembler
CreateObfuscateKey	dbwrapper.cpp	/^std::vector<unsigned char> CDBWrapper::CreateObfuscateKey() const$/;"	f	class:CDBWrapper
CreatePidFile	util.cpp	/^void CreatePidFile(const fs::path &path, pid_t pid)$/;"	f
CreateProcess	secp256k1/build-aux/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	secp256k1/libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	univalue/build-aux/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	univalue/libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateSig	script/sign.cpp	/^bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:DummySignatureCreator
CreateSig	script/sign.cpp	/^bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const$/;"	f	class:TransactionSignatureCreator
CreateTransaction	wallet/wallet.cpp	/^bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,$/;"	f	class:CWallet
CreateWalletFromFile	wallet/wallet.cpp	/^CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)$/;"	f	class:CWallet
Critical	qt/notificator.h	/^        Critical        \/**< An error occurred *\/$/;"	e	enum:Notificator::Class
CryptedKeyMap	keystore.h	/^typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;$/;"	t
CuckooCache	cuckoocache.h	/^namespace CuckooCache$/;"	n
CurrentDir	leveldb/util/env_win.cc	/^static const std::string CurrentDir = GetCurrentDir();$/;"	m	namespace:leveldb::Win32	file:
CurrentDirW	leveldb/util/env_win.cc	/^static const std::wstring CurrentDirW = GetCurrentDirW();$/;"	m	namespace:leveldb::Win32	file:
CurrentFileName	leveldb/db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentOptions	leveldb/db/db_test.cc	/^  Options CurrentOptions() {$/;"	f	class:leveldb::DBTest
CurrentSizeEstimate	leveldb/table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
Cursor	coins.cpp	/^CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }$/;"	f	class:CCoinsView
Cursor	coins.cpp	/^CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }$/;"	f	class:CCoinsViewBacked
Cursor	txdb.cpp	/^CCoinsViewCursor *CCoinsViewDB::Cursor() const$/;"	f	class:CCoinsViewDB
DATA	secp256k1/Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DATA	univalue/Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DATABASE_FLUSH_INTERVAL	validation.h	/^static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;$/;"	v
DATABASE_WRITE_INTERVAL	validation.h	/^static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;$/;"	v
DATA_END	wallet/db.cpp	/^static const char *DATA_END = "DATA=END";$/;"	v	file:
DATE_COLUMN_WIDTH	qt/receivecoinsdialog.h	/^        DATE_COLUMN_WIDTH = 130,$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
DATE_COLUMN_WIDTH	qt/transactionview.h	/^        DATE_COLUMN_WIDTH = 120,$/;"	e	enum:TransactionView::ColumnWidths
DB	leveldb/include/leveldb/db.h	/^  DB() { }$/;"	f	class:leveldb::DB
DB	leveldb/include/leveldb/db.h	/^class DB {$/;"	c	namespace:leveldb
DBConstructor	leveldb/table/table_test.cc	/^  explicit DBConstructor(const Comparator* cmp)$/;"	f	class:leveldb::DBConstructor
DBConstructor	leveldb/table/table_test.cc	/^class DBConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
DBErrors	wallet/walletdb.h	/^enum DBErrors$/;"	g
DBImpl	leveldb/db/db_impl.cc	/^DBImpl::DBImpl(const Options& raw_options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	leveldb/db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	leveldb/db/db_iter.cc	/^  DBIter(DBImpl* db, const Comparator* cmp, Iterator* iter, SequenceNumber s,$/;"	f	class:leveldb::__anon20::DBIter
DBIter	leveldb/db/db_iter.cc	/^class DBIter: public Iterator {$/;"	c	namespace:leveldb::__anon20	file:
DBState	leveldb/doc/bench/db_bench_sqlite3.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBState	leveldb/doc/bench/db_bench_tree_db.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBSynchronize	leveldb/doc/bench/db_bench_tree_db.cc	/^static void DBSynchronize(kyotocabinet::TreeDB* db_)$/;"	f	file:
DBTest	leveldb/db/db_test.cc	/^  DBTest() : option_config_(kDefault),$/;"	f	class:leveldb::DBTest
DBTest	leveldb/db/db_test.cc	/^class DBTest {$/;"	c	namespace:leveldb	file:
DBWRAPPER_PREALLOC_KEY_SIZE	dbwrapper.h	/^static const size_t DBWRAPPER_PREALLOC_KEY_SIZE = 64;$/;"	v
DBWRAPPER_PREALLOC_VALUE_SIZE	dbwrapper.h	/^static const size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;$/;"	v
DB_BEST_BLOCK	txdb.cpp	/^static const char DB_BEST_BLOCK = 'B';$/;"	v	file:
DB_BLOCK_FILES	txdb.cpp	/^static const char DB_BLOCK_FILES = 'f';$/;"	v	file:
DB_BLOCK_INDEX	txdb.cpp	/^static const char DB_BLOCK_INDEX = 'b';$/;"	v	file:
DB_COIN	txdb.cpp	/^static const char DB_COIN = 'C';$/;"	v	file:
DB_COINS	txdb.cpp	/^static const char DB_COINS = 'c';$/;"	v	file:
DB_CORRUPT	wallet/walletdb.h	/^    DB_CORRUPT,$/;"	e	enum:DBErrors
DB_FLAG	txdb.cpp	/^static const char DB_FLAG = 'F';$/;"	v	file:
DB_HEAD_BLOCKS	txdb.cpp	/^static const char DB_HEAD_BLOCKS = 'H';$/;"	v	file:
DB_LAST_BLOCK	txdb.cpp	/^static const char DB_LAST_BLOCK = 'l';$/;"	v	file:
DB_LOAD_FAIL	wallet/walletdb.h	/^    DB_LOAD_FAIL,$/;"	e	enum:DBErrors
DB_LOAD_OK	wallet/walletdb.h	/^    DB_LOAD_OK,$/;"	e	enum:DBErrors
DB_NEED_REWRITE	wallet/walletdb.h	/^    DB_NEED_REWRITE$/;"	e	enum:DBErrors
DB_NONCRITICAL_ERROR	wallet/walletdb.h	/^    DB_NONCRITICAL_ERROR,$/;"	e	enum:DBErrors
DB_REINDEX_FLAG	txdb.cpp	/^static const char DB_REINDEX_FLAG = 'R';$/;"	v	file:
DB_TEST	leveldb/table/table_test.cc	/^  DB_TEST$/;"	e	enum:leveldb::TestType	file:
DB_TOO_NEW	wallet/walletdb.h	/^    DB_TOO_NEW,$/;"	e	enum:DBErrors
DB_TXINDEX	txdb.cpp	/^static const char DB_TXINDEX = 't';$/;"	v	file:
DECORATION_SIZE	qt/overviewpage.cpp	21;"	d	file:
DEFAULT_ACCEPT_DATACARRIER	script/standard.h	/^static const bool DEFAULT_ACCEPT_DATACARRIER = true;$/;"	v
DEFAULT_ANCESTOR_LIMIT	validation.h	/^static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;$/;"	v
DEFAULT_ANCESTOR_SIZE_LIMIT	validation.h	/^static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;$/;"	v
DEFAULT_BANSCORE_THRESHOLD	validation.h	/^static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;$/;"	v
DEFAULT_BLOCKSONLY	net.h	/^static const bool DEFAULT_BLOCKSONLY = false;$/;"	v
DEFAULT_BLOCK_MAX_WEIGHT	policy/policy.h	/^static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;$/;"	v
DEFAULT_BLOCK_MIN_TX_FEE	policy/policy.h	/^static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;$/;"	v
DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN	net_processing.h	/^static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;$/;"	v
DEFAULT_BYTES_PER_SIGOP	policy/policy.h	/^static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;$/;"	v
DEFAULT_CHECKBLOCKS	validation.h	/^static const signed int DEFAULT_CHECKBLOCKS = 6;$/;"	v
DEFAULT_CHECKLEVEL	validation.h	/^static const unsigned int DEFAULT_CHECKLEVEL = 3;$/;"	v
DEFAULT_CHECKPOINTS_ENABLED	validation.h	/^static const bool DEFAULT_CHECKPOINTS_ENABLED = false; \/\/ liudf 20180118; change true to false$/;"	v
DEFAULT_CHOOSE_DATADIR	qt/intro.h	/^static const bool DEFAULT_CHOOSE_DATADIR = false;$/;"	v
DEFAULT_CONNECT_TIMEOUT	netbase.h	/^static const int DEFAULT_CONNECT_TIMEOUT = 5000;$/;"	v
DEFAULT_DESCENDANT_LIMIT	validation.h	/^static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;$/;"	v
DEFAULT_DESCENDANT_SIZE_LIMIT	validation.h	/^static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;$/;"	v
DEFAULT_DISABLE_SAFEMODE	init.cpp	/^static const bool DEFAULT_DISABLE_SAFEMODE = false;$/;"	v	file:
DEFAULT_DISABLE_WALLET	wallet/wallet.h	/^static const bool DEFAULT_DISABLE_WALLET = false;$/;"	v
DEFAULT_DISCARD_FEE	wallet/wallet.h	/^static const CAmount DEFAULT_DISCARD_FEE = 10000;$/;"	v
DEFAULT_ENABLE_REPLACEMENT	validation.h	/^static const bool DEFAULT_ENABLE_REPLACEMENT = true;$/;"	v
DEFAULT_FALLBACK_FEE	wallet/wallet.h	/^static const CAmount DEFAULT_FALLBACK_FEE = 20000;$/;"	v
DEFAULT_FEEFILTER	validation.h	/^static const bool DEFAULT_FEEFILTER = true;$/;"	v
DEFAULT_FLUSHWALLET	wallet/walletdb.h	/^static const bool DEFAULT_FLUSHWALLET = true;$/;"	v
DEFAULT_FORCEDNSSEED	net.h	/^static const bool DEFAULT_FORCEDNSSEED = false;$/;"	v
DEFAULT_HTTP_CLIENT_TIMEOUT	wificoin-cli.cpp	/^static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;$/;"	v	file:
DEFAULT_HTTP_SERVER_TIMEOUT	httpserver.h	/^static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;$/;"	v
DEFAULT_HTTP_THREADS	httpserver.h	/^static const int DEFAULT_HTTP_THREADS=4;$/;"	v
DEFAULT_HTTP_WORKQUEUE	httpserver.h	/^static const int DEFAULT_HTTP_WORKQUEUE=16;$/;"	v
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src\/config$/;"	m
DEFAULT_INCLUDES	secp256k1/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src$/;"	m
DEFAULT_INCLUDES	univalue/Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFAULT_INCREMENTAL_RELAY_FEE	policy/policy.h	/^static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;$/;"	v
DEFAULT_KEYPOOL_SIZE	wallet/wallet.h	/^static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;$/;"	v
DEFAULT_LISTEN	net.h	/^static const bool DEFAULT_LISTEN = true;$/;"	v
DEFAULT_LISTEN_ONION	torcontrol.h	/^static const bool DEFAULT_LISTEN_ONION = true;$/;"	v
DEFAULT_LOGIPS	util.h	/^static const bool DEFAULT_LOGIPS        = false;$/;"	v
DEFAULT_LOGTIMEMICROS	util.h	/^static const bool DEFAULT_LOGTIMEMICROS = false;$/;"	v
DEFAULT_LOGTIMESTAMPS	util.h	/^static const bool DEFAULT_LOGTIMESTAMPS = true;$/;"	v
DEFAULT_MAXRECEIVEBUFFER	net.h	/^static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;$/;"	v
DEFAULT_MAXSENDBUFFER	net.h	/^static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;$/;"	v
DEFAULT_MAX_MEMPOOL_SIZE	policy/policy.h	/^static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;$/;"	v
DEFAULT_MAX_ORPHAN_TRANSACTIONS	net_processing.h	/^static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;$/;"	v
DEFAULT_MAX_PEER_CONNECTIONS	net.h	/^static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;$/;"	v
DEFAULT_MAX_SIG_CACHE_SIZE	script/sigcache.h	/^static const unsigned int DEFAULT_MAX_SIG_CACHE_SIZE = 32;$/;"	v
DEFAULT_MAX_TIME_ADJUSTMENT	timedata.h	/^static const int64_t DEFAULT_MAX_TIME_ADJUSTMENT = 70 * 60;$/;"	v
DEFAULT_MAX_TIP_AGE	validation.h	/^static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;$/;"	v
DEFAULT_MAX_UPLOAD_TARGET	net.h	/^static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;$/;"	v
DEFAULT_MEMPOOL_EXPIRY	validation.h	/^static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;$/;"	v
DEFAULT_MIN_RELAY_TX_FEE	validation.h	/^static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;$/;"	v
DEFAULT_MISBEHAVING_BANTIME	net.h	/^static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  \/\/ Default 24-hour ban$/;"	v
DEFAULT_NAMED	wificoin-cli.cpp	/^static const bool DEFAULT_NAMED=false;$/;"	v	file:
DEFAULT_NAME_LOOKUP	netbase.h	/^static const int DEFAULT_NAME_LOOKUP = true;$/;"	v
DEFAULT_PEERBLOOMFILTERS	validation.h	/^static const bool DEFAULT_PEERBLOOMFILTERS = true;$/;"	v
DEFAULT_PERMIT_BAREMULTISIG	validation.h	/^static const bool DEFAULT_PERMIT_BAREMULTISIG = true;$/;"	v
DEFAULT_PERSIST_MEMPOOL	validation.h	/^static const bool DEFAULT_PERSIST_MEMPOOL = true;$/;"	v
DEFAULT_PRINTPRIORITY	miner.h	/^static const bool DEFAULT_PRINTPRIORITY = false;$/;"	v
DEFAULT_PROXYRANDOMIZE	init.cpp	/^static const bool DEFAULT_PROXYRANDOMIZE = true;$/;"	v	file:
DEFAULT_REST_ENABLE	init.cpp	/^static const bool DEFAULT_REST_ENABLE = false;$/;"	v	file:
DEFAULT_RPCCONNECT	wificoin-cli.cpp	/^static const char DEFAULT_RPCCONNECT[] = "127.0.0.1";$/;"	v	file:
DEFAULT_RPC_SERIALIZE_VERSION	rpc/server.h	/^static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;$/;"	v
DEFAULT_SCRIPTCHECK_THREADS	validation.h	/^static const int DEFAULT_SCRIPTCHECK_THREADS = 0;$/;"	v
DEFAULT_SELFSIGNED_ROOTCERTS	qt/paymentrequestplus.h	/^static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;$/;"	v
DEFAULT_SPEND_ZEROCONF_CHANGE	wallet/wallet.h	/^static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;$/;"	v
DEFAULT_SPLASHSCREEN	qt/guiconstants.h	/^static const bool DEFAULT_SPLASHSCREEN = true;$/;"	v
DEFAULT_STOPAFTERBLOCKIMPORT	init.cpp	/^static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;$/;"	v	file:
DEFAULT_STOPATHEIGHT	validation.h	/^static const int DEFAULT_STOPATHEIGHT = 0;$/;"	v
DEFAULT_TESTSAFEMODE	warnings.h	/^static const bool DEFAULT_TESTSAFEMODE = false;$/;"	v
DEFAULT_TOR_CONTROL	torcontrol.cpp	/^const std::string DEFAULT_TOR_CONTROL = "127.0.0.1:9051";$/;"	v
DEFAULT_TRANSACTION_FEE	wallet/wallet.h	/^static const CAmount DEFAULT_TRANSACTION_FEE = 0;$/;"	v
DEFAULT_TRANSACTION_MAXFEE	validation.h	/^static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;$/;"	v
DEFAULT_TRANSACTION_MINFEE	wallet/wallet.h	/^static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;$/;"	v
DEFAULT_TXINDEX	validation.h	/^static const bool DEFAULT_TXINDEX = false;$/;"	v
DEFAULT_TX_CONFIRM_TARGET	wallet/wallet.h	/^static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;$/;"	v
DEFAULT_UIPLATFORM	qt/wificoingui.cpp	/^const std::string WiFicoinGUI::DEFAULT_UIPLATFORM =$/;"	m	class:WiFicoinGUI	file:
DEFAULT_UIPLATFORM	qt/wificoingui.h	/^    static const std::string DEFAULT_UIPLATFORM;$/;"	m	class:WiFicoinGUI
DEFAULT_UPNP	net.h	/^static const bool DEFAULT_UPNP = USE_UPNP;$/;"	v
DEFAULT_UPNP	net.h	/^static const bool DEFAULT_UPNP = false;$/;"	v
DEFAULT_USE_HD_WALLET	wallet/wallet.h	/^static const bool DEFAULT_USE_HD_WALLET = true;$/;"	v
DEFAULT_WALLET	qt/wificoingui.cpp	/^const QString WiFicoinGUI::DEFAULT_WALLET = "~Default";$/;"	m	class:WiFicoinGUI	file:
DEFAULT_WALLET	qt/wificoingui.h	/^    static const QString DEFAULT_WALLET;$/;"	m	class:WiFicoinGUI
DEFAULT_WALLETBROADCAST	wallet/wallet.h	/^static const bool DEFAULT_WALLETBROADCAST = true;$/;"	v
DEFAULT_WALLET_DAT	wallet/wallet.cpp	/^const char * DEFAULT_WALLET_DAT = "wallet.dat";$/;"	v
DEFAULT_WALLET_DBLOGSIZE	wallet/db.h	/^static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;$/;"	v
DEFAULT_WALLET_PRIVDB	wallet/db.h	/^static const bool DEFAULT_WALLET_PRIVDB = true;$/;"	v
DEFAULT_WALLET_RBF	wallet/wallet.h	/^static const bool DEFAULT_WALLET_RBF = false;$/;"	v
DEFAULT_WALLET_REJECT_LONG_CHAINS	wallet/wallet.h	/^static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;$/;"	v
DEFAULT_WHITELISTFORCERELAY	validation.h	/^static const bool DEFAULT_WHITELISTFORCERELAY = true;$/;"	v
DEFAULT_WHITELISTRELAY	validation.h	/^static const bool DEFAULT_WHITELISTRELAY = true;$/;"	v
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	secp256k1/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	univalue/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	secp256k1/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	univalue/Makefile	/^DEPDIR = .deps$/;"	m
DEPLOYMENT_CSV	consensus/params.h	/^    DEPLOYMENT_CSV, \/\/ Deployment of BIP68, BIP112, and BIP113.$/;"	e	enum:Consensus::DeploymentPos
DEPLOYMENT_SEGWIT	consensus/params.h	/^    DEPLOYMENT_SEGWIT, \/\/ Deployment of BIP141, BIP143, and BIP147.$/;"	e	enum:Consensus::DeploymentPos
DEPLOYMENT_TESTDUMMY	consensus/params.h	/^    DEPLOYMENT_TESTDUMMY,$/;"	e	enum:Consensus::DeploymentPos
DESIRED_SAMPLES	qt/trafficgraphwidget.cpp	14;"	d	file:
DEVICESDK	leveldb/Makefile	/^DEVICESDK=$(shell xcrun -sdk iphoneos --show-sdk-path)$/;"	m
DEVICE_ALLOBJS	leveldb/Makefile	/^DEVICE_ALLOBJS := $(DEVICE_LIBOBJECTS) $(DEVICE_MEMENVOBJECTS)$/;"	m
DEVICE_CFLAGS	leveldb/Makefile	/^DEVICE_CFLAGS = -isysroot "$(DEVICESDK)" -arch armv6 -arch armv7 -arch armv7s -arch arm64$/;"	m
DEVICE_LIBOBJECTS	leveldb/Makefile	/^DEVICE_LIBOBJECTS := $(addprefix $(DEVICE_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
DEVICE_MEMENVOBJECTS	leveldb/Makefile	/^DEVICE_MEMENVOBJECTS := $(addprefix $(DEVICE_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
DEVICE_OUTDIR	leveldb/Makefile	/^DEVICE_OUTDIR=out-ios-arm$/;"	m
DIRTY	coins.h	/^        DIRTY = (1 << 0), \/\/ This cache entry is potentially different from the version in the parent view.$/;"	e	enum:CCoinsCacheEntry::Flags
DIRTY	test/coins_tests.cpp	/^const static char DIRTY = CCoinsCacheEntry::DIRTY;$/;"	v	file:
DISALLOW_COPY_AND_ASSIGN	leveldb/util/env_win.cc	44;"	d	file:
DISCONNECT_FAILED	validation.cpp	/^    DISCONNECT_FAILED   \/\/ Something else went wrong.$/;"	e	enum:DisconnectResult	file:
DISCONNECT_OK	validation.cpp	/^    DISCONNECT_OK,      \/\/ All good.$/;"	e	enum:DisconnectResult	file:
DISCONNECT_UNCLEAN	validation.cpp	/^    DISCONNECT_UNCLEAN, \/\/ Rolled back, but UTXO set was inconsistent with block.$/;"	e	enum:DisconnectResult	file:
DISTCLEANFILES	Makefile	/^DISTCLEANFILES = obj\/build.h$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	secp256k1/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	univalue/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	secp256k1/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_ARCHIVES	univalue/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.leveldb.include \\$/;"	m
DIST_COMMON	secp256k1/Makefile	/^DIST_COMMON = $(srcdir)\/src\/modules\/ecdh\/Makefile.am.include \\$/;"	m
DIST_COMMON	univalue/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(am__crypto_libwificoin_crypto_a_SOURCES_DIST) \\$/;"	m
DIST_SOURCES	secp256k1/Makefile	/^DIST_SOURCES = $(libsecp256k1_la_SOURCES) \\$/;"	m
DIST_SOURCES	univalue/Makefile	/^DIST_SOURCES = $(libunivalue_la_SOURCES) $(test_unitester_SOURCES)$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = secp256k1 univalue$/;"	m
DIST_TARGETS	secp256k1/Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DIST_TARGETS	univalue/Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	secp256k1/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	univalue/Makefile	/^DLLTOOL = false$/;"	m
DNSSeeds	chainparams.h	/^    const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }$/;"	f	class:CChainParams
DOMAINNAME	netbase.cpp	/^    DOMAINNAME = 0x03,$/;"	e	enum:uint8_t	file:
DONE	leveldb/db/skiplist_test.cc	/^    DONE$/;"	e	enum:leveldb::TestState::ReaderState	file:
DOUBLE_ESTIMATE	policy/fees.h	/^    DOUBLE_ESTIMATE,$/;"	m	class:FeeReason
DOUBLE_SUCCESS_PCT	policy/fees.h	/^    static constexpr double DOUBLE_SUCCESS_PCT = .95;$/;"	m	class:CBlockPolicyEstimator
DO_STRINGIZE	clientversion.h	22;"	d
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	secp256k1/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	univalue/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	secp256k1/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	univalue/Makefile	/^DUMPBIN = $/;"	m
DUMP_ADDRESSES_INTERVAL	net.cpp	42;"	d	file:
DUPLICATE_ADDRESS	qt/addresstablemodel.h	/^        DUPLICATE_ADDRESS,      \/**< Address already in address book *\/$/;"	e	enum:AddressTableModel::EditStatus
DUST_RELAY_TX_FEE	policy/policy.h	/^static const unsigned int DUST_RELAY_TX_FEE = 3000;$/;"	v
Damage	test/pmt_tests.cpp	/^    void Damage() {$/;"	f	class:CPartialMerkleTreeTester
DamagePush	test/script_tests.cpp	/^    TestBuilder& DamagePush(unsigned int pos)$/;"	f	class:__anon80::TestBuilder
DataDir	chainparamsbase.h	/^    const std::string& DataDir() const { return strDataDir; }$/;"	f	class:CBaseChainParams
DataFromTransaction	script/sign.cpp	/^SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn)$/;"	f
DatabaseCache	qt/optionsmodel.h	/^        DatabaseCache,          \/\/ int$/;"	e	enum:OptionsModel::OptionID
Date	qt/recentrequeststablemodel.h	/^        Date = 0,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
Date	qt/transactiontablemodel.h	/^        Date = 2,$/;"	e	enum:TransactionTableModel::ColumnIndex
DateEnum	qt/transactionview.h	/^    enum DateEnum$/;"	g	class:TransactionView
DateRole	qt/transactiontablemodel.h	/^        DateRole,$/;"	e	enum:TransactionTableModel::RoleIndex
DateTimeStrFormat	utiltime.cpp	/^std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)$/;"	f
DebugMessageHandler	qt/wificoin.cpp	/^void DebugMessageHandler(QtMsgType type, const QMessageLogContext& context, const QString &msg)$/;"	f
DebugMessageHandler	qt/wificoin.cpp	/^void DebugMessageHandler(QtMsgType type, const char *msg)$/;"	f
DebugPrintInit	util.cpp	/^static void DebugPrintInit()$/;"	f	file:
DebugString	leveldb/db/dbformat.cc	/^std::string InternalKey::DebugString() const {$/;"	f	class:leveldb::InternalKey
DebugString	leveldb/db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	leveldb/db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	leveldb/db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
Decode	key.cpp	/^void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtKey
Decode	pubkey.cpp	/^void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtPubKey
DecodeBase32	utilstrencodings.cpp	/^std::string DecodeBase32(const std::string& str)$/;"	f
DecodeBase32	utilstrencodings.cpp	/^std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)$/;"	f
DecodeBase58	base58.cpp	/^bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)$/;"	f
DecodeBase58	base58.cpp	/^bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.cpp	/^bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.cpp	/^bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	utilstrencodings.cpp	/^std::string DecodeBase64(const std::string& str)$/;"	f
DecodeBase64	utilstrencodings.cpp	/^std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)$/;"	f
DecodeDumpString	wallet/rpcdump.cpp	/^std::string DecodeDumpString(const std::string &str) {$/;"	f
DecodeDumpTime	wallet/rpcdump.cpp	/^int64_t static DecodeDumpTime(const std::string &str) {$/;"	f	file:
DecodeEntry	leveldb/table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeFixed32	leveldb/util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	leveldb/util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	leveldb/db/dbformat.h	/^  void DecodeFrom(const Slice& s) { rep_.assign(s.data(), s.size()); }$/;"	f	class:leveldb::InternalKey
DecodeFrom	leveldb/db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	leveldb/table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	leveldb/table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
DecodeHexBlk	core_read.cpp	/^bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)$/;"	f
DecodeHexTx	core_read.cpp	/^bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTryNoWitness)$/;"	f
DecodeKey	leveldb/util/cache_test.cc	/^static int DecodeKey(const Slice& k) {$/;"	f	namespace:leveldb
DecodeOP_N	script/script.h	/^    static int DecodeOP_N(opcodetype opcode)$/;"	f	class:CScript
DecodeValue	leveldb/util/cache_test.cc	/^static int DecodeValue(void* v) { return reinterpret_cast<uintptr_t>(v); }$/;"	f	namespace:leveldb
Decompress	compressor.cpp	/^bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigned char> &in)$/;"	f	class:CScriptCompressor
Decompress	pubkey.cpp	/^bool CPubKey::Decompress() {$/;"	f	class:CPubKey
DecompressAmount	compressor.cpp	/^uint64_t CTxOutCompressor::DecompressAmount(uint64_t x)$/;"	f	class:CTxOutCompressor
Decrypt	crypto/aes.cpp	/^int AES128CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const$/;"	f	class:AES128CBCDecrypt
Decrypt	crypto/aes.cpp	/^int AES256CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const$/;"	f	class:AES256CBCDecrypt
Decrypt	crypto/aes.cpp	/^void AES128Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const$/;"	f	class:AES128Decrypt
Decrypt	crypto/aes.cpp	/^void AES256Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const$/;"	f	class:AES256Decrypt
Decrypt	qt/askpassphrasedialog.h	/^        Decrypt     \/**< Ask passphrase and decrypt wallet *\/$/;"	e	enum:AskPassphraseDialog::Mode
Decrypt	wallet/crypter.cpp	/^bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const$/;"	f	class:CCrypter
DecryptKey	wallet/crypter.cpp	/^static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key)$/;"	f	file:
DecryptSecret	wallet/crypter.cpp	/^static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)$/;"	f	file:
Default	leveldb/util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Default	leveldb/util/env_win.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
DefaultConsistencyChecks	chainparams.h	/^    bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }$/;"	f	class:CChainParams
DefaultOptions	miner.cpp	/^static BlockAssembler::Options DefaultOptions(const CChainParams& params)$/;"	f	file:
DelAddressBook	wallet/wallet.cpp	/^bool CWallet::DelAddressBook(const CTxDestination& address)$/;"	f	class:CWallet
DelayMilliseconds	leveldb/db/db_test.cc	/^void DelayMilliseconds(int millis) {$/;"	f	namespace:leveldb::__anon29
Delete	addrman.cpp	/^void CAddrMan::Delete(int nId)$/;"	f	class:CAddrMan
Delete	leveldb/db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	leveldb/db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	leveldb/db/db_test.cc	/^  Status Delete(const std::string& k) {$/;"	f	class:leveldb::DBTest
Delete	leveldb/db/db_test.cc	/^  virtual Status Delete(const WriteOptions& o, const Slice& key) {$/;"	f	class:leveldb::ModelDB
Delete	leveldb/db/dumpfile.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon19::WriteBatchItemPrinter
Delete	leveldb/db/snapshot.h	/^  void Delete(const SnapshotImpl* s) {$/;"	f	class:leveldb::SnapshotList
Delete	leveldb/db/write_batch.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon28::MemTableInserter
Delete	leveldb/db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
Delete	test/addrman_tests.cpp	/^    void Delete(int nId)$/;"	f	class:CAddrManTest
DeleteAllData	leveldb/db/fault_injection_test.cc	/^  void DeleteAllData() {$/;"	f	class:leveldb::FaultInjectionTest
DeleteAnSSTFile	leveldb/db/db_test.cc	/^  bool DeleteAnSSTFile() {$/;"	f	class:leveldb::DBTest
DeleteAuthCookie	rpc/protocol.cpp	/^void DeleteAuthCookie()$/;"	f
DeleteBlock	leveldb/table/table.cc	/^static void DeleteBlock(void* arg, void* ignored) {$/;"	f	namespace:leveldb
DeleteCachedBlock	leveldb/table/table.cc	/^static void DeleteCachedBlock(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteDir	leveldb/helpers/memenv/memenv.cc	/^  virtual Status DeleteDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
DeleteDir	leveldb/include/leveldb/env.h	/^  Status DeleteDir(const std::string& d) { return target_->DeleteDir(d); }$/;"	f	class:leveldb::EnvWrapper
DeleteDir	leveldb/util/env_posix.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon11::PosixEnv
DeleteDir	leveldb/util/env_win.cc	/^Status Win32Env::DeleteDir( const std::string& dirname )$/;"	f	class:leveldb::Win32::Win32Env
DeleteEntry	leveldb/db/table_cache.cc	/^static void DeleteEntry(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteFile	leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DeleteFile(const std::string& f) {$/;"	f	class:leveldb::FaultInjectionTestEnv
DeleteFile	leveldb/db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
DeleteFile	leveldb/include/leveldb/env.h	/^  Status DeleteFile(const std::string& f) { return target_->DeleteFile(f); }$/;"	f	class:leveldb::EnvWrapper
DeleteFile	leveldb/util/env_posix.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon11::PosixEnv
DeleteFile	leveldb/util/env_win.cc	/^Status Win32Env::DeleteFile( const std::string& fname )$/;"	f	class:leveldb::Win32::Win32Env
DeleteFile	leveldb/util/env_win.cc	34;"	d	file:
DeleteFileInternal	leveldb/helpers/memenv/memenv.cc	/^  void DeleteFileInternal(const std::string& fname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
DeleteFilesCreatedAfterLastDirSync	leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DeleteFilesCreatedAfterLastDirSync() {$/;"	f	class:leveldb::FaultInjectionTestEnv
DeleteLock	sync.cpp	/^void DeleteLock(void* cs)$/;"	f
DeleteLock	sync.h	/^void static inline DeleteLock(void* cs) {}$/;"	f
DeleteLogFiles	leveldb/db/recovery_test.cc	/^  size_t DeleteLogFiles() {$/;"	f	class:leveldb::RecoveryTest
DeleteNode	net.cpp	/^void CConnman::DeleteNode(CNode* pnode)$/;"	f	class:CConnman
DeleteObsoleteFiles	leveldb/db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeleteRandom	leveldb/db/db_bench.cc	/^  void DeleteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeleteSeq	leveldb/db/db_bench.cc	/^  void DeleteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeletedFileSet	leveldb/db/version_edit.h	/^  typedef std::set< std::pair<int, uint64_t> > DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
Deleter	leveldb/util/cache_test.cc	/^  static void Deleter(const Slice& key, void* v) {$/;"	f	class:leveldb::CacheTest
DeploymentPos	consensus/params.h	/^enum DeploymentPos$/;"	g	namespace:Consensus
DepthAndScoreComparator	txmempool.cpp	/^class DepthAndScoreComparator$/;"	c	namespace:__anon105	file:
DereferencingComparator	indirectmap.h	/^struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };$/;"	s
Derive	key.cpp	/^bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {$/;"	f	class:CExtKey
Derive	key.cpp	/^bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CKey
Derive	pubkey.cpp	/^bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {$/;"	f	class:CExtPubKey
Derive	pubkey.cpp	/^bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CPubKey
DeriveNewChildKey	wallet/wallet.cpp	/^void CWallet::DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal)$/;"	f	class:CWallet
DescribeAddressVisitor	rpc/misc.cpp	/^    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}$/;"	f	class:DescribeAddressVisitor
DescribeAddressVisitor	rpc/misc.cpp	/^class DescribeAddressVisitor : public boost::static_visitor<UniValue>$/;"	c	file:
DescriptorFileName	leveldb/db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
DeserializeAndCheckBlockTest	bench/checkblock.cpp	/^BENCHMARK(DeserializeAndCheckBlockTest);$/;"	v
DeserializeAndCheckBlockTest	bench/checkblock.cpp	/^static void DeserializeAndCheckBlockTest(benchmark::State& state)$/;"	f	file:
DeserializeBlockTest	bench/checkblock.cpp	/^BENCHMARK(DeserializeBlockTest);$/;"	v
DeserializeBlockTest	bench/checkblock.cpp	/^static void DeserializeBlockTest(benchmark::State& state)$/;"	f	file:
DeserializeDB	addrdb.cpp	/^bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)$/;"	f	namespace:__anon114
DeserializeFileDB	addrdb.cpp	/^bool DeserializeFileDB(const fs::path& path, Data& data)$/;"	f	namespace:__anon114
DestroyAndReopen	leveldb/db/db_test.cc	/^  void DestroyAndReopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
DestroyDB	leveldb/db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
DifficultyAdjustmentInterval	consensus/params.h	/^    int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan \/ nPowTargetSpacing; }$/;"	f	struct:Consensus::Params
DirWasSynced	leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::DirWasSynced() {$/;"	f	class:leveldb::FaultInjectionTestEnv
Direction	leveldb/db/db_iter.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon20::DBIter	file:
Direction	leveldb/table/merger.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon36::MergingIterator	file:
Disconnect	torcontrol.cpp	/^bool TorControlConnection::Disconnect()$/;"	f	class:TorControlConnection
DisconnectBlock	validation.cpp	/^static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)$/;"	f	file:
DisconnectNode	net.cpp	/^bool CConnman::DisconnectNode(NodeId id)$/;"	f	class:CConnman
DisconnectNode	net.cpp	/^bool CConnman::DisconnectNode(const std::string& strNode)$/;"	f	class:CConnman
DisconnectResult	validation.cpp	/^enum DisconnectResult$/;"	g	file:
DisconnectTip	validation.cpp	/^bool static DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)$/;"	f	file:
Disconnected	netbase.cpp	/^    Disconnected,$/;"	m	class:IntrRecvError	file:
DisconnectedBlockTransactions	txmempool.h	/^struct DisconnectedBlockTransactions {$/;"	s
Discover	net.cpp	/^void Discover(boost::thread_group& threadGroup)$/;"	f
DisplayUnit	qt/optionsmodel.h	/^        DisplayUnit,            \/\/ WiFicoinUnits::Unit$/;"	e	enum:OptionsModel::OptionID
DoCompactionWork	leveldb/db/db_impl.cc	/^Status DBImpl::DoCompactionWork(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
DoDelete	leveldb/db/db_bench.cc	/^  void DoDelete(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoPush	test/script_tests.cpp	/^    void DoPush()$/;"	f	class:__anon80::TestBuilder	file:
DoPush	test/script_tests.cpp	/^    void DoPush(const std::vector<unsigned char>& data)$/;"	f	class:__anon80::TestBuilder	file:
DoReads	leveldb/db/autocompact_test.cc	/^void AutoCompactTest::DoReads(int n) {$/;"	f	class:leveldb::AutoCompactTest
DoS	consensus/validation.h	/^    bool DoS(int level, bool ret = false,$/;"	f	class:CValidationState
DoTest	leveldb/db/fault_injection_test.cc	/^  void DoTest() {$/;"	f	class:leveldb::FaultInjectionTest
DoTest	test/script_tests.cpp	/^void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& scriptWitness, int flags, const std::string& message, int scriptError, CAmount nValue = 0)$/;"	f
DoWarning	validation.cpp	/^static void DoWarning(const std::string& strWarning)$/;"	f	file:
DoWrite	leveldb/db/db_bench.cc	/^  void DoWrite(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoWriteStringToFile	leveldb/util/env.cc	/^static Status DoWriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
DropUnsyncedData	leveldb/db/fault_injection_test.cc	/^Status FileState::DropUnsyncedData() const {$/;"	f	class:leveldb::FileState
DropUnsyncedFileData	leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DropUnsyncedFileData() {$/;"	f	class:leveldb::FaultInjectionTestEnv
DroppedBytes	leveldb/db/log_test.cc	/^  size_t DroppedBytes() const {$/;"	f	class:leveldb::log::LogTest
DummyAddress	qt/guiutil.cpp	/^static std::string DummyAddress(const CChainParams &params)$/;"	f	namespace:GUIUtil
DummySignTx	wallet/wallet.h	/^bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins) const$/;"	f	class:CWallet
DummySignatureChecker	script/sign.cpp	/^    DummySignatureChecker() {}$/;"	f	class:__anon103::DummySignatureChecker
DummySignatureChecker	script/sign.cpp	/^class DummySignatureChecker : public BaseSignatureChecker$/;"	c	namespace:__anon103	file:
DummySignatureCreator	script/sign.h	/^    DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}$/;"	f	class:DummySignatureCreator
DummySignatureCreator	script/sign.h	/^class DummySignatureCreator : public BaseSignatureCreator {$/;"	c
DumpAddresses	net.cpp	/^void CConnman::DumpAddresses()$/;"	f	class:CConnman
DumpBanlist	net.cpp	/^void CConnman::DumpBanlist()$/;"	f	class:CConnman
DumpData	net.cpp	/^void CConnman::DumpData()$/;"	f	class:CConnman
DumpDescriptor	leveldb/db/dumpfile.cc	/^Status DumpDescriptor(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon19
DumpFile	leveldb/db/dumpfile.cc	/^Status DumpFile(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb
DumpFileCounts	leveldb/db/db_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
DumpFilter	leveldb/util/bloom_test.cc	/^  void DumpFilter() {$/;"	f	class:leveldb::BloomTest
DumpLog	leveldb/db/dumpfile.cc	/^Status DumpLog(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon19
DumpMempool	validation.cpp	/^void DumpMempool(void)$/;"	f
DumpSSTableList	leveldb/db/db_test.cc	/^  std::string DumpSSTableList() {$/;"	f	class:leveldb::DBTest
DumpTable	leveldb/db/dumpfile.cc	/^Status DumpTable(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon19
DuplicateAddress	qt/walletmodel.h	/^        DuplicateAddress,$/;"	e	enum:WalletModel::StatusCode
DynamicMemoryUsage	coins.cpp	/^size_t CCoinsViewCache::DynamicMemoryUsage() const {$/;"	f	class:CCoinsViewCache
DynamicMemoryUsage	coins.h	/^    size_t DynamicMemoryUsage() const {$/;"	f	class:Coin
DynamicMemoryUsage	txmempool.cpp	/^size_t CTxMemPool::DynamicMemoryUsage() const {$/;"	f	class:CTxMemPool
DynamicMemoryUsage	txmempool.h	/^    size_t DynamicMemoryUsage() const { return nUsageSize; }$/;"	f	class:CTxMemPoolEntry
DynamicMemoryUsage	txmempool.h	/^    size_t DynamicMemoryUsage() const {$/;"	f	struct:DisconnectedBlockTransactions
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const double& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const float& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const indirectmap<X, Y>& m)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const int16_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const int32_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const int64_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const int8_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const prevector<N, X, S, D>& v)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::map<X, Y, Z>& m)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::set<X, Y>& s)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::shared_ptr<X>& p)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::unique_ptr<X>& p)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::unordered_map<X, Y, Z>& m)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::unordered_set<X, Y>& s)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::vector<X>& v)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const uint16_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const uint32_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const uint64_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const uint8_t& v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }$/;"	f	namespace:memusage
E	test/util_tests.cpp	320;"	d	file:
E	test/util_tests.cpp	342;"	d	file:
ECCVerifyHandle	pubkey.cpp	/^ECCVerifyHandle::ECCVerifyHandle()$/;"	f	class:ECCVerifyHandle
ECCVerifyHandle	pubkey.h	/^class ECCVerifyHandle$/;"	c
ECC_InitSanityCheck	key.cpp	/^bool ECC_InitSanityCheck() {$/;"	f
ECC_Start	key.cpp	/^void ECC_Start() {$/;"	f
ECC_Stop	key.cpp	/^void ECC_Stop() {$/;"	f
ECCryptoClosure	script/wificoinconsensus.cpp	/^struct ECCryptoClosure$/;"	s	namespace:__anon95	file:
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_C	secp256k1/Makefile	/^ECHO_C = $/;"	m
ECHO_C	univalue/Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	secp256k1/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	univalue/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
ECHO_T	secp256k1/Makefile	/^ECHO_T = $/;"	m
ECHO_T	univalue/Makefile	/^ECHO_T = $/;"	m
ECMULT_CONST_TABLE_GET_GE	secp256k1/src/ecmult_const_impl.h	23;"	d
ECMULT_TABLE_GET_GE	secp256k1/src/ecmult_impl.h	134;"	d
ECMULT_TABLE_GET_GE_STORAGE	secp256k1/src/ecmult_impl.h	145;"	d
ECMULT_TABLE_SIZE	secp256k1/src/ecmult_impl.h	45;"	d
ECONOMICAL	policy/fees.h	/^    ECONOMICAL,   \/\/! Force estimateSmartFee to use non-conservative estimates$/;"	m	class:FeeEstimateMode
EGREP	Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	secp256k1/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	univalue/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
ENABLE_MODULE_RECOVERY	secp256k1/src/libsecp256k1-config.h	18;"	d
ENABLE_OPENSSL_TESTS	secp256k1/src/libsecp256k1-config.h	21;"	d
ENABLE_WALLET	config/wificoin-config.h	39;"	d
ENABLE_ZMQ	config/wificoin-config.h	42;"	d
END	utilstrencodings.h	17;"	d
ENTER_CRITICAL_SECTION	sync.h	179;"	d
ERROR_CXXFLAGS	Makefile	/^ERROR_CXXFLAGS = $/;"	m
ETAGS	Makefile	/^ETAGS = etags$/;"	m
ETAGS	secp256k1/Makefile	/^ETAGS = etags$/;"	m
ETAGS	univalue/Makefile	/^ETAGS = etags$/;"	m
EVENT_CFLAGS	Makefile	/^EVENT_CFLAGS =  $/;"	m
EVENT_LIBS	Makefile	/^EVENT_LIBS = -levent  $/;"	m
EVENT_LOG_WARN	httpserver.cpp	370;"	d	file:
EVENT_PTHREADS_CFLAGS	Makefile	/^EVENT_PTHREADS_CFLAGS = -pthread  $/;"	m
EVENT_PTHREADS_LIBS	Makefile	/^EVENT_PTHREADS_LIBS = -levent_pthreads -levent  $/;"	m
EXCLUSIVE_LOCKS_REQUIRED	leveldb/port/thread_annotations.h	13;"	d
EXCLUSIVE_LOCKS_REQUIRED	net_processing.cpp	/^bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	net_processing.cpp	/^bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	net_processing.cpp	/^int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	net_processing.cpp	/^unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(cs_main)$/;"	f
EXCLUSIVE_LOCKS_REQUIRED	threadsafety.h	31;"	d
EXCLUSIVE_LOCKS_REQUIRED	threadsafety.h	50;"	d
EXCLUSIVE_LOCK_FUNCTION	leveldb/port/thread_annotations.h	37;"	d
EXCLUSIVE_LOCK_FUNCTION	leveldb/util/mutexlock.h	/^  explicit MutexLock(port::Mutex *mu) EXCLUSIVE_LOCK_FUNCTION(mu)$/;"	f	class:leveldb::MutexLock
EXCLUSIVE_LOCK_FUNCTION	sync.h	/^    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, boost::defer_lock)$/;"	f	class:CMutexLock
EXCLUSIVE_LOCK_FUNCTION	sync.h	/^    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)$/;"	f	class:CMutexLock
EXCLUSIVE_LOCK_FUNCTION	sync.h	/^    void lock() EXCLUSIVE_LOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
EXCLUSIVE_LOCK_FUNCTION	threadsafety.h	24;"	d
EXCLUSIVE_LOCK_FUNCTION	threadsafety.h	43;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	leveldb/port/thread_annotations.h	45;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	sync.h	/^    bool try_lock() EXCLUSIVE_TRYLOCK_FUNCTION(true)$/;"	f	class:AnnotatedMixin
EXCLUSIVE_TRYLOCK_FUNCTION	threadsafety.h	26;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	threadsafety.h	45;"	d
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXEEXT	secp256k1/Makefile	/^EXEEXT = $/;"	m
EXEEXT	univalue/Makefile	/^EXEEXT = $/;"	m
EXHAUSTIVE_TEST_LAMBDA	secp256k1/src/tests_exhaustive.c	21;"	d	file:
EXHAUSTIVE_TEST_ORDER	secp256k1/src/tests_exhaustive.c	20;"	d	file:
EXISTING	leveldb/doc/bench/db_bench_sqlite3.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXISTING	leveldb/doc/bench/db_bench_tree_db.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXPECT	secp256k1/src/util.h	40;"	d
EXPECT	secp256k1/src/util.h	42;"	d
EXPIRY	txmempool.h	/^    EXPIRY,      \/\/! Expired from mempool$/;"	m	class:MemPoolRemovalReason
EXPORT_SYMBOL	script/wificoinconsensus.h	16;"	d
EXPORT_SYMBOL	script/wificoinconsensus.h	18;"	d
EXPORT_SYMBOL	script/wificoinconsensus.h	22;"	d
EXPORT_SYMBOL	script/wificoinconsensus.h	25;"	d
EXPORT_SYMBOL	script/wificoinconsensus.h	29;"	d
EXPORT_SYMBOL	script/wificoinconsensus.h	81;"	d
EXP_ARR_VALUE	univalue/lib/univalue_read.cpp	/^    EXP_ARR_VALUE = (1U << 2),$/;"	e	enum:expect_bits	file:
EXP_COLON	univalue/lib/univalue_read.cpp	/^    EXP_COLON = (1U << 1),$/;"	e	enum:expect_bits	file:
EXP_NOT_VALUE	univalue/lib/univalue_read.cpp	/^    EXP_NOT_VALUE = (1U << 4),$/;"	e	enum:expect_bits	file:
EXP_OBJ_NAME	univalue/lib/univalue_read.cpp	/^    EXP_OBJ_NAME = (1U << 0),$/;"	e	enum:expect_bits	file:
EXP_VALUE	univalue/lib/univalue_read.cpp	/^    EXP_VALUE = (1U << 3),$/;"	e	enum:expect_bits	file:
EXTENDED_FUNCTIONAL_TESTS	Makefile	/^EXTENDED_FUNCTIONAL_TESTS = $/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = $(CTAES_DIST)$/;"	m
EXTRA_DIST	secp256k1/Makefile	/^EXTRA_DIST = autogen.sh src\/gen_context.c src\/basic-config.h $(JAVA_FILES)$/;"	m
EXTRA_DIST	univalue/Makefile	/^EXTRA_DIST = $(TEST_FILES) $(GEN_SRCS)$/;"	m
EXTRA_LIBRARIES	Makefile	/^EXTRA_LIBRARIES = $(LIBWIFICOIN_CRYPTO) $(LIBWIFICOIN_UTIL) \\$/;"	m
EXTRA_PEER_CHECK_INTERVAL	net_processing.h	/^static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;$/;"	v
EXT_PUBLIC_KEY	chainparams.h	/^        EXT_PUBLIC_KEY,$/;"	e	enum:CChainParams::Base58Type
EXT_SECRET_KEY	chainparams.h	/^        EXT_SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
EditAddressDialog	qt/editaddressdialog.cpp	/^EditAddressDialog::EditAddressDialog(Mode _mode, QWidget *parent) :$/;"	f	class:EditAddressDialog
EditAddressDialog	qt/editaddressdialog.h	/^class EditAddressDialog : public QDialog$/;"	c
EditPush	test/script_tests.cpp	/^    TestBuilder& EditPush(unsigned int pos, const std::string& hexin, const std::string& hexout)$/;"	f	class:__anon80::TestBuilder
EditReceivingAddress	qt/editaddressdialog.h	/^        EditReceivingAddress,$/;"	e	enum:EditAddressDialog::Mode
EditSendingAddress	qt/editaddressdialog.h	/^        EditSendingAddress$/;"	e	enum:EditAddressDialog::Mode
EditStatus	qt/addresstablemodel.h	/^    enum EditStatus {$/;"	g	class:AddressTableModel
EmitPhysicalRecord	leveldb/db/log_writer.cc	/^Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr, size_t n) {$/;"	f	class:leveldb::log::Writer
EmptyIterator	leveldb/table/iterator.cc	/^  EmptyIterator(const Status& s) : status_(s) { }$/;"	f	class:leveldb::__anon42::EmptyIterator
EmptyIterator	leveldb/table/iterator.cc	/^class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon42	file:
EmptyQueue	scheduler.cpp	/^void SingleThreadedSchedulerClient::EmptyQueue() {$/;"	f	class:SingleThreadedSchedulerClient
Encode	key.cpp	/^void CExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtKey
Encode	leveldb/db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
Encode	pubkey.cpp	/^void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtPubKey
EncodeBase32	utilstrencodings.cpp	/^std::string EncodeBase32(const std::string& str)$/;"	f
EncodeBase32	utilstrencodings.cpp	/^std::string EncodeBase32(const unsigned char* pch, size_t len)$/;"	f
EncodeBase58	base58.cpp	/^std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58	base58.cpp	/^std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58Check	base58.cpp	/^std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	utilstrencodings.cpp	/^std::string EncodeBase64(const std::string& str)$/;"	f
EncodeBase64	utilstrencodings.cpp	/^std::string EncodeBase64(const unsigned char* pch, size_t len)$/;"	f
EncodeDumpString	wallet/rpcdump.cpp	/^std::string static EncodeDumpString(const std::string &str) {$/;"	f	file:
EncodeDumpTime	wallet/rpcdump.cpp	/^std::string static EncodeDumpTime(int64_t nTime) {$/;"	f	file:
EncodeFixed32	leveldb/util/coding.cc	/^void EncodeFixed32(char* buf, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	leveldb/util/coding.cc	/^void EncodeFixed64(char* buf, uint64_t value) {$/;"	f	namespace:leveldb
EncodeHexTx	core_write.cpp	/^std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags)$/;"	f
EncodeKey	leveldb/db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeKey	leveldb/util/cache_test.cc	/^static std::string EncodeKey(int k) {$/;"	f	namespace:leveldb
EncodeOP_N	script/script.h	/^    static opcodetype EncodeOP_N(int n)$/;"	f	class:CScript
EncodeTo	leveldb/db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	leveldb/table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	leveldb/table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeValue	leveldb/util/cache_test.cc	/^static void* EncodeValue(uintptr_t v) { return reinterpret_cast<void*>(v); }$/;"	f	namespace:leveldb
EncodeVarint32	leveldb/util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	leveldb/util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Encrypt	crypto/aes.cpp	/^int AES128CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const$/;"	f	class:AES128CBCEncrypt
Encrypt	crypto/aes.cpp	/^int AES256CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const$/;"	f	class:AES256CBCEncrypt
Encrypt	crypto/aes.cpp	/^void AES128Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const$/;"	f	class:AES128Encrypt
Encrypt	crypto/aes.cpp	/^void AES256Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const$/;"	f	class:AES256Encrypt
Encrypt	qt/askpassphrasedialog.h	/^        Encrypt,    \/**< Ask passphrase twice and encrypt *\/$/;"	e	enum:AskPassphraseDialog::Mode
Encrypt	wallet/crypter.cpp	/^bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext) const$/;"	f	class:CCrypter
EncryptKeys	wallet/crypter.cpp	/^bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
EncryptSecret	wallet/crypter.cpp	/^static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)$/;"	f	file:
EncryptWallet	wallet/wallet.cpp	/^bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
EncryptionStatus	qt/walletmodel.h	/^    enum EncryptionStatus$/;"	g	class:WalletModel
Enqueue	httpserver.cpp	/^    bool Enqueue(WorkItem* item)$/;"	f	class:WorkQueue
EnsureWalletIsAvailable	wallet/rpcwallet.cpp	/^bool EnsureWalletIsAvailable(CWallet * const pwallet, bool avoidException)$/;"	f
EnsureWalletIsUnlocked	wallet/rpcwallet.cpp	/^void EnsureWalletIsUnlocked(CWallet * const pwallet)$/;"	f
Enter	sync.h	/^    void Enter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
EnterCritical	sync.cpp	/^void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)$/;"	f
EnterCritical	sync.h	/^void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}$/;"	f
EntryDescriptionString	rpc/blockchain.cpp	/^std::string EntryDescriptionString()$/;"	f
Env	leveldb/include/leveldb/env.h	/^  Env() { }$/;"	f	class:leveldb::Env
Env	leveldb/include/leveldb/env.h	/^class Env {$/;"	c	namespace:leveldb
EnvPosixTest	leveldb/util/env_posix_test.cc	/^  EnvPosixTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvPosixTest
EnvPosixTest	leveldb/util/env_posix_test.cc	/^class EnvPosixTest {$/;"	c	namespace:leveldb	file:
EnvPosixTestHelper	leveldb/util/env_posix_test_helper.h	/^class EnvPosixTestHelper {$/;"	c	namespace:leveldb
EnvShutdown	wallet/db.cpp	/^void CDBEnv::EnvShutdown()$/;"	f	class:CDBEnv
EnvTest	leveldb/util/env_test.cc	/^  EnvTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvTest
EnvTest	leveldb/util/env_test.cc	/^class EnvTest {$/;"	c	namespace:leveldb	file:
EnvWrapper	leveldb/include/leveldb/env.h	/^  explicit EnvWrapper(Env* t) : target_(t) { }$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	leveldb/include/leveldb/env.h	/^class EnvWrapper : public Env {$/;"	c	namespace:leveldb
Equal	leveldb/db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
EqualTo	arith_uint256.cpp	/^bool base_uint<BITS>::EqualTo(uint64_t b) const$/;"	f	class:base_uint
Erase	dbwrapper.h	/^    bool Erase(const K& key, bool fSync = false)$/;"	f	class:CDBWrapper
Erase	dbwrapper.h	/^    void Erase(const K& key)$/;"	f	class:CDBBatch
Erase	leveldb/util/cache.cc	/^  virtual void Erase(const Slice& key) {$/;"	f	class:leveldb::__anon13::ShardedLRUCache
Erase	leveldb/util/cache.cc	/^void LRUCache::Erase(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon13::LRUCache
Erase	leveldb/util/cache_test.cc	/^  void Erase(int key) {$/;"	f	class:leveldb::CacheTest
Erase	wallet/db.h	/^    bool Erase(const K& key)$/;"	f	class:CDB
EraseDestData	wallet/wallet.cpp	/^bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)$/;"	f	class:CWallet
EraseDestData	wallet/walletdb.cpp	/^bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)$/;"	f	class:CWalletDB
EraseIC	wallet/walletdb.h	/^    bool EraseIC(const K& key)$/;"	f	class:CWalletDB
EraseName	wallet/walletdb.cpp	/^bool CWalletDB::EraseName(const std::string& strAddress)$/;"	f	class:CWalletDB
EraseOrphansFor	net_processing.cpp	/^void EraseOrphansFor(NodeId peer)$/;"	f
ErasePool	wallet/walletdb.cpp	/^bool CWalletDB::ErasePool(int64_t nPool)$/;"	f	class:CWalletDB
ErasePurpose	wallet/walletdb.cpp	/^bool CWalletDB::ErasePurpose(const std::string& strPurpose)$/;"	f	class:CWalletDB
EraseTx	wallet/walletdb.cpp	/^bool CWalletDB::EraseTx(uint256 hash)$/;"	f	class:CWalletDB
EraseWatchOnly	wallet/walletdb.cpp	/^bool CWalletDB::EraseWatchOnly(const CScript &dest)$/;"	f	class:CWalletDB
Error	consensus/validation.h	/^    bool Error(const std::string& strRejectReasonIn) {$/;"	f	class:CValidationState
ErrorCheck	leveldb/doc/bench/db_bench_sqlite3.cc	/^static void ErrorCheck(int status) {$/;"	f	file:
ErrorEnv	leveldb/util/testutil.h	/^  ErrorEnv() : EnvWrapper(Env::Default()),$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	leveldb/util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
EscapeString	leveldb/util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
EstimateMedianVal	policy/fees.cpp	/^double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,$/;"	f	class:TxConfirmStats
EstimateSize	coins.cpp	/^size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }$/;"	f	class:CCoinsViewBacked
EstimateSize	coins.h	/^    virtual size_t EstimateSize() const { return 0; }$/;"	f	class:CCoinsView
EstimateSize	dbwrapper.h	/^    size_t EstimateSize(const K& key_begin, const K& key_end) const$/;"	f	class:CDBWrapper
EstimateSize	txdb.cpp	/^size_t CCoinsViewDB::EstimateSize() const$/;"	f	class:CCoinsViewDB
EstimationResult	policy/fees.h	/^struct EstimationResult$/;"	s
EstimatorBucket	policy/fees.h	/^struct EstimatorBucket$/;"	s
EvalScript	script/interpreter.cpp	/^bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)$/;"	f
EvaluateSequenceLocks	consensus/tx_verify.cpp	/^bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)$/;"	f
EventBase	httpserver.cpp	/^struct event_base* EventBase()$/;"	f
Evict	leveldb/db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
EvictExtraOutboundPeers	net_processing.cpp	/^void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)$/;"	f	class:PeerLogicValidation
ExecErrorCheck	leveldb/doc/bench/db_bench_sqlite3.cc	/^static void ExecErrorCheck(int status, char *err_msg) {$/;"	f	file:
Exists	dbwrapper.h	/^    bool Exists(const K& key) const$/;"	f	class:CDBWrapper
Exists	wallet/db.h	/^    bool Exists(const K& key)$/;"	f	class:CDB
ExpandedCompactionByteSizeLimit	leveldb/db/version_set.cc	/^static int64_t ExpandedCompactionByteSizeLimit(const Options* options) {$/;"	f	namespace:leveldb
ExpectedVerifResult	leveldb/db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	g	class:leveldb::FaultInjectionTest	file:
Expire	txmempool.cpp	/^int CTxMemPool::Expire(int64_t time) {$/;"	f	class:CTxMemPool
Extend	leveldb/util/crc32c.cc	/^uint32_t Extend(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::crc32c
ExtractAndValidateValue	wificoin-tx.cpp	/^static CAmount ExtractAndValidateValue(const std::string& strValue)$/;"	f	file:
ExtractDestination	script/standard.cpp	/^bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)$/;"	f
ExtractDestinations	script/standard.cpp	/^bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet)$/;"	f
ExtractMatches	merkleblock.cpp	/^uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {$/;"	f	class:CPartialMerkleTree
ExtractMetaData	leveldb/db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon26::Repairer	file:
ExtractPubKey	keystore.cpp	/^static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)$/;"	f	file:
ExtractUserKey	leveldb/db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
ExtractValueType	leveldb/db/dbformat.h	/^inline ValueType ExtractValueType(const Slice& internal_key) {$/;"	f	namespace:leveldb
FAIL	test/coins_tests.cpp	/^const static CAmount FAIL = -3;$/;"	v	file:
FALLBACK	policy/fees.h	/^    FALLBACK,$/;"	m	class:FeeReason
FALLTHROUGH_INTENDED	leveldb/util/hash.cc	13;"	d	file:
FD_SETSIZE	compat.h	25;"	d
FD_SETSIZE	compat.h	27;"	d
FEATURE_BASE	wallet/wallet.h	/^    FEATURE_BASE = 10500, \/\/ the earliest version new wallets supports (only useful for getinfo's clientversion output)$/;"	e	enum:WalletFeature
FEATURE_COMPRPUBKEY	wallet/wallet.h	/^    FEATURE_COMPRPUBKEY = 60000, \/\/ compressed public keys$/;"	e	enum:WalletFeature
FEATURE_HD	wallet/wallet.h	/^    FEATURE_HD = 130000, \/\/ Hierarchical key derivation after BIP32 (HD Wallet)$/;"	e	enum:WalletFeature
FEATURE_HD_SPLIT	wallet/wallet.h	/^    FEATURE_HD_SPLIT = 139900, \/\/ Wallet with HD chain split (change outputs will use m\/0'\/1'\/k)$/;"	e	enum:WalletFeature
FEATURE_LATEST	wallet/wallet.h	/^    FEATURE_LATEST = FEATURE_COMPRPUBKEY \/\/ HD is optional, use FEATURE_COMPRPUBKEY as latest version$/;"	e	enum:WalletFeature
FEATURE_WALLETCRYPT	wallet/wallet.h	/^    FEATURE_WALLETCRYPT = 40000, \/\/ wallet encryption$/;"	e	enum:WalletFeature
FEEFILTER	protocol.cpp	/^const char *FEEFILTER="feefilter";$/;"	m	namespace:NetMsgType	file:
FEEFILTER_VERSION	version.h	/^static const int FEEFILTER_VERSION = 70013;$/;"	v
FEELER_INTERVAL	net.h	/^static const int FEELER_INTERVAL = 120;$/;"	v
FEELER_SLEEP_WINDOW	net.cpp	45;"	d	file:
FEE_ESTIMATES_FILENAME	init.cpp	/^static const char* FEE_ESTIMATES_FILENAME="fee_estimates.dat";$/;"	v	file:
FEE_FILTER_SPACING	policy/fees.h	/^    static constexpr double FEE_FILTER_SPACING = 1.1;$/;"	m	class:FeeFilterRounder
FEE_SPACING	policy/fees.h	/^    static constexpr double FEE_SPACING = 1.05;$/;"	m	class:CBlockPolicyEstimator
FGREP	Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FGREP	secp256k1/Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FGREP	univalue/Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FIGURE_SP_CP	qt/wificoinunits.h	29;"	d
FIGURE_SP_HTML	qt/wificoinunits.h	31;"	d
FIGURE_SP_UTF8	qt/wificoinunits.h	30;"	d
FILTERADD	protocol.cpp	/^const char *FILTERADD="filteradd";$/;"	m	namespace:NetMsgType	file:
FILTERCLEAR	protocol.cpp	/^const char *FILTERCLEAR="filterclear";$/;"	m	namespace:NetMsgType	file:
FILTERLOAD	protocol.cpp	/^const char *FILTERLOAD="filterload";$/;"	m	namespace:NetMsgType	file:
FLAGS	test/coins_tests.cpp	/^const static auto FLAGS = {char(0), FRESH, DIRTY, char(DIRTY | FRESH)};$/;"	v	file:
FLAGS_WAL_enabled	leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_WAL_enabled = true;$/;"	v	file:
FLAGS_benchmarks	leveldb/db/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	leveldb/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	leveldb/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_block_size	leveldb/db/db_bench.cc	/^static int FLAGS_block_size = 0;$/;"	v	file:
FLAGS_bloom_bits	leveldb/db/db_bench.cc	/^static int FLAGS_bloom_bits = -1;$/;"	v	file:
FLAGS_cache_size	leveldb/db/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v	file:
FLAGS_cache_size	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_cache_size = 4194304;$/;"	v	file:
FLAGS_compression	leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_compression = true;$/;"	v	file:
FLAGS_compression_ratio	leveldb/db/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	leveldb/doc/bench/db_bench_sqlite3.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	leveldb/doc/bench/db_bench_tree_db.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_db	leveldb/db/db_bench.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	leveldb/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	leveldb/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_histogram	leveldb/db/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_max_file_size	leveldb/db/db_bench.cc	/^static int FLAGS_max_file_size = 0;$/;"	v	file:
FLAGS_num	leveldb/db/db_bench.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num_pages	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num_pages = 4096;$/;"	v	file:
FLAGS_open_files	leveldb/db/db_bench.cc	/^static int FLAGS_open_files = 0;$/;"	v	file:
FLAGS_page_size	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_page_size	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_reads	leveldb/db/db_bench.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reuse_logs	leveldb/db/db_bench.cc	/^static bool FLAGS_reuse_logs = false;$/;"	v	file:
FLAGS_threads	leveldb/db/db_bench.cc	/^static int FLAGS_threads = 1;$/;"	v	file:
FLAGS_transaction	leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_transaction = true;$/;"	v	file:
FLAGS_use_existing_db	leveldb/db/db_bench.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_value_size	leveldb/db/db_bench.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_write_buffer_size	leveldb/db/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v	file:
FLATDATA	serialize.h	354;"	d
FLUSH_STATE_ALWAYS	validation.cpp	/^    FLUSH_STATE_ALWAYS$/;"	e	enum:FlushStateMode	file:
FLUSH_STATE_IF_NEEDED	validation.cpp	/^    FLUSH_STATE_IF_NEEDED,$/;"	e	enum:FlushStateMode	file:
FLUSH_STATE_NONE	validation.cpp	/^    FLUSH_STATE_NONE,$/;"	e	enum:FlushStateMode	file:
FLUSH_STATE_PERIODIC	validation.cpp	/^    FLUSH_STATE_PERIODIC,$/;"	e	enum:FlushStateMode	file:
FREEDESKTOP_NOTIFICATION_ICON_SIZE	qt/notificator.cpp	/^const int FREEDESKTOP_NOTIFICATION_ICON_SIZE = 128;$/;"	v
FRESH	coins.h	/^        FRESH = (1 << 1), \/\/ The parent view does not have this entry (or it is pruned).$/;"	e	enum:CCoinsCacheEntry::Flags
FRESH	leveldb/doc/bench/db_bench_sqlite3.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	leveldb/doc/bench/db_bench_tree_db.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	test/coins_tests.cpp	/^const static char FRESH = CCoinsCacheEntry::FRESH;$/;"	v	file:
FULL_ESTIMATE	policy/fees.h	/^    FULL_ESTIMATE,$/;"	m	class:FeeReason
FailingCheck	test/checkqueue_tests.cpp	/^    FailingCheck() : fails(true){};$/;"	f	struct:FailingCheck
FailingCheck	test/checkqueue_tests.cpp	/^    FailingCheck(bool _fails) : fails(_fails){};$/;"	f	struct:FailingCheck
FailingCheck	test/checkqueue_tests.cpp	/^struct FailingCheck {$/;"	s	file:
Failing_Queue	test/checkqueue_tests.cpp	/^typedef CCheckQueue<FailingCheck> Failing_Queue;$/;"	t	file:
FakeCheck	test/checkqueue_tests.cpp	/^struct FakeCheck {$/;"	s	file:
FakeCheckCheckCompletion	test/checkqueue_tests.cpp	/^struct FakeCheckCheckCompletion {$/;"	s	file:
FalsePositiveRate	leveldb/util/bloom_test.cc	/^  double FalsePositiveRate() {$/;"	f	class:leveldb::BloomTest
FastRandomContext	random.cpp	/^FastRandomContext::FastRandomContext(bool fDeterministic) : requires_seed(!fDeterministic), bytebuf_size(0), bitbuf_size(0)$/;"	f	class:FastRandomContext
FastRandomContext	random.cpp	/^FastRandomContext::FastRandomContext(const uint256& seed) : requires_seed(false), bytebuf_size(0), bitbuf_size(0)$/;"	f	class:FastRandomContext
FastRandomContext	random.h	/^class FastRandomContext {$/;"	c
FastRandom_1bit	bench/crypto_hash.cpp	/^BENCHMARK(FastRandom_1bit);$/;"	v
FastRandom_1bit	bench/crypto_hash.cpp	/^static void FastRandom_1bit(benchmark::State& state)$/;"	f	file:
FastRandom_32bit	bench/crypto_hash.cpp	/^BENCHMARK(FastRandom_32bit);$/;"	v
FastRandom_32bit	bench/crypto_hash.cpp	/^static void FastRandom_32bit(benchmark::State& state)$/;"	f	file:
FaultInjectionTest	leveldb/db/fault_injection_test.cc	/^  FaultInjectionTest()$/;"	f	class:leveldb::FaultInjectionTest
FaultInjectionTest	leveldb/db/fault_injection_test.cc	/^class FaultInjectionTest {$/;"	c	namespace:leveldb	file:
FaultInjectionTestEnv	leveldb/db/fault_injection_test.cc	/^  FaultInjectionTestEnv() : EnvWrapper(Env::Default()), filesystem_active_(true) {}$/;"	f	class:leveldb::FaultInjectionTestEnv
FaultInjectionTestEnv	leveldb/db/fault_injection_test.cc	/^class FaultInjectionTestEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
Fee	test/test_wificoin.h	/^    TestMemPoolEntryHelper &Fee(CAmount _fee) { nFee = _fee; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
FeeCalculation	policy/fees.h	/^struct FeeCalculation$/;"	s
FeeEstimateHorizon	policy/fees.h	/^enum FeeEstimateHorizon {$/;"	g
FeeEstimateMode	policy/fees.h	/^enum class FeeEstimateMode {$/;"	c
FeeFilterRounder	policy/fees.cpp	/^FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)$/;"	f	class:FeeFilterRounder
FeeFilterRounder	policy/fees.h	/^class FeeFilterRounder$/;"	c
FeeModeFromString	policy/fees.cpp	/^bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode) {$/;"	f
FeeReason	policy/fees.h	/^enum class FeeReason {$/;"	c
FetchCoin	coins.cpp	/^CCoinsMap::iterator CCoinsViewCache::FetchCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
FileCommit	util.cpp	/^void FileCommit(FILE *file)$/;"	f
FileExists	leveldb/helpers/memenv/memenv.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
FileExists	leveldb/include/leveldb/env.h	/^  bool FileExists(const std::string& f) { return target_->FileExists(f); }$/;"	f	class:leveldb::EnvWrapper
FileExists	leveldb/util/env_posix.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon11::PosixEnv
FileExists	leveldb/util/env_win.cc	/^bool Win32Env::FileExists(const std::string& fname)$/;"	f	class:leveldb::Win32::Win32Env
FileLock	leveldb/include/leveldb/env.h	/^  FileLock() { }$/;"	f	class:leveldb::FileLock
FileLock	leveldb/include/leveldb/env.h	/^class FileLock {$/;"	c	namespace:leveldb
FileMetaData	leveldb/db/version_edit.h	/^  FileMetaData() : refs(0), allowed_seeks(1 << 30), file_size(0) { }$/;"	f	struct:leveldb::FileMetaData
FileMetaData	leveldb/db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileNameTest	leveldb/db/filename_test.cc	/^class FileNameTest { };$/;"	c	namespace:leveldb	file:
FileSet	leveldb/db/version_set.cc	/^  typedef std::set<FileMetaData*, BySmallestKey> FileSet;$/;"	t	class:leveldb::VersionSet::Builder	file:
FileSize	leveldb/db/recovery_test.cc	/^  uint64_t FileSize(const std::string& fname) {$/;"	f	class:leveldb::RecoveryTest
FileSize	leveldb/table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const {$/;"	f	class:leveldb::TableBuilder
FileState	leveldb/db/fault_injection_test.cc	/^  FileState() : pos_(-1), pos_at_last_sync_(-1), pos_at_last_flush_(-1) {}$/;"	f	struct:leveldb::__anon21::FileState
FileState	leveldb/db/fault_injection_test.cc	/^  FileState(const std::string& filename)$/;"	f	struct:leveldb::__anon21::FileState
FileState	leveldb/db/fault_injection_test.cc	/^struct FileState {$/;"	s	namespace:leveldb::__anon21	file:
FileState	leveldb/helpers/memenv/memenv.cc	/^  FileState() : refs_(0), size_(0) {}$/;"	f	class:leveldb::__anon16::FileState
FileState	leveldb/helpers/memenv/memenv.cc	/^class FileState {$/;"	c	namespace:leveldb::__anon16	file:
FileSystem	leveldb/helpers/memenv/memenv.cc	/^  typedef std::map<std::string, FileState*> FileSystem;$/;"	t	class:leveldb::__anon16::InMemoryEnv	file:
FileType	leveldb/db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
FileWriteStr	util.cpp	/^static int FileWriteStr(const std::string &str, FILE *fp)$/;"	f	file:
FilesPerLevel	leveldb/db/db_test.cc	/^  std::string FilesPerLevel() {$/;"	f	class:leveldb::DBTest
Fill	streams.h	/^    bool Fill() {$/;"	f	class:CBufferedFile
FillBitBuffer	random.h	/^    void FillBitBuffer()$/;"	f	class:FastRandomContext
FillBlock	blockencodings.cpp	/^ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) {$/;"	f	class:PartiallyDownloadedBlock
FillByteBuffer	random.h	/^    void FillByteBuffer()$/;"	f	class:FastRandomContext
FillLevels	leveldb/db/db_test.cc	/^  void FillLevels(const std::string& smallest, const std::string& largest) {$/;"	f	class:leveldb::DBTest
FillShortTxIDSelector	blockencodings.cpp	/^void CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {$/;"	f	class:CBlockHeaderAndShortTxIDs
FilterBlockBuilder	leveldb/table/filter_block.cc	/^FilterBlockBuilder::FilterBlockBuilder(const FilterPolicy* policy)$/;"	f	class:leveldb::FilterBlockBuilder
FilterBlockBuilder	leveldb/table/filter_block.h	/^class FilterBlockBuilder {$/;"	c	namespace:leveldb
FilterBlockReader	leveldb/table/filter_block.cc	/^FilterBlockReader::FilterBlockReader(const FilterPolicy* policy,$/;"	f	class:leveldb::FilterBlockReader
FilterBlockReader	leveldb/table/filter_block.h	/^class FilterBlockReader {$/;"	c	namespace:leveldb
FilterBlockTest	leveldb/table/filter_block_test.cc	/^class FilterBlockTest {$/;"	c	namespace:leveldb	file:
FilterCreate	leveldb/db/c_test.c	/^static char* FilterCreate($/;"	f	file:
FilterDestroy	leveldb/db/c_test.c	/^static void FilterDestroy(void* arg) { }$/;"	f	file:
FilterKeyMatch	leveldb/db/c_test.c	/^unsigned char FilterKeyMatch($/;"	f
FilterName	leveldb/db/c_test.c	/^static const char* FilterName(void* arg) {$/;"	f	file:
FilterPolicy	leveldb/include/leveldb/filter_policy.h	/^class FilterPolicy {$/;"	c	namespace:leveldb
FilterSize	leveldb/util/bloom_test.cc	/^  size_t FilterSize() const {$/;"	f	class:leveldb::BloomTest
Finalize	crypto/hmac_sha256.cpp	/^void CHMAC_SHA256::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHMAC_SHA256
Finalize	crypto/hmac_sha512.cpp	/^void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHMAC_SHA512
Finalize	crypto/ripemd160.cpp	/^void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CRIPEMD160
Finalize	crypto/sha1.cpp	/^void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA1
Finalize	crypto/sha256.cpp	/^void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA256
Finalize	crypto/sha512.cpp	/^void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA512
Finalize	hash.cpp	/^uint64_t CSipHasher::Finalize() const$/;"	f	class:CSipHasher
Finalize	hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash160
Finalize	hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash256
Finalize	leveldb/db/version_set.cc	/^void VersionSet::Finalize(Version* v) {$/;"	f	class:leveldb::VersionSet
FinalizeNode	net_processing.cpp	/^void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {$/;"	f	class:PeerLogicValidation
Find	addrman.cpp	/^CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)$/;"	f	class:CAddrMan
Find	leveldb/db/version_set_test.cc	/^  int Find(const char* key) {$/;"	f	class:leveldb::FindFileTest
Find	script/script.h	/^    int Find(opcodetype op) const$/;"	f	class:CScript
Find	test/addrman_tests.cpp	/^    CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)$/;"	f	class:CAddrManTest
FindAndDelete	script/script.h	/^    int FindAndDelete(const CScript& b)$/;"	f	class:CScript
FindBlockPos	validation.cpp	/^static bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)$/;"	f	file:
FindByte	streams.h	/^    void FindByte(char ch) {$/;"	f	class:CBufferedFile
FindEarliestAtLeast	chain.cpp	/^CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const$/;"	f	class:CChain
FindFile	leveldb/db/version_set.cc	/^int FindFile(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindFileTest	leveldb/db/version_set_test.cc	/^  FindFileTest() : disjoint_sorted_files_(true) { }$/;"	f	class:leveldb::FindFileTest
FindFileTest	leveldb/db/version_set_test.cc	/^class FindFileTest {$/;"	c	namespace:leveldb	file:
FindFiles	leveldb/db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon26::Repairer	file:
FindFilesToPrune	validation.cpp	/^static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)$/;"	f	file:
FindFilesToPruneManual	validation.cpp	/^static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight)$/;"	f	file:
FindFork	chain.cpp	/^const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {$/;"	f	class:CChain
FindForkInGlobalIndex	validation.cpp	/^CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)$/;"	f
FindGreaterOrEqual	leveldb/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindGreaterOrEqual(const Key& key, Node** prev)$/;"	f	class:leveldb::SkipList
FindLargest	leveldb/table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon36::MergingIterator
FindLast	leveldb/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindMostWorkChain	validation.cpp	/^static CBlockIndex* FindMostWorkChain() {$/;"	f	file:
FindNextBlocksToDownload	net_processing.cpp	/^void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {$/;"	f	namespace:__anon50
FindNextUserEntry	leveldb/db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon20::DBIter
FindNode	net.cpp	/^CNode* CConnman::FindNode(const CNetAddr& ip)$/;"	f	class:CConnman
FindNode	net.cpp	/^CNode* CConnman::FindNode(const CService& addr)$/;"	f	class:CConnman
FindNode	net.cpp	/^CNode* CConnman::FindNode(const CSubNet& subNet)$/;"	f	class:CConnman
FindNode	net.cpp	/^CNode* CConnman::FindNode(const std::string& addrName)$/;"	f	class:CConnman
FindNonChangeParentOutput	wallet/wallet.cpp	/^const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int output) const$/;"	f	class:CWallet
FindPointer	leveldb/util/cache.cc	/^  LRUHandle** FindPointer(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon13::HandleTable	file:
FindPrevUserEntry	leveldb/db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon20::DBIter
FindRandomFrom	test/coins_tests.cpp	/^UtxoData::iterator FindRandomFrom(const std::set<COutPoint> &utxoSet) {$/;"	f
FindShortSuccessor	leveldb/db/c.cc	/^  virtual void FindShortSuccessor(std::string* key) const { }$/;"	f	struct:leveldb_comparator_t
FindShortSuccessor	leveldb/db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortSuccessor	leveldb/table/table_test.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon40::ReverseKeyComparator
FindShortSuccessor	leveldb/util/comparator.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon9::BytewiseComparatorImpl
FindShortestSeparator	leveldb/db/c.cc	/^  virtual void FindShortestSeparator(std::string*, const Slice&) const { }$/;"	f	struct:leveldb_comparator_t
FindShortestSeparator	leveldb/db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator($/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	leveldb/table/table_test.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon40::ReverseKeyComparator
FindShortestSeparator	leveldb/util/comparator.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon9::BytewiseComparatorImpl
FindSmallest	leveldb/table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon36::MergingIterator
FindTable	leveldb/db/table_cache.cc	/^Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,$/;"	f	class:leveldb::TableCache
FindTx	qt/test/wallettests.cpp	/^QModelIndex FindTx(const QAbstractItemModel& model, const uint256& txid)$/;"	f	namespace:__anon108
FindUndoPos	validation.cpp	/^static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize)$/;"	f	file:
FindWalletTx	wallet/walletdb.cpp	/^DBErrors CWalletDB::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx)$/;"	f	class:CWalletDB
Finish	leveldb/table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	leveldb/table/filter_block.cc	/^Slice FilterBlockBuilder::Finish() {$/;"	f	class:leveldb::FilterBlockBuilder
Finish	leveldb/table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
Finish	leveldb/table/table_test.cc	/^  void Finish(const Options& options,$/;"	f	class:leveldb::Constructor
FinishCompactionOutputFile	leveldb/db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishErase	leveldb/util/cache.cc	/^bool LRUCache::FinishErase(LRUHandle* e) {$/;"	f	class:leveldb::__anon13::LRUCache
FinishImpl	leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::BlockConstructor
FinishImpl	leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::DBConstructor
FinishImpl	leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::MemTableConstructor
FinishImpl	leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::TableConstructor
FinishedSingleOp	leveldb/db/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::__anon18::Stats
FinishedSingleOp	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FinishedSingleOp	leveldb/doc/bench/db_bench_tree_db.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FirstLogFile	leveldb/db/recovery_test.cc	/^  uint64_t FirstLogFile() {$/;"	f	class:leveldb::RecoveryTest
FixChecksum	leveldb/db/log_test.cc	/^  void FixChecksum(int header_offset, int len) {$/;"	f	class:leveldb::log::LogTest
FixedSeeds	chainparams.h	/^    const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }$/;"	f	class:CChainParams
Flags	coins.h	/^    enum Flags {$/;"	g	struct:CCoinsCacheEntry
Flush	coins.cpp	/^bool CCoinsViewCache::Flush() {$/;"	f	class:CCoinsViewCache
Flush	dbwrapper.h	/^    bool Flush()$/;"	f	class:CDBWrapper
Flush	leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Flush() {$/;"	f	class:leveldb::TestWritableFile
Flush	leveldb/db/leveldbutil.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon23::StdoutPrinter
Flush	leveldb/db/log_test.cc	/^    virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Flush	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon16::WritableFileImpl
Flush	leveldb/table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
Flush	leveldb/table/table_test.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Flush	leveldb/util/env_posix.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon11::PosixWritableFile
Flush	leveldb/util/env_win.cc	/^Status Win32WritableFile::Flush()$/;"	f	class:leveldb::Win32::Win32WritableFile
Flush	wallet/db.cpp	/^void CDB::Flush()$/;"	f	class:CDB
Flush	wallet/db.cpp	/^void CDBEnv::Flush(bool fShutdown)$/;"	f	class:CDBEnv
Flush	wallet/db.cpp	/^void CWalletDBWrapper::Flush(bool shutdown)$/;"	f	class:CWalletDBWrapper
Flush	wallet/wallet.cpp	/^void CWallet::Flush(bool shutdown)$/;"	f	class:CWallet
FlushBackgroundCallbacks	validationinterface.cpp	/^void CMainSignals::FlushBackgroundCallbacks() {$/;"	f	class:CMainSignals
FlushBlockFile	validation.cpp	/^void static FlushBlockFile(bool fFinalize = false)$/;"	f	file:
FlushStateMode	validation.cpp	/^enum FlushStateMode {$/;"	g	file:
FlushStateToDisk	validation.cpp	/^bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {$/;"	f	file:
FlushStateToDisk	validation.cpp	/^void FlushStateToDisk() {$/;"	f
FlushUnconfirmed	policy/fees.cpp	/^void CBlockPolicyEstimator::FlushUnconfirmed(CTxMemPool& pool) {$/;"	f	class:CBlockPolicyEstimator
Footer	leveldb/table/format.h	/^  Footer() { }$/;"	f	class:leveldb::Footer
Footer	leveldb/table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForEachNode	net.h	/^    void ForEachNode(Callable&& func) const$/;"	f	class:CConnman
ForEachNode	net.h	/^    void ForEachNode(Callable&& func)$/;"	f	class:CConnman
ForEachNodeThen	net.h	/^    void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const$/;"	f	class:CConnman
ForEachNodeThen	net.h	/^    void ForEachNodeThen(Callable&& pre, CallableAfter&& post)$/;"	f	class:CConnman
ForEachOverlapping	leveldb/db/version_set.cc	/^void Version::ForEachOverlapping(Slice user_key, Slice internal_key,$/;"	f	class:leveldb::Version
ForEditing	qt/addressbookpage.h	/^        ForEditing  \/**< Open address book for editing *\/$/;"	e	enum:AddressBookPage::Mode
ForNode	net.cpp	/^bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)$/;"	f	class:CConnman
ForRead	serialize.h	/^    constexpr bool ForRead() const { return false; }$/;"	f	struct:CSerActionSerialize
ForRead	serialize.h	/^    constexpr bool ForRead() const { return true; }$/;"	f	struct:CSerActionUnserialize
ForSelection	qt/addressbookpage.h	/^        ForSelection, \/**< Open address book to pick address *\/$/;"	e	enum:AddressBookPage::Mode
ForceError	leveldb/db/log_test.cc	/^  void ForceError() {$/;"	f	class:leveldb::log::LogTest
ForceSetArg	util.cpp	/^void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)$/;"	f	class:ArgsManager
FormatArg	tinyformat.h	/^        FormatArg() {}$/;"	f	class:tinyformat::detail::FormatArg
FormatArg	tinyformat.h	/^        FormatArg(const T& value)$/;"	f	class:tinyformat::detail::FormatArg
FormatArg	tinyformat.h	/^class FormatArg$/;"	c	namespace:tinyformat::detail
FormatBytes	qt/rpcconsole.cpp	/^QString RPCConsole::FormatBytes(quint64 bytes)$/;"	f	class:RPCConsole
FormatException	util.cpp	/^static std::string FormatException(const std::exception* pex, const char* pszThread)$/;"	f	file:
FormatFullVersion	clientversion.cpp	/^std::string FormatFullVersion()$/;"	f
FormatList	tinyformat.h	/^        FormatList(detail::FormatArg* formatters, int N)$/;"	f	class:tinyformat::FormatList
FormatList	tinyformat.h	/^class FormatList$/;"	c	namespace:tinyformat
FormatListN	tinyformat.h	/^        FormatListN(const Args&... args)$/;"	f	class:tinyformat::detail::FormatListN
FormatListN	tinyformat.h	/^    public: FormatListN() : FormatList(0, 0) {}$/;"	f	class:tinyformat::detail::FormatListN
FormatListN	tinyformat.h	/^class FormatListN : public FormatList$/;"	c	namespace:tinyformat::detail
FormatListN	tinyformat.h	/^template<> class FormatListN<0> : public FormatList$/;"	c	namespace:tinyformat::detail
FormatListRef	tinyformat.h	/^typedef const FormatList& FormatListRef;$/;"	t	namespace:tinyformat
FormatMoney	utilmoneystr.cpp	/^std::string FormatMoney(const CAmount& n)$/;"	f
FormatParagraph	utilstrencodings.cpp	/^std::string FormatParagraph(const std::string& in, size_t width, size_t indent)$/;"	f
FormatScript	core_write.cpp	/^std::string FormatScript(const CScript& script)$/;"	f
FormatScriptError	test/script_tests.cpp	/^const char *FormatScriptError(ScriptError_t err)$/;"	f
FormatScriptFlags	test/transaction_tests.cpp	/^std::string FormatScriptFlags(unsigned int flags)$/;"	f
FormatStateMessage	validation.cpp	/^std::string FormatStateMessage(const CValidationState &state)$/;"	f
FormatStringFromLogArgs	util.h	/^template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }$/;"	f
FormatSubVersion	clientversion.cpp	/^std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)$/;"	f
FormatTest	leveldb/db/dbformat_test.cc	/^class FormatTest { };$/;"	c	namespace:leveldb	file:
FormatTxStatus	qt/transactiondesc.cpp	/^QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)$/;"	f	class:TransactionDesc
FormatVersion	clientversion.cpp	/^static std::string FormatVersion(int nVersion)$/;"	f	file:
FormattedAmountRole	qt/transactiontablemodel.h	/^        FormattedAmountRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Free	leveldb/db/c_test.c	/^static void Free(char** ptr) {$/;"	f	file:
FreeLocked	support/lockedpool.cpp	/^void PosixLockedPageAllocator::FreeLocked(void* addr, size_t len)$/;"	f	class:PosixLockedPageAllocator
FreeLocked	support/lockedpool.cpp	/^void Win32LockedPageAllocator::FreeLocked(void* addr, size_t len)$/;"	f	class:Win32LockedPageAllocator
Freedesktop	qt/notificator.h	/^        Freedesktop,                \/**< Use DBus org.freedesktop.Notifications *\/$/;"	e	enum:Notificator::Mode
FreedesktopImage	qt/notificator.cpp	/^    FreedesktopImage() {}$/;"	f	class:FreedesktopImage
FreedesktopImage	qt/notificator.cpp	/^FreedesktopImage::FreedesktopImage(const QImage &img):$/;"	f	class:FreedesktopImage
FreedesktopImage	qt/notificator.cpp	/^Q_DECLARE_METATYPE(FreedesktopImage);$/;"	v
FreedesktopImage	qt/notificator.cpp	/^class FreedesktopImage$/;"	c	file:
FreespaceChecker	qt/intro.cpp	/^FreespaceChecker::FreespaceChecker(Intro *_intro)$/;"	f	class:FreespaceChecker
FreespaceChecker	qt/intro.cpp	/^class FreespaceChecker : public QObject$/;"	c	file:
FromTx	test/test_wificoin.cpp	/^CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx) {$/;"	f	class:TestMemPoolEntryHelper
FromTx	test/test_wificoin.cpp	/^CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn) {$/;"	f	class:TestMemPoolEntryHelper
FrozenCleanupCheck	test/checkqueue_tests.cpp	/^    FrozenCleanupCheck() {}$/;"	f	struct:FrozenCleanupCheck
FrozenCleanupCheck	test/checkqueue_tests.cpp	/^struct FrozenCleanupCheck {$/;"	s	file:
FrozenCleanup_Queue	test/checkqueue_tests.cpp	/^typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;$/;"	t	file:
Function	scheduler.h	/^    typedef std::function<void(void)> Function;$/;"	t	class:CScheduler
FunctionCallback	qt/callback.h	/^    FunctionCallback(F f_) : f(std::move(f_)) {}$/;"	f	class:FunctionCallback
FunctionCallback	qt/callback.h	/^class FunctionCallback : public Callback$/;"	c
FundTransaction	wallet/wallet.cpp	/^bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)$/;"	f	class:CWallet
GB_BYTES	qt/intro.cpp	/^static const uint64_t GB_BYTES = 1000000000LL;$/;"	v	file:
GCOV	Makefile	/^GCOV = \/usr\/bin\/gcov$/;"	m
GENBIN	univalue/Makefile	/^GENBIN = gen\/gen$(BUILD_EXEEXT)$/;"	m
GENERATED_TEST_FILES	Makefile	/^GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)$/;"	m
GENERATED_TEST_FILES	Makefile	/^GENERATED_TEST_FILES = $(RAW_TEST_FILES:.raw=.raw.h)$/;"	m
GENFAILURE	netbase.cpp	/^    GENFAILURE = 0x01,       \/\/! General failure$/;"	e	enum:uint8_t	file:
GENHTML	Makefile	/^GENHTML = $/;"	m
GENISOIMAGE	Makefile	/^GENISOIMAGE = $/;"	m
GEN_SRCS	univalue/Makefile	/^GEN_SRCS = gen\/gen.cpp$/;"	m
GET	httpserver.h	/^        GET,$/;"	e	enum:HTTPRequest::RequestMethod
GETADDR	protocol.cpp	/^const char *GETADDR="getaddr";$/;"	m	namespace:NetMsgType	file:
GETBLOCKS	protocol.cpp	/^const char *GETBLOCKS="getblocks";$/;"	m	namespace:NetMsgType	file:
GETBLOCKTXN	protocol.cpp	/^const char *GETBLOCKTXN="getblocktxn";$/;"	m	namespace:NetMsgType	file:
GETDATA	protocol.cpp	/^const char *GETDATA="getdata";$/;"	m	namespace:NetMsgType	file:
GETHEADERS	protocol.cpp	/^const char *GETHEADERS="getheaders";$/;"	m	namespace:NetMsgType	file:
GETHEADERS_VERSION	version.h	/^static const int GETHEADERS_VERSION = 31800;$/;"	v
GIT	Makefile	/^GIT = \/usr\/bin\/git$/;"	m
GIT_COMMIT_DATE	clientversion.cpp	48;"	d	file:
GIT_COMMIT_ID	clientversion.cpp	47;"	d	file:
GREP	Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	secp256k1/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	univalue/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GSSAPI	netbase.cpp	/^    GSSAPI = 0x01,        \/\/! GSSAPI$/;"	e	enum:uint8_t	file:
GUARDED_BY	threadsafety.h	18;"	d
GUARDED_BY	threadsafety.h	37;"	d
GUARDED_VAR	threadsafety.h	19;"	d
GUARDED_VAR	threadsafety.h	38;"	d
GUIUtil	qt/guiutil.cpp	/^namespace GUIUtil {$/;"	n	file:
GUIUtil	qt/guiutil.h	/^namespace GUIUtil$/;"	n
GZIP_ENV	secp256k1/Makefile	/^GZIP_ENV = --best$/;"	m
GZIP_ENV	univalue/Makefile	/^GZIP_ENV = --best$/;"	m
Generate	leveldb/db/db_bench.cc	/^  Slice Generate(size_t len) {$/;"	f	class:leveldb::__anon18::RandomGenerator
Generate	leveldb/doc/bench/db_bench_sqlite3.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon35::RandomGenerator
Generate	leveldb/doc/bench/db_bench_tree_db.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon34::RandomGenerator
GenerateAuthCookie	rpc/protocol.cpp	/^bool GenerateAuthCookie(std::string *cookie_out)$/;"	f
GenerateCoinbaseCommitment	validation.cpp	/^std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)$/;"	f
GenerateFilter	leveldb/table/filter_block.cc	/^void FilterBlockBuilder::GenerateFilter() {$/;"	f	class:leveldb::FilterBlockBuilder
GenerateNewHDMasterKey	wallet/wallet.cpp	/^CPubKey CWallet::GenerateNewHDMasterKey()$/;"	f	class:CWallet
GenerateNewKey	wallet/wallet.cpp	/^CPubKey CWallet::GenerateNewKey(CWalletDB &walletdb, bool internal)$/;"	f	class:CWallet
Generated	qt/transactionrecord.h	/^        Generated,$/;"	e	enum:TransactionRecord::Type
Genesis	chain.h	/^    CBlockIndex *Genesis() const {$/;"	f	class:CChain
GenesisBlock	chainparams.h	/^    const CBlock& GenesisBlock() const { return genesis; }$/;"	f	class:CChainParams
Get	base58.cpp	/^CTxDestination CWiFicoinAddress::Get() const$/;"	f	class:CWiFicoinAddress
Get	leveldb/db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
Get	leveldb/db/db_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::DBTest
Get	leveldb/db/db_test.cc	/^  virtual Status Get(const ReadOptions& options,$/;"	f	class:leveldb::ModelDB
Get	leveldb/db/memtable.cc	/^bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) {$/;"	f	class:leveldb::MemTable
Get	leveldb/db/recovery_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::RecoveryTest
Get	leveldb/db/skiplist_test.cc	/^    intptr_t Get(int k) {$/;"	f	struct:leveldb::ConcurrentTest::State
Get	leveldb/db/table_cache.cc	/^Status TableCache::Get(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
Get	leveldb/db/version_set.cc	/^Status Version::Get(const ReadOptions& options,$/;"	f	class:leveldb::Version
Get	script/sigcache.cpp	/^    Get(const uint256& entry, const bool erase)$/;"	f	class:__anon96::CSignatureCache
Get	streams.h	/^    FILE* Get() const           { return file; }$/;"	f	class:CAutoFile
GetAccountAddress	wallet/rpcwallet.cpp	/^CWiFicoinAddress GetAccountAddress(CWallet* const pwallet, std::string strAccount, bool bForceNew=false)$/;"	f
GetAccountAddresses	wallet/wallet.cpp	/^std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAccount) const$/;"	f	class:CWallet
GetAccountCreditDebit	wallet/walletdb.cpp	/^CAmount CWalletDB::GetAccountCreditDebit(const std::string& strAccount)$/;"	f	class:CWalletDB
GetAccountName	wallet/wallet.cpp	/^const std::string& CWallet::GetAccountName(const CScript& scriptPubKey) const$/;"	f	class:CWallet
GetAccountPubkey	wallet/wallet.cpp	/^bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew)$/;"	f	class:CWallet
GetAddedNodeInfo	net.cpp	/^std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()$/;"	f	class:CConnman
GetAddr	addrman.h	/^    std::vector<CAddress> GetAddr()$/;"	f	class:CAddrMan
GetAddrLocal	net.cpp	/^CService CNode::GetAddrLocal() const {$/;"	f	class:CNode
GetAddrName	net.cpp	/^std::string CNode::GetAddrName() const {$/;"	f	class:CNode
GetAddr_	addrman.cpp	/^void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)$/;"	f	class:CAddrMan
GetAddress	zmq/zmqabstractnotifier.h	/^    std::string GetAddress() const { return address; }$/;"	f	class:CZMQAbstractNotifier
GetAddressBalances	wallet/wallet.cpp	/^std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()$/;"	f	class:CWallet
GetAddressCount	net.cpp	/^size_t CConnman::GetAddressCount() const$/;"	f	class:CConnman
GetAddressGroupings	wallet/wallet.cpp	/^std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()$/;"	f	class:CWallet
GetAddresses	net.cpp	/^std::vector<CAddress> CConnman::GetAddresses()$/;"	f	class:CConnman
GetAdjustedTime	timedata.cpp	/^int64_t GetAdjustedTime()$/;"	f
GetAllReserveKeys	wallet/wallet.h	/^    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }$/;"	f	class:CWallet
GetAllowed	leveldb/util/env_posix.cc	/^  intptr_t GetAllowed() const {$/;"	f	class:leveldb::__anon11::Limiter	file:
GetAmounts	wallet/wallet.cpp	/^void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,$/;"	f	class:CWalletTx
GetAncestor	chain.cpp	/^CBlockIndex* CBlockIndex::GetAncestor(int height)$/;"	f	class:CBlockIndex
GetAncestor	chain.cpp	/^const CBlockIndex* CBlockIndex::GetAncestor(int height) const$/;"	f	class:CBlockIndex
GetAndClear	streams.h	/^    void GetAndClear(CSerializeData &d) {$/;"	f	class:CDataStream
GetApproximateSizes	leveldb/db/db_impl.cc	/^void DBImpl::GetApproximateSizes($/;"	f	class:leveldb::DBImpl
GetApproximateSizes	leveldb/db/db_test.cc	/^  virtual void GetApproximateSizes(const Range* r, int n, uint64_t* sizes) {$/;"	f	class:leveldb::ModelDB
GetArg	util.cpp	/^int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault)$/;"	f	class:ArgsManager
GetArg	util.cpp	/^std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault)$/;"	f	class:ArgsManager
GetArgs	util.cpp	/^std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg)$/;"	f	class:ArgsManager
GetAuthCookie	rpc/protocol.cpp	/^bool GetAuthCookie(std::string *cookie_out)$/;"	f
GetAuthCookieFile	rpc/protocol.cpp	/^static fs::path GetAuthCookieFile(bool temp=false)$/;"	f	file:
GetAutostartDir	qt/guiutil.cpp	/^fs::path static GetAutostartDir()$/;"	f	namespace:GUIUtil
GetAutostartFilePath	qt/guiutil.cpp	/^fs::path static GetAutostartFilePath()$/;"	f	namespace:GUIUtil
GetAvailableBalance	wallet/wallet.cpp	/^CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const$/;"	f	class:CWallet
GetAvailableCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const$/;"	f	class:CWalletTx
GetAvailableWatchOnlyCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const$/;"	f	class:CWalletTx
GetBalance	wallet/wallet.cpp	/^CAmount CWallet::GetBalance() const$/;"	f	class:CWallet
GetBanned	net.cpp	/^void CConnman::GetBanned(banmap_t &banMap)$/;"	f	class:CConnman
GetBestBlock	coins.cpp	/^uint256 CCoinsView::GetBestBlock() const { return uint256(); }$/;"	f	class:CCoinsView
GetBestBlock	coins.cpp	/^uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }$/;"	f	class:CCoinsViewBacked
GetBestBlock	coins.cpp	/^uint256 CCoinsViewCache::GetBestBlock() const {$/;"	f	class:CCoinsViewCache
GetBestBlock	coins.h	/^    const uint256 &GetBestBlock() const { return hashBlock; }$/;"	f	class:CCoinsViewCursor
GetBestBlock	txdb.cpp	/^uint256 CCoinsViewDB::GetBestBlock() const {$/;"	f	class:CCoinsViewDB
GetBestHeight	net.cpp	/^int CConnman::GetBestHeight() const$/;"	f	class:CConnman
GetBindAddress	net.cpp	/^static CAddress GetBindAddress(SOCKET sock)$/;"	f	file:
GetBlockFileInfo	validation.cpp	/^CBlockFileInfo* GetBlockFileInfo(size_t n)$/;"	f
GetBlockHash	chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHeader	chain.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockHeader	primitives/block.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlock
GetBlockPos	chain.h	/^    CDiskBlockPos GetBlockPos() const {$/;"	f	class:CBlockIndex
GetBlockPosFilename	validation.cpp	/^fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)$/;"	f
GetBlockProof	chain.cpp	/^arith_uint256 GetBlockProof(const CBlockIndex& block)$/;"	f
GetBlockProofEquivalentTime	chain.cpp	/^int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)$/;"	f
GetBlockScriptFlags	validation.cpp	/^static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) {$/;"	f	file:
GetBlockSubsidy	validation.cpp	/^CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)$/;"	f
GetBlockTime	chain.h	/^    int64_t GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockTime	primitives/block.h	/^    int64_t GetBlockTime() const$/;"	f	class:CBlockHeader
GetBlockTimeMax	chain.h	/^    int64_t GetBlockTimeMax() const$/;"	f	class:CBlockIndex
GetBlockWeight	consensus/validation.h	/^static inline int64_t GetBlockWeight(const CBlock& block)$/;"	f
GetBlocksConnected	validation.cpp	/^    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {$/;"	f	class:ConnectTrace
GetBlocksToMaturity	wallet/wallet.cpp	/^int CMerkleTx::GetBlocksToMaturity() const$/;"	f	class:CMerkleTx
GetBoolArg	util.cpp	/^bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault)$/;"	f	class:ArgsManager
GetBroadcastTransactions	wallet/wallet.h	/^    bool GetBroadcastTransactions() const { return fBroadcastTransactions; }$/;"	f	class:CWallet
GetBucketPosition	addrman.cpp	/^int CAddrInfo::GetBucketPosition(const uint256 &nKey, bool fNew, int nBucket) const$/;"	f	class:CAddrInfo
GetByte	netaddress.cpp	/^unsigned int CNetAddr::GetByte(int n) const$/;"	f	class:CNetAddr
GetCScript	keystore.cpp	/^bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const$/;"	f	class:CBasicKeyStore
GetCacheSize	coins.cpp	/^unsigned int CCoinsViewCache::GetCacheSize() const {$/;"	f	class:CCoinsViewCache
GetChance	addrman.cpp	/^double CAddrInfo::GetChance(int64_t nNow) const$/;"	f	class:CAddrInfo
GetChange	wallet/wallet.cpp	/^CAmount CWallet::GetChange(const CTransaction& tx) const$/;"	f	class:CWallet
GetChange	wallet/wallet.cpp	/^CAmount CWallet::GetChange(const CTxOut& txout) const$/;"	f	class:CWallet
GetChange	wallet/wallet.cpp	/^CAmount CWalletTx::GetChange() const$/;"	f	class:CWalletTx
GetCheapHash	uint256.h	/^    uint64_t GetCheapHash() const$/;"	f	class:uint256
GetChildren	leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon16::InMemoryEnv
GetChildren	leveldb/include/leveldb/env.h	/^  Status GetChildren(const std::string& dir, std::vector<std::string>* r) {$/;"	f	class:leveldb::EnvWrapper
GetChildren	leveldb/util/env_posix.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon11::PosixEnv
GetChildren	leveldb/util/env_win.cc	/^Status Win32Env::GetChildren(const std::string& dir, std::vector<std::string>* result)$/;"	f	class:leveldb::Win32::Win32Env
GetCoin	coins.cpp	/^bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }$/;"	f	class:CCoinsView
GetCoin	coins.cpp	/^bool CCoinsViewBacked::GetCoin(const COutPoint &outpoint, Coin &coin) const { return base->GetCoin(outpoint, coin); }$/;"	f	class:CCoinsViewBacked
GetCoin	coins.cpp	/^bool CCoinsViewCache::GetCoin(const COutPoint &outpoint, Coin &coin) const {$/;"	f	class:CCoinsViewCache
GetCoin	txdb.cpp	/^bool CCoinsViewDB::GetCoin(const COutPoint &outpoint, Coin &coin) const {$/;"	f	class:CCoinsViewDB
GetCoin	txmempool.cpp	/^bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {$/;"	f	class:CCoinsViewMemPool
GetCoinsMapEntry	test/coins_tests.cpp	/^void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)$/;"	f
GetCommand	protocol.cpp	/^std::string CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetComment	test/script_tests.cpp	/^    std::string GetComment()$/;"	f	class:__anon80::TestBuilder
GetCompact	arith_uint256.cpp	/^uint32_t arith_uint256::GetCompact(bool fNegative) const$/;"	f	class:arith_uint256
GetConfigFile	util.cpp	/^fs::path GetConfigFile(const std::string& confPath)$/;"	f
GetConflicts	wallet/wallet.cpp	/^std::set<uint256> CWallet::GetConflicts(const uint256& txid) const$/;"	f	class:CWallet
GetConflicts	wallet/wallet.cpp	/^std::set<uint256> CWalletTx::GetConflicts() const$/;"	f	class:CWalletTx
GetConsensus	chainparams.h	/^    const Consensus::Params& GetConsensus() const { return consensus; }$/;"	f	class:CChainParams
GetCountWithAncestors	txmempool.h	/^    uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetCountWithDescendants	txmempool.h	/^    uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetCredit	wallet/wallet.cpp	/^CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
GetCredit	wallet/wallet.cpp	/^CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const$/;"	f	class:CWallet
GetCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetCredit(const isminefilter& filter) const$/;"	f	class:CWalletTx
GetCurrentDir	leveldb/util/env_win.cc	/^std::string GetCurrentDir()$/;"	f	namespace:leveldb::Win32
GetCurrentDirW	leveldb/util/env_win.cc	/^std::wstring GetCurrentDirW()$/;"	f	namespace:leveldb::Win32
GetCursor	wallet/db.h	/^    Dbc* GetCursor()$/;"	f	class:CDB
GetDBHandle	wallet/wallet.h	/^    CWalletDBWrapper& GetDBHandle()$/;"	f	class:CWallet
GetDNSHost	net.cpp	/^static std::string GetDNSHost(const CDNSSeedData& data, ServiceFlags* requiredServiceBits)$/;"	f	file:
GetDataDir	util.cpp	/^const fs::path &GetDataDir(bool fNetSpecific)$/;"	f
GetDataMsg	protocol.h	/^enum GetDataMsg$/;"	g
GetDebit	wallet/wallet.cpp	/^CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
GetDebit	wallet/wallet.cpp	/^CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const$/;"	f	class:CWallet
GetDebit	wallet/wallet.cpp	/^CAmount CWalletTx::GetDebit(const isminefilter& filter) const$/;"	f	class:CWalletTx
GetDebugMessage	consensus/validation.h	/^    std::string GetDebugMessage() const { return strDebugMessage; }$/;"	f	class:CValidationState
GetDefaultDataDir	util.cpp	/^fs::path GetDefaultDataDir()$/;"	f
GetDefaultPort	chainparams.h	/^    int GetDefaultPort() const { return nDefaultPort; }$/;"	f	class:CChainParams
GetDepthInMainChain	wallet/wallet.cpp	/^int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const$/;"	f	class:CMerkleTx
GetDepthInMainChain	wallet/wallet.h	/^    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }$/;"	f	class:CMerkleTx
GetDestData	wallet/wallet.cpp	/^bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const$/;"	f	class:CWallet
GetDestValues	wallet/wallet.cpp	/^std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const$/;"	f	class:CWallet
GetDeterministicRandomizer	net.cpp	/^CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const$/;"	f	class:CConnman
GetDevURandom	random.cpp	/^void GetDevURandom(unsigned char *ent32)$/;"	f
GetDifficulty	rpc/blockchain.cpp	/^double GetDifficulty(const CBlockIndex* blockindex)$/;"	f
GetDirName	leveldb/db/fault_injection_test.cc	/^static std::string GetDirName(const std::string filename) {$/;"	f	namespace:leveldb::__anon21
GetDiscardRate	wallet/wallet.cpp	/^static CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator)$/;"	f	file:
GetDustThreshold	policy/policy.cpp	/^CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)$/;"	f
GetExtNetwork	netaddress.cpp	/^int static GetExtNetwork(const CNetAddr *addr)$/;"	f	file:
GetExtraOutboundCount	net.cpp	/^int CConnman::GetExtraOutboundCount()$/;"	f	class:CConnman
GetFee	policy/feerate.cpp	/^CAmount CFeeRate::GetFee(size_t nBytes_) const$/;"	f	class:CFeeRate
GetFee	txmempool.h	/^    const CAmount& GetFee() const { return nFee; }$/;"	f	class:CTxMemPoolEntry
GetFeePerK	policy/feerate.h	/^    CAmount GetFeePerK() const { return GetFee(1000); }$/;"	f	class:CFeeRate
GetFetchFlags	net_processing.cpp	/^uint32_t GetFetchFlags(CNode* pfrom) {$/;"	f
GetFileIterator	leveldb/db/version_set.cc	/^static Iterator* GetFileIterator(void* arg,$/;"	f	namespace:leveldb
GetFileSize	leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* file_size) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
GetFileSize	leveldb/include/leveldb/env.h	/^  Status GetFileSize(const std::string& f, uint64_t* s) {$/;"	f	class:leveldb::EnvWrapper
GetFileSize	leveldb/util/env_posix.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon11::PosixEnv
GetFileSize	leveldb/util/env_win.cc	/^Status Win32Env::GetFileSize( const std::string& fname, uint64_t* file_size )$/;"	f	class:leveldb::Win32::Win32Env
GetFiles	leveldb/db/recovery_test.cc	/^  std::vector<uint64_t> GetFiles(FileType t) {$/;"	f	class:leveldb::RecoveryTest
GetGroup	netaddress.cpp	/^std::vector<unsigned char> CNetAddr::GetGroup() const$/;"	f	class:CNetAddr
GetHDChain	wallet/wallet.h	/^    const CHDChain& GetHDChain() const { return hdChain; }$/;"	f	class:CWallet
GetHWRand	random.cpp	/^static bool GetHWRand(unsigned char* ent32) {$/;"	f	file:
GetHash	hash.h	/^    uint256 GetHash() {$/;"	f	class:CHashWriter
GetHash	netaddress.cpp	/^uint64_t CNetAddr::GetHash() const$/;"	f	class:CNetAddr
GetHash	primitives/block.cpp	/^uint256 CBlockHeader::GetHash() const$/;"	f	class:CBlockHeader
GetHash	primitives/transaction.cpp	/^uint256 CMutableTransaction::GetHash() const$/;"	f	class:CMutableTransaction
GetHash	primitives/transaction.h	/^    const uint256& GetHash() const {$/;"	f	class:CTransaction
GetHash	pubkey.h	/^    uint256 GetHash() const$/;"	f	class:CPubKey
GetHash	wallet/wallet.h	/^    const uint256& GetHash() const { return tx->GetHash(); }$/;"	f	class:CMerkleTx
GetHeadBlocks	coins.cpp	/^std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }$/;"	f	class:CCoinsView
GetHeadBlocks	coins.cpp	/^std::vector<uint256> CCoinsViewBacked::GetHeadBlocks() const { return base->GetHeadBlocks(); }$/;"	f	class:CCoinsViewBacked
GetHeadBlocks	txdb.cpp	/^std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {$/;"	f	class:CCoinsViewDB
GetHeader	httpserver.cpp	/^std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr)$/;"	f	class:HTTPRequest
GetHeapProfile	leveldb/port/port_posix.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeapProfile	leveldb/port/port_win.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeight	txmempool.h	/^    unsigned int GetHeight() const { return entryHeight; }$/;"	f	class:CTxMemPoolEntry
GetHex	arith_uint256.cpp	/^std::string base_uint<BITS>::GetHex() const$/;"	f	class:base_uint
GetHex	uint256.cpp	/^std::string base_blob<BITS>::GetHex() const$/;"	f	class:base_blob
GetID	pubkey.h	/^    CKeyID GetID() const$/;"	f	class:CPubKey
GetId	net.h	/^    NodeId GetId() const {$/;"	f	class:CNode
GetImmatureBalance	wallet/wallet.cpp	/^CAmount CWallet::GetImmatureBalance() const$/;"	f	class:CWallet
GetImmatureCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const$/;"	f	class:CWalletTx
GetImmatureWatchOnlyBalance	wallet/wallet.cpp	/^CAmount CWallet::GetImmatureWatchOnlyBalance() const$/;"	f	class:CWallet
GetImmatureWatchOnlyCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const$/;"	f	class:CWalletTx
GetImportTimestamp	wallet/rpcdump.cpp	/^int64_t GetImportTimestamp(const UniValue& data, int64_t now)$/;"	f
GetIn6Addr	netaddress.cpp	/^bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const$/;"	f	class:CNetAddr
GetInAddr	netaddress.cpp	/^bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const$/;"	f	class:CNetAddr
GetInfo	txmempool.cpp	/^static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator it) {$/;"	f	file:
GetInternalKey	leveldb/db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetJSON	test/script_tests.cpp	/^    UniValue GetJSON()$/;"	f	class:__anon80::TestBuilder
GetKey	base58.cpp	/^CKey CWiFicoinSecret::GetKey()$/;"	f	class:CWiFicoinSecret
GetKey	base58.h	/^    K GetKey() {$/;"	f	class:CWiFicoinExtKeyBase
GetKey	dbwrapper.h	/^    template<typename K> bool GetKey(K& key) {$/;"	f	class:CDBIterator
GetKey	netaddress.cpp	/^std::vector<unsigned char> CService::GetKey() const$/;"	f	class:CService
GetKey	txdb.cpp	/^bool CCoinsViewDBCursor::GetKey(COutPoint &key) const$/;"	f	class:CCoinsViewDBCursor
GetKey	wallet/crypter.cpp	/^bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const$/;"	f	class:CCryptoKeyStore
GetKeyBirthTimes	wallet/wallet.cpp	/^void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {$/;"	f	class:CWallet
GetKeyFromPool	wallet/wallet.cpp	/^bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)$/;"	f	class:CWallet
GetKeyID	base58.cpp	/^bool CWiFicoinAddress::GetKeyID(CKeyID& keyID) const$/;"	f	class:CWiFicoinAddress
GetKeyPoolSize	wallet/wallet.h	/^    unsigned int GetKeyPoolSize()$/;"	f	class:CWallet
GetLangTerritory	qt/wificoin.cpp	/^static QString GetLangTerritory()$/;"	f	file:
GetLastCheckpoint	checkpoints.cpp	/^    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)$/;"	f	namespace:Checkpoints
GetLastErrSz	leveldb/util/env_win.cc	/^std::string GetLastErrSz()$/;"	f	namespace:leveldb::Win32
GetLastErrSzW	leveldb/util/env_win.cc	/^std::wstring GetLastErrSzW()$/;"	f	namespace:leveldb::Win32
GetLegacyBalance	wallet/wallet.cpp	/^CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth, const std::string* account) const$/;"	f	class:CWallet
GetLegacySigOpCount	consensus/tx_verify.cpp	/^unsigned int GetLegacySigOpCount(const CTransaction& tx)$/;"	f
GetLen	pubkey.h	/^    unsigned int static GetLen(unsigned char chHeader)$/;"	f	class:CPubKey
GetLengthPrefixedSlice	leveldb/db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	leveldb/util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	leveldb/util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	leveldb/db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetLimit	support/lockedpool.cpp	/^size_t PosixLockedPageAllocator::GetLimit()$/;"	f	class:PosixLockedPageAllocator
GetLimit	support/lockedpool.cpp	/^size_t Win32LockedPageAllocator::GetLimit()$/;"	f	class:Win32LockedPageAllocator
GetListenPort	net.cpp	/^unsigned short GetListenPort()$/;"	f
GetLocal	net.cpp	/^bool GetLocal(CService& addr, const CNetAddr *paddrPeer)$/;"	f
GetLocalAddress	net.cpp	/^CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)$/;"	f
GetLocalNonce	net.h	/^    uint64_t GetLocalNonce() const {$/;"	f	class:CNode
GetLocalServices	net.cpp	/^ServiceFlags CConnman::GetLocalServices() const$/;"	f	class:CConnman
GetLocalServices	net.h	/^    ServiceFlags GetLocalServices() const$/;"	f	class:CNode
GetLocator	chain.cpp	/^CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {$/;"	f	class:CChain
GetLockPoints	txmempool.h	/^    const LockPoints& GetLockPoints() const { return lockPoints; }$/;"	f	class:CTxMemPoolEntry
GetLogCategory	util.cpp	/^bool GetLogCategory(uint32_t *f, const std::string *str)$/;"	f
GetLow64	arith_uint256.h	/^    uint64_t GetLow64() const$/;"	f	class:base_uint
GetMainSignals	validationinterface.cpp	/^CMainSignals& GetMainSignals()$/;"	f
GetMapArgs	test/util_tests.cpp	/^    std::map<std::string, std::string>& GetMapArgs()$/;"	f	class:TestArgsManager
GetMapMultiArgs	test/util_tests.cpp	/^    const std::map<std::string, std::vector<std::string> >& GetMapMultiArgs()$/;"	f	class:TestArgsManager
GetMaxConfirms	policy/fees.cpp	/^    unsigned int GetMaxConfirms() const { return scale * confAvg.size(); }$/;"	f	class:TxConfirmStats
GetMaxHeight	leveldb/db/skiplist.h	/^  inline int GetMaxHeight() const {$/;"	f	class:leveldb::SkipList
GetMaxOutboundTarget	net.cpp	/^uint64_t CConnman::GetMaxOutboundTarget()$/;"	f	class:CConnman
GetMaxOutboundTimeLeftInCycle	net.cpp	/^uint64_t CConnman::GetMaxOutboundTimeLeftInCycle()$/;"	f	class:CConnman
GetMaxOutboundTimeframe	net.cpp	/^uint64_t CConnman::GetMaxOutboundTimeframe()$/;"	f	class:CConnman
GetMedianTimePast	chain.h	/^    int64_t GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMemPoolChildren	txmempool.cpp	/^const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) const$/;"	f	class:CTxMemPool
GetMemPoolParents	txmempool.cpp	/^const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const$/;"	f	class:CTxMemPool
GetMessageHash	net.cpp	/^const uint256& CNetMessage::GetMessageHash() const$/;"	f	class:CNetMessage
GetMinFee	txmempool.cpp	/^CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {$/;"	f	class:CTxMemPool
GetMinimumFee	wallet/wallet.cpp	/^CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)$/;"	f	class:CWallet
GetMockTime	utiltime.cpp	/^int64_t GetMockTime()$/;"	f
GetModFeesWithAncestors	txmempool.h	/^    CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetModFeesWithDescendants	txmempool.h	/^    CAmount GetModFeesWithDescendants() const { return nModFeesWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetModifiedFee	txmempool.h	/^    int64_t GetModifiedFee() const { return nFee + feeDelta; }$/;"	f	class:CTxMemPoolEntry
GetMyStartingHeight	net.h	/^    int GetMyStartingHeight() const {$/;"	f	class:CNode
GetName	wallet/db.h	/^    std::string GetName() const { return strFile; }$/;"	f	class:CWalletDBWrapper
GetName	wallet/wallet.h	/^    std::string GetName() const$/;"	f	class:CWallet
GetNameProxy	netbase.cpp	/^bool GetNameProxy(proxyType &nameProxyOut) {$/;"	f
GetNetwork	netaddress.cpp	/^enum Network CNetAddr::GetNetwork() const$/;"	f	class:CNetAddr
GetNetworkActive	net.h	/^    bool GetNetworkActive() const { return fNetworkActive; };$/;"	f	class:CConnman
GetNetworkHashPS	rpc/mining.cpp	/^UniValue GetNetworkHashPS(int lookup, int height) {$/;"	f
GetNetworkName	netbase.cpp	/^std::string GetNetworkName(enum Network net) {$/;"	f
GetNetworksInfo	rpc/net.cpp	/^static UniValue GetNetworksInfo()$/;"	f	file:
GetNewBucket	addrman.cpp	/^int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src) const$/;"	f	class:CAddrInfo
GetNewBucket	addrman.h	/^    int GetNewBucket(const uint256 &nKey) const$/;"	f	class:CAddrInfo
GetNewNodeId	net.cpp	/^NodeId CConnman::GetNewNodeId()$/;"	f	class:CConnman
GetNextWorkRequired	pow.cpp	/^unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)$/;"	f
GetNodeCount	net.cpp	/^size_t CConnman::GetNodeCount(NumConnections flags)$/;"	f	class:CConnman
GetNodeStateStats	net_processing.cpp	/^bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {$/;"	f
GetNodeStats	net.cpp	/^void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)$/;"	f	class:CConnman
GetNumCores	util.cpp	/^int GetNumCores()$/;"	f
GetOSRand	random.cpp	/^void GetOSRand(unsigned char *ent32)$/;"	f
GetObfuscateKey	dbwrapper.cpp	/^const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w)$/;"	f	namespace:dbwrapper_private
GetOldestKeyPoolTime	wallet/wallet.cpp	/^int64_t CWallet::GetOldestKeyPoolTime()$/;"	f	class:CWallet
GetOldestKeyTimeInPool	wallet/wallet.cpp	/^static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {$/;"	f	file:
GetOneColumn	crypto/ctaes/ctaes.c	/^static void GetOneColumn(AES_state* s, const AES_state* a, int c) {$/;"	f	file:
GetOp	script/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const$/;"	f	class:CScript
GetOp	script/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const$/;"	f	class:CScript
GetOp	script/script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet)$/;"	f	class:CScript
GetOp	script/script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)$/;"	f	class:CScript
GetOp2	script/script.h	/^    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const$/;"	f	class:CScript
GetOpName	script/script.cpp	/^const char* GetOpName(opcodetype opcode)$/;"	f
GetOptions	dbwrapper.cpp	/^static leveldb::Options GetOptions(size_t nCacheSize)$/;"	f	file:
GetOutboundTargetBytesLeft	net.cpp	/^uint64_t CConnman::GetOutboundTargetBytesLeft()$/;"	f	class:CConnman
GetOutputsHash	script/interpreter.cpp	/^uint256 GetOutputsHash(const CTransaction& txTo) {$/;"	f	namespace:__anon99
GetOverlappingInputs	leveldb/db/version_set.cc	/^void Version::GetOverlappingInputs($/;"	f	class:leveldb::Version
GetP2SHSigOpCount	consensus/tx_verify.cpp	/^unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)$/;"	f
GetPageSize	leveldb/util/env_win.cc	/^size_t GetPageSize()$/;"	f	namespace:leveldb::Win32
GetPeer	httpserver.cpp	/^CService HTTPRequest::GetPeer()$/;"	f	class:HTTPRequest
GetPerformanceCounter	random.cpp	/^static inline int64_t GetPerformanceCounter()$/;"	f	file:
GetPidFile	util.cpp	/^fs::path GetPidFile()$/;"	f
GetPort	netaddress.cpp	/^unsigned short CService::GetPort() const$/;"	f	class:CService
GetPos	streams.h	/^    uint64_t GetPos() {$/;"	f	class:CBufferedFile
GetPrevoutHash	script/interpreter.cpp	/^uint256 GetPrevoutHash(const CTransaction& txTo) {$/;"	f	namespace:__anon99
GetPrivKey	key.cpp	/^CPrivKey CKey::GetPrivKey() const {$/;"	f	class:CKey
GetPrivateKeyFile	torcontrol.cpp	/^fs::path TorController::GetPrivateKeyFile()$/;"	f	class:TorController
GetProperty	leveldb/db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetProperty	leveldb/db/db_test.cc	/^  virtual bool GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::ModelDB
GetProxy	netbase.cpp	/^bool GetProxy(enum Network net, proxyType &proxyInfoOut) {$/;"	f
GetPubKey	key.cpp	/^CPubKey CKey::GetPubKey() const {$/;"	f	class:CKey
GetPubKey	keystore.cpp	/^bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const$/;"	f	class:CBasicKeyStore
GetPubKey	wallet/crypter.cpp	/^bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const$/;"	f	class:CCryptoKeyStore
GetRand	random.cpp	/^uint64_t GetRand(uint64_t nMax)$/;"	f
GetRandBytes	random.cpp	/^void GetRandBytes(unsigned char* buf, int num)$/;"	f
GetRandHash	random.cpp	/^uint256 GetRandHash()$/;"	f
GetRandInt	random.cpp	/^int GetRandInt(int nMax)$/;"	f
GetRange	leveldb/db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	leveldb/db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetReachabilityFrom	netaddress.cpp	/^int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const$/;"	f	class:CNetAddr
GetReceiveFloodSize	net.cpp	/^unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }$/;"	f	class:CConnman
GetRecvVersion	net.h	/^    int GetRecvVersion() const$/;"	f	class:CNode
GetRefCount	net.h	/^    int GetRefCount() const$/;"	f	class:CNode
GetRejectCode	consensus/validation.h	/^    unsigned int GetRejectCode() const { return chRejectCode; }$/;"	f	class:CValidationState
GetRejectReason	consensus/validation.h	/^    std::string GetRejectReason() const { return strRejectReason; }$/;"	f	class:CValidationState
GetRequestCount	wallet/wallet.cpp	/^int CWalletTx::GetRequestCount() const$/;"	f	class:CWalletTx
GetRequestMethod	httpserver.cpp	/^HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod()$/;"	f	class:HTTPRequest
GetRequiredFee	wallet/wallet.cpp	/^CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)$/;"	f	class:CWallet
GetReservedKey	wallet/wallet.cpp	/^bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)$/;"	f	class:CReserveKey
GetRestartPoint	leveldb/table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
GetResults	wallet/test/accounting_tests.cpp	/^GetResults(std::map<CAmount, CAccountingEntry>& results)$/;"	f	file:
GetScriptError	validation.h	/^    ScriptError GetScriptError() const { return error; }$/;"	f	class:CScriptCheck
GetScriptForDestination	script/standard.cpp	/^CScript GetScriptForDestination(const CTxDestination& dest)$/;"	f
GetScriptForMining	wallet/wallet.cpp	/^void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)$/;"	f	class:CWallet
GetScriptForMultisig	script/standard.cpp	/^CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)$/;"	f
GetScriptForRawPubKey	script/standard.cpp	/^CScript GetScriptForRawPubKey(const CPubKey& pubKey)$/;"	f
GetScriptForWitness	script/standard.cpp	/^CScript GetScriptForWitness(const CScript& redeemscript)$/;"	f
GetSendVersion	net.cpp	/^int CNode::GetSendVersion() const$/;"	f	class:CNode
GetSequenceHash	script/interpreter.cpp	/^uint256 GetSequenceHash(const CTransaction& txTo) {$/;"	f	namespace:__anon99
GetSerializeSize	serialize.h	/^size_t GetSerializeSize(const S& s, const T& t)$/;"	f
GetSerializeSize	serialize.h	/^size_t GetSerializeSize(const T& t, int nType, int nVersion = 0)$/;"	f
GetSharedTx	txmempool.h	/^    CTransactionRef GetSharedTx() const { return this->tx; }$/;"	f	class:CTxMemPoolEntry
GetShortID	blockencodings.cpp	/^uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {$/;"	f	class:CBlockHeaderAndShortTxIDs
GetShortID	test/blockencodings_tests.cpp	/^    uint64_t GetShortID(const uint256& txhash) const {$/;"	f	class:TestHeaderAndShortIDs
GetSigOpCost	txmempool.h	/^    int64_t GetSigOpCost() const { return sigOpCost; }$/;"	f	class:CTxMemPoolEntry
GetSigOpCostWithAncestors	txmempool.h	/^    int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetSigOpCount	script/script.cpp	/^unsigned int CScript::GetSigOpCount(bool fAccurate) const$/;"	f	class:CScript
GetSigOpCount	script/script.cpp	/^unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const$/;"	f	class:CScript
GetSizeOfCompactSize	serialize.h	/^inline unsigned int GetSizeOfCompactSize(uint64_t nSize)$/;"	f
GetSizeOfVarInt	serialize.h	/^inline unsigned int GetSizeOfVarInt(I n)$/;"	f
GetSizeWithAncestors	txmempool.h	/^    uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }$/;"	f	class:CTxMemPoolEntry
GetSizeWithDescendants	txmempool.h	/^    uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }$/;"	f	class:CTxMemPoolEntry
GetSkipHeight	chain.cpp	/^int static inline GetSkipHeight(int height) {$/;"	f	file:
GetSnapshot	leveldb/db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetSnapshot	leveldb/db/db_test.cc	/^  virtual const Snapshot* GetSnapshot() {$/;"	f	class:leveldb::ModelDB
GetSockAddr	netaddress.cpp	/^bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const$/;"	f	class:CService
GetSortedDepthAndScore	txmempool.cpp	/^std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const$/;"	f	class:CTxMemPool
GetSpecialFolderPath	util.cpp	/^fs::path GetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
GetSpecialSize	compressor.cpp	/^unsigned int CScriptCompressor::GetSpecialSize(unsigned int nSize) const$/;"	f	class:CScriptCompressor
GetSpendHeight	validation.cpp	/^int GetSpendHeight(const CCoinsViewCache& inputs)$/;"	f
GetSpendsCoinbase	txmempool.h	/^    bool GetSpendsCoinbase() const { return spendsCoinbase; }$/;"	f	class:CTxMemPoolEntry
GetStartOnSystemStartup	qt/guiutil.cpp	/^bool GetStartOnSystemStartup() { return false; }$/;"	f	namespace:GUIUtil
GetStartOnSystemStartup	qt/guiutil.cpp	/^bool GetStartOnSystemStartup()$/;"	f	namespace:GUIUtil
GetStartupTime	util.cpp	/^int64_t GetStartupTime()$/;"	f
GetStateFor	test/versionbits_tests.cpp	/^    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }$/;"	f	class:TestConditionChecker
GetStateFor	versionbits.cpp	/^ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const$/;"	f	class:AbstractThresholdConditionChecker
GetStateSinceHeightFor	test/versionbits_tests.cpp	/^    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }$/;"	f	class:TestConditionChecker
GetStateSinceHeightFor	versionbits.cpp	/^int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const$/;"	f	class:AbstractThresholdConditionChecker
GetStateStatisticsFor	versionbits.cpp	/^BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const$/;"	f	class:AbstractThresholdConditionChecker
GetStats	leveldb/db/version_set.h	/^  struct GetStats {$/;"	s	class:leveldb::Version
GetStrongRandBytes	random.cpp	/^void GetStrongRandBytes(unsigned char* out, int num)$/;"	f
GetSystemTimeInSeconds	utiltime.cpp	/^int64_t GetSystemTimeInSeconds()$/;"	f
GetTempDir	leveldb/db/c_test.c	/^static const char* GetTempDir(void) {$/;"	f	file:
GetTestDirectory	leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
GetTestDirectory	leveldb/include/leveldb/env.h	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::EnvWrapper
GetTestDirectory	leveldb/util/env_posix.cc	/^  virtual Status GetTestDirectory(std::string* result) {$/;"	f	class:leveldb::__anon11::PosixEnv
GetTestDirectory	leveldb/util/env_win.cc	/^Status Win32Env::GetTestDirectory( std::string* path )$/;"	f	class:leveldb::Win32::Win32Env
GetTickCount64	leveldb/util/env_win.cc	756;"	d	file:
GetTime	txmempool.h	/^    int64_t GetTime() const { return nTime; }$/;"	f	class:CTxMemPoolEntry
GetTime	utiltime.cpp	/^int64_t GetTime()$/;"	f
GetTimeMicros	utiltime.cpp	/^int64_t GetTimeMicros()$/;"	f
GetTimeMillis	utiltime.cpp	/^int64_t GetTimeMillis()$/;"	f
GetTimeOffset	timedata.cpp	/^int64_t GetTimeOffset()$/;"	f
GetTotalBytesRecv	net.cpp	/^uint64_t CConnman::GetTotalBytesRecv()$/;"	f	class:CConnman
GetTotalBytesSent	net.cpp	/^uint64_t CConnman::GetTotalBytesSent()$/;"	f	class:CConnman
GetTotalSize	primitives/transaction.cpp	/^unsigned int CTransaction::GetTotalSize() const$/;"	f	class:CTransaction
GetTotalTxSize	txmempool.h	/^    uint64_t GetTotalTxSize()$/;"	f	class:CTxMemPool
GetTransaction	validation.cpp	/^bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)$/;"	f
GetTransactionSigOpCost	consensus/tx_verify.cpp	/^int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)$/;"	f
GetTransactionWeight	consensus/validation.h	/^static inline int64_t GetTransactionWeight(const CTransaction& tx)$/;"	f
GetTransactionsUpdated	txmempool.cpp	/^unsigned int CTxMemPool::GetTransactionsUpdated() const$/;"	f	class:CTxMemPool
GetTriedBucket	addrman.cpp	/^int CAddrInfo::GetTriedBucket(const uint256& nKey) const$/;"	f	class:CAddrInfo
GetTryNewOutboundPeer	net.cpp	/^bool CConnman::GetTryNewOutboundPeer()$/;"	f	class:CConnman
GetTx	txmempool.h	/^    const CTransaction& GetTx() const { return *this->tx; }$/;"	f	class:CTxMemPoolEntry
GetTxSize	txmempool.cpp	/^size_t CTxMemPoolEntry::GetTxSize() const$/;"	f	class:CTxMemPoolEntry
GetTxTime	wallet/wallet.cpp	/^int64_t CWalletTx::GetTxTime() const$/;"	f	class:CWalletTx
GetTxWeight	txmempool.h	/^    size_t GetTxWeight() const { return nTxWeight; }$/;"	f	class:CTxMemPoolEntry
GetTxnOutputType	script/standard.cpp	/^const char* GetTxnOutputType(txnouttype t)$/;"	f
GetType	hash.h	/^    int GetType() const { return nType; }$/;"	f	class:CHashWriter
GetType	script/wificoinconsensus.cpp	/^    int GetType() const { return m_type; }$/;"	f	class:__anon95::TxInputStream
GetType	serialize.h	/^    int GetType() const { return nType; }$/;"	f	class:CSizeComputer
GetType	streams.h	/^    int GetType() const          { return nType; }$/;"	f	class:CAutoFile
GetType	streams.h	/^    int GetType() const          { return nType; }$/;"	f	class:CDataStream
GetType	streams.h	/^    int GetType() const { return nType; }$/;"	f	class:CBufferedFile
GetType	streams.h	/^    int GetType() const { return nType; }$/;"	f	class:OverrideStream
GetType	streams.h	/^    int GetType() const$/;"	f	class:CVectorWriter
GetType	zmq/zmqabstractnotifier.h	/^    std::string GetType() const { return type; }$/;"	f	class:CZMQAbstractNotifier
GetURI	httpserver.cpp	/^std::string HTTPRequest::GetURI()$/;"	f	class:HTTPRequest
GetUTXOStats	rpc/blockchain.cpp	/^static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)$/;"	f	file:
GetUint64	uint256.h	/^    uint64_t GetUint64(int pos) const$/;"	f	class:base_blob
GetUnconfirmedBalance	wallet/wallet.cpp	/^CAmount CWallet::GetUnconfirmedBalance() const$/;"	f	class:CWallet
GetUnconfirmedWatchOnlyBalance	wallet/wallet.cpp	/^CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const$/;"	f	class:CWallet
GetUndoPos	chain.h	/^    CDiskBlockPos GetUndoPos() const {$/;"	f	class:CBlockIndex
GetValue	dbwrapper.h	/^    template<typename V> bool GetValue(V& value) {$/;"	f	class:CDBIterator
GetValue	txdb.cpp	/^bool CCoinsViewDBCursor::GetValue(Coin &coin) const$/;"	f	class:CCoinsViewDBCursor
GetValueIn	coins.cpp	/^CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
GetValueOut	primitives/transaction.cpp	/^CAmount CTransaction::GetValueOut() const$/;"	f	class:CTransaction
GetValueSize	dbwrapper.h	/^    unsigned int GetValueSize() {$/;"	f	class:CDBIterator
GetValueSize	txdb.cpp	/^unsigned int CCoinsViewDBCursor::GetValueSize() const$/;"	f	class:CCoinsViewDBCursor
GetVarint32	leveldb/util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	leveldb/util/coding.h	/^inline const char* GetVarint32Ptr(const char* p,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	leveldb/util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p,$/;"	f	namespace:leveldb
GetVarint64	leveldb/util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	leveldb/util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
GetVersion	hash.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CHashWriter
GetVersion	script/wificoinconsensus.cpp	/^    int GetVersion() const { return m_version; }$/;"	f	class:__anon95::TxInputStream
GetVersion	serialize.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CSizeComputer
GetVersion	streams.h	/^    int GetVersion() const       { return nVersion; }$/;"	f	class:CAutoFile
GetVersion	streams.h	/^    int GetVersion() const       { return nVersion; }$/;"	f	class:CDataStream
GetVersion	streams.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:CBufferedFile
GetVersion	streams.h	/^    int GetVersion() const { return nVersion; }$/;"	f	class:OverrideStream
GetVersion	streams.h	/^    int GetVersion() const$/;"	f	class:CVectorWriter
GetVersion	wallet/wallet.h	/^    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }$/;"	f	class:CWallet
GetVirtualTransactionSize	policy/policy.cpp	/^int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost)$/;"	f
GetVirtualTransactionSize	policy/policy.cpp	/^int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)$/;"	f
GetWalletForJSONRPCRequest	wallet/rpcwallet.cpp	/^CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)$/;"	f
GetWalletHelpString	wallet/wallet.cpp	/^std::string CWallet::GetWalletHelpString(bool showDebug)$/;"	f	class:CWallet
GetWalletTx	wallet/wallet.cpp	/^const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const$/;"	f	class:CWallet
GetWarnings	warnings.cpp	/^std::string GetWarnings(const std::string& strFor)$/;"	f
GetWatchOnlyBalance	wallet/wallet.cpp	/^CAmount CWallet::GetWatchOnlyBalance() const$/;"	f	class:CWallet
GetWitnessCommitmentIndex	validation.cpp	/^static int GetWitnessCommitmentIndex(const CBlock& block)$/;"	f	file:
GetWitnessHash	primitives/transaction.cpp	/^uint256 CTransaction::GetWitnessHash() const$/;"	f	class:CTransaction
GetfLargeWorkForkFound	warnings.cpp	/^bool GetfLargeWorkForkFound()$/;"	f
GetnScore	net.cpp	/^int GetnScore(const CService& addr)$/;"	f
Good	addrman.h	/^    void Good(const CService &addr, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Good_	addrman.cpp	/^void CAddrMan::Good_(const CService& addr, int64_t nTime)$/;"	f	class:CAddrMan
Growl12	qt/notificator.h	/^        Growl12,                    \/**< Use the Growl 1.2 notification system (Mac only) *\/$/;"	e	enum:Notificator::Mode
Growl13	qt/notificator.h	/^        Growl13,                    \/**< Use the Growl 1.3 notification system (Mac only) *\/$/;"	e	enum:Notificator::Mode
GuessType	leveldb/db/dumpfile.cc	/^bool GuessType(const std::string& fname, FileType* type) {$/;"	f	namespace:leveldb::__anon19
GuessVerificationProgress	validation.cpp	/^double GuessVerificationProgress(const ChainTxData& data, CBlockIndex *pindex) {$/;"	f
HAIR_SP_CP	qt/wificoinunits.h	19;"	d
HAIR_SP_HTML	qt/wificoinunits.h	21;"	d
HAIR_SP_UTF8	qt/wificoinunits.h	20;"	d
HALF_ESTIMATE	policy/fees.h	/^    HALF_ESTIMATE,$/;"	m	class:FeeReason
HALF_SUCCESS_PCT	policy/fees.h	/^    static constexpr double HALF_SUCCESS_PCT = .6;$/;"	m	class:CBlockPolicyEstimator
HARDENED_CPPFLAGS	Makefile	/^HARDENED_CPPFLAGS =  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2$/;"	m
HARDENED_CXXFLAGS	Makefile	/^HARDENED_CXXFLAGS =  -Wstack-protector -fstack-protector-all$/;"	m
HARDENED_LDFLAGS	Makefile	/^HARDENED_LDFLAGS =  -Wl,-z,relro -Wl,-z,now -pie$/;"	m
HASH	leveldb/util/hash_test.cc	/^class HASH { };$/;"	c	namespace:leveldb	file:
HAVE_BOOST	config/wificoin-config.h	51;"	d
HAVE_BOOST_CHRONO	config/wificoin-config.h	54;"	d
HAVE_BOOST_FILESYSTEM	config/wificoin-config.h	57;"	d
HAVE_BOOST_PROGRAM_OPTIONS	config/wificoin-config.h	60;"	d
HAVE_BOOST_SYSTEM	config/wificoin-config.h	63;"	d
HAVE_BOOST_THREAD	config/wificoin-config.h	66;"	d
HAVE_BOOST_UNIT_TEST_FRAMEWORK	config/wificoin-config.h	69;"	d
HAVE_BUILTIN_EXPECT	secp256k1/src/libsecp256k1-config.h	24;"	d
HAVE_BYTESWAP_H	config/wificoin-config.h	72;"	d
HAVE_CONSENSUS_LIB	config/wificoin-config.h	75;"	d
HAVE_CXX11	Makefile	/^HAVE_CXX11 = 1$/;"	m
HAVE_CXX11	config/wificoin-config.h	78;"	d
HAVE_DECL_BE16TOH	config/wificoin-config.h	82;"	d
HAVE_DECL_BE32TOH	config/wificoin-config.h	86;"	d
HAVE_DECL_BE64TOH	config/wificoin-config.h	90;"	d
HAVE_DECL_BSWAP_16	config/wificoin-config.h	94;"	d
HAVE_DECL_BSWAP_32	config/wificoin-config.h	98;"	d
HAVE_DECL_BSWAP_64	config/wificoin-config.h	102;"	d
HAVE_DECL_DAEMON	config/wificoin-config.h	106;"	d
HAVE_DECL_EVP_MD_CTX_NEW	config/wificoin-config.h	110;"	d
HAVE_DECL_HTOBE16	config/wificoin-config.h	114;"	d
HAVE_DECL_HTOBE32	config/wificoin-config.h	118;"	d
HAVE_DECL_HTOBE64	config/wificoin-config.h	122;"	d
HAVE_DECL_HTOLE16	config/wificoin-config.h	126;"	d
HAVE_DECL_HTOLE32	config/wificoin-config.h	130;"	d
HAVE_DECL_HTOLE64	config/wificoin-config.h	134;"	d
HAVE_DECL_LE16TOH	config/wificoin-config.h	138;"	d
HAVE_DECL_LE32TOH	config/wificoin-config.h	142;"	d
HAVE_DECL_LE64TOH	config/wificoin-config.h	146;"	d
HAVE_DECL_STRERROR_R	config/wificoin-config.h	150;"	d
HAVE_DECL_STRNLEN	config/wificoin-config.h	154;"	d
HAVE_DECL___BUILTIN_CLZ	config/wificoin-config.h	158;"	d
HAVE_DECL___BUILTIN_CLZL	config/wificoin-config.h	162;"	d
HAVE_DECL___BUILTIN_CLZLL	config/wificoin-config.h	166;"	d
HAVE_DLFCN_H	config/wificoin-config.h	169;"	d
HAVE_DLFCN_H	secp256k1/src/libsecp256k1-config.h	27;"	d
HAVE_DLFCN_H	univalue/univalue-config.h	5;"	d
HAVE_ENDIAN_H	config/wificoin-config.h	172;"	d
HAVE_FUNC_ATTRIBUTE_VISIBILITY	config/wificoin-config.h	181;"	d
HAVE_INTTYPES_H	config/wificoin-config.h	191;"	d
HAVE_INTTYPES_H	secp256k1/src/libsecp256k1-config.h	30;"	d
HAVE_INTTYPES_H	univalue/univalue-config.h	8;"	d
HAVE_LIBCRYPTO	secp256k1/src/libsecp256k1-config.h	33;"	d
HAVE_MALLOC_INFO	config/wificoin-config.h	263;"	d
HAVE_MALLOPT_ARENA_MAX	config/wificoin-config.h	266;"	d
HAVE_MEMORY_H	config/wificoin-config.h	269;"	d
HAVE_MEMORY_H	secp256k1/src/libsecp256k1-config.h	39;"	d
HAVE_MEMORY_H	univalue/univalue-config.h	11;"	d
HAVE_MSG_DONTWAIT	config/wificoin-config.h	284;"	d
HAVE_MSG_NOSIGNAL	config/wificoin-config.h	287;"	d
HAVE_PTHREAD	config/wificoin-config.h	290;"	d
HAVE_PTHREAD_PRIO_INHERIT	config/wificoin-config.h	293;"	d
HAVE_STDINT_H	config/wificoin-config.h	296;"	d
HAVE_STDINT_H	secp256k1/src/libsecp256k1-config.h	42;"	d
HAVE_STDINT_H	univalue/univalue-config.h	14;"	d
HAVE_STDIO_H	config/wificoin-config.h	299;"	d
HAVE_STDLIB_H	config/wificoin-config.h	302;"	d
HAVE_STDLIB_H	secp256k1/src/libsecp256k1-config.h	45;"	d
HAVE_STDLIB_H	univalue/univalue-config.h	17;"	d
HAVE_STRERROR_R	config/wificoin-config.h	305;"	d
HAVE_STRINGS_H	config/wificoin-config.h	308;"	d
HAVE_STRINGS_H	secp256k1/src/libsecp256k1-config.h	48;"	d
HAVE_STRINGS_H	univalue/univalue-config.h	20;"	d
HAVE_STRING_H	config/wificoin-config.h	311;"	d
HAVE_STRING_H	secp256k1/src/libsecp256k1-config.h	51;"	d
HAVE_STRING_H	univalue/univalue-config.h	23;"	d
HAVE_SYS_PRCTL_H	config/wificoin-config.h	323;"	d
HAVE_SYS_SELECT_H	config/wificoin-config.h	326;"	d
HAVE_SYS_STAT_H	config/wificoin-config.h	329;"	d
HAVE_SYS_STAT_H	secp256k1/src/libsecp256k1-config.h	54;"	d
HAVE_SYS_STAT_H	univalue/univalue-config.h	26;"	d
HAVE_SYS_TYPES_H	config/wificoin-config.h	332;"	d
HAVE_SYS_TYPES_H	secp256k1/src/libsecp256k1-config.h	57;"	d
HAVE_SYS_TYPES_H	univalue/univalue-config.h	29;"	d
HAVE_UNISTD_H	config/wificoin-config.h	335;"	d
HAVE_UNISTD_H	secp256k1/src/libsecp256k1-config.h	60;"	d
HAVE_UNISTD_H	univalue/univalue-config.h	32;"	d
HAVE_VISIBILITY_ATTRIBUTE	config/wificoin-config.h	338;"	d
HAVE_WORKING_BOOST_SLEEP_FOR	config/wificoin-config.h	344;"	d
HAVE___INT128	secp256k1/src/libsecp256k1-config.h	63;"	d
HEAD	httpserver.h	/^        HEAD,$/;"	e	enum:HTTPRequest::RequestMethod
HEADERS	Makefile	/^HEADERS = $(include_HEADERS)$/;"	m
HEADERS	protocol.cpp	/^const char *HEADERS="headers";$/;"	m	namespace:NetMsgType	file:
HEADERS	secp256k1/Makefile	/^HEADERS = $(include_HEADERS) $(noinst_HEADERS)$/;"	m
HEADERS	univalue/Makefile	/^HEADERS = $(include_HEADERS) $(noinst_HEADERS)$/;"	m
HEADERS_DOWNLOAD_TIMEOUT_BASE	net_processing.h	/^static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; \/\/ 15 minutes$/;"	v
HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER	net_processing.h	/^static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; \/\/ 1ms\/header$/;"	v
HEADER_END	wallet/db.cpp	/^static const char *HEADER_END = "HEADER=END";$/;"	v	file:
HEADER_HEIGHT_DELTA_SYNC	qt/modaloverlay.h	/^static constexpr int HEADER_HEIGHT_DELTA_SYNC = 24;$/;"	v
HEADER_SIZE	protocol.h	/^        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE$/;"	e	enum:CMessageHeader::__anon48
HEXDUMP	Makefile	/^HEXDUMP = \/usr\/bin\/hexdump$/;"	m
HIGH_MAX_TX_FEE	validation.h	/^static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;$/;"	v
HIGH_TX_FEE_PER_KB	validation.h	/^static const CAmount HIGH_TX_FEE_PER_KB = 0.01 * COIN;$/;"	v
HMM_WIFICOIND	init.h	/^    HMM_WIFICOIND,$/;"	e	enum:HelpMessageMode
HMM_WIFICOIN_QT	init.h	/^    HMM_WIFICOIN_QT$/;"	e	enum:HelpMessageMode
HOSTUNREACHABLE	netbase.cpp	/^    HOSTUNREACHABLE = 0x04,  \/\/! Network unreachable$/;"	e	enum:uint8_t	file:
HTML_HACK_SP	qt/wificoinunits.h	37;"	d
HTTPBindAddresses	httpserver.cpp	/^static bool HTTPBindAddresses(struct evhttp* http)$/;"	f	file:
HTTPClosure	httpserver.h	/^class HTTPClosure$/;"	c
HTTPEvent	httpserver.cpp	/^HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void(void)>& _handler):$/;"	f	class:HTTPEvent
HTTPEvent	httpserver.h	/^class HTTPEvent$/;"	c
HTTPPathHandler	httpserver.cpp	/^    HTTPPathHandler() {}$/;"	f	struct:HTTPPathHandler
HTTPPathHandler	httpserver.cpp	/^    HTTPPathHandler(std::string _prefix, bool _exactMatch, HTTPRequestHandler _handler):$/;"	f	struct:HTTPPathHandler
HTTPPathHandler	httpserver.cpp	/^struct HTTPPathHandler$/;"	s	file:
HTTPRPCTimer	httprpc.cpp	/^    HTTPRPCTimer(struct event_base* eventBase, std::function<void(void)>& func, int64_t millis) :$/;"	f	class:HTTPRPCTimer
HTTPRPCTimer	httprpc.cpp	/^class HTTPRPCTimer : public RPCTimerBase$/;"	c	file:
HTTPRPCTimerInterface	httprpc.cpp	/^    HTTPRPCTimerInterface(struct event_base* _base) : base(_base)$/;"	f	class:HTTPRPCTimerInterface
HTTPRPCTimerInterface	httprpc.cpp	/^class HTTPRPCTimerInterface : public RPCTimerInterface$/;"	c	file:
HTTPReply	wificoin-cli.cpp	/^    HTTPReply(): status(0), error(-1) {}$/;"	f	struct:HTTPReply
HTTPReply	wificoin-cli.cpp	/^struct HTTPReply$/;"	s	file:
HTTPReq_JSONRPC	httprpc.cpp	/^static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)$/;"	f	file:
HTTPRequest	httpserver.cpp	/^HTTPRequest::HTTPRequest(struct evhttp_request* _req) : req(_req),$/;"	f	class:HTTPRequest
HTTPRequest	httpserver.h	/^class HTTPRequest$/;"	c
HTTPRequestHandler	httpserver.h	/^typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;$/;"	t
HTTPStatusCode	rpc/protocol.h	/^enum HTTPStatusCode$/;"	g
HTTPWorkItem	httpserver.cpp	/^    HTTPWorkItem(std::unique_ptr<HTTPRequest> _req, const std::string &_path, const HTTPRequestHandler& _func):$/;"	f	class:HTTPWorkItem
HTTPWorkItem	httpserver.cpp	/^class HTTPWorkItem : public HTTPClosure$/;"	c	file:
HTTPWorkQueueRun	httpserver.cpp	/^static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)$/;"	f	file:
HTTP_BAD_METHOD	rpc/protocol.h	/^    HTTP_BAD_METHOD            = 405,$/;"	e	enum:HTTPStatusCode
HTTP_BAD_REQUEST	rpc/protocol.h	/^    HTTP_BAD_REQUEST           = 400,$/;"	e	enum:HTTPStatusCode
HTTP_FORBIDDEN	rpc/protocol.h	/^    HTTP_FORBIDDEN             = 403,$/;"	e	enum:HTTPStatusCode
HTTP_INTERNAL_SERVER_ERROR	rpc/protocol.h	/^    HTTP_INTERNAL_SERVER_ERROR = 500,$/;"	e	enum:HTTPStatusCode
HTTP_NOT_FOUND	rpc/protocol.h	/^    HTTP_NOT_FOUND             = 404,$/;"	e	enum:HTTPStatusCode
HTTP_OK	rpc/protocol.h	/^    HTTP_OK                    = 200,$/;"	e	enum:HTTPStatusCode
HTTP_SERVICE_UNAVAILABLE	rpc/protocol.h	/^    HTTP_SERVICE_UNAVAILABLE   = 503,$/;"	e	enum:HTTPStatusCode
HTTP_UNAUTHORIZED	rpc/protocol.h	/^    HTTP_UNAUTHORIZED          = 401,$/;"	e	enum:HTTPStatusCode
H_PERF	bench/perf.h	7;"	d
HalfL	test/arith_uint256_tests.cpp	/^const arith_uint256 HalfL = (OneL << 255);$/;"	v
Handle	leveldb/include/leveldb/cache.h	/^  struct Handle { };$/;"	s	class:leveldb::Cache
HandleDumpCommand	leveldb/db/leveldbutil.cc	/^bool HandleDumpCommand(Env* env, char** files, int num) {$/;"	f	namespace:leveldb::__anon23
HandleError	dbwrapper.cpp	/^void HandleError(const leveldb::Status& status)$/;"	f	namespace:dbwrapper_private
HandleSIGHUP	init.cpp	/^static void HandleSIGHUP(int)$/;"	f	file:
HandleSIGTERM	init.cpp	/^static void HandleSIGTERM(int)$/;"	f	file:
HandleTable	leveldb/util/cache.cc	/^  HandleTable() : length_(0), elems_(0), list_(NULL) { Resize(); }$/;"	f	class:leveldb::__anon13::HandleTable
HandleTable	leveldb/util/cache.cc	/^class HandleTable {$/;"	c	namespace:leveldb::__anon13	file:
Handler	leveldb/include/leveldb/write_batch.h	/^  class Handler {$/;"	c	class:leveldb::WriteBatch
Harness	leveldb/table/table_test.cc	/^  Harness() : constructor_(NULL) { }$/;"	f	class:leveldb::Harness
Harness	leveldb/table/table_test.cc	/^class Harness {$/;"	c	namespace:leveldb	file:
HasAcceleratedCRC32C	leveldb/port/port_posix.cc	/^bool HasAcceleratedCRC32C() {$/;"	f	namespace:leveldb::port
HasAcceleratedCRC32C	leveldb/port/port_win.cc	/^bool HasAcceleratedCRC32C() {$/;"	f	namespace:leveldb::port
HasNoInputsOf	txmempool.cpp	/^bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const$/;"	f	class:CTxMemPool
HasSelected	wallet/coincontrol.h	/^    bool HasSelected() const$/;"	f	class:CCoinControl
HasValidOps	script/script.cpp	/^bool CScript::HasValidOps() const$/;"	f	class:CScript
HasWalletSpend	wallet/wallet.cpp	/^bool CWallet::HasWalletSpend(const uint256& txid) const$/;"	f	class:CWallet
HasWitness	primitives/transaction.h	/^    bool HasWitness() const$/;"	f	class:CTransaction
HasWitness	primitives/transaction.h	/^    bool HasWitness() const$/;"	f	struct:CMutableTransaction
Hash	bloom.cpp	/^inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const$/;"	f	class:CBloomFilter
Hash	hash.h	/^inline uint256 Hash(const T1 p1begin, const T1 p1end,$/;"	f
Hash	hash.h	/^inline uint256 Hash(const T1 pbegin, const T1 pend)$/;"	f
Hash	leveldb/util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
Hash160	hash.h	/^inline uint160 Hash160(const T1 pbegin, const T1 pend)$/;"	f
Hash160	hash.h	/^inline uint160 Hash160(const prevector<N, unsigned char>& vch)$/;"	f
Hash160	hash.h	/^inline uint160 Hash160(const std::vector<unsigned char>& vch)$/;"	f
HashNumbers	leveldb/db/skiplist_test.cc	/^  static uint64_t HashNumbers(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
HashSlice	leveldb/util/cache.cc	/^  static inline uint32_t HashSlice(const Slice& s) {$/;"	f	class:leveldb::__anon13::ShardedLRUCache	file:
HaveCScript	keystore.cpp	/^bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const$/;"	f	class:CBasicKeyStore
HaveCoin	coins.cpp	/^bool CCoinsView::HaveCoin(const COutPoint &outpoint) const$/;"	f	class:CCoinsView
HaveCoin	coins.cpp	/^bool CCoinsViewBacked::HaveCoin(const COutPoint &outpoint) const { return base->HaveCoin(outpoint); }$/;"	f	class:CCoinsViewBacked
HaveCoin	coins.cpp	/^bool CCoinsViewCache::HaveCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
HaveCoin	txdb.cpp	/^bool CCoinsViewDB::HaveCoin(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewDB
HaveCoinInCache	coins.cpp	/^bool CCoinsViewCache::HaveCoinInCache(const COutPoint &outpoint) const {$/;"	f	class:CCoinsViewCache
HaveInputs	coins.cpp	/^bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
HaveKeys	script/ismine.cpp	/^unsigned int HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)$/;"	f
HaveNameProxy	netbase.cpp	/^bool HaveNameProxy() {$/;"	f
HaveWatchOnly	keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly() const$/;"	f	class:CBasicKeyStore
HaveWatchOnly	keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const$/;"	f	class:CBasicKeyStore
HeapProfile	leveldb/db/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark	file:
Height	chain.h	/^    int Height() const {$/;"	f	class:CChain
Height	test/test_wificoin.h	/^    TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
HelpExampleCli	rpc/server.cpp	/^std::string HelpExampleCli(const std::string& methodname, const std::string& args)$/;"	f
HelpExampleRpc	rpc/server.cpp	/^std::string HelpExampleRpc(const std::string& methodname, const std::string& args)$/;"	f
HelpMessage	init.cpp	/^std::string HelpMessage(HelpMessageMode mode)$/;"	f
HelpMessageCli	wificoin-cli.cpp	/^std::string HelpMessageCli()$/;"	f
HelpMessageDialog	qt/utilitydialog.cpp	/^HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :$/;"	f	class:HelpMessageDialog
HelpMessageDialog	qt/utilitydialog.h	/^class HelpMessageDialog : public QDialog$/;"	c
HelpMessageGroup	util.cpp	/^std::string HelpMessageGroup(const std::string &message) {$/;"	f
HelpMessageMode	init.h	/^enum HelpMessageMode {$/;"	g
HelpMessageOpt	util.cpp	/^std::string HelpMessageOpt(const std::string &option, const std::string &message) {$/;"	f
HelpRequiringPassphrase	wallet/rpcwallet.cpp	/^std::string HelpRequiringPassphrase(CWallet * const pwallet)$/;"	f
HexDigit	utilstrencodings.cpp	/^signed char HexDigit(char c)$/;"	f
HexStr	utilstrencodings.h	/^inline std::string HexStr(const T& vch, bool fSpaces=false)$/;"	f
HexStr	utilstrencodings.h	/^std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)$/;"	f
Hidden	qt/addresstablemodel.cpp	/^        Hidden \/* QSortFilterProxyModel will filter these out *\/$/;"	e	enum:AddressTableEntry::Type	file:
HideTrayIcon	qt/optionsmodel.h	/^        HideTrayIcon,           \/\/ bool$/;"	e	enum:OptionsModel::OptionID
HighestTargetTracked	policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const$/;"	f	class:CBlockPolicyEstimator
Histogram	leveldb/util/histogram.h	/^  Histogram() { }$/;"	f	class:leveldb::Histogram
Histogram	leveldb/util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
HistoricalBlockSpan	policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const$/;"	f	class:CBlockPolicyEstimator
HtmlEscape	qt/guiutil.cpp	/^QString HtmlEscape(const QString& str, bool fMultiLine)$/;"	f	namespace:GUIUtil
HtmlEscape	qt/guiutil.cpp	/^QString HtmlEscape(const std::string& str, bool fMultiLine)$/;"	f	namespace:GUIUtil
I64FORMAT	secp256k1/src/util.h	100;"	d
I64FORMAT	secp256k1/src/util.h	97;"	d
I64uFORMAT	secp256k1/src/util.h	101;"	d
I64uFORMAT	secp256k1/src/util.h	98;"	d
ICON_ERROR	ui_interface.h	/^        ICON_ERROR          = (1U << 1),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_INFORMATION	ui_interface.h	/^        ICON_INFORMATION    = 0,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_MAPPING	qt/rpcconsole.cpp	/^} ICON_MAPPING[] = {$/;"	v	typeref:struct:__anon110
ICON_MASK	ui_interface.h	/^        ICON_MASK = (ICON_INFORMATION | ICON_WARNING | ICON_ERROR),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_WARNING	ui_interface.h	/^        ICON_WARNING        = (1U << 0),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
IKey	leveldb/db/dbformat_test.cc	/^static std::string IKey(const std::string& user_key,$/;"	f	namespace:leveldb
IMAGEMAGICK_CONVERT	Makefile	/^IMAGEMAGICK_CONVERT = $/;"	m
INF_FEERATE	policy/fees.cpp	/^static constexpr double INF_FEERATE = 1e99;$/;"	v	file:
INITIAL_TRAFFIC_GRAPH_MINS	qt/rpcconsole.cpp	/^const int INITIAL_TRAFFIC_GRAPH_MINS = 30;$/;"	v
INIT_PROTO_VERSION	version.h	/^static const int INIT_PROTO_VERSION = 209;$/;"	v
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	secp256k1/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	univalue/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALLNAMETOOL	Makefile	/^INSTALLNAMETOOL = $/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	secp256k1/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	univalue/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	secp256k1/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	univalue/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	secp256k1/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	univalue/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	secp256k1/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	univalue/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	secp256k1/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	univalue/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INV	protocol.cpp	/^const char *INV="inv";$/;"	m	namespace:NetMsgType	file:
INVALID_ADDRESS	qt/addresstablemodel.h	/^        INVALID_ADDRESS,        \/**< Unparseable address *\/$/;"	e	enum:AddressTableModel::EditStatus
INVALID_ADDRESS_OR_KEY	wallet/feebumper.h	/^    INVALID_ADDRESS_OR_KEY,$/;"	m	class:BumpFeeResult
INVALID_CB_NO_BAN_VERSION	version.h	/^static const int INVALID_CB_NO_BAN_VERSION = 70015;$/;"	v
INVALID_PARAMETER	wallet/feebumper.h	/^    INVALID_PARAMETER,$/;"	m	class:BumpFeeResult
INVALID_REQUEST	wallet/feebumper.h	/^    INVALID_REQUEST,$/;"	m	class:BumpFeeResult
INVALID_SOCKET	compat.h	62;"	d
INVENTORY_BROADCAST_INTERVAL	validation.h	/^static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;$/;"	v
INVENTORY_BROADCAST_MAX	validation.h	/^static const unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;$/;"	v
IOError	leveldb/include/leveldb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
IOError	leveldb/util/env_posix.cc	/^static Status IOError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon11
IPV4	netbase.cpp	/^    IPV4 = 0x01,$/;"	e	enum:uint8_t	file:
IPV6	netbase.cpp	/^    IPV6 = 0x04,$/;"	e	enum:uint8_t	file:
IPV6_PROTECTION_LEVEL	net.cpp	63;"	d	file:
ISMINE_ALL	script/ismine.h	/^    ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE$/;"	e	enum:isminetype
ISMINE_NO	script/ismine.h	/^    ISMINE_NO = 0,$/;"	e	enum:isminetype
ISMINE_SPENDABLE	script/ismine.h	/^    ISMINE_SPENDABLE = 4,$/;"	e	enum:isminetype
ISMINE_WATCH_ONLY	script/ismine.h	/^    ISMINE_WATCH_ONLY = ISMINE_WATCH_SOLVABLE | ISMINE_WATCH_UNSOLVABLE,$/;"	e	enum:isminetype
ISMINE_WATCH_SOLVABLE	script/ismine.h	/^    ISMINE_WATCH_SOLVABLE = 2,$/;"	e	enum:isminetype
ISMINE_WATCH_UNSOLVABLE	script/ismine.h	/^    ISMINE_WATCH_UNSOLVABLE = 1,$/;"	e	enum:isminetype
Immature	qt/transactionrecord.h	/^        Immature,           \/**< Mined but waiting for maturity *\/$/;"	e	enum:TransactionStatus::Status
ImportAddress	wallet/rpcdump.cpp	/^void ImportAddress(CWallet* const pwallet, const CWiFicoinAddress& address, const std::string& strLabel)$/;"	f
ImportScript	wallet/rpcdump.cpp	/^void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript)$/;"	f
InMemoryEnv	leveldb/helpers/memenv/memenv.cc	/^  explicit InMemoryEnv(Env* base_env) : EnvWrapper(base_env) { }$/;"	f	class:leveldb::__anon16::InMemoryEnv
InMemoryEnv	leveldb/helpers/memenv/memenv.cc	/^class InMemoryEnv : public EnvWrapper {$/;"	c	namespace:leveldb::__anon16	file:
InMempool	wallet/wallet.cpp	/^bool CWalletTx::InMempool() const$/;"	f	class:CWalletTx
IncOrderPosNext	wallet/wallet.cpp	/^int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)$/;"	f	class:CWallet
Increment	leveldb/db/db_test.cc	/^  void Increment() {$/;"	f	class:leveldb::__anon29::AtomicCounter
Increment	leveldb/table/table_test.cc	/^static void Increment(const Comparator* cmp, std::string* key) {$/;"	f	namespace:leveldb
IncrementBy	leveldb/db/db_test.cc	/^  void IncrementBy(int count) {$/;"	f	class:leveldb::__anon29::AtomicCounter
IncrementByte	leveldb/db/log_test.cc	/^  void IncrementByte(int offset, int delta) {$/;"	f	class:leveldb::log::LogTest
IncrementExtraNonce	miner.cpp	/^void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)$/;"	f
IncrementUpdateCounter	wallet/db.cpp	/^void CWalletDBWrapper::IncrementUpdateCounter()$/;"	f	class:CWalletDBWrapper
IncrementalDynamicUsage	memusage.h	/^static inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)$/;"	f	namespace:memusage
IncrementalDynamicUsage	memusage.h	/^static inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)$/;"	f	namespace:memusage
IncrementalDynamicUsage	memusage.h	/^static inline size_t IncrementalDynamicUsage(const std::set<X, Y>& s)$/;"	f	namespace:memusage
InfoLogFileName	leveldb/db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
Information	qt/notificator.h	/^        Information,    \/**< Informational message *\/$/;"	e	enum:Notificator::Class
Init	addrman.h	/^    void Init()$/;"	f	class:CAddrInfo
Init	leveldb/table/table_test.cc	/^  void Init(const TestArgs& args) {$/;"	f	class:leveldb::Harness
Init	net.h	/^    void Init(const Options& connOptions) {$/;"	f	class:CConnman
Init	netaddress.cpp	/^void CNetAddr::Init()$/;"	f	class:CNetAddr
Init	netaddress.cpp	/^void CService::Init()$/;"	f	class:CService
Init	protocol.cpp	/^void CAddress::Init()$/;"	f	class:CAddress
Init	qt/optionsmodel.cpp	/^void OptionsModel::Init(bool resetSettings)$/;"	f	class:OptionsModel
Init	streams.h	/^    void Init(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
Init	wallet/wallet.h	/^    void Init()$/;"	f	class:CMerkleTx
Init	wallet/wallet.h	/^    void Init(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
InitBinds	net.cpp	/^bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<CService>& whiteBinds) {$/;"	f	class:CConnman
InitData	blockencodings.cpp	/^ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {$/;"	f	class:PartiallyDownloadedBlock
InitDataBlock	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
InitDefaultEnv	leveldb/util/env_posix.cc	/^static void InitDefaultEnv() { default_env = new PosixEnv; }$/;"	f	namespace:leveldb
InitDefaultEnv	leveldb/util/env_win.cc	/^static void InitDefaultEnv() { default_env = new Win32::Win32Env(); }$/;"	f	namespace:leveldb
InitError	ui_interface.cpp	/^bool InitError(const std::string& str)$/;"	f
InitHTTPAllowList	httpserver.cpp	/^static bool InitHTTPAllowList()$/;"	f	file:
InitHTTPServer	httpserver.cpp	/^bool InitHTTPServer()$/;"	f
InitLoadWallet	wallet/wallet.cpp	/^bool CWallet::InitLoadWallet()$/;"	f	class:CWallet
InitLogging	init.cpp	/^void InitLogging()$/;"	f
InitMessage	qt/wificoin.cpp	/^static void InitMessage(const std::string &message)$/;"	f	file:
InitMessage	qt/splashscreen.cpp	/^static void InitMessage(SplashScreen *splash, const std::string &message)$/;"	f	file:
InitMessage	ui_interface.h	/^    boost::signals2::signal<void (const std::string &message)> InitMessage;$/;"	m	class:CClientUIInterface
InitModule	leveldb/util/comparator.cc	/^static void InitModule() {$/;"	f	namespace:leveldb
InitOnce	leveldb/port/port_posix.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
InitOnce	leveldb/port/port_win.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
InitOnce	leveldb/port/port_win.h	/^    void InitOnce(void (*initializer)()) {$/;"	f	class:leveldb::port::OnceType
InitParameterInteraction	init.cpp	/^void InitParameterInteraction()$/;"	f
InitRPCAuthentication	httprpc.cpp	/^static bool InitRPCAuthentication()$/;"	f	file:
InitSanityCheck	init.cpp	/^bool InitSanityCheck(void)$/;"	f
InitScriptExecutionCache	validation.cpp	/^void InitScriptExecutionCache() {$/;"	f
InitSignatureCache	script/sigcache.cpp	/^void InitSignatureCache()$/;"	f
InitTypeCrc	leveldb/db/log_writer.cc	/^static void InitTypeCrc(uint32_t* type_crc) {$/;"	f	namespace:leveldb::log
InitWarning	ui_interface.cpp	/^void InitWarning(const std::string& str)$/;"	f
Initialize	crypto/ripemd160.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon89::ripemd160
Initialize	crypto/sha1.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon90::sha1
Initialize	crypto/sha256.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon87::sha256
Initialize	crypto/sha512.cpp	/^void inline Initialize(uint64_t* s)$/;"	f	namespace:__anon88::sha512
Initialize	zmq/zmqnotificationinterface.cpp	/^bool CZMQNotificationInterface::Initialize()$/;"	f	class:CZMQNotificationInterface
Initialize	zmq/zmqpublishnotifier.cpp	/^bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)$/;"	f	class:CZMQAbstractPublishNotifier
InitializeNode	net_processing.cpp	/^void PeerLogicValidation::InitializeNode(CNode *pnode) {$/;"	f	class:PeerLogicValidation
InsecureRand256	test/test_wificoin.h	/^static inline uint256 InsecureRand256() { return insecure_rand_ctx.rand256(); }$/;"	f
InsecureRand32	test/test_wificoin.h	/^static inline uint32_t InsecureRand32() { return insecure_rand_ctx.rand32(); }$/;"	f
InsecureRandBits	test/test_wificoin.h	/^static inline uint64_t InsecureRandBits(int bits) { return insecure_rand_ctx.randbits(bits); }$/;"	f
InsecureRandBool	test/test_wificoin.h	/^static inline bool InsecureRandBool() { return insecure_rand_ctx.randbool(); }$/;"	f
InsecureRandRange	test/test_wificoin.h	/^static inline uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }$/;"	f
Insert	leveldb/db/skiplist.h	/^void SkipList<Key,Comparator>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	leveldb/util/cache.cc	/^  LRUHandle* Insert(LRUHandle* h) {$/;"	f	class:leveldb::__anon13::HandleTable
Insert	leveldb/util/cache.cc	/^  virtual Handle* Insert(const Slice& key, void* value, size_t charge,$/;"	f	class:leveldb::__anon13::ShardedLRUCache
Insert	leveldb/util/cache.cc	/^Cache::Handle* LRUCache::Insert($/;"	f	class:leveldb::__anon13::LRUCache
Insert	leveldb/util/cache_test.cc	/^  void Insert(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
Insert	leveldb/util/env_posix.cc	/^  bool Insert(const std::string& fname) {$/;"	f	class:leveldb::__anon11::PosixLockTable
InsertAndReturnHandle	leveldb/util/cache_test.cc	/^  Cache::Handle* InsertAndReturnHandle(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
InsertBlockIndex	validation.cpp	/^CBlockIndex * InsertBlockIndex(uint256 hash)$/;"	f
InsertCoinsMapEntry	test/coins_tests.cpp	/^size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)$/;"	f
InsertInto	leveldb/db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InstallCompactionResults	leveldb/db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
Instance	support/lockedpool.h	/^    static LockedPoolManager& Instance()$/;"	f	class:LockedPoolManager
InternalFilterPolicy	leveldb/db/dbformat.h	/^  explicit InternalFilterPolicy(const FilterPolicy* p) : user_policy_(p) { }$/;"	f	class:leveldb::InternalFilterPolicy
InternalFilterPolicy	leveldb/db/dbformat.h	/^class InternalFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb
InternalGet	leveldb/table/table.cc	/^Status Table::InternalGet(const ReadOptions& options, const Slice& k,$/;"	f	class:leveldb::Table
InternalKey	leveldb/db/dbformat.h	/^  InternalKey() { }   \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	leveldb/db/dbformat.h	/^  InternalKey(const Slice& user_key, SequenceNumber s, ValueType t) {$/;"	f	class:leveldb::InternalKey
InternalKey	leveldb/db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	leveldb/db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	leveldb/db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	leveldb/db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InterpretBool	util.cpp	/^static bool InterpretBool(const std::string& strValue)$/;"	f	file:
InterpretNegativeSetting	util.cpp	/^static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)$/;"	f	file:
Interrupt	httpserver.cpp	/^    void Interrupt()$/;"	f	class:WorkQueue
Interrupt	init.cpp	/^void Interrupt(boost::thread_group& threadGroup)$/;"	f
Interrupt	net.cpp	/^void CConnman::Interrupt()$/;"	f	class:CConnman
InterruptHTTPRPC	httprpc.cpp	/^void InterruptHTTPRPC()$/;"	f
InterruptHTTPServer	httpserver.cpp	/^void InterruptHTTPServer()$/;"	f
InterruptREST	rest.cpp	/^void InterruptREST()$/;"	f
InterruptRPC	rpc/server.cpp	/^void InterruptRPC()$/;"	f
InterruptSocks5	netbase.cpp	/^void InterruptSocks5(bool interrupt)$/;"	f
InterruptTorControl	torcontrol.cpp	/^void InterruptTorControl()$/;"	f
InterruptibleRecv	netbase.cpp	/^static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)$/;"	f	file:
IntrRecvError	netbase.cpp	/^enum class IntrRecvError {$/;"	c	file:
Intro	qt/intro.cpp	/^Intro::Intro(QWidget *parent) :$/;"	f	class:Intro
Intro	qt/intro.h	/^class Intro : public QDialog$/;"	c
InvLockOrders	sync.cpp	/^typedef std::set<std::pair<void*, void*> > InvLockOrders;$/;"	t	file:
InvShiftRows	crypto/ctaes/ctaes.c	/^static void InvShiftRows(AES_state* s) {$/;"	f	file:
Invalid	consensus/validation.h	/^    bool Invalid(bool ret = false,$/;"	f	class:CValidationState
InvalidAddress	qt/walletmodel.h	/^        InvalidAddress,$/;"	e	enum:WalletModel::StatusCode
InvalidAmount	qt/walletmodel.h	/^        InvalidAmount,$/;"	e	enum:WalletModel::StatusCode
InvalidArgument	leveldb/include/leveldb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
InvalidBlockFound	validation.cpp	/^void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {$/;"	f	file:
InvalidChainFound	validation.cpp	/^void static InvalidChainFound(CBlockIndex* pindexNew)$/;"	f	file:
Invalidate	pubkey.h	/^    void Invalidate()$/;"	f	class:CPubKey
InvalidateBlock	validation.cpp	/^bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)$/;"	f
Inventory	validationinterface.cpp	/^    boost::signals2::signal<void (const uint256 &)> Inventory;$/;"	m	struct:MainSignalsInstance	file:
Inventory	validationinterface.cpp	/^void CMainSignals::Inventory(const uint256 &hash) {$/;"	f	class:CMainSignals
Inventory	validationinterface.h	/^    virtual void Inventory(const uint256 &hash) {}$/;"	f	class:CValidationInterface
InvertLowestOne	chain.cpp	/^int static inline InvertLowestOne(int n) { return n & (n - 1); }$/;"	f	file:
Is	leveldb/util/testharness.h	/^  Tester& Is(bool b, const char* msg) {$/;"	f	class:leveldb::test::Tester
IsAbortingRescan	wallet/wallet.h	/^    bool IsAbortingRescan() { return fAbortRescan; }$/;"	f	class:CWallet
IsAllFromMe	wallet/wallet.cpp	/^bool CWallet::IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
IsArgSet	util.cpp	/^bool ArgsManager::IsArgSet(const std::string& strArg)$/;"	f	class:ArgsManager
IsBanned	net.cpp	/^bool CConnman::IsBanned(CNetAddr ip)$/;"	f	class:CConnman
IsBanned	net.cpp	/^bool CConnman::IsBanned(CSubNet subnet)$/;"	f	class:CConnman
IsBaseLevelForKey	leveldb/db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsChange	wallet/wallet.cpp	/^bool CWallet::IsChange(const CTxOut& txout) const$/;"	f	class:CWallet
IsCoinBase	coins.h	/^    bool IsCoinBase() const {$/;"	f	class:Coin
IsCoinBase	primitives/transaction.h	/^    bool IsCoinBase() const$/;"	f	class:CTransaction
IsCoinBase	wallet/wallet.h	/^    bool IsCoinBase() const { return tx->IsCoinBase(); }$/;"	f	class:CMerkleTx
IsCompressed	key.h	/^    bool IsCompressed() const { return fCompressed; }$/;"	f	class:CKey
IsCompressed	pubkey.h	/^    bool IsCompressed() const$/;"	f	class:CPubKey
IsCompressedOrUncompressedPubKey	script/interpreter.cpp	/^bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {$/;"	f	file:
IsCompressedPubKey	script/interpreter.cpp	/^bool static IsCompressedPubKey(const valtype &vchPubKey) {$/;"	f	file:
IsCorruption	leveldb/include/leveldb/status.h	/^  bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:leveldb::Status
IsCrypted	wallet/crypter.h	/^    bool IsCrypted() const$/;"	f	class:CCryptoKeyStore
IsCurrentForFeeEstimation	validation.cpp	/^static bool IsCurrentForFeeEstimation()$/;"	f	file:
IsDefinedHashtypeSignature	script/interpreter.cpp	/^bool static IsDefinedHashtypeSignature(const valtype &vchSig) {$/;"	f	file:
IsDummy	wallet/db.h	/^    bool IsDummy() { return env == nullptr; }$/;"	f	class:CWalletDBWrapper
IsDust	policy/policy.cpp	/^bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)$/;"	f
IsEmpty	dbwrapper.cpp	/^bool CDBWrapper::IsEmpty()$/;"	f	class:CDBWrapper
IsEquivalentTo	wallet/wallet.cpp	/^bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const$/;"	f	class:CWalletTx
IsError	consensus/validation.h	/^    bool IsError() const {$/;"	f	class:CValidationState
IsFileCreatedSinceLastDirSync	leveldb/db/fault_injection_test.cc	/^bool FaultInjectionTestEnv::IsFileCreatedSinceLastDirSync($/;"	f	class:leveldb::FaultInjectionTestEnv
IsFilesystemActive	leveldb/db/fault_injection_test.cc	/^  bool IsFilesystemActive() const { return filesystem_active_; }$/;"	f	class:leveldb::FaultInjectionTestEnv
IsFinalTx	consensus/tx_verify.cpp	/^bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)$/;"	f
IsFromMe	wallet/wallet.cpp	/^bool CWallet::IsFromMe(const CTransaction& tx) const$/;"	f	class:CWallet
IsFromMe	wallet/wallet.h	/^    bool IsFromMe(const isminefilter& filter) const$/;"	f	class:CWalletTx
IsFullySynced	leveldb/db/fault_injection_test.cc	/^  bool IsFullySynced() const { return pos_ <= 0 || pos_ == pos_at_last_sync_; }$/;"	f	struct:leveldb::__anon21::FileState
IsFullyValid	pubkey.cpp	/^bool CPubKey::IsFullyValid() const {$/;"	f	class:CPubKey
IsHDEnabled	wallet/wallet.cpp	/^bool CWallet::IsHDEnabled() const$/;"	f	class:CWallet
IsHex	utilstrencodings.cpp	/^bool IsHex(const std::string& str)$/;"	f
IsHexNumber	utilstrencodings.cpp	/^bool IsHexNumber(const std::string& str)$/;"	f
IsIOError	leveldb/include/leveldb/status.h	/^  bool IsIOError() const { return code() == kIOError; }$/;"	f	class:leveldb::Status
IsIPv4	netaddress.cpp	/^bool CNetAddr::IsIPv4() const$/;"	f	class:CNetAddr
IsIPv6	netaddress.cpp	/^bool CNetAddr::IsIPv6() const$/;"	f	class:CNetAddr
IsInMainChain	wallet/wallet.h	/^    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }$/;"	f	class:CMerkleTx
IsInitialBlockDownload	validation.cpp	/^bool IsInitialBlockDownload()$/;"	f
IsInitialized	qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::IsInitialized() const$/;"	f	class:PaymentRequestPlus
IsInternal	netaddress.cpp	/^bool CNetAddr::IsInternal() const$/;"	f	class:CNetAddr
IsInvalid	consensus/validation.h	/^    bool IsInvalid() const {$/;"	f	class:CValidationState
IsInvalid	consensus/validation.h	/^    bool IsInvalid(int &nDoSOut) const {$/;"	f	class:CValidationState
IsInvalidArgument	leveldb/include/leveldb/status.h	/^  bool IsInvalidArgument() const { return code() == kInvalidArgument; }$/;"	f	class:leveldb::Status
IsKeyType	wallet/walletdb.cpp	/^bool CWalletDB::IsKeyType(const std::string& strType)$/;"	f	class:CWalletDB
IsLimited	net.cpp	/^bool IsLimited(const CNetAddr &addr)$/;"	f
IsLimited	net.cpp	/^bool IsLimited(enum Network net)$/;"	f
IsLocal	net.cpp	/^bool IsLocal(const CService& addr)$/;"	f
IsLocal	netaddress.cpp	/^bool CNetAddr::IsLocal() const$/;"	f	class:CNetAddr
IsLocked	wallet/crypter.h	/^    bool IsLocked() const$/;"	f	class:CCryptoKeyStore
IsLockedCoin	wallet/wallet.cpp	/^bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const$/;"	f	class:CWallet
IsLowDERSignature	script/interpreter.cpp	/^bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {$/;"	f	file:
IsMine	script/ismine.cpp	/^isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion sigversion)$/;"	f
IsMine	script/ismine.cpp	/^isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest, bool& isInvalid, SigVersion sigversion)$/;"	f
IsMine	script/ismine.cpp	/^isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion sigversion)$/;"	f
IsMine	script/ismine.cpp	/^isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, SigVersion sigversion)$/;"	f
IsMine	wallet/wallet.cpp	/^bool CWallet::IsMine(const CTransaction& tx) const$/;"	f	class:CWallet
IsMine	wallet/wallet.cpp	/^isminetype CWallet::IsMine(const CTxIn &txin) const$/;"	f	class:CWallet
IsMine	wallet/wallet.cpp	/^isminetype CWallet::IsMine(const CTxOut& txout) const$/;"	f	class:CWallet
IsMock	wallet/db.h	/^    bool IsMock() const { return fMockDb; }$/;"	f	class:CDBEnv
IsNotFound	leveldb/include/leveldb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsNotSupportedError	leveldb/include/leveldb/status.h	/^  bool IsNotSupportedError() const { return code() == kNotSupported; }$/;"	f	class:leveldb::Status
IsNull	chain.h	/^    bool IsNull() const { return (nFile == -1); }$/;"	f	struct:CDiskBlockPos
IsNull	primitives/block.h	/^    bool IsNull() const$/;"	f	class:CBlockHeader
IsNull	primitives/block.h	/^    bool IsNull() const$/;"	f	struct:CBlockLocator
IsNull	primitives/transaction.h	/^    bool IsNull() const { return (hash.IsNull() && n == (uint32_t) -1); }$/;"	f	class:COutPoint
IsNull	primitives/transaction.h	/^    bool IsNull() const {$/;"	f	class:CTransaction
IsNull	primitives/transaction.h	/^    bool IsNull() const$/;"	f	class:CTxOut
IsNull	script/script.h	/^    bool IsNull() const { return stack.empty(); }$/;"	f	struct:CScriptWitness
IsNull	streams.h	/^    bool IsNull() const         { return (file == nullptr); }$/;"	f	class:CAutoFile
IsNull	uint256.h	/^    bool IsNull() const$/;"	f	class:base_blob
IsOk	leveldb/util/testharness.h	/^  Tester& IsOk(const Status& s) {$/;"	f	class:leveldb::test::Tester
IsOutboundDisconnectionCandidate	net_processing.cpp	/^bool IsOutboundDisconnectionCandidate(const CNode *node)$/;"	f
IsPayToScriptHash	script/script.cpp	/^bool CScript::IsPayToScriptHash() const$/;"	f	class:CScript
IsPayToWitnessScriptHash	script/script.cpp	/^bool CScript::IsPayToWitnessScriptHash() const$/;"	f	class:CScript
IsPeerAddrLocalGood	net.cpp	/^bool IsPeerAddrLocalGood(CNode *pnode)$/;"	f
IsProxy	netbase.cpp	/^bool IsProxy(const CNetAddr &addr) {$/;"	f
IsPushOnly	script/script.cpp	/^bool CScript::IsPushOnly() const$/;"	f	class:CScript
IsPushOnly	script/script.cpp	/^bool CScript::IsPushOnly(const_iterator pc) const$/;"	f	class:CScript
IsRBFOptIn	policy/rbf.cpp	/^RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool)$/;"	f
IsRFC1918	netaddress.cpp	/^bool CNetAddr::IsRFC1918() const$/;"	f	class:CNetAddr
IsRFC2544	netaddress.cpp	/^bool CNetAddr::IsRFC2544() const$/;"	f	class:CNetAddr
IsRFC3849	netaddress.cpp	/^bool CNetAddr::IsRFC3849() const$/;"	f	class:CNetAddr
IsRFC3927	netaddress.cpp	/^bool CNetAddr::IsRFC3927() const$/;"	f	class:CNetAddr
IsRFC3964	netaddress.cpp	/^bool CNetAddr::IsRFC3964() const$/;"	f	class:CNetAddr
IsRFC4193	netaddress.cpp	/^bool CNetAddr::IsRFC4193() const$/;"	f	class:CNetAddr
IsRFC4380	netaddress.cpp	/^bool CNetAddr::IsRFC4380() const$/;"	f	class:CNetAddr
IsRFC4843	netaddress.cpp	/^bool CNetAddr::IsRFC4843() const$/;"	f	class:CNetAddr
IsRFC4862	netaddress.cpp	/^bool CNetAddr::IsRFC4862() const$/;"	f	class:CNetAddr
IsRFC5737	netaddress.cpp	/^bool CNetAddr::IsRFC5737() const$/;"	f	class:CNetAddr
IsRFC6052	netaddress.cpp	/^bool CNetAddr::IsRFC6052() const$/;"	f	class:CNetAddr
IsRFC6145	netaddress.cpp	/^bool CNetAddr::IsRFC6145() const$/;"	f	class:CNetAddr
IsRFC6598	netaddress.cpp	/^bool CNetAddr::IsRFC6598() const$/;"	f	class:CNetAddr
IsRPCRunning	rpc/server.cpp	/^bool IsRPCRunning()$/;"	f
IsReachable	net.cpp	/^bool IsReachable(const CNetAddr& addr)$/;"	f
IsReachable	net.cpp	/^bool IsReachable(enum Network net)$/;"	f
IsRelevantAndUpdate	bloom.cpp	/^bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)$/;"	f	class:CBloomFilter
IsRoutable	netaddress.cpp	/^bool CNetAddr::IsRoutable() const$/;"	f	class:CNetAddr
IsScanning	wallet/wallet.h	/^    bool IsScanning() { return fScanningWallet; }$/;"	f	class:CWallet
IsScript	base58.cpp	/^bool CWiFicoinAddress::IsScript() const$/;"	f	class:CWiFicoinAddress
IsSelectableSocket	compat.h	/^bool static inline IsSelectableSocket(const SOCKET& s) {$/;"	f
IsSelected	wallet/coincontrol.h	/^    bool IsSelected(const COutPoint& output) const$/;"	f	class:CCoinControl
IsSpendable	qt/walletmodel.cpp	/^bool WalletModel::IsSpendable(const CTxDestination& dest) const$/;"	f	class:WalletModel
IsSpent	coins.h	/^    bool IsSpent() const {$/;"	f	class:Coin
IsSpent	wallet/wallet.cpp	/^bool CWallet::IsSpent(const uint256& hash, unsigned int n) const$/;"	f	class:CWallet
IsStandard	policy/policy.cpp	/^bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled)$/;"	f
IsStandardTx	policy/policy.cpp	/^bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled)$/;"	f
IsSwitchChar	util.h	/^inline bool IsSwitchChar(char c)$/;"	f
IsTerrible	addrman.cpp	/^bool CAddrInfo::IsTerrible(int64_t nNow) const$/;"	f	class:CAddrInfo
IsToKeyID	compressor.cpp	/^bool CScriptCompressor::IsToKeyID(CKeyID &hash) const$/;"	f	class:CScriptCompressor
IsToPubKey	compressor.cpp	/^bool CScriptCompressor::IsToPubKey(CPubKey &pubkey) const$/;"	f	class:CScriptCompressor
IsToScriptID	compressor.cpp	/^bool CScriptCompressor::IsToScriptID(CScriptID &hash) const$/;"	f	class:CScriptCompressor
IsTor	netaddress.cpp	/^bool CNetAddr::IsTor() const$/;"	f	class:CNetAddr
IsTrivialMove	leveldb/db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
IsTrusted	wallet/wallet.cpp	/^bool CWalletTx::IsTrusted() const$/;"	f	class:CWalletTx
IsTxAvailable	blockencodings.cpp	/^bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {$/;"	f	class:PartiallyDownloadedBlock
IsUnspendable	script/script.h	/^    bool IsUnspendable() const$/;"	f	class:CScript
IsValid	base58.cpp	/^bool CWiFicoinAddress::IsValid() const$/;"	f	class:CWiFicoinAddress
IsValid	base58.cpp	/^bool CWiFicoinAddress::IsValid(const CChainParams& params) const$/;"	f	class:CWiFicoinAddress
IsValid	base58.cpp	/^bool CWiFicoinSecret::IsValid() const$/;"	f	class:CWiFicoinSecret
IsValid	chain.h	/^    bool IsValid(enum BlockStatus nUpTo = BLOCK_VALID_TRANSACTIONS) const$/;"	f	class:CBlockIndex
IsValid	consensus/validation.h	/^    bool IsValid() const {$/;"	f	class:CValidationState
IsValid	key.h	/^    bool IsValid() const { return fValid; }$/;"	f	class:CKey
IsValid	netaddress.cpp	/^bool CNetAddr::IsValid() const$/;"	f	class:CNetAddr
IsValid	netaddress.cpp	/^bool CSubNet::IsValid() const$/;"	f	class:CSubNet
IsValid	netbase.h	/^    bool IsValid() const { return proxy.IsValid(); }$/;"	f	class:proxyType
IsValid	protocol.cpp	/^bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const$/;"	f	class:CMessageHeader
IsValid	pubkey.h	/^    bool IsValid() const$/;"	f	class:CPubKey
IsValidKey	leveldb/db/skiplist_test.cc	/^  static bool IsValidKey(Key k) {$/;"	f	class:leveldb::ConcurrentTest	file:
IsValidSignatureEncoding	script/interpreter.cpp	/^bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {$/;"	f	file:
IsWhitelistedRange	net.cpp	/^bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {$/;"	f	class:CConnman
IsWithinSizeConstraints	bloom.cpp	/^bool CBloomFilter::IsWithinSizeConstraints() const$/;"	f	class:CBloomFilter
IsWitnessEnabled	validation.cpp	/^bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)$/;"	f
IsWitnessProgram	script/script.cpp	/^bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const$/;"	f	class:CScript
IsWitnessStandard	policy/policy.cpp	/^bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)$/;"	f
Issue178	leveldb/issues/issue178_test.cc	/^class Issue178 { };$/;"	c	namespace:__anon32	file:
Issue200	leveldb/issues/issue200_test.cc	/^class Issue200 { };$/;"	c	namespace:leveldb	file:
Iter	leveldb/table/block.cc	/^  Iter(const Comparator* comparator,$/;"	f	class:leveldb::Block::Iter
Iter	leveldb/table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block	file:
IterState	leveldb/db/db_impl.cc	/^struct IterState {$/;"	s	namespace:leveldb::__anon27	file:
IterStatus	leveldb/db/db_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
Iterate	leveldb/db/write_batch.cc	/^Status WriteBatch::Iterate(Handler* handler) const {$/;"	f	class:leveldb::WriteBatch
Iterator	leveldb/db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	leveldb/db/skiplist.h	/^inline SkipList<Key,Comparator>::Iterator::Iterator(const SkipList* list) {$/;"	f	class:leveldb::SkipList::Iterator
Iterator	leveldb/include/leveldb/iterator.h	/^class Iterator {$/;"	c	namespace:leveldb
Iterator	leveldb/table/iterator.cc	/^Iterator::Iterator() {$/;"	f	class:leveldb::Iterator
IteratorComparator	net_processing.cpp	/^struct IteratorComparator$/;"	s	file:
IteratorWrapper	leveldb/table/iterator_wrapper.h	/^  IteratorWrapper(): iter_(NULL), valid_(false) { }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	leveldb/table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* iter): iter_(NULL) {$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	leveldb/table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
JAVAORG	secp256k1/Makefile	/^JAVAORG = org\/wificoin$/;"	m
JAVAROOT	secp256k1/Makefile	/^JAVAROOT = src\/java$/;"	m
JAVA_FILES	secp256k1/Makefile	/^JAVA_FILES = \\$/;"	m
JAVA_GUAVA	secp256k1/Makefile	/^JAVA_GUAVA = $(srcdir)\/$(JAVAROOT)\/guava\/guava-18.0.jar$/;"	m
JNI_INCLUDES	secp256k1/Makefile	/^JNI_INCLUDES = $/;"	m
JNI_LIB	secp256k1/Makefile	/^JNI_LIB = $/;"	m
JSONErrorReply	httprpc.cpp	/^static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)$/;"	f	file:
JSONPrettyPrint	test/script_tests.cpp	/^std::string JSONPrettyPrint(const UniValue& univalue)$/;"	f	namespace:__anon80
JSONRPCError	rpc/protocol.cpp	/^UniValue JSONRPCError(int code, const std::string& message)$/;"	f
JSONRPCExecBatch	rpc/server.cpp	/^std::string JSONRPCExecBatch(const UniValue& vReq)$/;"	f
JSONRPCExecOne	rpc/server.cpp	/^static UniValue JSONRPCExecOne(const UniValue& req)$/;"	f	file:
JSONRPCReply	rpc/protocol.cpp	/^std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id)$/;"	f
JSONRPCReplyObj	rpc/protocol.cpp	/^UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)$/;"	f
JSONRPCRequest	rpc/server.h	/^    JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}$/;"	f	class:JSONRPCRequest
JSONRPCRequest	rpc/server.h	/^class JSONRPCRequest$/;"	c
JSONRPCRequestObj	rpc/protocol.cpp	/^UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id)$/;"	f
JSONUTF8StringFilter	univalue/lib/univalue_utffilter.h	/^    JSONUTF8StringFilter(std::string &s):$/;"	f	class:JSONUTF8StringFilter
JSONUTF8StringFilter	univalue/lib/univalue_utffilter.h	/^class JSONUTF8StringFilter$/;"	c
JSON_TEST_FILES	Makefile	/^JSON_TEST_FILES = \\$/;"	m
JTOK_ARR_CLOSE	univalue/include/univalue.h	/^    JTOK_ARR_CLOSE,$/;"	e	enum:jtokentype
JTOK_ARR_OPEN	univalue/include/univalue.h	/^    JTOK_ARR_OPEN,$/;"	e	enum:jtokentype
JTOK_COLON	univalue/include/univalue.h	/^    JTOK_COLON,$/;"	e	enum:jtokentype
JTOK_COMMA	univalue/include/univalue.h	/^    JTOK_COMMA,$/;"	e	enum:jtokentype
JTOK_ERR	univalue/include/univalue.h	/^    JTOK_ERR        = -1,$/;"	e	enum:jtokentype
JTOK_KW_FALSE	univalue/include/univalue.h	/^    JTOK_KW_FALSE,$/;"	e	enum:jtokentype
JTOK_KW_NULL	univalue/include/univalue.h	/^    JTOK_KW_NULL,$/;"	e	enum:jtokentype
JTOK_KW_TRUE	univalue/include/univalue.h	/^    JTOK_KW_TRUE,$/;"	e	enum:jtokentype
JTOK_NONE	univalue/include/univalue.h	/^    JTOK_NONE       = 0,                           \/\/ eof$/;"	e	enum:jtokentype
JTOK_NUMBER	univalue/include/univalue.h	/^    JTOK_NUMBER,$/;"	e	enum:jtokentype
JTOK_OBJ_CLOSE	univalue/include/univalue.h	/^    JTOK_OBJ_CLOSE,$/;"	e	enum:jtokentype
JTOK_OBJ_OPEN	univalue/include/univalue.h	/^    JTOK_OBJ_OPEN,$/;"	e	enum:jtokentype
JTOK_STRING	univalue/include/univalue.h	/^    JTOK_STRING,$/;"	e	enum:jtokentype
Java_org_wificoin_NativeSecp256k1_secp256k1_1context_1randomize	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jint JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1context_1randomize$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1ctx_1clone	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jlong JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1ctx_1clone$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1destroy_1context	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API void JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1destroy_1context$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1ec_1pubkey_1create	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1ec_1pubkey_1create$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1ec_1seckey_1verify	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jint JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1ec_1seckey_1verify$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1ecdh	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1ecdh$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1ecdsa_1pubkey_1combine	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jlong JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1ecdsa_1pubkey_1combine$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1ecdsa_1sign	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1ecdsa_1sign$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1ecdsa_1verify	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jint JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1ecdsa_1verify$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1add	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1add$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1mul	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1mul$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1add	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1add$/;"	f
Java_org_wificoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1mul	secp256k1/src/java/org_wificoin_NativeSecp256k1.c	/^SECP256K1_API jobjectArray JNICALL Java_org_wificoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1mul$/;"	f
Java_org_wificoin_Secp256k1Context_secp256k1_1init_1context	secp256k1/src/java/org_wificoin_Secp256k1Context.c	/^SECP256K1_API jlong JNICALL Java_org_wificoin_Secp256k1Context_secp256k1_1init_1context$/;"	f
K	leveldb/db/skiplist_test.cc	/^  static const uint32_t K = 4;$/;"	m	class:leveldb::ConcurrentTest	file:
K	leveldb/db/skiplist_test.cc	/^const uint32_t ConcurrentTest::K;$/;"	m	class:leveldb::ConcurrentTest	file:
KEY_GENERATION_FAILURE	qt/addresstablemodel.h	/^        KEY_GENERATION_FAILURE  \/**< Generating a new public key for a receiving address failed *\/$/;"	e	enum:AddressTableModel::EditStatus
KVMap	leveldb/db/db_test.cc	/^typedef std::map<std::string, std::string> KVMap;$/;"	t	namespace:leveldb::__anon31	file:
KVMap	leveldb/table/table_test.cc	/^typedef std::map<std::string, std::string, STLLessThan> KVMap;$/;"	t	namespace:leveldb	file:
KeepKey	wallet/wallet.cpp	/^void CReserveKey::KeepKey()$/;"	f	class:CReserveKey
KeepKey	wallet/wallet.cpp	/^void CWallet::KeepKey(int64_t nIndex)$/;"	f	class:CWallet
KeepRunning	bench/bench.cpp	/^bool benchmark::State::KeepRunning()$/;"	f	class:benchmark::State
KeepScript	script/script.h	/^    virtual void KeepScript() {}$/;"	f	class:CReserveScript
Key	leveldb/db/autocompact_test.cc	/^  std::string Key(int i) {$/;"	f	class:leveldb::AutoCompactTest
Key	leveldb/db/corruption_test.cc	/^  Slice Key(int i, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Key	leveldb/db/db_test.cc	/^static std::string Key(int i) {$/;"	f	namespace:leveldb
Key	leveldb/db/fault_injection_test.cc	/^  Slice Key(int i, std::string* storage) const {$/;"	f	class:leveldb::FaultInjectionTest
Key	leveldb/db/skiplist_test.cc	/^typedef uint64_t Key;$/;"	t	namespace:leveldb	file:
Key	leveldb/util/bloom_test.cc	/^static Slice Key(int i, char* buffer) {$/;"	f	namespace:leveldb
Key1	leveldb/issues/issue178_test.cc	/^std::string Key1(int i) {$/;"	f	namespace:__anon32
Key2	leveldb/issues/issue178_test.cc	/^std::string Key2(int i) {$/;"	f	namespace:__anon32
KeyComparator	leveldb/db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	leveldb/db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyConvertingIterator	leveldb/table/table_test.cc	/^  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }$/;"	f	class:leveldb::KeyConvertingIterator
KeyConvertingIterator	leveldb/table/table_test.cc	/^class KeyConvertingIterator: public Iterator {$/;"	c	namespace:leveldb	file:
KeyData	test/script_tests.cpp	/^    KeyData()$/;"	f	struct:__anon80::KeyData
KeyData	test/script_tests.cpp	/^struct KeyData$/;"	s	namespace:__anon80	file:
KeyIsAfterNode	leveldb/db/skiplist.h	/^bool SkipList<Key,Comparator>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
KeyMap	keystore.h	/^typedef std::map<CKeyID, CKey> KeyMap;$/;"	t
KeyMayMatch	leveldb/db/c.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	struct:leveldb_filterpolicy_t
KeyMayMatch	leveldb/db/dbformat.cc	/^bool InternalFilterPolicy::KeyMayMatch(const Slice& key, const Slice& f) const {$/;"	f	class:leveldb::InternalFilterPolicy
KeyMayMatch	leveldb/table/filter_block.cc	/^bool FilterBlockReader::KeyMayMatch(uint64_t block_offset, const Slice& key) {$/;"	f	class:leveldb::FilterBlockReader
KeyMayMatch	leveldb/table/filter_block_test.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	class:leveldb::TestHashFilter
KeyMayMatch	leveldb/util/bloom.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {$/;"	f	class:leveldb::__anon10::BloomFilterPolicy
KeySetupColumnMix	crypto/ctaes/ctaes.c	/^static void KeySetupColumnMix(AES_state* s, AES_state* r, const AES_state* a, int c1, int c2) {$/;"	f	file:
KeySetupTransform	crypto/ctaes/ctaes.c	/^static void KeySetupTransform(AES_state* s, const AES_state* r) {$/;"	f	file:
KeyStore	script/sign.h	/^    const CKeyStore& KeyStore() const { return *keystore; };$/;"	f	class:BaseSignatureCreator
KeyValPair	wallet/db.h	/^    typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;$/;"	t	class:CDBEnv
KeypoolCountExternalKeys	wallet/wallet.cpp	/^size_t CWallet::KeypoolCountExternalKeys()$/;"	f	class:CWallet
LABEL_COLUMN_WIDTH	qt/receivecoinsdialog.h	/^        LABEL_COLUMN_WIDTH = 120,$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
LCOV	Makefile	/^LCOV = $/;"	m
LCOV_OPTS	Makefile	/^LCOV_OPTS = $/;"	m
LD	Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	secp256k1/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	univalue/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	secp256k1/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	univalue/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS_FOR_BUILD	secp256k1/Makefile	/^LDFLAGS_FOR_BUILD = $/;"	m
LEAVE_CRITICAL_SECTION	sync.h	185;"	d
LEVELDB_CPPFLAGS	Makefile	/^LEVELDB_CPPFLAGS =  $(am__append_12)$/;"	m
LEVELDB_CPPFLAGS_INT	Makefile	/^LEVELDB_CPPFLAGS_INT = -I$(srcdir)\/leveldb \\$/;"	m
LEVELDB_HAVE_MEMORY_BARRIER	leveldb/port/atomic_pointer.h	236;"	d
LEVELDB_ONCE_INIT	leveldb/port/port_example.h	70;"	d
LEVELDB_ONCE_INIT	leveldb/port/port_posix.h	117;"	d
LEVELDB_ONCE_INIT	leveldb/port/port_win.h	117;"	d
LEVELDB_TARGET_FLAGS	Makefile	/^LEVELDB_TARGET_FLAGS = -DOS_LINUX$/;"	m
LE_LOAD32	leveldb/port/port_posix_sse.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::port
LE_LOAD32	leveldb/util/crc32c.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::crc32c
LE_LOAD64	leveldb/port/port_posix_sse.cc	/^static inline uint64_t LE_LOAD64(const uint8_t *p) {$/;"	f	namespace:leveldb::port
LIBWIFICOINCONSENSUS	Makefile	/^LIBWIFICOINCONSENSUS = libwificoinconsensus.la$/;"	m
LIBWIFICOINQT	Makefile	/^LIBWIFICOINQT = qt\/libwificoinqt.a$/;"	m
LIBWIFICOIN_CLI	Makefile	/^LIBWIFICOIN_CLI = libwificoin_cli.a$/;"	m
LIBWIFICOIN_COMMON	Makefile	/^LIBWIFICOIN_COMMON = libwificoin_common.a$/;"	m
LIBWIFICOIN_CONSENSUS	Makefile	/^LIBWIFICOIN_CONSENSUS = libwificoin_consensus.a$/;"	m
LIBWIFICOIN_CRYPTO	Makefile	/^LIBWIFICOIN_CRYPTO = crypto\/libwificoin_crypto.a$/;"	m
LIBWIFICOIN_SERVER	Makefile	/^LIBWIFICOIN_SERVER = libwificoin_server.a$/;"	m
LIBWIFICOIN_UTIL	Makefile	/^LIBWIFICOIN_UTIL = libwificoin_util.a$/;"	m
LIBWIFICOIN_WALLET	Makefile	/^LIBWIFICOIN_WALLET = libwificoin_wallet.a$/;"	m
LIBLEVELDB	Makefile	/^LIBLEVELDB =  $(am__append_10)$/;"	m
LIBLEVELDB_INT	Makefile	/^LIBLEVELDB_INT = leveldb\/libleveldb.a$/;"	m
LIBLEVELDB_SSE42	Makefile	/^LIBLEVELDB_SSE42 = $(LIBLEVELDB_SSE42_INT)$/;"	m
LIBLEVELDB_SSE42_INT	Makefile	/^LIBLEVELDB_SSE42_INT = leveldb\/libleveldb_sse42.a$/;"	m
LIBMEMENV	Makefile	/^LIBMEMENV =  $(am__append_11)$/;"	m
LIBMEMENV_INT	Makefile	/^LIBMEMENV_INT = leveldb\/libmemenv.a$/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	secp256k1/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	univalue/Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LIBS	secp256k1/Makefile	/^LIBS = $/;"	m
LIBS	univalue/Makefile	/^LIBS = $/;"	m
LIBSECP256K1	Makefile	/^LIBSECP256K1 = secp256k1\/libsecp256k1.la$/;"	m
LIBSECP256K1_CONFIG_H	secp256k1/src/libsecp256k1-config.h	6;"	d
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	secp256k1/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	univalue/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL_APP_LDFLAGS	Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LIBTOOL_APP_LDFLAGS	univalue/Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LIBUNIVALUE	Makefile	/^LIBUNIVALUE = univalue\/libunivalue.la$/;"	m
LIBUNIVALUE_AGE	univalue/Makefile	/^LIBUNIVALUE_AGE = 100$/;"	m
LIBUNIVALUE_CURRENT	univalue/Makefile	/^LIBUNIVALUE_CURRENT = 100$/;"	m
LIBUNIVALUE_REVISION	univalue/Makefile	/^LIBUNIVALUE_REVISION = 2$/;"	m
LIMITED_STRING	serialize.h	357;"	d
LINK	Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LINK	secp256k1/Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	Makefile	/^LIPO = $/;"	m
LIPO	secp256k1/Makefile	/^LIPO = $/;"	m
LIPO	univalue/Makefile	/^LIPO = $/;"	m
LN2	bloom.cpp	19;"	d	file:
LN2SQUARED	bloom.cpp	18;"	d	file:
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LN_S	secp256k1/Makefile	/^LN_S = ln -s$/;"	m
LN_S	univalue/Makefile	/^LN_S = ln -s$/;"	m
LOCAL_BIND	net.h	/^    LOCAL_BIND,   \/\/ address explicit bound to$/;"	e	enum:__anon91
LOCAL_IF	net.h	/^    LOCAL_IF,     \/\/ address a local interface listens on$/;"	e	enum:__anon91
LOCAL_MANUAL	net.h	/^    LOCAL_MANUAL, \/\/ address explicitly specified (-externalip=)$/;"	e	enum:__anon91
LOCAL_MAX	net.h	/^    LOCAL_MAX$/;"	e	enum:__anon91
LOCAL_NONE	net.h	/^    LOCAL_NONE,   \/\/ unknown$/;"	e	enum:__anon91
LOCAL_UPNP	net.h	/^    LOCAL_UPNP,   \/\/ address reported by UPnP$/;"	e	enum:__anon91
LOCK	sync.h	175;"	d
LOCK2	sync.h	176;"	d
LOCKABLE	leveldb/port/thread_annotations.h	29;"	d
LOCKABLE	threadsafety.h	16;"	d
LOCKABLE	threadsafety.h	35;"	d
LOCKS_EXCLUDED	leveldb/port/thread_annotations.h	21;"	d
LOCKS_EXCLUDED	threadsafety.h	30;"	d
LOCKS_EXCLUDED	threadsafety.h	49;"	d
LOCKTIME_MEDIAN_TIME_PAST	consensus/consensus.h	/^    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),$/;"	e	enum:__anon7
LOCKTIME_THRESHOLD	script/script.h	/^static const unsigned int LOCKTIME_THRESHOLD = 500000000; \/\/ Tue Nov  5 00:53:20 1985 UTC$/;"	v
LOCKTIME_VERIFY_SEQUENCE	consensus/consensus.h	/^    LOCKTIME_VERIFY_SEQUENCE = (1 << 0),$/;"	e	enum:__anon7
LOCK_RETURNED	leveldb/port/thread_annotations.h	25;"	d
LOCK_RETURNED	threadsafety.h	29;"	d
LOCK_RETURNED	threadsafety.h	48;"	d
LOG_COMPILE	Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_COMPILE	secp256k1/Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_COMPILE	univalue/Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_DRIVER	Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LOG_DRIVER	secp256k1/Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LOG_DRIVER	univalue/Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LONG_BLOCK_PERIODS	policy/fees.h	/^    static constexpr unsigned int LONG_BLOCK_PERIODS = 42;$/;"	m	class:CBlockPolicyEstimator
LONG_DECAY	policy/fees.h	/^    static constexpr double LONG_DECAY = .99931;$/;"	m	class:CBlockPolicyEstimator
LONG_HALFLIFE	policy/fees.h	/^    LONG_HALFLIFE = 2$/;"	e	enum:FeeEstimateHorizon
LONG_SCALE	policy/fees.h	/^    static constexpr unsigned int LONG_SCALE = 24;$/;"	m	class:CBlockPolicyEstimator
LRELEASE	Makefile	/^LRELEASE = $/;"	m
LRUCache	leveldb/util/cache.cc	/^LRUCache::LRUCache()$/;"	f	class:leveldb::__anon13::LRUCache
LRUCache	leveldb/util/cache.cc	/^class LRUCache {$/;"	c	namespace:leveldb::__anon13	file:
LRUHandle	leveldb/util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon13	file:
LRU_Append	leveldb/util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* list, LRUHandle* e) {$/;"	f	class:leveldb::__anon13::LRUCache
LRU_Remove	leveldb/util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon13::LRUCache
LTCCASCOMPILE	secp256k1/Makefile	/^LTCCASCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	secp256k1/Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	univalue/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	secp256k1/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	univalue/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTLIBRARIES	secp256k1/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES) $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	univalue/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTOBJCXXCOMPILE	Makefile	/^LTOBJCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\$/;"	m
LT_OBJDIR	config/wificoin-config.h	348;"	d
LT_OBJDIR	secp256k1/src/libsecp256k1-config.h	67;"	d
LT_OBJDIR	univalue/univalue-config.h	36;"	d
LUPDATE	Makefile	/^LUPDATE = $/;"	m
Label	qt/addresstablemodel.h	/^        Label = 0,   \/**< User specified label *\/$/;"	e	enum:AddressTableModel::ColumnIndex
Label	qt/recentrequeststablemodel.h	/^        Label = 1,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
LabelRole	qt/transactiontablemodel.h	/^        LabelRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Language	qt/optionsmodel.h	/^        Language,               \/\/ QString$/;"	e	enum:OptionsModel::OptionID
LastCommonAncestor	chain.cpp	/^const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {$/;"	f
LastMonth	qt/transactionview.h	/^        LastMonth,$/;"	e	enum:TransactionView::DateEnum
LastRecordOffset	leveldb/db/log_reader.cc	/^uint64_t Reader::LastRecordOffset() {$/;"	f	class:leveldb::log::Reader
LastSequence	leveldb/db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
LeaveCritical	sync.cpp	/^void LeaveCritical()$/;"	f
LeaveCritical	sync.h	/^void static inline LeaveCritical() {}$/;"	f
LevelFileNumIterator	leveldb/db/version_set.cc	/^  LevelFileNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	leveldb/db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LevelState	leveldb/db/version_set.cc	/^  struct LevelState {$/;"	s	class:leveldb::VersionSet::Builder	file:
LevelSummary	leveldb/db/version_set.cc	/^const char* VersionSet::LevelSummary(LevelSummaryStorage* scratch) const {$/;"	f	class:leveldb::VersionSet
LevelSummaryStorage	leveldb/db/version_set.h	/^  struct LevelSummaryStorage {$/;"	s	class:leveldb::VersionSet
LicenseInfo	init.cpp	/^std::string LicenseInfo()$/;"	f
LimitMempoolSize	validation.cpp	/^static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {$/;"	f	file:
LimitedString	serialize.h	/^    LimitedString(std::string& _string) : string(_string) {}$/;"	f	class:LimitedString
LimitedString	serialize.h	/^class LimitedString$/;"	c
Limiter	leveldb/util/env_posix.cc	/^  Limiter(intptr_t n) {$/;"	f	class:leveldb::__anon11::Limiter
Limiter	leveldb/util/env_posix.cc	/^class Limiter {$/;"	c	namespace:leveldb::__anon11	file:
ListAccountCreditDebit	wallet/wallet.cpp	/^void CWallet::ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries) {$/;"	f	class:CWallet
ListAccountCreditDebit	wallet/walletdb.cpp	/^void CWalletDB::ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries)$/;"	f	class:CWalletDB
ListActiveLogCategories	util.cpp	/^std::vector<CLogCategoryActive> ListActiveLogCategories()$/;"	f
ListCoins	wallet/wallet.cpp	/^std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const$/;"	f	class:CWallet
ListCoinsTestingSetup	wallet/test/wallet_tests.cpp	/^    ListCoinsTestingSetup()$/;"	f	class:ListCoinsTestingSetup
ListCoinsTestingSetup	wallet/test/wallet_tests.cpp	/^class ListCoinsTestingSetup : public TestChain100Setup$/;"	c	file:
ListLockedCoins	wallet/wallet.cpp	/^void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const$/;"	f	class:CWallet
ListLogCategories	util.cpp	/^std::string ListLogCategories()$/;"	f
ListReceived	wallet/rpcwallet.cpp	/^UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByAccounts)$/;"	f
ListSelected	wallet/coincontrol.h	/^    void ListSelected(std::vector<COutPoint>& vOutpoints) const$/;"	f	class:CCoinControl
ListTransactions	wallet/rpcwallet.cpp	/^void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)$/;"	f
Listen	qt/optionsmodel.h	/^        Listen,                 \/\/ bool$/;"	e	enum:OptionsModel::OptionID
ListenSocket	net.h	/^        ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}$/;"	f	struct:CConnman::ListenSocket
ListenSocket	net.h	/^    struct ListenSocket {$/;"	s	class:CConnman
Load	key.cpp	/^bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {$/;"	f	class:CKey
LoadBlockIndex	validation.cpp	/^bool LoadBlockIndex(const CChainParams& chainparams)$/;"	f
LoadBlockIndexDB	validation.cpp	/^bool static LoadBlockIndexDB(const CChainParams& chainparams)$/;"	f	file:
LoadBlockIndexGuts	txdb.cpp	/^bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex)$/;"	f	class:CBlockTreeDB
LoadByte	crypto/ctaes/ctaes.c	/^static void LoadByte(AES_state* s, unsigned char byte, int r, int c) {$/;"	f	file:
LoadBytes	crypto/ctaes/ctaes.c	/^static void LoadBytes(AES_state *s, const unsigned char* data16) {$/;"	f	file:
LoadCScript	wallet/wallet.cpp	/^bool CWallet::LoadCScript(const CScript& redeemScript)$/;"	f	class:CWallet
LoadChainTip	validation.cpp	/^bool LoadChainTip(const CChainParams& chainparams)$/;"	f
LoadCryptedKey	wallet/wallet.cpp	/^bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CWallet
LoadDestData	wallet/wallet.cpp	/^bool CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)$/;"	f	class:CWallet
LoadExternalBlockFile	validation.cpp	/^bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)$/;"	f
LoadGenesisBlock	validation.cpp	/^bool LoadGenesisBlock(const CChainParams& chainparams)$/;"	f
LoadKey	wallet/wallet.h	/^    bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }$/;"	f	class:CWallet
LoadKeyMetadata	wallet/wallet.cpp	/^bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)$/;"	f	class:CWallet
LoadKeyPool	wallet/wallet.cpp	/^void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)$/;"	f	class:CWallet
LoadMempool	validation.cpp	/^bool LoadMempool(void)$/;"	f
LoadMinVersion	wallet/wallet.h	/^    bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }$/;"	f	class:CWallet
LoadRootCAs	qt/paymentserver.cpp	/^void PaymentServer::LoadRootCAs(X509_STORE* _store)$/;"	f	class:PaymentServer
LoadToWallet	wallet/wallet.cpp	/^bool CWallet::LoadToWallet(const CWalletTx& wtxIn)$/;"	f	class:CWallet
LoadWallet	ui_interface.h	/^    boost::signals2::signal<void (CWallet* wallet)> LoadWallet;$/;"	m	class:CClientUIInterface
LoadWallet	wallet/wallet.cpp	/^DBErrors CWallet::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet
LoadWallet	wallet/walletdb.cpp	/^DBErrors CWalletDB::LoadWallet(CWallet* pwallet)$/;"	f	class:CWalletDB
LoadWatchOnly	wallet/wallet.cpp	/^bool CWallet::LoadWatchOnly(const CScript &dest)$/;"	f	class:CWallet
LocalServiceInfo	net.h	/^struct LocalServiceInfo {$/;"	s
Lock	leveldb/port/port_posix.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Lock	leveldb/port/port_win.cc	/^void Mutex::Lock() {$/;"	f	class:leveldb::port::Mutex
Lock	wallet/crypter.cpp	/^bool CCryptoKeyStore::Lock()$/;"	f	class:CCryptoKeyStore
LockCoin	wallet/wallet.cpp	/^void CWallet::LockCoin(const COutPoint& output)$/;"	f	class:CWallet
LockData	sync.cpp	/^    LockData() : available(true) {}$/;"	f	struct:LockData
LockData	sync.cpp	/^struct LockData {$/;"	s	file:
LockDataDirectory	init.cpp	/^static bool LockDataDirectory(bool probeOnly)$/;"	f	file:
LockFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
LockFile	leveldb/include/leveldb/env.h	/^  Status LockFile(const std::string& f, FileLock** l) {$/;"	f	class:leveldb::EnvWrapper
LockFile	leveldb/util/env_posix.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon11::PosixEnv
LockFile	leveldb/util/env_win.cc	/^Status Win32Env::LockFile( const std::string& fname, FileLock** lock )$/;"	f	class:leveldb::Win32::Win32Env
LockFileName	leveldb/db/filename.cc	/^std::string LockFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
LockOrUnlock	leveldb/util/env_posix.cc	/^static int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon11
LockOrders	sync.cpp	/^typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;$/;"	t	file:
LockPoints	txmempool.h	/^    LockPoints() : height(0), time(0), maxInputBlock(nullptr) { }$/;"	f	struct:LockPoints
LockPoints	txmempool.h	/^struct LockPoints$/;"	s
LockStack	sync.cpp	/^typedef std::vector<std::pair<void*, CLockLocation> > LockStack;$/;"	t	file:
LockWallet	wallet/rpcwallet.cpp	/^static void LockWallet(CWallet* pWallet)$/;"	f	file:
Locked	qt/walletmodel.h	/^        Locked,       \/\/ wallet->IsCrypted() && wallet->IsLocked()$/;"	e	enum:WalletModel::EncryptionStatus
LockedPageAllocator	support/lockedpool.h	/^class LockedPageAllocator$/;"	c
LockedPageArena	support/lockedpool.cpp	/^LockedPool::LockedPageArena::LockedPageArena(LockedPageAllocator *allocator_in, void *base_in, size_t size_in, size_t align_in):$/;"	f	class:LockedPool::LockedPageArena
LockedPageArena	support/lockedpool.h	/^    class LockedPageArena: public Arena$/;"	c	class:LockedPool
LockedPool	support/lockedpool.cpp	/^LockedPool::LockedPool(std::unique_ptr<LockedPageAllocator> allocator_in, LockingFailed_Callback lf_cb_in):$/;"	f	class:LockedPool
LockedPool	support/lockedpool.h	/^class LockedPool$/;"	c
LockedPoolManager	support/lockedpool.cpp	/^LockedPoolManager::LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator_in):$/;"	f	class:LockedPoolManager
LockedPoolManager	support/lockedpool.h	/^class LockedPoolManager : public LockedPool$/;"	c
LockingFailed	support/lockedpool.cpp	/^bool LockedPoolManager::LockingFailed()$/;"	f	class:LockedPoolManager
LockingFailed_Callback	support/lockedpool.h	/^    typedef bool (*LockingFailed_Callback)();$/;"	t	class:LockedPool
LocksHeld	sync.cpp	/^std::string LocksHeld()$/;"	f
Log	leveldb/util/env.cc	/^void Log(Logger* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAcceptCategory	util.h	/^static inline bool LogAcceptCategory(uint32_t category)$/;"	f
LogAndApply	leveldb/db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu) {$/;"	f	class:leveldb::VersionSet
LogCategories	util.cpp	/^const CLogCategoryDesc LogCategories[] =$/;"	v
LogFileName	leveldb/db/filename.cc	/^std::string LogFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LogName	leveldb/db/recovery_test.cc	/^  std::string LogName(uint64_t number) {$/;"	f	class:leveldb::RecoveryTest
LogNumber	leveldb/db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
LogPrint	util.h	137;"	d
LogPrint	util.h	150;"	d
LogPrintStr	util.cpp	/^int LogPrintStr(const std::string &str)$/;"	f
LogPrintf	util.h	136;"	d
LogPrintf	util.h	139;"	d
LogTest	leveldb/db/log_test.cc	/^  LogTest() : reading_(false),$/;"	f	class:leveldb::log::LogTest
LogTest	leveldb/db/log_test.cc	/^class LogTest {$/;"	c	namespace:leveldb::log	file:
LogTimestampStr	util.cpp	/^static std::string LogTimestampStr(const std::string &str, std::atomic_bool *fStartedNewLine)$/;"	f	file:
Logger	leveldb/include/leveldb/env.h	/^  Logger() { }$/;"	f	class:leveldb::Logger
Logger	leveldb/include/leveldb/env.h	/^class Logger {$/;"	c	namespace:leveldb
Logv	leveldb/helpers/memenv/memenv.cc	/^  virtual void Logv(const char* format, va_list ap) { }$/;"	f	class:leveldb::__anon16::NoOpLogger
Logv	leveldb/util/env_win.cc	/^void Win32Logger::Logv( const char* format, va_list ap )$/;"	f	class:leveldb::Win32::Win32Logger
Logv	leveldb/util/posix_logger.h	/^  virtual void Logv(const char* format, va_list ap) {$/;"	f	class:leveldb::PosixLogger
LongDescriptionRole	qt/transactiontablemodel.h	/^        LongDescriptionRole,$/;"	e	enum:TransactionTableModel::RoleIndex
LongTestString	test/crypto_tests.cpp	/^std::string LongTestString(void) {$/;"	f
Lookup	leveldb/util/cache.cc	/^  LRUHandle* Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon13::HandleTable
Lookup	leveldb/util/cache.cc	/^  virtual Handle* Lookup(const Slice& key) {$/;"	f	class:leveldb::__anon13::ShardedLRUCache
Lookup	leveldb/util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon13::LRUCache
Lookup	leveldb/util/cache_test.cc	/^  int Lookup(int key) {$/;"	f	class:leveldb::CacheTest
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)$/;"	f
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)$/;"	f
LookupHost	netbase.cpp	/^bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)$/;"	f
LookupHost	netbase.cpp	/^bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f
LookupIntern	netbase.cpp	/^bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f	file:
LookupKey	leveldb/db/dbformat.cc	/^LookupKey::LookupKey(const Slice& user_key, SequenceNumber s) {$/;"	f	class:leveldb::LookupKey
LookupKey	leveldb/db/dbformat.h	/^class LookupKey {$/;"	c	namespace:leveldb
LookupNumeric	netbase.cpp	/^CService LookupNumeric(const char *pszName, int portDefault)$/;"	f
LookupSubNet	netbase.cpp	/^bool LookupSubNet(const char* pszName, CSubNet& ret)$/;"	f
Loop	checkqueue.h	/^    bool Loop(bool fMaster = false)$/;"	f	class:CCheckQueue
MAIN	chainparamsbase.cpp	/^const std::string CBaseChainParams::MAIN = "main";$/;"	m	class:CBaseChainParams	file:
MAIN	chainparamsbase.h	/^    static const std::string MAIN;$/;"	m	class:CBaseChainParams
MAINT	Makefile	/^MAINT = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/opt\/wificoin\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	secp256k1/Makefile	/^MAKEINFO = ${SHELL} \/opt\/wificoin\/src\/secp256k1\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	univalue/Makefile	/^MAKEINFO = ${SHELL} \/opt\/wificoin\/src\/univalue\/build-aux\/missing makeinfo$/;"	m
MAKENSIS	Makefile	/^MAKENSIS = $/;"	m
MAKE_RAII	support/events.h	14;"	d
MANDATORY_SCRIPT_VERIFY_FLAGS	script/standard.h	/^static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;$/;"	v
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	secp256k1/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	univalue/Makefile	/^MANIFEST_TOOL = :$/;"	m
MAPASKFOR_MAX_SZ	net.h	/^static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;$/;"	v
MAP_ANONYMOUS	support/lockedpool.cpp	223;"	d	file:
MAXTXFEE	policy/fees.h	/^    MAXTXFEE,$/;"	m	class:FeeReason
MAX_ADDNODE_CONNECTIONS	net.h	/^static const int MAX_ADDNODE_CONNECTIONS = 8;$/;"	v
MAX_ADDR_TO_SEND	net.h	/^static const unsigned int MAX_ADDR_TO_SEND = 1000;$/;"	v
MAX_BASE58_TYPES	chainparams.h	/^        MAX_BASE58_TYPES$/;"	e	enum:CChainParams::Base58Type
MAX_BIP125_RBF_SEQUENCE	policy/rbf.h	/^static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;$/;"	v
MAX_BLOCKFILE_SIZE	validation.h	/^static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; \/\/ 128 MiB$/;"	v
MAX_BLOCKS_IN_TRANSIT_PER_PEER	validation.h	/^static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;$/;"	v
MAX_BLOCKS_TO_ANNOUNCE	validation.h	/^static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;$/;"	v
MAX_BLOCKTXN_DEPTH	validation.h	/^static const int MAX_BLOCKTXN_DEPTH = 10;$/;"	v
MAX_BLOCK_COINSDB_USAGE	txdb.h	/^static constexpr int MAX_BLOCK_COINSDB_USAGE = 10;$/;"	v
MAX_BLOCK_SERIALIZED_SIZE	consensus/consensus.h	/^static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;$/;"	v
MAX_BLOCK_SIGOPS_COST	consensus/consensus.h	/^static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;$/;"	v
MAX_BLOCK_WEIGHT	consensus/consensus.h	/^static const unsigned int MAX_BLOCK_WEIGHT = 4000000;$/;"	v
MAX_BLOOM_FILTER_SIZE	bloom.h	/^static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; \/\/ bytes$/;"	v
MAX_BUCKET_FEERATE	policy/fees.h	/^    static constexpr double MAX_BUCKET_FEERATE = 1e7;$/;"	m	class:CBlockPolicyEstimator
MAX_CMPCTBLOCK_DEPTH	validation.h	/^static const int MAX_CMPCTBLOCK_DEPTH = 5;$/;"	v
MAX_DATE	qt/transactionfilterproxy.cpp	/^const QDateTime TransactionFilterProxy::MAX_DATE = QDateTime::fromTime_t(0xFFFFFFFF);$/;"	m	class:TransactionFilterProxy	file:
MAX_DATE	qt/transactionfilterproxy.h	/^    static const QDateTime MAX_DATE;$/;"	m	class:TransactionFilterProxy
MAX_DISCONNECTED_TX_POOL_SIZE	validation.h	/^static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;$/;"	v
MAX_FEEFILTER_CHANGE_DELAY	validation.h	/^static const unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;$/;"	v
MAX_FEE_ESTIMATION_TIP_AGE	validation.h	/^static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;$/;"	v
MAX_FILTER_FEERATE	policy/fees.h	/^    static constexpr double MAX_FILTER_FEERATE = 1e7;$/;"	m	class:FeeFilterRounder
MAX_FUTURE_BLOCK_TIME	chain.h	/^static const int64_t MAX_FUTURE_BLOCK_TIME = 2 * 60 * 60;$/;"	v
MAX_GETUTXOS_OUTPOINTS	rest.cpp	/^static const size_t MAX_GETUTXOS_OUTPOINTS = 15; \/\/allow a max of 15 outpoints to be queried at once$/;"	v	file:
MAX_HASH_FUNCS	bloom.h	/^static const unsigned int MAX_HASH_FUNCS = 50;$/;"	v
MAX_HEADERS_RESULTS	validation.h	/^static const unsigned int MAX_HEADERS_RESULTS = 2000;$/;"	v
MAX_HEADERS_SIZE	httpserver.cpp	/^static const size_t MAX_HEADERS_SIZE = 8192;$/;"	v	file:
MAX_INPUTS_PER_BLOCK	undo.h	/^static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT \/ MIN_TRANSACTION_INPUT_WEIGHT;$/;"	v
MAX_INV_SZ	net.h	/^static const unsigned int MAX_INV_SZ = 50000;$/;"	v
MAX_LINE_LENGTH	torcontrol.cpp	/^static const int MAX_LINE_LENGTH = 100000;$/;"	v	file:
MAX_MAX_SIG_CACHE_SIZE	script/sigcache.h	/^static const int64_t MAX_MAX_SIG_CACHE_SIZE = 16384;$/;"	v
MAX_MONEY	amount.h	/^static const CAmount MAX_MONEY = 21000000 * COIN;$/;"	v
MAX_OPCODE	script/script.h	/^static const unsigned int MAX_OPCODE = OP_NOP10;$/;"	v
MAX_OPS_PER_SCRIPT	script/script.h	/^static const int MAX_OPS_PER_SCRIPT = 201;$/;"	v
MAX_OP_RETURN_RELAY	script/standard.h	/^static const unsigned int MAX_OP_RETURN_RELAY = 83; \/\/!< bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)$/;"	v
MAX_OUTBOUND_CONNECTIONS	net.h	/^static const int MAX_OUTBOUND_CONNECTIONS = 8;$/;"	v
MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT	net_processing.h	/^static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;$/;"	v
MAX_OUTPUTS_PER_BLOCK	coins.cpp	/^static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT \/ MIN_TRANSACTION_OUTPUT_WEIGHT;$/;"	v	file:
MAX_P2SH_SIGOPS	policy/policy.h	/^static const unsigned int MAX_P2SH_SIGOPS = 15;$/;"	v
MAX_PASSPHRASE_SIZE	qt/guiconstants.h	/^static const int MAX_PASSPHRASE_SIZE = 1024;$/;"	v
MAX_PATH	compat.h	72;"	d
MAX_PROTOCOL_MESSAGE_LENGTH	net.h	/^static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;$/;"	v
MAX_PUBKEYS_PER_MULTISIG	script/script.h	/^static const int MAX_PUBKEYS_PER_MULTISIG = 20;$/;"	v
MAX_REJECT_MESSAGE_LENGTH	validation.h	/^static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;$/;"	v
MAX_SCRIPTCHECK_THREADS	validation.h	/^static const int MAX_SCRIPTCHECK_THREADS = 16;$/;"	v
MAX_SCRIPT_ELEMENT_SIZE	script/script.h	/^static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520;$/;"	v
MAX_SCRIPT_SIZE	script/script.h	/^static const int MAX_SCRIPT_SIZE = 10000;$/;"	v
MAX_SIZE	serialize.h	/^static const unsigned int MAX_SIZE = 0x02000000;$/;"	v
MAX_STACK_SIZE	script/script.h	/^static const int MAX_STACK_SIZE = 1000;$/;"	v
MAX_STANDARD_P2WSH_SCRIPT_SIZE	policy/policy.h	/^static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;$/;"	v
MAX_STANDARD_P2WSH_STACK_ITEMS	policy/policy.h	/^static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;$/;"	v
MAX_STANDARD_P2WSH_STACK_ITEM_SIZE	policy/policy.h	/^static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;$/;"	v
MAX_STANDARD_TX_SIGOPS_COST	policy/policy.h	/^static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST\/5;$/;"	v
MAX_STANDARD_TX_WEIGHT	policy/policy.h	/^static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;$/;"	v
MAX_STANDARD_VERSION	primitives/transaction.h	/^    static const int32_t MAX_STANDARD_VERSION=2;$/;"	m	class:CTransaction
MAX_SUBVERSION_LENGTH	net.h	/^static const unsigned int MAX_SUBVERSION_LENGTH = 256;$/;"	v
MAX_UNCONNECTING_HEADERS	validation.h	/^static const int MAX_UNCONNECTING_HEADERS = 10;$/;"	v
MAX_UPLOAD_TIMEFRAME	net.h	/^static const uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;$/;"	v
MAX_URI_LENGTH	qt/guiconstants.h	/^static const int MAX_URI_LENGTH = 255;$/;"	v
MAX_VERSION_BITS_DEPLOYMENTS	consensus/params.h	/^    MAX_VERSION_BITS_DEPLOYMENTS$/;"	e	enum:Consensus::DeploymentPos
MC_DEBUG	qt/rpcconsole.h	/^        MC_DEBUG,$/;"	e	enum:RPCConsole::MessageClass
MC_ERROR	qt/rpcconsole.h	/^        MC_ERROR,$/;"	e	enum:RPCConsole::MessageClass
MED_BLOCK_PERIODS	policy/fees.h	/^    static constexpr unsigned int MED_BLOCK_PERIODS = 24;$/;"	m	class:CBlockPolicyEstimator
MED_DECAY	policy/fees.h	/^    static constexpr double MED_DECAY = .9952;$/;"	m	class:CBlockPolicyEstimator
MED_HALFLIFE	policy/fees.h	/^    MED_HALFLIFE = 1,$/;"	e	enum:FeeEstimateHorizon
MED_SCALE	policy/fees.h	/^    static constexpr unsigned int MED_SCALE = 2;$/;"	m	class:CBlockPolicyEstimator
MEMPOOL	protocol.cpp	/^const char *MEMPOOL="mempool";$/;"	m	namespace:NetMsgType	file:
MEMPOOL_DUMP_VERSION	validation.cpp	/^static const uint64_t MEMPOOL_DUMP_VERSION = 1;$/;"	v	file:
MEMPOOL_HEIGHT	txmempool.h	/^static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;$/;"	v
MEMPOOL_MIN	policy/fees.h	/^    MEMPOOL_MIN,$/;"	m	class:FeeReason
MEMTABLE_TEST	leveldb/table/table_test.cc	/^  MEMTABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
MERKLEBLOCK	protocol.cpp	/^const char *MERKLEBLOCK="merkleblock";$/;"	m	namespace:NetMsgType	file:
MESSAGE_SIZE_OFFSET	protocol.h	/^        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,$/;"	e	enum:CMessageHeader::__anon48
MESSAGE_SIZE_SIZE	protocol.h	/^        MESSAGE_SIZE_SIZE = 4,$/;"	e	enum:CMessageHeader::__anon48
MESSAGE_START_SIZE	protocol.h	/^        MESSAGE_START_SIZE = 4,$/;"	e	enum:CMessageHeader::__anon48
MINIMUM_COLUMN_WIDTH	qt/receivecoinsdialog.h	/^        MINIMUM_COLUMN_WIDTH = 130$/;"	e	enum:ReceiveCoinsDialog::ColumnWidths
MINIMUM_COLUMN_WIDTH	qt/transactionview.h	/^        MINIMUM_COLUMN_WIDTH = 23$/;"	e	enum:TransactionView::ColumnWidths
MINIMUM_CONNECT_TIME	net_processing.h	/^static constexpr int64_t MINIMUM_CONNECT_TIME = 30;$/;"	v
MINIUPNPC_CPPFLAGS	Makefile	/^MINIUPNPC_CPPFLAGS = $/;"	m
MINIUPNPC_LIBS	Makefile	/^MINIUPNPC_LIBS = $/;"	m
MIN_BLOCKS_TO_KEEP	validation.h	/^static const unsigned int MIN_BLOCKS_TO_KEEP = 288;$/;"	v
MIN_BUCKET_FEERATE	policy/fees.h	/^    static constexpr double MIN_BUCKET_FEERATE = 1000;$/;"	m	class:CBlockPolicyEstimator
MIN_CHANGE	wallet/wallet.h	/^static const CAmount MIN_CHANGE = CENT;$/;"	v
MIN_CORES	bench/checkqueue.cpp	/^static const int MIN_CORES = 2;$/;"	v	file:
MIN_CORE_FILEDESCRIPTORS	init.cpp	86;"	d	file:
MIN_CORE_FILEDESCRIPTORS	init.cpp	88;"	d	file:
MIN_DATE	qt/transactionfilterproxy.cpp	/^const QDateTime TransactionFilterProxy::MIN_DATE = QDateTime::fromTime_t(0);$/;"	m	class:TransactionFilterProxy	file:
MIN_DATE	qt/transactionfilterproxy.h	/^    static const QDateTime MIN_DATE;$/;"	m	class:TransactionFilterProxy
MIN_DISK_SPACE_FOR_BLOCK_FILES	validation.h	/^static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;$/;"	v
MIN_FINAL_CHANGE	wallet/wallet.h	/^static const CAmount MIN_FINAL_CHANGE = MIN_CHANGE\/2;$/;"	v
MIN_PEER_PROTO_VERSION	version.h	/^static const int MIN_PEER_PROTO_VERSION = GETHEADERS_VERSION;$/;"	v
MIN_SERIALIZABLE_TRANSACTION_WEIGHT	consensus/consensus.h	/^static const size_t MIN_SERIALIZABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; \/\/ 10 is the lower bound for the size of a serialized CTransaction$/;"	v
MIN_TRANSACTION_INPUT_WEIGHT	undo.h	/^static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);$/;"	v
MIN_TRANSACTION_OUTPUT_WEIGHT	coins.cpp	/^static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION);$/;"	v	file:
MIN_TRANSACTION_WEIGHT	consensus/consensus.h	/^static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; \/\/ 60 is the lower bound for the size of a valid serialized CTransaction$/;"	v
MISC_ERROR	wallet/feebumper.h	/^    MISC_ERROR,$/;"	m	class:BumpFeeResult
MKDIR_P	Makefile	/^MKDIR_P = \/usr\/bin\/mkdir -p$/;"	m
MKDIR_P	secp256k1/Makefile	/^MKDIR_P = \/usr\/bin\/mkdir -p$/;"	m
MKDIR_P	univalue/Makefile	/^MKDIR_P = \/usr\/bin\/mkdir -p$/;"	m
MOC	Makefile	/^MOC = $/;"	m
MOC_DEFS	Makefile	/^MOC_DEFS = -DHAVE_CONFIG_H -I$(srcdir)$/;"	m
MODAL	ui_interface.h	/^        MODAL               = 0x10000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MODEL_UPDATE_DELAY	qt/guiconstants.h	/^static const int MODEL_UPDATE_DELAY = 250;$/;"	v
MODE_ERROR	consensus/validation.h	/^        MODE_ERROR,   \/\/!< run-time error$/;"	e	enum:CValidationState::mode_state
MODE_INVALID	consensus/validation.h	/^        MODE_INVALID, \/\/!< network rule violation (DoS value may be set)$/;"	e	enum:CValidationState::mode_state
MODE_VALID	consensus/validation.h	/^        MODE_VALID,   \/\/!< everything ok$/;"	e	enum:CValidationState::mode_state
MSG_BLOCK	protocol.h	/^    MSG_BLOCK = 2,$/;"	e	enum:GetDataMsg
MSG_CMPCT_BLOCK	protocol.h	/^    MSG_CMPCT_BLOCK = 4,     \/\/!< Defined in BIP152$/;"	e	enum:GetDataMsg
MSG_DONTWAIT	net.cpp	53;"	d	file:
MSG_ERROR	ui_interface.h	/^        MSG_ERROR = (ICON_ERROR | BTN_OK | MODAL)$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_FILTERED_BLOCK	protocol.h	/^    MSG_FILTERED_BLOCK = 3,  \/\/!< Defined in BIP37$/;"	e	enum:GetDataMsg
MSG_FILTERED_WITNESS_BLOCK	protocol.h	/^    MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,$/;"	e	enum:GetDataMsg
MSG_HASHBLOCK	zmq/zmqpublishnotifier.cpp	/^static const char *MSG_HASHBLOCK = "hashblock";$/;"	v	file:
MSG_HASHTX	zmq/zmqpublishnotifier.cpp	/^static const char *MSG_HASHTX    = "hashtx";$/;"	v	file:
MSG_INFORMATION	ui_interface.h	/^        MSG_INFORMATION = ICON_INFORMATION,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_NOSIGNAL	net.cpp	48;"	d	file:
MSG_NOSIGNAL	netbase.cpp	29;"	d	file:
MSG_RAWBLOCK	zmq/zmqpublishnotifier.cpp	/^static const char *MSG_RAWBLOCK  = "rawblock";$/;"	v	file:
MSG_RAWTX	zmq/zmqpublishnotifier.cpp	/^static const char *MSG_RAWTX     = "rawtx";$/;"	v	file:
MSG_TX	protocol.h	/^    MSG_TX = 1,$/;"	e	enum:GetDataMsg
MSG_TYPE_MASK	protocol.h	/^const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;$/;"	v
MSG_WARNING	ui_interface.h	/^        MSG_WARNING = (ICON_WARNING | BTN_OK | MODAL),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_WITNESS_BLOCK	protocol.h	/^    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG, \/\/!< Defined in BIP144$/;"	e	enum:GetDataMsg
MSG_WITNESS_FLAG	protocol.h	/^const uint32_t MSG_WITNESS_FLAG = 1 << 30;$/;"	v
MSG_WITNESS_TX	protocol.h	/^    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,       \/\/!< Defined in BIP144$/;"	e	enum:GetDataMsg
MSIZE	bench/lockedpool.cpp	14;"	d	file:
MTState	leveldb/db/db_test.cc	/^struct MTState {$/;"	s	namespace:leveldb::__anon30	file:
MTThread	leveldb/db/db_test.cc	/^struct MTThread {$/;"	s	namespace:leveldb::__anon30	file:
MTThreadBody	leveldb/db/db_test.cc	/^static void MTThreadBody(void* arg) {$/;"	f	namespace:leveldb::__anon30
MacDockIconHandler	qt/macdockiconhandler.h	/^class MacDockIconHandler : public QObject$/;"	c
MacNotificationHandler	qt/macnotificationhandler.h	/^class MacNotificationHandler : public QObject$/;"	c
MainSignalsInstance	validationinterface.cpp	/^    MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}$/;"	f	struct:MainSignalsInstance
MainSignalsInstance	validationinterface.cpp	/^struct MainSignalsInstance {$/;"	s	file:
Maj	crypto/sha256.cpp	/^uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }$/;"	f	namespace:__anon87::sha256
Maj	crypto/sha512.cpp	/^uint64_t inline Maj(uint64_t x, uint64_t y, uint64_t z) { return (x & y) | (z & (x | y)); }$/;"	f	namespace:__anon88::sha512
Maj	secp256k1/src/hash_impl.h	17;"	d
Maj	secp256k1/src/hash_impl.h	278;"	d
Make	netmessagemaker.h	/^    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args) const$/;"	f	class:CNetMsgMaker
Make	netmessagemaker.h	/^    CSerializedNetMsg Make(std::string sCommand, Args&&... args) const$/;"	f	class:CNetMsgMaker
MakeDeterministic	test/addrman_tests.cpp	/^    void MakeDeterministic()$/;"	f	class:CAddrManTest
MakeDeterministic	test/net_tests.cpp	/^    void MakeDeterministic()$/;"	f	class:CAddrManSerializationMock
MakeFileName	leveldb/db/filename.cc	/^static std::string MakeFileName(const std::string& name, uint64_t number,$/;"	f	namespace:leveldb
MakeInputIterator	leveldb/db/version_set.cc	/^Iterator* VersionSet::MakeInputIterator(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeKey	leveldb/db/db_test.cc	/^std::string MakeKey(unsigned int num) {$/;"	f	namespace:leveldb
MakeKey	leveldb/db/skiplist_test.cc	/^  static Key MakeKey(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
MakeLogFile	leveldb/db/recovery_test.cc	/^  void MakeLogFile(uint64_t lognum, SequenceNumber seq, Slice key, Slice val) {$/;"	f	class:leveldb::RecoveryTest
MakeMock	wallet/db.cpp	/^void CDBEnv::MakeMock()$/;"	f	class:CDBEnv
MakeNewKey	key.cpp	/^void CKey::MakeNewKey(bool fCompressedIn) {$/;"	f	class:CKey
MakeRoomForWrite	leveldb/db/db_impl.cc	/^Status DBImpl::MakeRoomForWrite(bool force) {$/;"	f	class:leveldb::DBImpl
MakeSingleColorImage	qt/platformstyle.cpp	/^void MakeSingleColorImage(QImage& img, const QColor& colorbase)$/;"	f	namespace:__anon113
MakeTables	leveldb/db/db_test.cc	/^  void MakeTables(int n, const std::string& small, const std::string& large) {$/;"	f	class:leveldb::DBTest
MakeTransactionRef	primitives/transaction.h	/^static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }$/;"	f
MakeTransactionRef	primitives/transaction.h	/^template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }$/;"	f
MakeTried	addrman.cpp	/^void CAddrMan::MakeTried(CAddrInfo& info, int nId)$/;"	f	class:CAddrMan
MallocUsage	memusage.h	/^static inline size_t MallocUsage(size_t alloc)$/;"	f	namespace:memusage
ManifestFileName	leveldb/db/recovery_test.cc	/^  std::string ManifestFileName() {$/;"	f	class:leveldb::RecoveryTest
ManifestFileNumber	leveldb/db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
ManualCompaction	leveldb/db/db_impl.h	/^  struct ManualCompaction {$/;"	s	class:leveldb::DBImpl
MapCheckpoints	chainparams.h	/^typedef std::map<int, uint256> MapCheckpoints;$/;"	t
MapPort	net.cpp	/^void MapPort(bool fUseUPnP)$/;"	f
MapPort	net.cpp	/^void MapPort(bool)$/;"	f
MapPortUPnP	qt/optionsmodel.h	/^        MapPortUPnP,            \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MapRelay	net_processing.cpp	/^    typedef std::map<uint256, CTransactionRef> MapRelay;$/;"	t	namespace:__anon49	file:
MarkAddressGood	net.cpp	/^void CConnman::MarkAddressGood(const CAddress& addr)$/;"	f	class:CConnman
MarkBlockAsInFlight	net_processing.cpp	/^bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) {$/;"	f	namespace:__anon50
MarkBlockAsReceived	net_processing.cpp	/^bool MarkBlockAsReceived(const uint256& hash) {$/;"	f	namespace:__anon50
MarkConflicted	wallet/wallet.cpp	/^void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)$/;"	f	class:CWallet
MarkDirty	wallet/wallet.cpp	/^void CWallet::MarkDirty()$/;"	f	class:CWallet
MarkDirty	wallet/wallet.h	/^    void MarkDirty()$/;"	f	class:CWalletTx
MarkFileNumberUsed	leveldb/db/version_set.cc	/^void VersionSet::MarkFileNumberUsed(uint64_t number) {$/;"	f	class:leveldb::VersionSet
MarkReplaced	wallet/wallet.cpp	/^bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)$/;"	f	class:CWallet
MarkReserveKeysAsUsed	wallet/wallet.cpp	/^void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)$/;"	f	class:CWallet
MarkUsed	util.h	/^static inline void MarkUsed() {}$/;"	f
MarkUsed	util.h	/^template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)$/;"	f
Mask	leveldb/util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
Mask	versionbits.cpp	/^    uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }$/;"	f	class:__anon94::VersionBitsConditionChecker
MasterKeyMap	wallet/wallet.h	/^    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;$/;"	t	class:CWallet
Match	netaddress.cpp	/^bool CSubNet::Match(const CNetAddr &addr) const$/;"	f	class:CSubNet
MatchError	leveldb/db/log_test.cc	/^  std::string MatchError(const std::string& msg) const {$/;"	f	class:leveldb::log::LogTest
Matches	leveldb/util/bloom_test.cc	/^  bool Matches(const Slice& s) {$/;"	f	class:leveldb::BloomTest
MaturesWarning	qt/transactionrecord.h	/^        MaturesWarning,     \/**< Transaction will likely not mature because no nodes have confirmed *\/$/;"	e	enum:TransactionStatus::Status
MaxArray	test/arith_uint256_tests.cpp	/^const unsigned char MaxArray[] =$/;"	v
MaxArray	test/uint256_tests.cpp	/^const unsigned char MaxArray[] =$/;"	v
MaxBytesForLevel	leveldb/db/version_set.cc	/^static double MaxBytesForLevel(const Options* options, int level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	leveldb/db/version_set.cc	/^static uint64_t MaxFileSizeForLevel(const Options* options, int level) {$/;"	f	namespace:leveldb
MaxGrandParentOverlapBytes	leveldb/db/version_set.cc	/^static int64_t MaxGrandParentOverlapBytes(const Options* options) {$/;"	f	namespace:leveldb
MaxL	test/arith_uint256_tests.cpp	/^const arith_uint256 MaxL = arith_uint256V(std::vector<unsigned char>(MaxArray,MaxArray+32));$/;"	v
MaxL	test/uint256_tests.cpp	/^const uint256 MaxL = uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));$/;"	v
MaxMmaps	leveldb/util/env_posix.cc	/^static int MaxMmaps() {$/;"	f	namespace:leveldb::__anon11
MaxNextLevelOverlappingBytes	leveldb/db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOpenFiles	leveldb/util/env_posix.cc	/^static intptr_t MaxOpenFiles() {$/;"	f	namespace:leveldb::__anon11
MaxOutputFileSize	leveldb/db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaxS	test/uint256_tests.cpp	/^const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));$/;"	v
MaxUsableEstimate	policy/fees.cpp	/^unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const$/;"	f	class:CBlockPolicyEstimator
MaybeAddFile	leveldb/db/version_set.cc	/^  void MaybeAddFile(Version* v, int level, FileMetaData* f) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeCompactWalletDB	wallet/walletdb.cpp	/^void MaybeCompactWalletDB()$/;"	f
MaybeIgnoreError	leveldb/db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
MaybePushAddress	wallet/rpcwallet.cpp	/^static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)$/;"	f	file:
MaybeScheduleCompaction	leveldb/db/db_impl.cc	/^void DBImpl::MaybeScheduleCompaction() {$/;"	f	class:leveldb::DBImpl
MaybeScheduleProcessQueue	scheduler.cpp	/^void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {$/;"	f	class:SingleThreadedSchedulerClient
MaybeSetAddrName	net.cpp	/^void CNode::MaybeSetAddrName(const std::string& addrNameIn) {$/;"	f	class:CNode
MaybeSetPeerAsAnnouncingHeaderAndIDs	net_processing.cpp	/^void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {$/;"	f	namespace:__anon50
Median	leveldb/util/histogram.cc	/^double Histogram::Median() const {$/;"	f	class:leveldb::Histogram
MemEnvTest	leveldb/helpers/memenv/memenv_test.cc	/^  MemEnvTest()$/;"	f	class:leveldb::MemEnvTest
MemEnvTest	leveldb/helpers/memenv/memenv_test.cc	/^class MemEnvTest {$/;"	c	namespace:leveldb	file:
MemPoolRemovalReason	txmempool.h	/^enum class MemPoolRemovalReason {$/;"	c
MemTable	leveldb/db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& cmp)$/;"	f	class:leveldb::MemTable
MemTable	leveldb/db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableConstructor	leveldb/table/table_test.cc	/^  explicit MemTableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::MemTableConstructor
MemTableConstructor	leveldb/table/table_test.cc	/^class MemTableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
MemTableInserter	leveldb/db/write_batch.cc	/^class MemTableInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon28	file:
MemTableIterator	leveldb/db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) : iter_(table) { }$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	leveldb/db/memtable.cc	/^class MemTableIterator: public Iterator {$/;"	c	namespace:leveldb	file:
MemTableTest	leveldb/table/table_test.cc	/^class MemTableTest { };$/;"	c	namespace:leveldb	file:
MemoryCheck	test/checkqueue_tests.cpp	/^    MemoryCheck(){};$/;"	f	struct:MemoryCheck
MemoryCheck	test/checkqueue_tests.cpp	/^    MemoryCheck(bool b_) : b(b_)$/;"	f	struct:MemoryCheck
MemoryCheck	test/checkqueue_tests.cpp	/^    MemoryCheck(const MemoryCheck& x)$/;"	f	struct:MemoryCheck
MemoryCheck	test/checkqueue_tests.cpp	/^struct MemoryCheck {$/;"	s	file:
MemoryUsage	leveldb/util/arena.h	/^  size_t MemoryUsage() const {$/;"	f	class:leveldb::Arena
Memory_Queue	test/checkqueue_tests.cpp	/^typedef CCheckQueue<MemoryCheck> Memory_Queue;$/;"	t	file:
MempoolEviction	bench/mempool_eviction.cpp	/^BENCHMARK(MempoolEviction);$/;"	v
MempoolEviction	bench/mempool_eviction.cpp	/^static void MempoolEviction(benchmark::State& state)$/;"	f	file:
Merge	leveldb/db/db_bench.cc	/^  void Merge(const Stats& other) {$/;"	f	class:leveldb::__anon18::Stats
Merge	leveldb/util/histogram.cc	/^void Histogram::Merge(const Histogram& other) {$/;"	f	class:leveldb::Histogram
MergingIterator	leveldb/table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children, int n)$/;"	f	class:leveldb::__anon36::MergingIterator
MergingIterator	leveldb/table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon36	file:
MerkleComputation	consensus/merkle.cpp	/^static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) {$/;"	f	file:
Message	qt/recentrequeststablemodel.h	/^        Message = 2,$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
MessageBoxFlags	ui_interface.h	/^    enum MessageBoxFlags$/;"	g	class:CClientUIInterface
MessageClass	qt/rpcconsole.h	/^    enum MessageClass {$/;"	g	class:RPCConsole
MessageStart	chainparams.h	/^    const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }$/;"	f	class:CChainParams
MessageStartChars	protocol.h	/^    typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];$/;"	t	class:CMessageHeader
MicroSleep	test/scheduler_tests.cpp	/^static void MicroSleep(uint64_t n)$/;"	f	file:
MilliSleep	utiltime.cpp	/^void MilliSleep(int64_t n)$/;"	f
MillisToTimeval	netbase.cpp	/^struct timeval MillisToTimeval(int64_t nTimeout)$/;"	f
Mine	test/versionbits_tests.cpp	/^    VersionBitsTester& Mine(unsigned int height, int32_t nTime, int32_t nVersion) {$/;"	f	class:VersionBitsTester
MineBlocksOnDemand	chainparams.h	/^    bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }$/;"	f	class:CChainParams
MinimizeOnClose	qt/optionsmodel.h	/^        MinimizeOnClose,        \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MinimizeToTray	qt/optionsmodel.h	/^        MinimizeToTray,         \/\/ bool$/;"	e	enum:OptionsModel::OptionID
Misbehaving	net_processing.cpp	/^void Misbehaving(NodeId pnode, int howmuch)$/;"	f
MixColumns	crypto/ctaes/ctaes.c	/^static void MixColumns(AES_state* s, int inv) {$/;"	f	file:
ModalOverlay	qt/modaloverlay.cpp	/^ModalOverlay::ModalOverlay(QWidget *parent) :$/;"	f	class:ModalOverlay
ModalOverlay	qt/modaloverlay.h	/^class ModalOverlay : public QWidget$/;"	c
Mode	qt/addressbookpage.h	/^    enum Mode {$/;"	g	class:AddressBookPage
Mode	qt/askpassphrasedialog.h	/^    enum Mode {$/;"	g	class:AskPassphraseDialog
Mode	qt/editaddressdialog.h	/^    enum Mode {$/;"	g	class:EditAddressDialog
Mode	qt/notificator.h	/^    enum Mode {$/;"	g	class:Notificator
ModelDB	leveldb/db/db_test.cc	/^  explicit ModelDB(const Options& options): options_(options) { }$/;"	f	class:leveldb::ModelDB
ModelDB	leveldb/db/db_test.cc	/^class ModelDB: public DB {$/;"	c	namespace:leveldb	file:
ModelIter	leveldb/db/db_test.cc	/^    ModelIter(const KVMap* map, bool owned)$/;"	f	class:leveldb::ModelDB::ModelIter
ModelIter	leveldb/db/db_test.cc	/^  class ModelIter: public Iterator {$/;"	c	class:leveldb::ModelDB	file:
ModelSnapshot	leveldb/db/db_test.cc	/^  class ModelSnapshot : public Snapshot {$/;"	c	class:leveldb::ModelDB	file:
ModifyPath	leveldb/util/env_win.cc	/^std::string& ModifyPath(std::string& path)$/;"	f	namespace:leveldb::Win32
ModifyPath	leveldb/util/env_win.cc	/^std::wstring& ModifyPath(std::wstring& path)$/;"	f	namespace:leveldb::Win32
MoneyRange	amount.h	/^inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }$/;"	f
MoveTo	sync.h	/^    void MoveTo(CSemaphoreGrant& grant)$/;"	f	class:CSemaphoreGrant
MultX	crypto/ctaes/ctaes.c	/^static void MultX(AES_state* s) {$/;"	f	file:
MurmurHash3	hash.cpp	/^unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)$/;"	f
MutableTransactionSignatureChecker	script/interpreter.h	/^    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : TransactionSignatureChecker(&txTo, nInIn, amountIn), txTo(*txToIn) {}$/;"	f	class:MutableTransactionSignatureChecker
MutableTransactionSignatureChecker	script/interpreter.h	/^class MutableTransactionSignatureChecker : public TransactionSignatureChecker$/;"	c
MutableTransactionSignatureCreator	script/sign.h	/^    MutableTransactionSignatureCreator(const CKeyStore* keystoreIn, const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : TransactionSignatureCreator(keystoreIn, &tx, nInIn, amountIn, nHashTypeIn), tx(*txToIn) {}$/;"	f	class:MutableTransactionSignatureCreator
MutableTransactionSignatureCreator	script/sign.h	/^class MutableTransactionSignatureCreator : public TransactionSignatureCreator {$/;"	c
MutateTx	wificoin-tx.cpp	/^static void MutateTx(CMutableTransaction& tx, const std::string& command,$/;"	f	file:
MutateTxAddInput	wificoin-tx.cpp	/^static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutAddr	wificoin-tx.cpp	/^static void MutateTxAddOutAddr(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutData	wificoin-tx.cpp	/^static void MutateTxAddOutData(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutMultiSig	wificoin-tx.cpp	/^static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutPubKey	wificoin-tx.cpp	/^static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxAddOutScript	wificoin-tx.cpp	/^static void MutateTxAddOutScript(CMutableTransaction& tx, const std::string& strInput)$/;"	f	file:
MutateTxDelInput	wificoin-tx.cpp	/^static void MutateTxDelInput(CMutableTransaction& tx, const std::string& strInIdx)$/;"	f	file:
MutateTxDelOutput	wificoin-tx.cpp	/^static void MutateTxDelOutput(CMutableTransaction& tx, const std::string& strOutIdx)$/;"	f	file:
MutateTxLocktime	wificoin-tx.cpp	/^static void MutateTxLocktime(CMutableTransaction& tx, const std::string& cmdVal)$/;"	f	file:
MutateTxRBFOptIn	wificoin-tx.cpp	/^static void MutateTxRBFOptIn(CMutableTransaction& tx, const std::string& strInIdx)$/;"	f	file:
MutateTxSign	wificoin-tx.cpp	/^static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)$/;"	f	file:
MutateTxVersion	wificoin-tx.cpp	/^static void MutateTxVersion(CMutableTransaction& tx, const std::string& cmdVal)$/;"	f	file:
Mutex	leveldb/port/port_example.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	leveldb/port/port_posix.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	leveldb/port/port_posix.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	leveldb/port/port_win.cc	/^Mutex::Mutex() :$/;"	f	class:leveldb::port::Mutex
Mutex	leveldb/port/port_win.h	/^class Mutex {$/;"	c	namespace:leveldb::port
MutexLock	leveldb/util/mutexlock.h	/^class SCOPED_LOCKABLE MutexLock {$/;"	c	namespace:leveldb
NCONST_PTR	serialize.h	/^inline T* NCONST_PTR(const T* val)$/;"	f
NETUNREACHABLE	netbase.cpp	/^    NETUNREACHABLE = 0x03,   \/\/! Network unreachable$/;"	e	enum:uint8_t	file:
NET_INTERNAL	netaddress.h	/^    NET_INTERNAL,$/;"	e	enum:Network
NET_IPV4	netaddress.h	/^    NET_IPV4,$/;"	e	enum:Network
NET_IPV6	netaddress.h	/^    NET_IPV6,$/;"	e	enum:Network
NET_MAX	netaddress.h	/^    NET_MAX,$/;"	e	enum:Network
NET_MESSAGE_COMMAND_OTHER	net.cpp	/^const static std::string NET_MESSAGE_COMMAND_OTHER = "*other*";$/;"	v	file:
NET_TEREDO	netaddress.cpp	/^static const int NET_TEREDO  = NET_MAX + 1;$/;"	v	file:
NET_TOR	netaddress.h	/^    NET_TOR,$/;"	e	enum:Network
NET_UNKNOWN	netaddress.cpp	/^static const int NET_UNKNOWN = NET_MAX + 0;$/;"	v	file:
NET_UNROUTABLE	netaddress.h	/^    NET_UNROUTABLE = 0,$/;"	e	enum:Network
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	secp256k1/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	univalue/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NMEDIT	secp256k1/Makefile	/^NMEDIT = $/;"	m
NMEDIT	univalue/Makefile	/^NMEDIT = $/;"	m
NOAUTH	netbase.cpp	/^    NOAUTH = 0x00,        \/\/! No authentication required$/;"	e	enum:uint8_t	file:
NODE_BLOOM	protocol.h	/^    NODE_BLOOM = (1 << 2),$/;"	e	enum:uint64_t
NODE_GETUTXO	protocol.h	/^    NODE_GETUTXO = (1 << 1),$/;"	e	enum:uint64_t
NODE_NETWORK	protocol.h	/^    NODE_NETWORK = (1 << 0),$/;"	e	enum:uint64_t
NODE_NONE	protocol.h	/^    NODE_NONE = 0,$/;"	e	enum:uint64_t
NODE_WITNESS	protocol.h	/^    NODE_WITNESS = (1 << 3),$/;"	e	enum:uint64_t
NODE_XTHIN	protocol.h	/^    NODE_XTHIN = (1 << 4),$/;"	e	enum:uint64_t
NOMINMAX	compat.h	22;"	d
NOMINMAX	qt/guiutil.cpp	32;"	d	file:
NOMINMAX	support/lockedpool.cpp	19;"	d	file:
NOMINMAX	util.cpp	64;"	d	file:
NONE	policy/fees.h	/^    NONE,$/;"	m	class:FeeReason
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	secp256k1/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	univalue/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	secp256k1/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	univalue/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOTALLOWED	netbase.cpp	/^    NOTALLOWED = 0x02,       \/\/! Connection not allowed by ruleset$/;"	e	enum:uint8_t	file:
NOTFOUND	protocol.cpp	/^const char *NOTFOUND="notfound";$/;"	m	namespace:NetMsgType	file:
NO_ACCEPTABLE	netbase.cpp	/^    NO_ACCEPTABLE = 0xff, \/\/! No acceptable methods$/;"	e	enum:uint8_t	file:
NO_BLOOM_VERSION	version.h	/^static const int NO_BLOOM_VERSION = 70011;$/;"	v
NO_CHANGES	qt/addresstablemodel.h	/^        NO_CHANGES,             \/**< No changes were made during edit operation *\/$/;"	e	enum:AddressTableModel::EditStatus
NO_ENTRY	test/coins_tests.cpp	/^const static char NO_ENTRY = -1;$/;"	v	file:
NO_THREAD_SAFETY_ANALYSIS	leveldb/port/thread_annotations.h	57;"	d
NO_THREAD_SAFETY_ANALYSIS	threadsafety.h	33;"	d
NO_THREAD_SAFETY_ANALYSIS	threadsafety.h	52;"	d
NSAppKitVersionNumber10_8	qt/guiutil.cpp	71;"	d	file:
NSAppKitVersionNumber10_9	qt/guiutil.cpp	74;"	d	file:
NUMBER_OF_COLUMNS	qt/recentrequeststablemodel.h	/^        NUMBER_OF_COLUMNS$/;"	e	enum:RecentRequestsTableModel::ColumnIndex
NUM_ITEMS	qt/overviewpage.cpp	22;"	d	file:
NUM_LIMBS	secp256k1/src/num_gmp.h	12;"	d
NUM_MULTIPLES_1WFC	test/compress_tests.cpp	20;"	d	file:
NUM_MULTIPLES_50WFC	test/compress_tests.cpp	23;"	d	file:
NUM_MULTIPLES_CENT	test/compress_tests.cpp	17;"	d	file:
NUM_MULTIPLES_UNIT	test/compress_tests.cpp	14;"	d	file:
NUM_OS_RANDOM_BYTES	random.h	/^static const ssize_t NUM_OS_RANDOM_BYTES = 32;$/;"	v
NUM_SIMULATION_ITERATIONS	test/coins_tests.cpp	/^static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;$/;"	v	file:
N_SIGHASH_OPTS	wificoin-tx.cpp	/^static const unsigned int N_SIGHASH_OPTS = 6;$/;"	v	file:
Name	leveldb/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_comparator_t
Name	leveldb/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_filterpolicy_t
Name	leveldb/db/dbformat.cc	/^const char* InternalFilterPolicy::Name() const {$/;"	f	class:leveldb::InternalFilterPolicy
Name	leveldb/db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
Name	leveldb/table/filter_block_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::TestHashFilter
Name	leveldb/table/table_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon40::ReverseKeyComparator
Name	leveldb/util/bloom.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon10::BloomFilterPolicy
Name	leveldb/util/comparator.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon9::BytewiseComparatorImpl
Name	qt/rpcconsole.cpp	/^    const char *Name() { return "Qt"; }$/;"	f	class:QtRPCTimerInterface
NativeSecp256k1	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^public class NativeSecp256k1 {$/;"	c
NativeSecp256k1Test	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^public class NativeSecp256k1Test {$/;"	c
NativeSecp256k1Util	secp256k1/src/java/org/wificoin/NativeSecp256k1Util.java	/^public class NativeSecp256k1Util{$/;"	c
NeedsCompaction	leveldb/db/version_set.h	/^  bool NeedsCompaction() const {$/;"	f	class:leveldb::VersionSet
NegateSignatureS	test/script_tests.cpp	/^void static NegateSignatureS(std::vector<unsigned char>& vchSig) {$/;"	f	file:
NetEventsInterface	net.h	/^class NetEventsInterface$/;"	c
NetMsgType	protocol.cpp	/^namespace NetMsgType {$/;"	n	file:
NetMsgType	protocol.h	/^namespace NetMsgType {$/;"	n
NetNodeId	qt/peertablemodel.h	/^        NetNodeId = 0,$/;"	e	enum:PeerTableModel::ColumnIndex
NetmaskBits	netaddress.cpp	/^static inline int NetmaskBits(uint8_t x)$/;"	f	file:
Network	netaddress.h	/^enum Network$/;"	g
NetworkError	netbase.cpp	/^    NetworkError,$/;"	m	class:IntrRecvError	file:
NetworkErrorString	netbase.cpp	/^std::string NetworkErrorString(int err)$/;"	f
NetworkIDString	chainparams.h	/^    std::string NetworkIDString() const { return strNetworkID; }$/;"	f	class:CChainParams
NetworkStyle	qt/networkstyle.cpp	/^NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift, const int iconColorSaturationReduction, const char *_titleAddText):$/;"	f	class:NetworkStyle
NetworkStyle	qt/networkstyle.h	/^class NetworkStyle$/;"	c
Neuter	key.cpp	/^CExtPubKey CExtKey::Neuter() const {$/;"	f	class:CExtKey
New	leveldb/db/snapshot.h	/^  const SnapshotImpl* New(SequenceNumber seq) {$/;"	f	class:leveldb::SnapshotList
NewAppendableFile	leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::FaultInjectionTestEnv
NewAppendableFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::__anon16::InMemoryEnv
NewAppendableFile	leveldb/include/leveldb/env.h	/^  Status NewAppendableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewAppendableFile	leveldb/util/env.cc	/^Status Env::NewAppendableFile(const std::string& fname, WritableFile** result) {$/;"	f	class:leveldb::Env
NewAppendableFile	leveldb/util/env_posix.cc	/^  virtual Status NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::__anon11::PosixEnv
NewAppendableFile	leveldb/util/env_win.cc	/^Status Win32Env::NewAppendableFile( const std::string& fname, WritableFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewAppendableFile	leveldb/util/testutil.h	/^  virtual Status NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewBloomFilterPolicy	leveldb/util/bloom.cc	/^const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {$/;"	f	namespace:leveldb
NewConcatenatingIterator	leveldb/db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewDB	leveldb/db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDB	leveldb/table/table_test.cc	/^  void NewDB() {$/;"	f	class:leveldb::DBConstructor	file:
NewDBIterator	leveldb/db/db_iter.cc	/^Iterator* NewDBIterator($/;"	f	namespace:leveldb
NewEmptyIterator	leveldb/table/iterator.cc	/^Iterator* NewEmptyIterator() {$/;"	f	namespace:leveldb
NewErrorIterator	leveldb/table/iterator.cc	/^Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	leveldb/db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewId	leveldb/util/cache.cc	/^  virtual uint64_t NewId() {$/;"	f	class:leveldb::__anon13::ShardedLRUCache
NewInternalIterator	leveldb/db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
NewIterator	dbwrapper.h	/^    CDBIterator *NewIterator()$/;"	f	class:CDBWrapper
NewIterator	leveldb/db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	leveldb/db/db_test.cc	/^  virtual Iterator* NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::ModelDB
NewIterator	leveldb/db/memtable.cc	/^Iterator* MemTable::NewIterator() {$/;"	f	class:leveldb::MemTable
NewIterator	leveldb/db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	leveldb/table/block.cc	/^Iterator* Block::NewIterator(const Comparator* cmp) {$/;"	f	class:leveldb::Block
NewIterator	leveldb/table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewIterator	leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::BlockConstructor
NewIterator	leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::DBConstructor
NewIterator	leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::MemTableConstructor
NewIterator	leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::TableConstructor
NewKeyPool	wallet/wallet.cpp	/^bool CWallet::NewKeyPool()$/;"	f	class:CWallet
NewLRUCache	leveldb/util/cache.cc	/^Cache* NewLRUCache(size_t capacity) {$/;"	f	namespace:leveldb
NewLogger	leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
NewLogger	leveldb/include/leveldb/env.h	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::EnvWrapper
NewLogger	leveldb/util/env_posix.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon11::PosixEnv
NewLogger	leveldb/util/env_win.cc	/^Status Win32Env::NewLogger( const std::string& fname, Logger** result )$/;"	f	class:leveldb::Win32::Win32Env
NewMemEnv	leveldb/helpers/memenv/memenv.cc	/^Env* NewMemEnv(Env* base_env) {$/;"	f	namespace:leveldb
NewMergingIterator	leveldb/table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* cmp, Iterator** list, int n) {$/;"	f	namespace:leveldb
NewNode	leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::NewNode(const Key& key, int height) {$/;"	f	class:leveldb::SkipList
NewPoWValidBlock	net_processing.cpp	/^void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {$/;"	f	class:PeerLogicValidation
NewPoWValidBlock	validationinterface.cpp	/^    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;$/;"	m	struct:MainSignalsInstance	file:
NewPoWValidBlock	validationinterface.cpp	/^void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {$/;"	f	class:CMainSignals
NewPoWValidBlock	validationinterface.h	/^    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};$/;"	f	class:CValidationInterface
NewRandomAccessFile	leveldb/db/db_test.cc	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewRandomAccessFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon16::InMemoryEnv
NewRandomAccessFile	leveldb/include/leveldb/env.h	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewRandomAccessFile	leveldb/util/env_posix.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon11::PosixEnv
NewRandomAccessFile	leveldb/util/env_win.cc	/^Status Win32Env::NewRandomAccessFile( const std::string& fname, RandomAccessFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewReceivingAddress	qt/editaddressdialog.h	/^        NewReceivingAddress,$/;"	e	enum:EditAddressDialog::Mode
NewSendingAddress	qt/editaddressdialog.h	/^        NewSendingAddress,$/;"	e	enum:EditAddressDialog::Mode
NewSequentialFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon16::InMemoryEnv
NewSequentialFile	leveldb/include/leveldb/env.h	/^  Status NewSequentialFile(const std::string& f, SequentialFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewSequentialFile	leveldb/util/env_posix.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon11::PosixEnv
NewSequentialFile	leveldb/util/env_win.cc	/^Status Win32Env::NewSequentialFile( const std::string& fname, SequentialFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewTableIterator	leveldb/db/repair.cc	/^  Iterator* NewTableIterator(const FileMetaData& meta) {$/;"	f	class:leveldb::__anon26::Repairer	file:
NewTimer	qt/rpcconsole.cpp	/^    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis)$/;"	f	class:QtRPCTimerInterface
NewTwoLevelIterator	leveldb/table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator($/;"	f	namespace:leveldb
NewTx	policy/fees.cpp	/^unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)$/;"	f	class:TxConfirmStats
NewWritableFile	leveldb/db/db_test.cc	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewWritableFile	leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::FaultInjectionTestEnv
NewWritableFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon16::InMemoryEnv
NewWritableFile	leveldb/include/leveldb/env.h	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewWritableFile	leveldb/util/env_posix.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon11::PosixEnv
NewWritableFile	leveldb/util/env_win.cc	/^Status Win32Env::NewWritableFile( const std::string& fname, WritableFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewWritableFile	leveldb/util/testutil.h	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewestFirst	leveldb/db/version_set.cc	/^static bool NewestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
Next	chain.h	/^    CBlockIndex *Next(const CBlockIndex *pindex) const {$/;"	f	class:CChain
Next	dbwrapper.cpp	/^void CDBIterator::Next() { piter->Next(); }$/;"	f	class:CDBIterator
Next	leveldb/db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon20::DBIter
Next	leveldb/db/db_test.cc	/^    virtual void Next() { ++iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Next	leveldb/db/memtable.cc	/^  virtual void Next() { iter_.Next(); }$/;"	f	class:leveldb::MemTableIterator
Next	leveldb/db/skiplist.h	/^  Node* Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
Next	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	leveldb/db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Next	leveldb/table/block.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Block::Iter
Next	leveldb/table/iterator.cc	/^  virtual void Next() { assert(false); }$/;"	f	class:leveldb::__anon42::EmptyIterator
Next	leveldb/table/iterator_wrapper.h	/^  void Next()               { assert(iter_); iter_->Next();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Next	leveldb/table/merger.cc	/^  virtual void Next() {$/;"	f	class:leveldb::__anon36::MergingIterator
Next	leveldb/table/table_test.cc	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:leveldb::KeyConvertingIterator
Next	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
Next	leveldb/util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
Next	txdb.cpp	/^void CCoinsViewDBCursor::Next()$/;"	f	class:CCoinsViewDBCursor
NextEntryOffset	leveldb/table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter	file:
NextLength	leveldb/util/bloom_test.cc	/^static int NextLength(int length) {$/;"	f	namespace:leveldb
NoBarrier_Load	leveldb/port/atomic_pointer.h	/^  inline void* NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Load	leveldb/port/port_win.cc	/^void* AtomicPointer::NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Next	leveldb/db/skiplist.h	/^  Node* NoBarrier_Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	leveldb/db/skiplist.h	/^  void NoBarrier_SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Store	leveldb/port/atomic_pointer.h	/^  inline void NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Store	leveldb/port/port_win.cc	/^void AtomicPointer::NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
NoOpLogger	leveldb/helpers/memenv/memenv.cc	/^class NoOpLogger : public Logger {$/;"	c	namespace:leveldb::__anon16	file:
NoWriteTestPreFault	leveldb/db/fault_injection_test.cc	/^  void NoWriteTestPreFault() {$/;"	f	class:leveldb::FaultInjectionTest
NoWriteTestReopenWithFault	leveldb/db/fault_injection_test.cc	/^  void NoWriteTestReopenWithFault(ResetMethod reset_method) {$/;"	f	class:leveldb::FaultInjectionTest
Node	leveldb/db/skiplist.h	/^  explicit Node(const Key& k) : key(k) { }$/;"	f	struct:leveldb::SkipList::Node
Node	leveldb/db/skiplist.h	/^struct SkipList<Key,Comparator>::Node {$/;"	s	class:leveldb::SkipList
NodeEvictionCandidate	net.cpp	/^struct NodeEvictionCandidate$/;"	s	file:
NodeFullyConnected	net.cpp	/^bool CConnman::NodeFullyConnected(const CNode* pnode)$/;"	f	class:CConnman
NodeId	net.h	/^typedef int64_t NodeId;$/;"	t
NodeLessThan	qt/peertablemodel.h	/^    NodeLessThan(int nColumn, Qt::SortOrder fOrder) :$/;"	f	class:NodeLessThan
NodeLessThan	qt/peertablemodel.h	/^class NodeLessThan$/;"	c
None	qt/notificator.h	/^        None,                       \/**< Ignore informational notifications, and show a modal pop-up dialog for Critical notifications. *\/$/;"	e	enum:Notificator::Mode
NotAccepted	qt/transactionrecord.h	/^        NotAccepted         \/**< Mined but not accepted *\/$/;"	e	enum:TransactionStatus::Status
NotFound	leveldb/include/leveldb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	leveldb/include/leveldb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Note	secp256k1/src/asm/field_10x26_arm.s	/^	Note: do not read from a[] after here, it may overlap with r[]$/;"	d
Note	secp256k1/src/asm/field_10x26_arm.s	/^	Note: do not write to r[] here, it may overlap with a[]$/;"	d
Notificator	qt/notificator.cpp	/^Notificator::Notificator(const QString &_programName, QSystemTrayIcon *_trayIcon, QWidget *_parent) :$/;"	f	class:Notificator
Notificator	qt/notificator.h	/^class Notificator: public QObject$/;"	c
NotifyAddressBookChanged	qt/walletmodel.cpp	/^static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,$/;"	f	file:
NotifyAddressBookChanged	wallet/wallet.h	/^            ChangeType status)> NotifyAddressBookChanged;$/;"	m	class:CWallet
NotifyAlertChanged	qt/clientmodel.cpp	/^static void NotifyAlertChanged(ClientModel *clientmodel)$/;"	f	file:
NotifyAlertChanged	ui_interface.h	/^    boost::signals2::signal<void ()> NotifyAlertChanged;$/;"	m	class:CClientUIInterface
NotifyBlock	zmq/zmqabstractnotifier.cpp	/^bool CZMQAbstractNotifier::NotifyBlock(const CBlockIndex * \/*CBlockIndex*\/)$/;"	f	class:CZMQAbstractNotifier
NotifyBlock	zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)$/;"	f	class:CZMQPublishHashBlockNotifier
NotifyBlock	zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)$/;"	f	class:CZMQPublishRawBlockNotifier
NotifyBlockTip	ui_interface.h	/^    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;$/;"	m	class:CClientUIInterface
NotifyEntryAdded	txmempool.h	/^    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;$/;"	m	class:CTxMemPool
NotifyEntryRemoved	txmempool.h	/^    boost::signals2::signal<void (CTransactionRef, MemPoolRemovalReason)> NotifyEntryRemoved;$/;"	m	class:CTxMemPool
NotifyEntryRemoved	validation.cpp	/^    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {$/;"	f	class:ConnectTrace
NotifyHeaderTip	ui_interface.h	/^    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyHeaderTip;$/;"	m	class:CClientUIInterface
NotifyHeaderTip	validation.cpp	/^static void NotifyHeaderTip() {$/;"	f	file:
NotifyKeyStoreStatusChanged	qt/walletmodel.cpp	/^static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel, CCryptoKeyStore *wallet)$/;"	f	file:
NotifyNetworkActiveChanged	qt/clientmodel.cpp	/^static void NotifyNetworkActiveChanged(ClientModel *clientmodel, bool networkActive)$/;"	f	file:
NotifyNetworkActiveChanged	ui_interface.h	/^    boost::signals2::signal<void (bool networkActive)> NotifyNetworkActiveChanged;$/;"	m	class:CClientUIInterface
NotifyNumConnectionsChanged	qt/clientmodel.cpp	/^static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)$/;"	f	file:
NotifyNumConnectionsChanged	ui_interface.h	/^    boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;$/;"	m	class:CClientUIInterface
NotifyStatusChanged	wallet/crypter.h	/^    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;$/;"	m	class:CCryptoKeyStore
NotifyTransaction	zmq/zmqabstractnotifier.cpp	/^bool CZMQAbstractNotifier::NotifyTransaction(const CTransaction &\/*transaction*\/)$/;"	f	class:CZMQAbstractNotifier
NotifyTransaction	zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &transaction)$/;"	f	class:CZMQPublishHashTransactionNotifier
NotifyTransaction	zmq/zmqpublishnotifier.cpp	/^bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)$/;"	f	class:CZMQPublishRawTransactionNotifier
NotifyTransactionChanged	qt/transactiontablemodel.cpp	/^static void NotifyTransactionChanged(TransactionTableModel *ttm, CWallet *wallet, const uint256 &hash, ChangeType status)$/;"	f	file:
NotifyTransactionChanged	qt/walletmodel.cpp	/^static void NotifyTransactionChanged(WalletModel *walletmodel, CWallet *wallet, const uint256 &hash, ChangeType status)$/;"	f	file:
NotifyTransactionChanged	wallet/wallet.h	/^            ChangeType status)> NotifyTransactionChanged;$/;"	m	class:CWallet
NotifyWatchonlyChanged	qt/walletmodel.cpp	/^static void NotifyWatchonlyChanged(WalletModel *walletmodel, bool fHaveWatchonly)$/;"	f	file:
NotifyWatchonlyChanged	wallet/wallet.h	/^    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;$/;"	m	class:CWallet
NowMicros	leveldb/include/leveldb/env.h	/^  uint64_t NowMicros() {$/;"	f	class:leveldb::EnvWrapper
NowMicros	leveldb/util/env_posix.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon11::PosixEnv
NowMicros	leveldb/util/env_win.cc	/^uint64_t Win32Env::NowMicros()$/;"	f	class:leveldb::Win32::Win32Env
NullUniValue	univalue/lib/univalue.cpp	/^const UniValue NullUniValue;$/;"	v
Num	test/script_tests.cpp	/^    TestBuilder& Num(int num)$/;"	f	class:__anon80::TestBuilder
NumConnections	net.h	/^    enum NumConnections {$/;"	g	class:CConnman
NumConnections	qt/clientmodel.h	/^enum NumConnections {$/;"	g
NumEntries	leveldb/table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const {$/;"	f	class:leveldb::TableBuilder
NumFiles	leveldb/db/version_set.h	/^  int NumFiles(int level) const { return files_[level].size(); }$/;"	f	class:leveldb::Version
NumLevelBytes	leveldb/db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(int level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	leveldb/db/version_set.cc	/^int VersionSet::NumLevelFiles(int level) const {$/;"	f	class:leveldb::VersionSet
NumLogs	leveldb/db/recovery_test.cc	/^  int NumLogs() {$/;"	f	class:leveldb::RecoveryTest
NumRestarts	leveldb/table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumTableFilesAtLevel	leveldb/db/db_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumTables	leveldb/db/recovery_test.cc	/^  int NumTables() {$/;"	f	class:leveldb::RecoveryTest
NumberString	leveldb/db/log_test.cc	/^static std::string NumberString(int n) {$/;"	f	namespace:leveldb::log
NumberToString	leveldb/util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OBFUSCATE_KEY_KEY	dbwrapper.h	/^    static const std::string OBFUSCATE_KEY_KEY;$/;"	m	class:CDBWrapper
OBFUSCATE_KEY_NUM_BYTES	dbwrapper.cpp	/^const unsigned int CDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;$/;"	m	class:CDBWrapper	file:
OBFUSCATE_KEY_NUM_BYTES	dbwrapper.h	/^    static const unsigned int OBFUSCATE_KEY_NUM_BYTES;$/;"	m	class:CDBWrapper
OBJCOPY	Makefile	/^OBJCOPY = \/usr\/bin\/objcopy$/;"	m
OBJCXX	Makefile	/^OBJCXX = g++ -std=c++11$/;"	m
OBJCXXCOMPILE	Makefile	/^OBJCXXCOMPILE = $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
OBJCXXDEPMODE	Makefile	/^OBJCXXDEPMODE = depmode=gcc3$/;"	m
OBJCXXFLAGS	Makefile	/^OBJCXXFLAGS = $/;"	m
OBJCXXLD	Makefile	/^OBJCXXLD = $(OBJCXX)$/;"	m
OBJCXXLINK	Makefile	/^OBJCXXLINK = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	secp256k1/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	univalue/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OBJEXT	secp256k1/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	univalue/Makefile	/^OBJEXT = o$/;"	m
OK	leveldb/include/leveldb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
OK	netbase.cpp	/^    OK,$/;"	m	class:IntrRecvError	file:
OK	qt/addresstablemodel.h	/^        OK,                     \/**< Everything ok *\/$/;"	e	enum:AddressTableModel::EditStatus
OK	qt/walletmodel.h	/^        OK,$/;"	e	enum:WalletModel::StatusCode
OK	wallet/feebumper.h	/^    OK,$/;"	m	class:BumpFeeResult
OLDEST_ESTIMATE_HISTORY	policy/fees.h	/^    static const unsigned int OLDEST_ESTIMATE_HISTORY = 6 * 1008;$/;"	m	class:CBlockPolicyEstimator
OPT	leveldb/Makefile	/^OPT ?= -O2 -DNDEBUG$/;"	m
OP_0	script/script.h	/^    OP_0 = 0x00,$/;"	e	enum:opcodetype
OP_0NOTEQUAL	script/script.h	/^    OP_0NOTEQUAL = 0x92,$/;"	e	enum:opcodetype
OP_1	script/script.h	/^    OP_1 = 0x51,$/;"	e	enum:opcodetype
OP_10	script/script.h	/^    OP_10 = 0x5a,$/;"	e	enum:opcodetype
OP_11	script/script.h	/^    OP_11 = 0x5b,$/;"	e	enum:opcodetype
OP_12	script/script.h	/^    OP_12 = 0x5c,$/;"	e	enum:opcodetype
OP_13	script/script.h	/^    OP_13 = 0x5d,$/;"	e	enum:opcodetype
OP_14	script/script.h	/^    OP_14 = 0x5e,$/;"	e	enum:opcodetype
OP_15	script/script.h	/^    OP_15 = 0x5f,$/;"	e	enum:opcodetype
OP_16	script/script.h	/^    OP_16 = 0x60,$/;"	e	enum:opcodetype
OP_1ADD	script/script.h	/^    OP_1ADD = 0x8b,$/;"	e	enum:opcodetype
OP_1NEGATE	script/script.h	/^    OP_1NEGATE = 0x4f,$/;"	e	enum:opcodetype
OP_1SUB	script/script.h	/^    OP_1SUB = 0x8c,$/;"	e	enum:opcodetype
OP_2	script/script.h	/^    OP_2 = 0x52,$/;"	e	enum:opcodetype
OP_2DIV	script/script.h	/^    OP_2DIV = 0x8e,$/;"	e	enum:opcodetype
OP_2DROP	script/script.h	/^    OP_2DROP = 0x6d,$/;"	e	enum:opcodetype
OP_2DUP	script/script.h	/^    OP_2DUP = 0x6e,$/;"	e	enum:opcodetype
OP_2MUL	script/script.h	/^    OP_2MUL = 0x8d,$/;"	e	enum:opcodetype
OP_2OVER	script/script.h	/^    OP_2OVER = 0x70,$/;"	e	enum:opcodetype
OP_2ROT	script/script.h	/^    OP_2ROT = 0x71,$/;"	e	enum:opcodetype
OP_2SWAP	script/script.h	/^    OP_2SWAP = 0x72,$/;"	e	enum:opcodetype
OP_3	script/script.h	/^    OP_3 = 0x53,$/;"	e	enum:opcodetype
OP_3DUP	script/script.h	/^    OP_3DUP = 0x6f,$/;"	e	enum:opcodetype
OP_4	script/script.h	/^    OP_4 = 0x54,$/;"	e	enum:opcodetype
OP_5	script/script.h	/^    OP_5 = 0x55,$/;"	e	enum:opcodetype
OP_6	script/script.h	/^    OP_6 = 0x56,$/;"	e	enum:opcodetype
OP_7	script/script.h	/^    OP_7 = 0x57,$/;"	e	enum:opcodetype
OP_8	script/script.h	/^    OP_8 = 0x58,$/;"	e	enum:opcodetype
OP_9	script/script.h	/^    OP_9 = 0x59,$/;"	e	enum:opcodetype
OP_ABS	script/script.h	/^    OP_ABS = 0x90,$/;"	e	enum:opcodetype
OP_ADD	script/script.h	/^    OP_ADD = 0x93,$/;"	e	enum:opcodetype
OP_AND	script/script.h	/^    OP_AND = 0x84,$/;"	e	enum:opcodetype
OP_BOOLAND	script/script.h	/^    OP_BOOLAND = 0x9a,$/;"	e	enum:opcodetype
OP_BOOLOR	script/script.h	/^    OP_BOOLOR = 0x9b,$/;"	e	enum:opcodetype
OP_CAT	script/script.h	/^    OP_CAT = 0x7e,$/;"	e	enum:opcodetype
OP_CHECKLOCKTIMEVERIFY	script/script.h	/^    OP_CHECKLOCKTIMEVERIFY = 0xb1,$/;"	e	enum:opcodetype
OP_CHECKMULTISIG	script/script.h	/^    OP_CHECKMULTISIG = 0xae,$/;"	e	enum:opcodetype
OP_CHECKMULTISIGVERIFY	script/script.h	/^    OP_CHECKMULTISIGVERIFY = 0xaf,$/;"	e	enum:opcodetype
OP_CHECKSEQUENCEVERIFY	script/script.h	/^    OP_CHECKSEQUENCEVERIFY = 0xb2,$/;"	e	enum:opcodetype
OP_CHECKSIG	script/script.h	/^    OP_CHECKSIG = 0xac,$/;"	e	enum:opcodetype
OP_CHECKSIGVERIFY	script/script.h	/^    OP_CHECKSIGVERIFY = 0xad,$/;"	e	enum:opcodetype
OP_CODESEPARATOR	script/script.h	/^    OP_CODESEPARATOR = 0xab,$/;"	e	enum:opcodetype
OP_DEPTH	script/script.h	/^    OP_DEPTH = 0x74,$/;"	e	enum:opcodetype
OP_DIV	script/script.h	/^    OP_DIV = 0x96,$/;"	e	enum:opcodetype
OP_DROP	script/script.h	/^    OP_DROP = 0x75,$/;"	e	enum:opcodetype
OP_DUP	script/script.h	/^    OP_DUP = 0x76,$/;"	e	enum:opcodetype
OP_ELSE	script/script.h	/^    OP_ELSE = 0x67,$/;"	e	enum:opcodetype
OP_ENDIF	script/script.h	/^    OP_ENDIF = 0x68,$/;"	e	enum:opcodetype
OP_EQUAL	script/script.h	/^    OP_EQUAL = 0x87,$/;"	e	enum:opcodetype
OP_EQUALVERIFY	script/script.h	/^    OP_EQUALVERIFY = 0x88,$/;"	e	enum:opcodetype
OP_FALSE	script/script.h	/^    OP_FALSE = OP_0,$/;"	e	enum:opcodetype
OP_FROMALTSTACK	script/script.h	/^    OP_FROMALTSTACK = 0x6c,$/;"	e	enum:opcodetype
OP_GREATERTHAN	script/script.h	/^    OP_GREATERTHAN = 0xa0,$/;"	e	enum:opcodetype
OP_GREATERTHANOREQUAL	script/script.h	/^    OP_GREATERTHANOREQUAL = 0xa2,$/;"	e	enum:opcodetype
OP_HASH160	script/script.h	/^    OP_HASH160 = 0xa9,$/;"	e	enum:opcodetype
OP_HASH256	script/script.h	/^    OP_HASH256 = 0xaa,$/;"	e	enum:opcodetype
OP_IF	script/script.h	/^    OP_IF = 0x63,$/;"	e	enum:opcodetype
OP_IFDUP	script/script.h	/^    OP_IFDUP = 0x73,$/;"	e	enum:opcodetype
OP_INVALIDOPCODE	script/script.h	/^    OP_INVALIDOPCODE = 0xff,$/;"	e	enum:opcodetype
OP_INVERT	script/script.h	/^    OP_INVERT = 0x83,$/;"	e	enum:opcodetype
OP_LEFT	script/script.h	/^    OP_LEFT = 0x80,$/;"	e	enum:opcodetype
OP_LESSTHAN	script/script.h	/^    OP_LESSTHAN = 0x9f,$/;"	e	enum:opcodetype
OP_LESSTHANOREQUAL	script/script.h	/^    OP_LESSTHANOREQUAL = 0xa1,$/;"	e	enum:opcodetype
OP_LSHIFT	script/script.h	/^    OP_LSHIFT = 0x98,$/;"	e	enum:opcodetype
OP_MAX	script/script.h	/^    OP_MAX = 0xa4,$/;"	e	enum:opcodetype
OP_MIN	script/script.h	/^    OP_MIN = 0xa3,$/;"	e	enum:opcodetype
OP_MOD	script/script.h	/^    OP_MOD = 0x97,$/;"	e	enum:opcodetype
OP_MUL	script/script.h	/^    OP_MUL = 0x95,$/;"	e	enum:opcodetype
OP_NEGATE	script/script.h	/^    OP_NEGATE = 0x8f,$/;"	e	enum:opcodetype
OP_NIP	script/script.h	/^    OP_NIP = 0x77,$/;"	e	enum:opcodetype
OP_NOP	script/script.h	/^    OP_NOP = 0x61,$/;"	e	enum:opcodetype
OP_NOP1	script/script.h	/^    OP_NOP1 = 0xb0,$/;"	e	enum:opcodetype
OP_NOP10	script/script.h	/^    OP_NOP10 = 0xb9,$/;"	e	enum:opcodetype
OP_NOP2	script/script.h	/^    OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,$/;"	e	enum:opcodetype
OP_NOP3	script/script.h	/^    OP_NOP3 = OP_CHECKSEQUENCEVERIFY,$/;"	e	enum:opcodetype
OP_NOP4	script/script.h	/^    OP_NOP4 = 0xb3,$/;"	e	enum:opcodetype
OP_NOP5	script/script.h	/^    OP_NOP5 = 0xb4,$/;"	e	enum:opcodetype
OP_NOP6	script/script.h	/^    OP_NOP6 = 0xb5,$/;"	e	enum:opcodetype
OP_NOP7	script/script.h	/^    OP_NOP7 = 0xb6,$/;"	e	enum:opcodetype
OP_NOP8	script/script.h	/^    OP_NOP8 = 0xb7,$/;"	e	enum:opcodetype
OP_NOP9	script/script.h	/^    OP_NOP9 = 0xb8,$/;"	e	enum:opcodetype
OP_NOT	script/script.h	/^    OP_NOT = 0x91,$/;"	e	enum:opcodetype
OP_NOTIF	script/script.h	/^    OP_NOTIF = 0x64,$/;"	e	enum:opcodetype
OP_NUMEQUAL	script/script.h	/^    OP_NUMEQUAL = 0x9c,$/;"	e	enum:opcodetype
OP_NUMEQUALVERIFY	script/script.h	/^    OP_NUMEQUALVERIFY = 0x9d,$/;"	e	enum:opcodetype
OP_NUMNOTEQUAL	script/script.h	/^    OP_NUMNOTEQUAL = 0x9e,$/;"	e	enum:opcodetype
OP_OR	script/script.h	/^    OP_OR = 0x85,$/;"	e	enum:opcodetype
OP_OVER	script/script.h	/^    OP_OVER = 0x78,$/;"	e	enum:opcodetype
OP_PICK	script/script.h	/^    OP_PICK = 0x79,$/;"	e	enum:opcodetype
OP_PUBKEY	script/script.h	/^    OP_PUBKEY = 0xfe,$/;"	e	enum:opcodetype
OP_PUBKEYHASH	script/script.h	/^    OP_PUBKEYHASH = 0xfd,$/;"	e	enum:opcodetype
OP_PUBKEYS	script/script.h	/^    OP_PUBKEYS = 0xfb,$/;"	e	enum:opcodetype
OP_PUSHDATA1	script/script.h	/^    OP_PUSHDATA1 = 0x4c,$/;"	e	enum:opcodetype
OP_PUSHDATA2	script/script.h	/^    OP_PUSHDATA2 = 0x4d,$/;"	e	enum:opcodetype
OP_PUSHDATA4	script/script.h	/^    OP_PUSHDATA4 = 0x4e,$/;"	e	enum:opcodetype
OP_RESERVED	script/script.h	/^    OP_RESERVED = 0x50,$/;"	e	enum:opcodetype
OP_RESERVED1	script/script.h	/^    OP_RESERVED1 = 0x89,$/;"	e	enum:opcodetype
OP_RESERVED2	script/script.h	/^    OP_RESERVED2 = 0x8a,$/;"	e	enum:opcodetype
OP_RETURN	script/script.h	/^    OP_RETURN = 0x6a,$/;"	e	enum:opcodetype
OP_RIGHT	script/script.h	/^    OP_RIGHT = 0x81,$/;"	e	enum:opcodetype
OP_RIPEMD160	script/script.h	/^    OP_RIPEMD160 = 0xa6,$/;"	e	enum:opcodetype
OP_ROLL	script/script.h	/^    OP_ROLL = 0x7a,$/;"	e	enum:opcodetype
OP_ROT	script/script.h	/^    OP_ROT = 0x7b,$/;"	e	enum:opcodetype
OP_RSHIFT	script/script.h	/^    OP_RSHIFT = 0x99,$/;"	e	enum:opcodetype
OP_SHA1	script/script.h	/^    OP_SHA1 = 0xa7,$/;"	e	enum:opcodetype
OP_SHA256	script/script.h	/^    OP_SHA256 = 0xa8,$/;"	e	enum:opcodetype
OP_SIZE	script/script.h	/^    OP_SIZE = 0x82,$/;"	e	enum:opcodetype
OP_SMALLINTEGER	script/script.h	/^    OP_SMALLINTEGER = 0xfa,$/;"	e	enum:opcodetype
OP_SUB	script/script.h	/^    OP_SUB = 0x94,$/;"	e	enum:opcodetype
OP_SUBSTR	script/script.h	/^    OP_SUBSTR = 0x7f,$/;"	e	enum:opcodetype
OP_SWAP	script/script.h	/^    OP_SWAP = 0x7c,$/;"	e	enum:opcodetype
OP_TOALTSTACK	script/script.h	/^    OP_TOALTSTACK = 0x6b,$/;"	e	enum:opcodetype
OP_TRUE	script/script.h	/^    OP_TRUE=OP_1,$/;"	e	enum:opcodetype
OP_TUCK	script/script.h	/^    OP_TUCK = 0x7d,$/;"	e	enum:opcodetype
OP_VER	script/script.h	/^    OP_VER = 0x62,$/;"	e	enum:opcodetype
OP_VERIF	script/script.h	/^    OP_VERIF = 0x65,$/;"	e	enum:opcodetype
OP_VERIFY	script/script.h	/^    OP_VERIFY = 0x69,$/;"	e	enum:opcodetype
OP_VERNOTIF	script/script.h	/^    OP_VERNOTIF = 0x66,$/;"	e	enum:opcodetype
OP_WITHIN	script/script.h	/^    OP_WITHIN = 0xa5,$/;"	e	enum:opcodetype
OP_XOR	script/script.h	/^    OP_XOR = 0x86,$/;"	e	enum:opcodetype
ORPHAN_TX_EXPIRE_INTERVAL	net_processing.h	/^static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;$/;"	v
ORPHAN_TX_EXPIRE_TIME	net_processing.h	/^static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;$/;"	v
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL	secp256k1/Makefile	/^OTOOL = $/;"	m
OTOOL	univalue/Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
OTOOL64	secp256k1/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	univalue/Makefile	/^OTOOL64 = $/;"	m
OUTPOINT	test/coins_tests.cpp	/^const static COutPoint OUTPOINT;$/;"	v	file:
OUTPUT_SIZE	crypto/hmac_sha256.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CHMAC_SHA256
OUTPUT_SIZE	crypto/hmac_sha512.h	/^    static const size_t OUTPUT_SIZE = 64;$/;"	m	class:CHMAC_SHA512
OUTPUT_SIZE	crypto/ripemd160.h	/^    static const size_t OUTPUT_SIZE = 20;$/;"	m	class:CRIPEMD160
OUTPUT_SIZE	crypto/sha1.h	/^    static const size_t OUTPUT_SIZE = 20;$/;"	m	class:CSHA1
OUTPUT_SIZE	crypto/sha256.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CSHA256
OUTPUT_SIZE	crypto/sha512.h	/^    static const size_t OUTPUT_SIZE = 64;$/;"	m	class:CSHA512
OUTPUT_SIZE	hash.h	/^    static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;$/;"	m	class:CHash160
OUTPUT_SIZE	hash.h	/^    static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;$/;"	m	class:CHash256
Offline	qt/transactionrecord.h	/^        Offline,            \/**< Not sent to any other nodes **\/$/;"	e	enum:TransactionStatus::Status
OldDecrypt	wallet/test/crypto_tests.cpp	/^bool OldDecrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext, const unsigned char chKey[32], const unsigned char chIV[16])$/;"	f
OldEncrypt	wallet/test/crypto_tests.cpp	/^bool OldEncrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext, const unsigned char chKey[32], const unsigned char chIV[16])$/;"	f
OldInfoLogFileName	leveldb/db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OldSetKeyFromPassphrase	wallet/test/crypto_tests.cpp	/^bool OldSetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod, unsigned char* chKey, unsigned char* chIV)$/;"	f
OnPreCommand	rpc/server.cpp	/^void RPCServer::OnPreCommand(std::function<void (const CRPCCommand&)> slot)$/;"	f	class:RPCServer
OnRPCPreCommand	init.cpp	/^void OnRPCPreCommand(const CRPCCommand& cmd)$/;"	f
OnRPCStarted	init.cpp	/^void OnRPCStarted()$/;"	f
OnRPCStopped	init.cpp	/^void OnRPCStopped()$/;"	f
OnStarted	rpc/server.cpp	/^void RPCServer::OnStarted(std::function<void ()> slot)$/;"	f	class:RPCServer
OnStopped	rpc/server.cpp	/^void RPCServer::OnStopped(std::function<void ()> slot)$/;"	f	class:RPCServer
OnceType	leveldb/port/port_example.h	/^typedef intptr_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	leveldb/port/port_posix.h	/^typedef pthread_once_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	leveldb/port/port_win.h	/^    OnceType(bool f) : init_(f) {}$/;"	f	class:leveldb::port::OnceType
OnceType	leveldb/port/port_win.h	/^    OnceType(const OnceType &once) : init_(once.init_) {}$/;"	f	class:leveldb::port::OnceType
OnceType	leveldb/port/port_win.h	/^class OnceType {$/;"	c	namespace:leveldb::port
OneArray	test/arith_uint256_tests.cpp	/^const unsigned char OneArray[] =$/;"	v
OneArray	test/uint256_tests.cpp	/^const unsigned char OneArray[] =$/;"	v
OneIn	leveldb/util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
OneL	test/arith_uint256_tests.cpp	/^const arith_uint256 OneL = arith_uint256V(std::vector<unsigned char>(OneArray,OneArray+32));$/;"	v
OneL	test/uint256_tests.cpp	/^const uint256 OneL = uint256(std::vector<unsigned char>(OneArray,OneArray+32));$/;"	v
OneS	test/uint256_tests.cpp	/^const uint160 OneS = uint160(std::vector<unsigned char>(OneArray,OneArray+20));$/;"	v
Open	leveldb/db/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark	file:
Open	leveldb/db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::DB
Open	leveldb/db/recovery_test.cc	/^  void Open(Options* options = NULL) {$/;"	f	class:leveldb::RecoveryTest
Open	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark
Open	leveldb/doc/bench/db_bench_tree_db.cc	/^    void Open(bool sync) {$/;"	f	class:leveldb::Benchmark	file:
Open	leveldb/table/table.cc	/^Status Table::Open(const Options& options,$/;"	f	class:leveldb::Table
Open	wallet/db.cpp	/^bool CDBEnv::Open(const fs::path& pathIn)$/;"	f	class:CDBEnv
OpenBench	leveldb/db/db_bench.cc	/^  void OpenBench(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
OpenBlockFile	validation.cpp	/^FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {$/;"	f
OpenCompactionOutputFile	leveldb/db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
OpenDB	leveldb/db/fault_injection_test.cc	/^  Status OpenDB() {$/;"	f	class:leveldb::FaultInjectionTest
OpenDebugLog	util.cpp	/^void OpenDebugLog()$/;"	f
OpenDiskFile	validation.cpp	/^static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)$/;"	f	file:
OpenNetworkConnection	net.cpp	/^bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)$/;"	f	class:CConnman
OpenURIDialog	qt/openuridialog.cpp	/^OpenURIDialog::OpenURIDialog(QWidget *parent) :$/;"	f	class:OpenURIDialog
OpenURIDialog	qt/openuridialog.h	/^class OpenURIDialog : public QDialog$/;"	c
OpenUndoFile	validation.cpp	/^static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {$/;"	f	file:
OpenUntilBlock	qt/transactionrecord.h	/^        OpenUntilBlock,     \/**< Transaction not yet final, waiting for block *\/$/;"	e	enum:TransactionStatus::Status
OpenUntilDate	qt/transactionrecord.h	/^        OpenUntilDate,      \/**< Transaction not yet final, waiting for date *\/$/;"	e	enum:TransactionStatus::Status
OptionConfig	leveldb/db/db_test.cc	/^  enum OptionConfig {$/;"	g	class:leveldb::DBTest	file:
OptionID	qt/optionsmodel.h	/^    enum OptionID {$/;"	g	class:OptionsModel
OptionIDRowCount	qt/optionsmodel.h	/^        OptionIDRowCount,$/;"	e	enum:OptionsModel::OptionID
Options	leveldb/include/leveldb/options.h	/^struct Options {$/;"	s	namespace:leveldb
Options	leveldb/util/options.cc	/^Options::Options()$/;"	f	class:leveldb::Options
Options	miner.cpp	/^BlockAssembler::Options::Options() {$/;"	f	class:BlockAssembler::Options
Options	miner.h	/^    struct Options {$/;"	s	class:BlockAssembler
Options	net.h	/^    struct Options$/;"	s	class:CConnman
OptionsDialog	qt/optionsdialog.cpp	/^OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :$/;"	f	class:OptionsDialog
OptionsDialog	qt/optionsdialog.h	/^class OptionsDialog : public QDialog$/;"	c
OptionsModel	qt/optionsmodel.cpp	/^OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :$/;"	f	class:OptionsModel
OptionsModel	qt/optionsmodel.h	/^class OptionsModel : public QAbstractListModel$/;"	c
Order	leveldb/doc/bench/db_bench_sqlite3.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Order	leveldb/doc/bench/db_bench_tree_db.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Other	qt/transactionrecord.h	/^        Other,$/;"	e	enum:TransactionRecord::Type
OutboundTargetReached	net.cpp	/^bool CConnman::OutboundTargetReached(bool historicalBlockServingLimit)$/;"	f	class:CConnman
Output	crypto/chacha20.cpp	/^void ChaCha20::Output(unsigned char* c, size_t bytes)$/;"	f	class:ChaCha20
Output	leveldb/db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState	file:
Output	script/sign.cpp	/^    SignatureData Output() const {$/;"	f	struct:__anon102::Stacks
OutputTx	wificoin-tx.cpp	/^static void OutputTx(const CTransaction& tx)$/;"	f	file:
OutputTxHash	wificoin-tx.cpp	/^static void OutputTxHash(const CTransaction& tx)$/;"	f	file:
OutputTxHex	wificoin-tx.cpp	/^static void OutputTxHex(const CTransaction& tx)$/;"	f	file:
OutputTxJSON	wificoin-tx.cpp	/^static void OutputTxJSON(const CTransaction& tx)$/;"	f	file:
OverlapInLevel	leveldb/db/version_set.cc	/^bool Version::OverlapInLevel(int level,$/;"	f	class:leveldb::Version
Overlaps	leveldb/db/version_set_test.cc	/^  bool Overlaps(const char* smallest, const char* largest) {$/;"	f	class:leveldb::FindFileTest
OverrideStream	streams.h	/^    OverrideStream(Stream* stream_, int nType_, int nVersion_) : stream(stream_), nType(nType_), nVersion(nVersion_) {}$/;"	f	class:OverrideStream
OverrideStream	streams.h	/^class OverrideStream$/;"	c
OverviewPage	qt/overviewpage.cpp	/^OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :$/;"	f	class:OverviewPage
OverviewPage	qt/overviewpage.h	/^class OverviewPage : public QWidget$/;"	c
PACKAGE	Makefile	/^PACKAGE = wificoin$/;"	m
PACKAGE	secp256k1/Makefile	/^PACKAGE = libsecp256k1$/;"	m
PACKAGE	secp256k1/src/libsecp256k1-config.h	73;"	d
PACKAGE	univalue/Makefile	/^PACKAGE = univalue$/;"	m
PACKAGE	univalue/univalue-config.h	39;"	d
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = https:\/\/github.com\/wificoin\/wificoin\/issues$/;"	m
PACKAGE_BUGREPORT	config/wificoin-config.h	351;"	d
PACKAGE_BUGREPORT	secp256k1/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_BUGREPORT	secp256k1/src/libsecp256k1-config.h	76;"	d
PACKAGE_BUGREPORT	univalue/Makefile	/^PACKAGE_BUGREPORT = http:\/\/github.com\/jgarzik\/univalue\/$/;"	m
PACKAGE_BUGREPORT	univalue/univalue-config.h	42;"	d
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = WiFicoin Core$/;"	m
PACKAGE_NAME	config/wificoin-config.h	354;"	d
PACKAGE_NAME	secp256k1/Makefile	/^PACKAGE_NAME = libsecp256k1$/;"	m
PACKAGE_NAME	secp256k1/src/libsecp256k1-config.h	79;"	d
PACKAGE_NAME	univalue/Makefile	/^PACKAGE_NAME = univalue$/;"	m
PACKAGE_NAME	univalue/univalue-config.h	45;"	d
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = WiFicoin Core 0.15.1$/;"	m
PACKAGE_STRING	config/wificoin-config.h	357;"	d
PACKAGE_STRING	secp256k1/Makefile	/^PACKAGE_STRING = libsecp256k1 0.1$/;"	m
PACKAGE_STRING	secp256k1/src/libsecp256k1-config.h	82;"	d
PACKAGE_STRING	univalue/Makefile	/^PACKAGE_STRING = univalue 1.0.2$/;"	m
PACKAGE_STRING	univalue/univalue-config.h	48;"	d
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = wificoin$/;"	m
PACKAGE_TARNAME	config/wificoin-config.h	360;"	d
PACKAGE_TARNAME	secp256k1/Makefile	/^PACKAGE_TARNAME = libsecp256k1$/;"	m
PACKAGE_TARNAME	secp256k1/src/libsecp256k1-config.h	85;"	d
PACKAGE_TARNAME	univalue/Makefile	/^PACKAGE_TARNAME = univalue$/;"	m
PACKAGE_TARNAME	univalue/univalue-config.h	51;"	d
PACKAGE_URL	Makefile	/^PACKAGE_URL = https:\/\/wificoincore.org\/$/;"	m
PACKAGE_URL	config/wificoin-config.h	363;"	d
PACKAGE_URL	secp256k1/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	secp256k1/src/libsecp256k1-config.h	88;"	d
PACKAGE_URL	univalue/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	univalue/univalue-config.h	54;"	d
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 0.15.1$/;"	m
PACKAGE_VERSION	config/wificoin-config.h	366;"	d
PACKAGE_VERSION	secp256k1/Makefile	/^PACKAGE_VERSION = 0.1$/;"	m
PACKAGE_VERSION	secp256k1/src/libsecp256k1-config.h	91;"	d
PACKAGE_VERSION	univalue/Makefile	/^PACKAGE_VERSION = 1.0.2$/;"	m
PACKAGE_VERSION	univalue/univalue-config.h	57;"	d
PASTE	sync.h	172;"	d
PASTE2	sync.h	173;"	d
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	secp256k1/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	univalue/Makefile	/^PATH_SEPARATOR = :$/;"	m
PAYTXFEE	policy/fees.h	/^    PAYTXFEE,$/;"	m	class:FeeReason
PIC_FLAGS	Makefile	/^PIC_FLAGS = -fPIC$/;"	m
PIE_FLAGS	Makefile	/^PIE_FLAGS = -fPIE$/;"	m
PING	protocol.cpp	/^const char *PING="ping";$/;"	m	namespace:NetMsgType	file:
PING_COLUMN_WIDTH	qt/rpcconsole.h	/^        PING_COLUMN_WIDTH = 80,$/;"	e	enum:RPCConsole::ColumnWidths
PING_INTERVAL	net.h	/^static const int PING_INTERVAL = 2 * 60;$/;"	v
PKG_CONFIG	Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	secp256k1/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG_LIBDIR	Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	secp256k1/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_PATH	Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	secp256k1/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	10;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	14;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	20;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	22;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	28;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	30;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	36;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	50;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	82;"	d
PONG	protocol.cpp	/^const char *PONG="pong";$/;"	m	namespace:NetMsgType	file:
PORT	Makefile	/^PORT = $/;"	m
PORT	secp256k1/Makefile	/^PORT = $/;"	m
PORT_ATOMIC_POINTER_H_	leveldb/port/atomic_pointer.h	19;"	d
POST	httpserver.h	/^        POST,$/;"	e	enum:HTTPRequest::RequestMethod
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	secp256k1/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	univalue/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	secp256k1/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	univalue/Makefile	/^POST_UNINSTALL = :$/;"	m
PREVECTOR_SIZE	bench/checkqueue.cpp	/^static const int PREVECTOR_SIZE = 28;$/;"	v	file:
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	secp256k1/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	univalue/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	secp256k1/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	univalue/Makefile	/^PRE_UNINSTALL = :$/;"	m
PROCESS_DEP_ENABLE	init.cpp	872;"	d	file:
PROGNAMES	leveldb/Makefile	/^PROGNAMES := $(notdir $(TESTS) $(UTILS))$/;"	m
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
PROGRAMS	secp256k1/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PROGRAMS	univalue/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PROTECTION_LEVEL_UNRESTRICTED	net.cpp	60;"	d	file:
PROTOBUF_CFLAGS	Makefile	/^PROTOBUF_CFLAGS = $/;"	m
PROTOBUF_LIBS	Makefile	/^PROTOBUF_LIBS = $/;"	m
PROTOC	Makefile	/^PROTOC = $/;"	m
PROTOCOL_VERSION	version.h	/^static const int PROTOCOL_VERSION = 70015;$/;"	v
PRUNED	test/coins_tests.cpp	/^const static CAmount PRUNED = -1;$/;"	v	file:
PTHREAD_CC	Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CFLAGS	Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_LIBS	Makefile	/^PTHREAD_LIBS = $/;"	m
PT_GUARDED_BY	threadsafety.h	20;"	d
PT_GUARDED_BY	threadsafety.h	39;"	d
PT_GUARDED_VAR	threadsafety.h	21;"	d
PT_GUARDED_VAR	threadsafety.h	40;"	d
PUBKEY_ADDRESS	chainparams.h	/^        PUBKEY_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
PUT	httpserver.h	/^        PUT$/;"	e	enum:HTTPRequest::RequestMethod
PYTHON	Makefile	/^PYTHON = \/usr\/bin\/python2.7$/;"	m
PYTHONPATH	Makefile	/^PYTHONPATH = $/;"	m
PackSequenceAndType	leveldb/db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
Pair	univalue/include/univalue.h	/^static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)$/;"	f
Pair	univalue/include/univalue.h	/^static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)$/;"	f
Pair	univalue/include/univalue.h	/^static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)$/;"	f
Pair	univalue/include/univalue.h	/^static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)$/;"	f
Pair	univalue/include/univalue.h	/^static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)$/;"	f
Pair	univalue/include/univalue.h	/^static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)$/;"	f
Pair	univalue/include/univalue.h	/^static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)$/;"	f
Pair	univalue/include/univalue.h	/^static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)$/;"	f
Pair	univalue/include/univalue.h	/^static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)$/;"	f
ParameterInteraction	wallet/wallet.cpp	/^bool CWallet::ParameterInteraction()$/;"	f	class:CWallet
Params	chainparams.cpp	/^const CChainParams &Params() {$/;"	f
Params	consensus/params.h	/^struct Params {$/;"	s	namespace:Consensus
ParseConfirmTarget	rpc/mining.cpp	/^unsigned int ParseConfirmTarget(const UniValue& value)$/;"	f
ParseDataFormat	rest.cpp	/^static enum RetFormat ParseDataFormat(std::string& param, const std::string& strReq)$/;"	f	file:
ParseDouble	univalue/lib/univalue.cpp	/^bool ParseDouble(const std::string& str, double *out)$/;"	f	namespace:__anon78
ParseDouble	utilstrencodings.cpp	/^bool ParseDouble(const std::string& str, double *out)$/;"	f
ParseFileName	leveldb/db/filename.cc	/^bool ParseFileName(const std::string& fname,$/;"	f	namespace:leveldb
ParseFixedPoint	utilstrencodings.cpp	/^bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)$/;"	f
ParseHashO	rpc/server.cpp	/^uint256 ParseHashO(const UniValue& o, std::string strKey)$/;"	f
ParseHashStr	core_read.cpp	/^uint256 ParseHashStr(const std::string& strHex, const std::string& strName)$/;"	f
ParseHashStr	rest.cpp	/^static bool ParseHashStr(const std::string& strReq, uint256& v)$/;"	f	file:
ParseHashUV	core_read.cpp	/^uint256 ParseHashUV(const UniValue& v, const std::string& strName)$/;"	f
ParseHashV	rpc/server.cpp	/^uint256 ParseHashV(const UniValue& v, std::string strName)$/;"	f
ParseHex	utilstrencodings.cpp	/^std::vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	utilstrencodings.cpp	/^std::vector<unsigned char> ParseHex(const std::string& str)$/;"	f
ParseHexO	rpc/server.cpp	/^std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey)$/;"	f
ParseHexUV	core_read.cpp	/^std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)$/;"	f
ParseHexV	rpc/server.cpp	/^std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName)$/;"	f
ParseHex_expected	test/util_tests.cpp	/^static const unsigned char ParseHex_expected[65] = {$/;"	v	file:
ParseInt32	univalue/lib/univalue.cpp	/^bool ParseInt32(const std::string& str, int32_t *out)$/;"	f	namespace:__anon78
ParseInt32	utilstrencodings.cpp	/^bool ParseInt32(const std::string& str, int32_t *out)$/;"	f
ParseInt64	univalue/lib/univalue.cpp	/^bool ParseInt64(const std::string& str, int64_t *out)$/;"	f	namespace:__anon78
ParseInt64	utilstrencodings.cpp	/^bool ParseInt64(const std::string& str, int64_t *out)$/;"	f
ParseInternalKey	leveldb/db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	leveldb/db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon20::DBIter
ParseMoney	utilmoneystr.cpp	/^bool ParseMoney(const char* pszIn, CAmount& nRet)$/;"	f
ParseMoney	utilmoneystr.cpp	/^bool ParseMoney(const std::string& str, CAmount& nRet)$/;"	f
ParseNetwork	netbase.cpp	/^enum Network ParseNetwork(std::string net) {$/;"	f
ParseNextKey	leveldb/table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter	file:
ParseNonRFCJSONValue	rpc/client.cpp	/^UniValue ParseNonRFCJSONValue(const std::string& strVal)$/;"	f
ParseParameters	util.cpp	/^void ArgsManager::ParseParameters(int argc, const char* const argv[])$/;"	f	class:ArgsManager
ParsePrechecks	univalue/lib/univalue.cpp	/^static bool ParsePrechecks(const std::string& str)$/;"	f	namespace:__anon78
ParsePrechecks	utilstrencodings.cpp	/^static bool ParsePrechecks(const std::string& str)$/;"	f	file:
ParseScript	core_read.cpp	/^CScript ParseScript(const std::string& s)$/;"	f
ParseScriptError	test/script_tests.cpp	/^ScriptError_t ParseScriptError(const std::string &name)$/;"	f
ParseScriptFlags	test/transaction_tests.cpp	/^unsigned int ParseScriptFlags(std::string strFlags)$/;"	f
ParseTorReplyMapping	torcontrol.cpp	/^static std::map<std::string,std::string> ParseTorReplyMapping(const std::string &s)$/;"	f	file:
ParseUInt32	utilstrencodings.cpp	/^bool ParseUInt32(const std::string& str, uint32_t *out)$/;"	f
ParseUInt64	utilstrencodings.cpp	/^bool ParseUInt64(const std::string& str, uint64_t *out)$/;"	f
ParsedInternalKey	leveldb/db/dbformat.h	/^  ParsedInternalKey() { }  \/\/ Intentionally left uninitialized (for speed)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	leveldb/db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	leveldb/db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
PartialCompactTestPreFault	leveldb/db/fault_injection_test.cc	/^  void PartialCompactTestPreFault(int num_pre_sync, int num_post_sync) {$/;"	f	class:leveldb::FaultInjectionTest
PartialCompactTestReopenWithFault	leveldb/db/fault_injection_test.cc	/^  void PartialCompactTestReopenWithFault(ResetMethod reset_method,$/;"	f	class:leveldb::FaultInjectionTest
PartiallyDownloadedBlock	blockencodings.h	/^    PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}$/;"	f	class:PartiallyDownloadedBlock
PartiallyDownloadedBlock	blockencodings.h	/^class PartiallyDownloadedBlock {$/;"	c
PaymentRequestExpired	qt/walletmodel.h	/^        PaymentRequestExpired$/;"	e	enum:WalletModel::StatusCode
PaymentRequestPlus	qt/paymentrequestplus.h	/^    PaymentRequestPlus() { }$/;"	f	class:PaymentRequestPlus
PaymentRequestPlus	qt/paymentrequestplus.h	/^class PaymentRequestPlus$/;"	c
PaymentServer	qt/paymentserver.cpp	/^PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :$/;"	f	class:PaymentServer
PaymentServer	qt/paymentserver.h	/^class PaymentServer : public QObject$/;"	c
PaymentServerTests	qt/test/paymentservertests.h	/^class PaymentServerTests : public QObject$/;"	c
PeerHasHeader	net_processing.cpp	/^bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)$/;"	f	namespace:__anon50
PeerLogicValidation	net_processing.cpp	/^PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler) : connman(connmanIn), m_stale_tip_check_time(0) {$/;"	f	class:PeerLogicValidation
PeerLogicValidation	net_processing.h	/^class PeerLogicValidation : public CValidationInterface, public NetEventsInterface {$/;"	c
PeerTableModel	qt/peertablemodel.cpp	/^PeerTableModel::PeerTableModel(ClientModel *parent) :$/;"	f	class:PeerTableModel
PeerTableModel	qt/peertablemodel.h	/^class PeerTableModel : public QAbstractTableModel$/;"	c
PeerTablePriv	qt/peertablemodel.cpp	/^class PeerTablePriv$/;"	c	file:
PerBlockConnectTrace	validation.cpp	/^    PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}$/;"	f	struct:PerBlockConnectTrace
PerBlockConnectTrace	validation.cpp	/^struct PerBlockConnectTrace {$/;"	s	file:
Percentile	leveldb/util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
PeriodicFlush	wallet/db.cpp	/^bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)$/;"	f	class:CDB
PickCompaction	leveldb/db/version_set.cc	/^Compaction* VersionSet::PickCompaction() {$/;"	f	class:leveldb::VersionSet
PickLevelForMemTableOutput	leveldb/db/version_set.cc	/^int Version::PickLevelForMemTableOutput($/;"	f	class:leveldb::Version
PickRandomKey	leveldb/table/table_test.cc	/^  std::string PickRandomKey(Random* rnd, const std::vector<std::string>& keys) {$/;"	f	class:leveldb::Harness
Ping	qt/peertablemodel.h	/^        Ping = 3$/;"	e	enum:PeerTableModel::ColumnIndex
PlatformStyle	qt/platformstyle.cpp	/^PlatformStyle::PlatformStyle(const QString &_name, bool _imagesOnButtons, bool _colorizeIcons, bool _useExtraSpacing):$/;"	f	class:PlatformStyle
PlatformStyle	qt/platformstyle.h	/^class PlatformStyle$/;"	c
PoissonNextSend	net.cpp	/^int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {$/;"	f
PosixEnv	leveldb/util/env_posix.cc	/^PosixEnv::PosixEnv()$/;"	f	class:leveldb::__anon11::PosixEnv
PosixEnv	leveldb/util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon11	file:
PosixFileLock	leveldb/util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon11	file:
PosixLockTable	leveldb/util/env_posix.cc	/^class PosixLockTable {$/;"	c	namespace:leveldb::__anon11	file:
PosixLockedPageAllocator	support/lockedpool.cpp	/^PosixLockedPageAllocator::PosixLockedPageAllocator()$/;"	f	class:PosixLockedPageAllocator
PosixLockedPageAllocator	support/lockedpool.cpp	/^class PosixLockedPageAllocator: public LockedPageAllocator$/;"	c	file:
PosixLogger	leveldb/util/posix_logger.h	/^  PosixLogger(FILE* f, uint64_t (*gettid)()) : file_(f), gettid_(gettid) { }$/;"	f	class:leveldb::PosixLogger
PosixLogger	leveldb/util/posix_logger.h	/^class PosixLogger : public Logger {$/;"	c	namespace:leveldb
PosixMmapReadableFile	leveldb/util/env_posix.cc	/^  PosixMmapReadableFile(const std::string& fname, void* base, size_t length,$/;"	f	class:leveldb::__anon11::PosixMmapReadableFile
PosixMmapReadableFile	leveldb/util/env_posix.cc	/^class PosixMmapReadableFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon11	file:
PosixRandomAccessFile	leveldb/util/env_posix.cc	/^  PosixRandomAccessFile(const std::string& fname, int fd, Limiter* limiter)$/;"	f	class:leveldb::__anon11::PosixRandomAccessFile
PosixRandomAccessFile	leveldb/util/env_posix.cc	/^class PosixRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon11	file:
PosixSequentialFile	leveldb/util/env_posix.cc	/^  PosixSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon11::PosixSequentialFile
PosixSequentialFile	leveldb/util/env_posix.cc	/^class PosixSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon11	file:
PosixWritableFile	leveldb/util/env_posix.cc	/^  PosixWritableFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon11::PosixWritableFile
PosixWritableFile	leveldb/util/env_posix.cc	/^class PosixWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon11	file:
PreCommand	rpc/server.cpp	/^    boost::signals2::signal<void (const CRPCCommand&)> PreCommand;$/;"	m	struct:CRPCSignals	file:
PreciousBlock	validation.cpp	/^bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)$/;"	f
PrecomputedTransactionData	script/interpreter.cpp	/^PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo)$/;"	f	class:PrecomputedTransactionData
PrecomputedTransactionData	script/interpreter.h	/^struct PrecomputedTransactionData$/;"	s
PrefilledTransaction	blockencodings.h	/^struct PrefilledTransaction {$/;"	s
Prev	leveldb/db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon20::DBIter
Prev	leveldb/db/db_test.cc	/^    virtual void Prev() { --iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Prev	leveldb/db/memtable.cc	/^  virtual void Prev() { iter_.Prev(); }$/;"	f	class:leveldb::MemTableIterator
Prev	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	leveldb/db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Prev	leveldb/table/block.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Block::Iter
Prev	leveldb/table/iterator.cc	/^  virtual void Prev() { assert(false); }$/;"	f	class:leveldb::__anon42::EmptyIterator
Prev	leveldb/table/iterator_wrapper.h	/^  void Prev()               { assert(iter_); iter_->Prev();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Prev	leveldb/table/merger.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::__anon36::MergingIterator
Prev	leveldb/table/table_test.cc	/^  virtual void Prev() { iter_->Prev(); }$/;"	f	class:leveldb::KeyConvertingIterator
Prev	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
PrevLogNumber	leveldb/db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
PrevectorClear	bench/prevector_destructor.cpp	/^BENCHMARK(PrevectorClear);$/;"	v
PrevectorClear	bench/prevector_destructor.cpp	/^static void PrevectorClear(benchmark::State& state)$/;"	f	file:
PrevectorDestructor	bench/prevector_destructor.cpp	/^BENCHMARK(PrevectorDestructor);$/;"	v
PrevectorDestructor	bench/prevector_destructor.cpp	/^static void PrevectorDestructor(benchmark::State& state)$/;"	f	file:
PrintContents	leveldb/db/write_batch_test.cc	/^static std::string PrintContents(WriteBatch* b) {$/;"	f	namespace:leveldb
PrintEnvironment	leveldb/db/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintExceptionContinue	util.cpp	/^void PrintExceptionContinue(const std::exception* pex, const char* pszThread)$/;"	f
PrintHeader	leveldb/db/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintLockContention	sync.cpp	/^void PrintLockContention(const char* pszName, const char* pszFile, int nLine)$/;"	f
PrintLogContents	leveldb/db/dumpfile.cc	/^Status PrintLogContents(Env* env, const std::string& fname,$/;"	f	namespace:leveldb::__anon19
PrintStats	leveldb/db/db_bench.cc	/^  void PrintStats(const char* key) {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	leveldb/db/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrioritiseTransaction	txmempool.cpp	/^void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta)$/;"	f	class:CTxMemPool
Process	wallet/wallet.cpp	/^    void Process(const CScript &script) {$/;"	f	class:CAffectedKeysVisitor
ProcessBlockAvailability	net_processing.cpp	/^void ProcessBlockAvailability(NodeId nodeid) {$/;"	f	namespace:__anon50
ProcessGetData	net_processing.cpp	/^void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)$/;"	f	file:
ProcessHeadersMessage	net_processing.cpp	/^bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool punish_duplicate_invalid)$/;"	f	file:
ProcessImport	wallet/rpcdump.cpp	/^UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp)$/;"	f
ProcessMantissaDigit	utilstrencodings.cpp	/^static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)$/;"	f	file:
ProcessMessage	net_processing.cpp	/^bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)$/;"	f	file:
ProcessMessages	net_processing.cpp	/^bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)$/;"	f	class:PeerLogicValidation
ProcessNewBlock	validation.cpp	/^bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)$/;"	f
ProcessNewBlockHeaders	validation.cpp	/^bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex, CBlockHeader *first_invalid)$/;"	f
ProcessOneShot	net.cpp	/^void CConnman::ProcessOneShot()$/;"	f	class:CConnman
ProcessQueue	scheduler.cpp	/^void SingleThreadedSchedulerClient::ProcessQueue() {$/;"	f	class:SingleThreadedSchedulerClient
ProduceSignature	script/sign.cpp	/^bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)$/;"	f
ProgressBar	qt/guiutil.h	/^    class ProgressBar : public ClickableProgressBar$/;"	c	namespace:GUIUtil
ProgressBar	qt/guiutil.h	/^    typedef ClickableProgressBar ProgressBar;$/;"	t	namespace:GUIUtil
Property	leveldb/db/corruption_test.cc	/^  int Property(const std::string& name) {$/;"	f	class:leveldb::CorruptionTest
ProxyAddressValidator	qt/optionsdialog.cpp	/^ProxyAddressValidator::ProxyAddressValidator(QObject *parent) :$/;"	f	class:ProxyAddressValidator
ProxyAddressValidator	qt/optionsdialog.h	/^class ProxyAddressValidator : public QValidator$/;"	c
ProxyCredentials	netbase.cpp	/^struct ProxyCredentials$/;"	s	file:
ProxyIP	qt/optionsmodel.h	/^        ProxyIP,                \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ProxyIPTor	qt/optionsmodel.h	/^        ProxyIPTor,             \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ProxyPort	qt/optionsmodel.h	/^        ProxyPort,              \/\/ int$/;"	e	enum:OptionsModel::OptionID
ProxyPortTor	qt/optionsmodel.h	/^        ProxyPortTor,           \/\/ int$/;"	e	enum:OptionsModel::OptionID
ProxyUse	qt/optionsmodel.h	/^        ProxyUse,               \/\/ bool$/;"	e	enum:OptionsModel::OptionID
ProxyUseTor	qt/optionsmodel.h	/^        ProxyUseTor,            \/\/ bool$/;"	e	enum:OptionsModel::OptionID
Prune	leveldb/include/leveldb/cache.h	/^  virtual void Prune() {}$/;"	f	class:leveldb::Cache
Prune	leveldb/util/cache.cc	/^  virtual void Prune() {$/;"	f	class:leveldb::__anon13::ShardedLRUCache
Prune	leveldb/util/cache.cc	/^void LRUCache::Prune() {$/;"	f	class:leveldb::__anon13::LRUCache
PruneAfterHeight	chainparams.h	/^    uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }$/;"	f	class:CChainParams
PruneAndFlush	validation.cpp	/^void PruneAndFlush() {$/;"	f
PruneBlockFilesManual	validation.cpp	/^void PruneBlockFilesManual(int nManualPruneHeight)$/;"	f
PruneBlockIndexCandidates	validation.cpp	/^static void PruneBlockIndexCandidates() {$/;"	f	file:
PruneOneBlockFile	validation.cpp	/^void PruneOneBlockFile(const int fileNumber)$/;"	f
PthreadCall	leveldb/port/port_posix.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	leveldb/util/env_posix.cc	/^  void PthreadCall(const char* label, int result) {$/;"	f	class:leveldb::__anon11::PosixEnv	file:
Push	test/script_tests.cpp	/^    TestBuilder& Push(const CPubKey& pubkey)$/;"	f	class:__anon80::TestBuilder
Push	test/script_tests.cpp	/^    TestBuilder& Push(const CScript& _script) {$/;"	f	class:__anon80::TestBuilder
Push	test/script_tests.cpp	/^    TestBuilder& Push(const std::string& hex)$/;"	f	class:__anon80::TestBuilder
PushAddress	net.h	/^    void PushAddress(const CAddress& _addr, FastRandomContext &insecure_rand)$/;"	f	class:CNode
PushAll	script/sign.cpp	/^static CScript PushAll(const std::vector<valtype>& values)$/;"	f	file:
PushAll	test/transaction_tests.cpp	/^static CScript PushAll(const std::vector<valtype>& values)$/;"	f	file:
PushBlockHash	net.h	/^    void PushBlockHash(const uint256 &hash)$/;"	f	class:CNode
PushInventory	net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	net.cpp	/^void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)$/;"	f	class:CConnman
PushNodeVersion	net_processing.cpp	/^void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)$/;"	f	namespace:__anon50
PushRedeem	test/script_tests.cpp	/^    TestBuilder& PushRedeem()$/;"	f	class:__anon80::TestBuilder
PushSig	test/script_tests.cpp	/^    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SIGVERSION_BASE, CAmount amount = 0)$/;"	f	class:__anon80::TestBuilder
PushWitRedeem	test/script_tests.cpp	/^    TestBuilder& PushWitRedeem()$/;"	f	class:__anon80::TestBuilder
PushWitSig	test/script_tests.cpp	/^    TestBuilder& PushWitSig(const CKey& key, CAmount amount = -1, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32, SigVersion sigversion = SIGVERSION_WITNESS_V0)$/;"	f	class:__anon80::TestBuilder
Put	leveldb/db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	leveldb/db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	leveldb/db/db_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	leveldb/db/db_test.cc	/^  virtual Status Put(const WriteOptions& o, const Slice& k, const Slice& v) {$/;"	f	class:leveldb::ModelDB
Put	leveldb/db/dumpfile.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon19::WriteBatchItemPrinter
Put	leveldb/db/recovery_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::RecoveryTest
Put	leveldb/db/write_batch.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon28::MemTableInserter
Put	leveldb/db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
PutFixed32	leveldb/util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	leveldb/util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutLengthPrefixedSlice	leveldb/util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	leveldb/util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	leveldb/util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
QAPP_APP_NAME_DEFAULT	qt/guiconstants.h	53;"	d
QAPP_APP_NAME_TESTNET	qt/guiconstants.h	54;"	d
QAPP_ORG_DOMAIN	qt/guiconstants.h	52;"	d
QAPP_ORG_NAME	qt/guiconstants.h	51;"	d
QRImageWidget	qt/receiverequestdialog.cpp	/^QRImageWidget::QRImageWidget(QWidget *parent):$/;"	f	class:QRImageWidget
QRImageWidget	qt/receiverequestdialog.h	/^class QRImageWidget : public QLabel$/;"	c
QR_CFLAGS	Makefile	/^QR_CFLAGS = $/;"	m
QR_IMAGE_SIZE	qt/guiconstants.h	46;"	d
QR_LIBS	Makefile	/^QR_LIBS = $/;"	m
QSystemTray	qt/notificator.h	/^        QSystemTray,                \/**< Use QSystemTray::showMessage *\/$/;"	e	enum:Notificator::Mode
QT4_CFLAGS	Makefile	/^QT4_CFLAGS = $/;"	m
QT4_LIBS	Makefile	/^QT4_LIBS = $/;"	m
QT5_CFLAGS	Makefile	/^QT5_CFLAGS = $/;"	m
QT5_LIBS	Makefile	/^QT5_LIBS = $/;"	m
QTPLATFORM_CFLAGS	Makefile	/^QTPLATFORM_CFLAGS = $/;"	m
QTPLATFORM_LIBS	Makefile	/^QTPLATFORM_LIBS = $/;"	m
QTPRINT_CFLAGS	Makefile	/^QTPRINT_CFLAGS = $/;"	m
QTPRINT_LIBS	Makefile	/^QTPRINT_LIBS = $/;"	m
QTXCBQPA_CFLAGS	Makefile	/^QTXCBQPA_CFLAGS = $/;"	m
QTXCBQPA_LIBS	Makefile	/^QTXCBQPA_LIBS = $/;"	m
QT_DBUS_CFLAGS	Makefile	/^QT_DBUS_CFLAGS = $/;"	m
QT_DBUS_INCLUDES	Makefile	/^QT_DBUS_INCLUDES = $/;"	m
QT_DBUS_LIBS	Makefile	/^QT_DBUS_LIBS = $/;"	m
QT_INCLUDES	Makefile	/^QT_INCLUDES = $/;"	m
QT_LDFLAGS	Makefile	/^QT_LDFLAGS = $/;"	m
QT_LIBS	Makefile	/^QT_LIBS = $/;"	m
QT_PIE_FLAGS	Makefile	/^QT_PIE_FLAGS = $/;"	m
QT_SELECT	Makefile	/^QT_SELECT = qt5$/;"	m
QT_TEST_CFLAGS	Makefile	/^QT_TEST_CFLAGS = $/;"	m
QT_TEST_INCLUDES	Makefile	/^QT_TEST_INCLUDES = $/;"	m
QT_TEST_LIBS	Makefile	/^QT_TEST_LIBS = $/;"	m
QT_TRANSLATION_DIR	Makefile	/^QT_TRANSLATION_DIR = $/;"	m
QUARTERROUND	crypto/chacha20.cpp	15;"	d	file:
QUEUE_BATCH_SIZE	bench/checkqueue.cpp	/^static const int QUEUE_BATCH_SIZE = 128;$/;"	v	file:
QUEUE_BATCH_SIZE	test/checkqueue_tests.cpp	/^static const int QUEUE_BATCH_SIZE = 128;$/;"	v	file:
QValidatedLineEdit	qt/qvalidatedlineedit.cpp	/^QValidatedLineEdit::QValidatedLineEdit(QWidget *parent) :$/;"	f	class:QValidatedLineEdit
QValidatedLineEdit	qt/qvalidatedlineedit.h	/^class QValidatedLineEdit : public QLineEdit$/;"	c
QValueComboBox	qt/qvaluecombobox.cpp	/^QValueComboBox::QValueComboBox(QWidget *parent) :$/;"	f	class:QValueComboBox
QValueComboBox	qt/qvaluecombobox.h	/^class QValueComboBox : public QComboBox$/;"	c
QtRPCTimerBase	qt/rpcconsole.cpp	/^    QtRPCTimerBase(std::function<void(void)>& _func, int64_t millis):$/;"	f	class:QtRPCTimerBase
QtRPCTimerBase	qt/rpcconsole.cpp	/^class QtRPCTimerBase: public QObject, public RPCTimerBase$/;"	c	file:
QtRPCTimerInterface	qt/rpcconsole.cpp	/^class QtRPCTimerInterface: public RPCTimerInterface$/;"	c	file:
QueuedBlock	net_processing.cpp	/^    struct QueuedBlock {$/;"	s	namespace:__anon49	file:
R11	crypto/ripemd160.cpp	/^void inline R11(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }$/;"	f	namespace:__anon89::ripemd160
R12	crypto/ripemd160.cpp	/^void inline R12(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }$/;"	f	namespace:__anon89::ripemd160
R1Array	test/arith_uint256_tests.cpp	/^const unsigned char R1Array[] =$/;"	v
R1Array	test/uint256_tests.cpp	/^const unsigned char R1Array[] =$/;"	v
R1ArrayHex	test/arith_uint256_tests.cpp	/^const char R1ArrayHex[] = "7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c";$/;"	v
R1ArrayHex	test/uint256_tests.cpp	/^const char R1ArrayHex[] = "7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c";$/;"	v
R1L	test/arith_uint256_tests.cpp	/^const arith_uint256 R1L = arith_uint256V(std::vector<unsigned char>(R1Array,R1Array+32));$/;"	v
R1L	test/uint256_tests.cpp	/^const uint256 R1L = uint256(std::vector<unsigned char>(R1Array,R1Array+32));$/;"	v
R1LLow64	test/arith_uint256_tests.cpp	/^const uint64_t R1LLow64 = 0x121156cfdb4a529cULL;$/;"	v
R1Ldouble	test/arith_uint256_tests.cpp	/^const double R1Ldouble = 0.4887374590559308955; \/\/ R1L equals roughly R1Ldouble * 2^256$/;"	v
R1LplusR2L	test/arith_uint256_tests.cpp	/^const char R1LplusR2L[] = "549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C";$/;"	v
R1S	test/uint256_tests.cpp	/^const uint160 R1S = uint160(std::vector<unsigned char>(R1Array,R1Array+20));$/;"	v
R21	crypto/ripemd160.cpp	/^void inline R21(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }$/;"	f	namespace:__anon89::ripemd160
R22	crypto/ripemd160.cpp	/^void inline R22(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }$/;"	f	namespace:__anon89::ripemd160
R2Array	test/arith_uint256_tests.cpp	/^const unsigned char R2Array[] =$/;"	v
R2Array	test/uint256_tests.cpp	/^const unsigned char R2Array[] =$/;"	v
R2L	test/arith_uint256_tests.cpp	/^const arith_uint256 R2L = arith_uint256V(std::vector<unsigned char>(R2Array,R2Array+32));$/;"	v
R2L	test/uint256_tests.cpp	/^const uint256 R2L = uint256(std::vector<unsigned char>(R2Array,R2Array+32));$/;"	v
R2S	test/uint256_tests.cpp	/^const uint160 R2S = uint160(std::vector<unsigned char>(R2Array,R2Array+20));$/;"	v
R31	crypto/ripemd160.cpp	/^void inline R31(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }$/;"	f	namespace:__anon89::ripemd160
R32	crypto/ripemd160.cpp	/^void inline R32(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }$/;"	f	namespace:__anon89::ripemd160
R41	crypto/ripemd160.cpp	/^void inline R41(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }$/;"	f	namespace:__anon89::ripemd160
R42	crypto/ripemd160.cpp	/^void inline R42(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }$/;"	f	namespace:__anon89::ripemd160
R51	crypto/ripemd160.cpp	/^void inline R51(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }$/;"	f	namespace:__anon89::ripemd160
R52	crypto/ripemd160.cpp	/^void inline R52(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }$/;"	f	namespace:__anon89::ripemd160
RANDOM	leveldb/doc/bench/db_bench_sqlite3.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOM	leveldb/doc/bench/db_bench_tree_db.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOMIZER_ID_ADDRESS_RELAY	net_processing.cpp	/^static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; \/\/ SHA256("main address relay")[0:8]$/;"	v	file:
RANDOMIZER_ID_LOCALHOSTNONCE	net.cpp	/^static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; \/\/ SHA256("localhostnonce")[0:8]$/;"	v	file:
RANDOMIZER_ID_NETGROUP	net.cpp	/^static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; \/\/ SHA256("netgroup")[0:8]$/;"	v	file:
RANDOM_REPEATS	wallet/test/wallet_tests.cpp	33;"	d	file:
RANLIB	Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RANLIB	secp256k1/Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RANLIB	univalue/Makefile	/^RANLIB = ranlib$/;"	m
RAW_TEST_FILES	Makefile	/^RAW_TEST_FILES = $/;"	m
RAW_TEST_FILES	Makefile	/^RAW_TEST_FILES = \\$/;"	m
RBFTransactionState	policy/rbf.h	/^enum RBFTransactionState {$/;"	g
RBF_TRANSACTIONSTATE_FINAL	policy/rbf.h	/^    RBF_TRANSACTIONSTATE_FINAL$/;"	e	enum:RBFTransactionState
RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125	policy/rbf.h	/^    RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125,$/;"	e	enum:RBFTransactionState
RBF_TRANSACTIONSTATE_UNKNOWN	policy/rbf.h	/^    RBF_TRANSACTIONSTATE_UNKNOWN,$/;"	e	enum:RBFTransactionState
RCC	Makefile	/^RCC = $/;"	m
RDRandInit	random.cpp	/^static void RDRandInit() {}$/;"	f	file:
RDRandInit	random.cpp	/^static void RDRandInit()$/;"	f	file:
READELF	Makefile	/^READELF = \/usr\/bin\/readelf$/;"	m
READWRITE	serialize.h	151;"	d
READWRITEMANY	serialize.h	152;"	d
READ_STATUS_CHECKBLOCK_FAILED	blockencodings.h	/^    READ_STATUS_CHECKBLOCK_FAILED, \/\/ Used only by FillBlock to indicate a$/;"	e	enum:ReadStatus_t
READ_STATUS_FAILED	blockencodings.h	/^    READ_STATUS_FAILED, \/\/ Failed to process object$/;"	e	enum:ReadStatus_t
READ_STATUS_INVALID	blockencodings.h	/^    READ_STATUS_INVALID, \/\/ Invalid object, peer is sending bogus crap$/;"	e	enum:ReadStatus_t
READ_STATUS_OK	blockencodings.h	/^    READ_STATUS_OK,$/;"	e	enum:ReadStatus_t
REAL_THIN_SP_CP	qt/wificoinunits.h	14;"	d
REAL_THIN_SP_HTML	qt/wificoinunits.h	16;"	d
REAL_THIN_SP_UTF8	qt/wificoinunits.h	15;"	d
RECHECK_LOGS	Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECHECK_LOGS	secp256k1/Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECHECK_LOGS	univalue/Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECONNECT_TIMEOUT_EXP	torcontrol.cpp	/^static const float RECONNECT_TIMEOUT_EXP = 1.5;$/;"	v	file:
RECONNECT_TIMEOUT_START	torcontrol.cpp	/^static const float RECONNECT_TIMEOUT_START = 1.0;$/;"	v	file:
RECOVER_FAIL	wallet/db.h	/^                        RECOVER_FAIL };$/;"	e	enum:CDBEnv::VerifyResult
RECOVER_OK	wallet/db.h	/^                        RECOVER_OK,$/;"	e	enum:CDBEnv::VerifyResult
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
REF	serialize.h	/^inline T& REF(const T& val)$/;"	f
REGTEST	chainparamsbase.cpp	/^const std::string CBaseChainParams::REGTEST = "regtest";$/;"	m	class:CBaseChainParams	file:
REGTEST	chainparamsbase.h	/^    static const std::string REGTEST;$/;"	m	class:CBaseChainParams
REJECT	protocol.cpp	/^const char *REJECT="reject";$/;"	m	namespace:NetMsgType	file:
REJECT_CHECKPOINT	consensus/validation.h	/^static const unsigned char REJECT_CHECKPOINT = 0x43;$/;"	v
REJECT_DUPLICATE	consensus/validation.h	/^static const unsigned char REJECT_DUPLICATE = 0x12;$/;"	v
REJECT_HIGHFEE	validation.h	/^static const unsigned int REJECT_HIGHFEE = 0x100;$/;"	v
REJECT_INSUFFICIENTFEE	consensus/validation.h	/^static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;$/;"	v
REJECT_INTERNAL	validation.h	/^static const unsigned int REJECT_INTERNAL = 0x100;$/;"	v
REJECT_INVALID	consensus/validation.h	/^static const unsigned char REJECT_INVALID = 0x10;$/;"	v
REJECT_MALFORMED	consensus/validation.h	/^static const unsigned char REJECT_MALFORMED = 0x01;$/;"	v
REJECT_NONSTANDARD	consensus/validation.h	/^static const unsigned char REJECT_NONSTANDARD = 0x40;$/;"	v
REJECT_OBSOLETE	consensus/validation.h	/^static const unsigned char REJECT_OBSOLETE = 0x11;$/;"	v
RELDFLAGS	Makefile	/^RELDFLAGS = $/;"	m
REORG	txmempool.h	/^    REORG,       \/\/! Removed for reorganization$/;"	m	class:MemPoolRemovalReason
REQUIRED	policy/fees.h	/^    REQUIRED,$/;"	m	class:FeeReason
REQUIRED_SERVICES	net.h	/^static const ServiceFlags REQUIRED_SERVICES = NODE_NETWORK;$/;"	v
RESET_DELETE_UNSYNCED_FILES	leveldb/db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	e	enum:leveldb::FaultInjectionTest::ResetMethod	file:
RESET_DROP_UNSYNCED_DATA	leveldb/db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	e	enum:leveldb::FaultInjectionTest::ResetMethod	file:
RESTERR	rest.cpp	/^static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string message)$/;"	f	file:
RF_BINARY	rest.cpp	/^    RF_BINARY,$/;"	e	enum:RetFormat	file:
RF_HEX	rest.cpp	/^    RF_HEX,$/;"	e	enum:RetFormat	file:
RF_JSON	rest.cpp	/^    RF_JSON,$/;"	e	enum:RetFormat	file:
RF_UNDEF	rest.cpp	/^    RF_UNDEF,$/;"	e	enum:RetFormat	file:
RIPEMD160	bench/crypto_hash.cpp	/^BENCHMARK(RIPEMD160);$/;"	v
RIPEMD160	bench/crypto_hash.cpp	/^static void RIPEMD160(benchmark::State& state)$/;"	f	file:
ROLLING_FEE_HALFLIFE	txmempool.h	/^    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; \/\/ public only for testing$/;"	m	class:CTxMemPool
ROT	crypto/ctaes/ctaes.c	287;"	d	file:
ROTL	hash.cpp	82;"	d	file:
ROTL32	hash.cpp	/^inline uint32_t ROTL32(uint32_t x, int8_t r)$/;"	f
RPCAuthorized	httprpc.cpp	/^static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)$/;"	f	file:
RPCConsole	qt/rpcconsole.cpp	/^RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:RPCConsole
RPCConsole	qt/rpcconsole.h	/^class RPCConsole: public QWidget$/;"	c
RPCConvertNamedValues	rpc/client.cpp	/^UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<std::string> &strParams)$/;"	f
RPCConvertValues	rpc/client.cpp	/^UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)$/;"	f
RPCErrorCode	rpc/protocol.h	/^enum RPCErrorCode$/;"	g
RPCExecuteCommandLine	qt/rpcconsole.h	/^    static bool RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand, std::string * const pstrFilteredOut = nullptr) {$/;"	f	class:RPCConsole
RPCExecutor	qt/rpcconsole.cpp	/^class RPCExecutor : public QObject$/;"	c	file:
RPCIsInWarmup	rpc/server.cpp	/^bool RPCIsInWarmup(std::string *outStatus)$/;"	f
RPCLockedMemoryInfo	rpc/misc.cpp	/^static UniValue RPCLockedMemoryInfo()$/;"	f	file:
RPCMallocInfo	rpc/misc.cpp	/^static std::string RPCMallocInfo()$/;"	f	file:
RPCNestedTests	qt/test/rpcnestedtests.h	/^class RPCNestedTests : public QObject$/;"	c
RPCNotifyBlockChange	rpc/blockchain.cpp	/^void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)$/;"	f
RPCParseCommandLine	qt/rpcconsole.cpp	/^bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut)$/;"	f	class:RPCConsole
RPCPort	chainparamsbase.h	/^    int RPCPort() const { return nRPCPort; }$/;"	f	class:CBaseChainParams
RPCRunLater	rpc/server.cpp	/^void RPCRunLater(const std::string& name, std::function<void(void)> func, int64_t nSeconds)$/;"	f
RPCSerializationFlags	rpc/server.cpp	/^int RPCSerializationFlags()$/;"	f
RPCServer	rpc/server.h	/^namespace RPCServer$/;"	n
RPCSetTimerInterface	rpc/server.cpp	/^void RPCSetTimerInterface(RPCTimerInterface *iface)$/;"	f
RPCSetTimerInterfaceIfUnset	rpc/server.cpp	/^void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)$/;"	f
RPCTimerBase	rpc/server.h	/^class RPCTimerBase$/;"	c
RPCTimerInterface	rpc/server.h	/^class RPCTimerInterface$/;"	c
RPCTypeCheck	rpc/server.cpp	/^void RPCTypeCheck(const UniValue& params,$/;"	f
RPCTypeCheckArgument	rpc/server.cpp	/^void RPCTypeCheckArgument(const UniValue& value, UniValue::VType typeExpected)$/;"	f
RPCTypeCheckObj	rpc/server.cpp	/^void RPCTypeCheckObj(const UniValue& o,$/;"	f
RPCUnsetTimerInterface	rpc/server.cpp	/^void RPCUnsetTimerInterface(RPCTimerInterface *iface)$/;"	f
RPC_CLIENT_INVALID_IP_OR_SUBNET	rpc/protocol.h	/^    RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, \/\/!< Invalid IP\/Subnet$/;"	e	enum:RPCErrorCode
RPC_CLIENT_IN_INITIAL_DOWNLOAD	rpc/protocol.h	/^    RPC_CLIENT_IN_INITIAL_DOWNLOAD  = -10, \/\/!< Still downloading initial blocks$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_ALREADY_ADDED	rpc/protocol.h	/^    RPC_CLIENT_NODE_ALREADY_ADDED   = -23, \/\/!< Node is already added$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_NOT_ADDED	rpc/protocol.h	/^    RPC_CLIENT_NODE_NOT_ADDED       = -24, \/\/!< Node has not been added before$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_NOT_CONNECTED	rpc/protocol.h	/^    RPC_CLIENT_NODE_NOT_CONNECTED   = -29, \/\/!< Node to disconnect not found in connected nodes$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NOT_CONNECTED	rpc/protocol.h	/^    RPC_CLIENT_NOT_CONNECTED        = -9,  \/\/!< WiFicoin is not connected$/;"	e	enum:RPCErrorCode
RPC_CLIENT_P2P_DISABLED	rpc/protocol.h	/^    RPC_CLIENT_P2P_DISABLED         = -31, \/\/!< No valid connection manager instance found$/;"	e	enum:RPCErrorCode
RPC_DATABASE_ERROR	rpc/protocol.h	/^    RPC_DATABASE_ERROR              = -20, \/\/!< Database error$/;"	e	enum:RPCErrorCode
RPC_DESERIALIZATION_ERROR	rpc/protocol.h	/^    RPC_DESERIALIZATION_ERROR       = -22, \/\/!< Error parsing or validating structure in raw format$/;"	e	enum:RPCErrorCode
RPC_FORBIDDEN_BY_SAFE_MODE	rpc/protocol.h	/^    RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  \/\/!< Server is in safe mode, and command is not allowed in safe mode$/;"	e	enum:RPCErrorCode
RPC_INTERNAL_ERROR	rpc/protocol.h	/^    RPC_INTERNAL_ERROR   = -32603,$/;"	e	enum:RPCErrorCode
RPC_INVALID_ADDRESS_OR_KEY	rpc/protocol.h	/^    RPC_INVALID_ADDRESS_OR_KEY      = -5,  \/\/!< Invalid address or key$/;"	e	enum:RPCErrorCode
RPC_INVALID_PARAMETER	rpc/protocol.h	/^    RPC_INVALID_PARAMETER           = -8,  \/\/!< Invalid, missing or duplicate parameter$/;"	e	enum:RPCErrorCode
RPC_INVALID_PARAMS	rpc/protocol.h	/^    RPC_INVALID_PARAMS   = -32602,$/;"	e	enum:RPCErrorCode
RPC_INVALID_REQUEST	rpc/protocol.h	/^    RPC_INVALID_REQUEST  = -32600,$/;"	e	enum:RPCErrorCode
RPC_IN_WARMUP	rpc/protocol.h	/^    RPC_IN_WARMUP                   = -28, \/\/!< Client still warming up$/;"	e	enum:RPCErrorCode
RPC_METHOD_NOT_FOUND	rpc/protocol.h	/^    RPC_METHOD_NOT_FOUND = -32601,$/;"	e	enum:RPCErrorCode
RPC_MISC_ERROR	rpc/protocol.h	/^    RPC_MISC_ERROR                  = -1,  \/\/!< std::exception thrown in command handling$/;"	e	enum:RPCErrorCode
RPC_OUT_OF_MEMORY	rpc/protocol.h	/^    RPC_OUT_OF_MEMORY               = -7,  \/\/!< Ran out of memory during operation$/;"	e	enum:RPCErrorCode
RPC_PARSE_ERROR	rpc/protocol.h	/^    RPC_PARSE_ERROR      = -32700,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_ALREADY_IN_CHAIN	rpc/protocol.h	/^    RPC_TRANSACTION_ALREADY_IN_CHAIN= RPC_VERIFY_ALREADY_IN_CHAIN,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_ERROR	rpc/protocol.h	/^    RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_REJECTED	rpc/protocol.h	/^    RPC_TRANSACTION_REJECTED        = RPC_VERIFY_REJECTED,$/;"	e	enum:RPCErrorCode
RPC_TYPE_ERROR	rpc/protocol.h	/^    RPC_TYPE_ERROR                  = -3,  \/\/!< Unexpected type was passed as parameter$/;"	e	enum:RPCErrorCode
RPC_VERIFY_ALREADY_IN_CHAIN	rpc/protocol.h	/^    RPC_VERIFY_ALREADY_IN_CHAIN     = -27, \/\/!< Transaction already in chain$/;"	e	enum:RPCErrorCode
RPC_VERIFY_ERROR	rpc/protocol.h	/^    RPC_VERIFY_ERROR                = -25, \/\/!< General error during transaction or block submission$/;"	e	enum:RPCErrorCode
RPC_VERIFY_REJECTED	rpc/protocol.h	/^    RPC_VERIFY_REJECTED             = -26, \/\/!< Transaction or block was rejected by network rules$/;"	e	enum:RPCErrorCode
RPC_WALLET_ALREADY_UNLOCKED	rpc/protocol.h	/^    RPC_WALLET_ALREADY_UNLOCKED     = -17, \/\/!< Wallet is already unlocked$/;"	e	enum:RPCErrorCode
RPC_WALLET_ENCRYPTION_FAILED	rpc/protocol.h	/^    RPC_WALLET_ENCRYPTION_FAILED    = -16, \/\/!< Failed to encrypt the wallet$/;"	e	enum:RPCErrorCode
RPC_WALLET_ERROR	rpc/protocol.h	/^    RPC_WALLET_ERROR                = -4,  \/\/!< Unspecified problem with wallet (key not found etc.)$/;"	e	enum:RPCErrorCode
RPC_WALLET_INSUFFICIENT_FUNDS	rpc/protocol.h	/^    RPC_WALLET_INSUFFICIENT_FUNDS   = -6,  \/\/!< Not enough funds in wallet or account$/;"	e	enum:RPCErrorCode
RPC_WALLET_INVALID_ACCOUNT_NAME	rpc/protocol.h	/^    RPC_WALLET_INVALID_ACCOUNT_NAME = -11, \/\/!< Invalid account name$/;"	e	enum:RPCErrorCode
RPC_WALLET_KEYPOOL_RAN_OUT	rpc/protocol.h	/^    RPC_WALLET_KEYPOOL_RAN_OUT      = -12, \/\/!< Keypool ran out, call keypoolrefill first$/;"	e	enum:RPCErrorCode
RPC_WALLET_NOT_FOUND	rpc/protocol.h	/^    RPC_WALLET_NOT_FOUND            = -18, \/\/!< Invalid wallet specified$/;"	e	enum:RPCErrorCode
RPC_WALLET_NOT_SPECIFIED	rpc/protocol.h	/^    RPC_WALLET_NOT_SPECIFIED        = -19, \/\/!< No wallet specified (error when there are multiple wallets loaded)$/;"	e	enum:RPCErrorCode
RPC_WALLET_PASSPHRASE_INCORRECT	rpc/protocol.h	/^    RPC_WALLET_PASSPHRASE_INCORRECT = -14, \/\/!< The wallet passphrase entered was incorrect$/;"	e	enum:RPCErrorCode
RPC_WALLET_UNLOCK_NEEDED	rpc/protocol.h	/^    RPC_WALLET_UNLOCK_NEEDED        = -13, \/\/!< Enter the wallet passphrase with walletpassphrase first$/;"	e	enum:RPCErrorCode
RPC_WALLET_WRONG_ENC_STATE	rpc/protocol.h	/^    RPC_WALLET_WRONG_ENC_STATE      = -15, \/\/!< Command given in wrong wallet encryption state (encrypting an encrypted wallet etc.)$/;"	e	enum:RPCErrorCode
RSVG_CONVERT	Makefile	/^RSVG_CONVERT = $/;"	m
RUNNING	leveldb/db/skiplist_test.cc	/^    RUNNING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
RUN_TESTS	wallet/test/wallet_tests.cpp	29;"	d	file:
RaiseFileDescriptorLimit	util.cpp	/^int RaiseFileDescriptorLimit(int nMinFD) {$/;"	f
RaiseValidity	chain.h	/^    bool RaiseValidity(enum BlockStatus nUpTo)$/;"	f	class:CBlockIndex
RandAddSeed	random.cpp	/^void RandAddSeed()$/;"	f
RandAddSeedPerfmon	random.cpp	/^static void RandAddSeedPerfmon()$/;"	f	file:
RandAddSeedSleep	random.cpp	/^void RandAddSeedSleep()$/;"	f
RandFailure	random.cpp	/^static void RandFailure()$/;"	f	file:
Random	leveldb/util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) {$/;"	f	class:leveldb::Random
Random	leveldb/util/random.h	/^class Random {$/;"	c	namespace:leveldb
RandomAccessFile	leveldb/include/leveldb/env.h	/^  RandomAccessFile() { }$/;"	f	class:leveldb::RandomAccessFile
RandomAccessFile	leveldb/include/leveldb/env.h	/^class RandomAccessFile {$/;"	c	namespace:leveldb
RandomAccessFileImpl	leveldb/helpers/memenv/memenv.cc	/^  explicit RandomAccessFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon16::RandomAccessFileImpl
RandomAccessFileImpl	leveldb/helpers/memenv/memenv.cc	/^class RandomAccessFileImpl : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon16	file:
RandomData	test/bloom_tests.cpp	/^static std::vector<unsigned char> RandomData()$/;"	f	file:
RandomGenerator	leveldb/db/db_bench.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon18::RandomGenerator
RandomGenerator	leveldb/db/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon18	file:
RandomGenerator	leveldb/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon35::RandomGenerator
RandomGenerator	leveldb/doc/bench/db_bench_sqlite3.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon35	file:
RandomGenerator	leveldb/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon34::RandomGenerator
RandomGenerator	leveldb/doc/bench/db_bench_tree_db.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon34	file:
RandomHeight	leveldb/db/skiplist.h	/^int SkipList<Key,Comparator>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomInit	random.cpp	/^void RandomInit()$/;"	f
RandomInt	addrman.cpp	/^int CAddrMan::RandomInt(int nMax){$/;"	f	class:CAddrMan
RandomKey	leveldb/db/db_test.cc	/^static std::string RandomKey(Random* rnd) {$/;"	f	namespace:leveldb
RandomKey	leveldb/util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomOrphan	test/DoS_tests.cpp	/^CTransactionRef RandomOrphan()$/;"	f
RandomPeriod	leveldb/db/db_iter.cc	/^  ssize_t RandomPeriod() {$/;"	f	class:leveldb::__anon20::DBIter	file:
RandomScript	test/sighash_tests.cpp	/^void static RandomScript(CScript &script) {$/;"	f	file:
RandomSeed	leveldb/util/testharness.cc	/^int RandomSeed() {$/;"	f	namespace:leveldb::test
RandomSeed	random.cpp	/^void FastRandomContext::RandomSeed()$/;"	f	class:FastRandomContext
RandomSkewedString	leveldb/db/log_test.cc	/^static std::string RandomSkewedString(int i, Random* rnd) {$/;"	f	namespace:leveldb::log
RandomString	leveldb/db/db_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	leveldb/util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
RandomTarget	leveldb/db/skiplist_test.cc	/^  static Key RandomTarget(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest	file:
RandomTransaction	test/sighash_tests.cpp	/^void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {$/;"	f	file:
Random_SanityCheck	random.cpp	/^bool Random_SanityCheck()$/;"	f
Range	leveldb/include/leveldb/db.h	/^  Range() { }$/;"	f	struct:leveldb::Range
Range	leveldb/include/leveldb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) { }$/;"	f	struct:leveldb::Range
Range	leveldb/include/leveldb/db.h	/^struct Range {$/;"	s	namespace:leveldb
Range	qt/transactionview.h	/^        Range$/;"	e	enum:TransactionView::DateEnum
RawDecorationRole	qt/transactiontablemodel.h	/^        RawDecorationRole,$/;"	e	enum:TransactionTableModel::RoleIndex
ReacceptWalletTransactions	wallet/wallet.cpp	/^void CWallet::ReacceptWalletTransactions()$/;"	f	class:CWallet
Read	addrdb.cpp	/^bool CAddrDB::Read(CAddrMan& addr)$/;"	f	class:CAddrDB
Read	addrdb.cpp	/^bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)$/;"	f	class:CAddrDB
Read	addrdb.cpp	/^bool CBanDB::Read(banmap_t& banSet)$/;"	f	class:CBanDB
Read	dbwrapper.h	/^    bool Read(const K& key, V& value) const$/;"	f	class:CDBWrapper
Read	leveldb/db/db_test.cc	/^  int Read() {$/;"	f	class:leveldb::__anon29::AtomicCounter
Read	leveldb/db/log_test.cc	/^    virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::log::LogTest::StringSource
Read	leveldb/db/log_test.cc	/^  std::string Read() {$/;"	f	class:leveldb::log::LogTest
Read	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Read(Order order, int entries_per_batch) {$/;"	f	class:leveldb::Benchmark
Read	leveldb/helpers/memenv/memenv.cc	/^  Status Read(uint64_t offset, size_t n, Slice* result, char* scratch) const {$/;"	f	class:leveldb::__anon16::FileState
Read	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon16::SequentialFileImpl
Read	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon16::RandomAccessFileImpl
Read	leveldb/table/table_test.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::StringSource
Read	leveldb/util/env_posix.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon11::PosixSequentialFile
Read	leveldb/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon11::PosixMmapReadableFile
Read	leveldb/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon11::PosixRandomAccessFile
Read	leveldb/util/env_win.cc	/^Status Win32RandomAccessFile::Read(uint64_t offset,size_t n,Slice* result,char* scratch) const$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
Read	leveldb/util/env_win.cc	/^Status Win32SequentialFile::Read( size_t n, Slice* result, char* scratch )$/;"	f	class:leveldb::Win32::Win32SequentialFile
Read	policy/fees.cpp	/^bool CBlockPolicyEstimator::Read(CAutoFile& filein)$/;"	f	class:CBlockPolicyEstimator
Read	policy/fees.cpp	/^void TxConfirmStats::Read(CAutoFile& filein, int nFileVersion, size_t numBuckets)$/;"	f	class:TxConfirmStats
Read	wallet/db.h	/^    bool Read(const K& key, T& value)$/;"	f	class:CDB
ReadAccount	wallet/walletdb.cpp	/^bool CWalletDB::ReadAccount(const std::string& strAccount, CAccount& account)$/;"	f	class:CWalletDB
ReadAtCursor	wallet/db.h	/^    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, bool setRange = false)$/;"	f	class:CDB
ReadBE32	crypto/common.h	/^uint32_t static inline ReadBE32(const unsigned char* ptr)$/;"	f
ReadBE64	crypto/common.h	/^uint64_t static inline ReadBE64(const unsigned char* ptr)$/;"	f
ReadBestBlock	wallet/walletdb.cpp	/^bool CWalletDB::ReadBestBlock(CBlockLocator& locator)$/;"	f	class:CWalletDB
ReadBinaryFile	torcontrol.cpp	/^static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max())$/;"	f	file:
ReadBlock	leveldb/table/format.cc	/^Status ReadBlock(RandomAccessFile* file,$/;"	f	namespace:leveldb
ReadBlockFileInfo	txdb.cpp	/^bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {$/;"	f	class:CBlockTreeDB
ReadBlockFromDisk	validation.cpp	/^bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)$/;"	f
ReadBlockFromDisk	validation.cpp	/^bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)$/;"	f
ReadBody	httpserver.cpp	/^std::string HTTPRequest::ReadBody()$/;"	f	class:HTTPRequest
ReadCompactSize	serialize.h	/^uint64_t ReadCompactSize(Stream& is)$/;"	f
ReadConfigFile	util.cpp	/^void ArgsManager::ReadConfigFile(const std::string& confPath)$/;"	f	class:ArgsManager
ReadFileToString	leveldb/util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadFilter	leveldb/table/table.cc	/^void Table::ReadFilter(const Slice& filter_handle_value) {$/;"	f	class:leveldb::Table
ReadFlag	txdb.cpp	/^bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {$/;"	f	class:CBlockTreeDB
ReadHot	leveldb/db/db_bench.cc	/^  void ReadHot(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadKeyValue	wallet/walletdb.cpp	/^ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,$/;"	f
ReadLE16	crypto/common.h	/^uint16_t static inline ReadLE16(const unsigned char* ptr)$/;"	f
ReadLE32	crypto/common.h	/^uint32_t static inline ReadLE32(const unsigned char* ptr)$/;"	f
ReadLE64	crypto/common.h	/^uint64_t static inline ReadLE64(const unsigned char* ptr)$/;"	f
ReadLastBlockFile	txdb.cpp	/^bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {$/;"	f	class:CBlockTreeDB
ReadMeta	leveldb/table/table.cc	/^void Table::ReadMeta(const Footer& footer) {$/;"	f	class:leveldb::Table
ReadMissing	leveldb/db/db_bench.cc	/^  void ReadMissing(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadOptions	leveldb/include/leveldb/options.h	/^  ReadOptions()$/;"	f	struct:leveldb::ReadOptions
ReadOptions	leveldb/include/leveldb/options.h	/^struct ReadOptions {$/;"	s	namespace:leveldb
ReadOrderPos	wallet/wallet.h	/^static inline void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)$/;"	f
ReadPhysicalRecord	leveldb/db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadPool	wallet/walletdb.cpp	/^bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)$/;"	f	class:CWalletDB
ReadRandom	leveldb/db/db_bench.cc	/^  void ReadRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadRandom	leveldb/doc/bench/db_bench_tree_db.cc	/^  void ReadRandom() {$/;"	f	class:leveldb::Benchmark	file:
ReadRecord	leveldb/db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReindexing	txdb.cpp	/^bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {$/;"	f	class:CBlockTreeDB
ReadReverse	leveldb/db/db_bench.cc	/^  void ReadReverse(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	leveldb/db/db_bench.cc	/^  void ReadSequential(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark
ReadSequential	leveldb/doc/bench/db_bench_tree_db.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark	file:
ReadStatus	blockencodings.h	/^} ReadStatus;$/;"	t	typeref:enum:ReadStatus_t
ReadStatus_t	blockencodings.h	/^typedef enum ReadStatus_t$/;"	g
ReadStep	leveldb/db/skiplist_test.cc	/^  void ReadStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
ReadTxIndex	txdb.cpp	/^bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {$/;"	f	class:CBlockTreeDB
ReadValue	leveldb/db/fault_injection_test.cc	/^  Status ReadValue(int i, std::string* val) const {$/;"	f	class:leveldb::FaultInjectionTest
ReadVarInt	serialize.h	/^I ReadVarInt(Stream& is)$/;"	f
ReadVersion	wallet/db.h	/^    bool ReadVersion(int& nVersion)$/;"	f	class:CDB
ReadVersion	wallet/walletdb.cpp	/^bool CWalletDB::ReadVersion(int& nVersion)$/;"	f	class:CWalletDB
ReadWhileWriting	leveldb/db/db_bench.cc	/^  void ReadWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Reader	leveldb/db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum,$/;"	f	class:leveldb::log::Reader
Reader	leveldb/db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
ReaderState	leveldb/db/skiplist_test.cc	/^  enum ReaderState {$/;"	g	class:leveldb::TestState	file:
Receive	qt/addresstablemodel.cpp	/^const QString AddressTableModel::Receive = "R";$/;"	m	class:AddressTableModel	file:
Receive	qt/addresstablemodel.h	/^    static const QString Receive;   \/**< Specifies receive address *\/$/;"	m	class:AddressTableModel
ReceiveCoinsDialog	qt/receivecoinsdialog.cpp	/^ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:ReceiveCoinsDialog
ReceiveCoinsDialog	qt/receivecoinsdialog.h	/^class ReceiveCoinsDialog : public QDialog$/;"	c
ReceiveMsgBytes	net.cpp	/^bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)$/;"	f	class:CNode
ReceiveRequestDialog	qt/receiverequestdialog.cpp	/^ReceiveRequestDialog::ReceiveRequestDialog(QWidget *parent) :$/;"	f	class:ReceiveRequestDialog
ReceiveRequestDialog	qt/receiverequestdialog.h	/^class ReceiveRequestDialog : public QDialog$/;"	c
ReceivedBlockTransactions	validation.cpp	/^static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)$/;"	f	file:
Receiving	qt/addresstablemodel.cpp	/^        Receiving,$/;"	e	enum:AddressTableEntry::Type	file:
ReceivingTab	qt/addressbookpage.h	/^        ReceivingTab = 1$/;"	e	enum:AddressBookPage::Tabs
RecentRequestEntry	qt/recentrequeststablemodel.h	/^    RecentRequestEntry() : nVersion(RecentRequestEntry::CURRENT_VERSION), id(0) { }$/;"	f	class:RecentRequestEntry
RecentRequestEntry	qt/recentrequeststablemodel.h	/^class RecentRequestEntry$/;"	c
RecentRequestEntryLessThan	qt/recentrequeststablemodel.h	/^    RecentRequestEntryLessThan(int nColumn, Qt::SortOrder fOrder):$/;"	f	class:RecentRequestEntryLessThan
RecentRequestEntryLessThan	qt/recentrequeststablemodel.h	/^class RecentRequestEntryLessThan$/;"	c
RecentRequestsTableModel	qt/recentrequeststablemodel.cpp	/^RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel *parent) :$/;"	f	class:RecentRequestsTableModel
RecentRequestsTableModel	qt/recentrequeststablemodel.h	/^class RecentRequestsTableModel: public QAbstractTableModel$/;"	c
RecipientCatcher	qt/test/paymentservertests.h	/^class RecipientCatcher : public QObject$/;"	c
RecommendedNumConfirmations	qt/transactionrecord.h	/^    static const int RecommendedNumConfirmations = 6;$/;"	m	class:TransactionRecord
Reconnect	torcontrol.cpp	/^void TorController::Reconnect()$/;"	f	class:TorController
Record	policy/fees.cpp	/^void TxConfirmStats::Record(int blocksToConfirm, double val)$/;"	f	class:TxConfirmStats
RecordBackgroundError	leveldb/db/db_impl.cc	/^void DBImpl::RecordBackgroundError(const Status& s) {$/;"	f	class:leveldb::DBImpl
RecordBytesRecv	net.cpp	/^void CConnman::RecordBytesRecv(uint64_t bytes)$/;"	f	class:CConnman
RecordBytesSent	net.cpp	/^void CConnman::RecordBytesSent(uint64_t bytes)$/;"	f	class:CConnman
RecordReadSample	leveldb/db/db_impl.cc	/^void DBImpl::RecordReadSample(Slice key) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	leveldb/db/version_set.cc	/^bool Version::RecordReadSample(Slice internal_key) {$/;"	f	class:leveldb::Version
RecordType	leveldb/db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	leveldb/db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit, bool *save_manifest) {$/;"	f	class:leveldb::DBImpl
Recover	leveldb/db/version_set.cc	/^Status VersionSet::Recover(bool *save_manifest) {$/;"	f	class:leveldb::VersionSet
Recover	wallet/db.cpp	/^bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)$/;"	f	class:CDB
Recover	wallet/walletdb.cpp	/^bool CWalletDB::Recover(const std::string& filename, std::string& out_backup_filename)$/;"	f	class:CWalletDB
Recover	wallet/walletdb.cpp	/^bool CWalletDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)$/;"	f	class:CWalletDB
RecoverCompact	pubkey.cpp	/^bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {$/;"	f	class:CPubKey
RecoverKeysOnlyFilter	wallet/walletdb.cpp	/^bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)$/;"	f	class:CWalletDB
RecoverLogFile	leveldb/db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,$/;"	f	class:leveldb::DBImpl
RecoveryTest	leveldb/db/recovery_test.cc	/^  RecoveryTest() : env_(Env::Default()), db_(NULL) {$/;"	f	class:leveldb::RecoveryTest
RecoveryTest	leveldb/db/recovery_test.cc	/^class RecoveryTest {$/;"	c	namespace:leveldb	file:
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CBlock& block) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const COutPoint& out) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CScript& script) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTxIn& in) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const CTxOut& out) {$/;"	f
RecursiveDynamicUsage	core_memusage.h	/^static inline size_t RecursiveDynamicUsage(const std::shared_ptr<X>& p) {$/;"	f
RecvFromOther	qt/transactionrecord.h	/^        RecvFromOther,$/;"	e	enum:TransactionRecord::Type
RecvWithAddress	qt/transactionrecord.h	/^        RecvWithAddress,$/;"	e	enum:TransactionRecord::Type
Ref	leveldb/db/memtable.h	/^  void Ref() { ++refs_; }$/;"	f	class:leveldb::MemTable
Ref	leveldb/db/version_set.cc	/^void Version::Ref() {$/;"	f	class:leveldb::Version
Ref	leveldb/helpers/memenv/memenv.cc	/^  void Ref() {$/;"	f	class:leveldb::__anon16::FileState
Ref	leveldb/util/cache.cc	/^void LRUCache::Ref(LRUHandle* e) {$/;"	f	class:leveldb::__anon13::LRUCache
RegisterAllCoreRPCCommands	rpc/register.h	/^static inline void RegisterAllCoreRPCCommands(CRPCTable &t)$/;"	f
RegisterBackgroundSignalScheduler	validationinterface.cpp	/^void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {$/;"	f	class:CMainSignals
RegisterBlockchainRPCCommands	rpc/blockchain.cpp	/^void RegisterBlockchainRPCCommands(CRPCTable &t)$/;"	f
RegisterCleanup	leveldb/table/iterator.cc	/^void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
RegisterHTTPHandler	httpserver.cpp	/^void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)$/;"	f
RegisterLoad	wificoin-tx.cpp	/^static void RegisterLoad(const std::string& strInput)$/;"	f	file:
RegisterMiningRPCCommands	rpc/mining.cpp	/^void RegisterMiningRPCCommands(CRPCTable &t)$/;"	f
RegisterMiscRPCCommands	rpc/misc.cpp	/^void RegisterMiscRPCCommands(CRPCTable &t)$/;"	f
RegisterNetRPCCommands	rpc/net.cpp	/^void RegisterNetRPCCommands(CRPCTable &t)$/;"	f
RegisterRawTransactionRPCCommands	rpc/rawtransaction.cpp	/^void RegisterRawTransactionRPCCommands(CRPCTable &t)$/;"	f
RegisterSet	wificoin-tx.cpp	/^static void RegisterSet(const std::string& strInput)$/;"	f	file:
RegisterSetJson	wificoin-tx.cpp	/^static void RegisterSetJson(const std::string& key, const std::string& rawJson)$/;"	f	file:
RegisterTest	leveldb/util/testharness.cc	/^bool RegisterTest(const char* base, const char* name, void (*func)()) {$/;"	f	namespace:leveldb::test
RegisterValidationInterface	validationinterface.cpp	/^void RegisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
RegisterWalletRPCCommands	wallet/rpcwallet.cpp	/^void RegisterWalletRPCCommands(CRPCTable &t)$/;"	f
RegtestingSetup	test/blockencodings_tests.cpp	/^    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}$/;"	f	struct:RegtestingSetup
RegtestingSetup	test/blockencodings_tests.cpp	/^struct RegtestingSetup : public TestingSetup {$/;"	s	file:
RelayAddress	net_processing.cpp	/^static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connman)$/;"	f	file:
RelayTransaction	net_processing.cpp	/^static void RelayTransaction(const CTransaction& tx, CConnman* connman)$/;"	f	file:
RelayWalletTransaction	wallet/wallet.cpp	/^bool CWalletTx::RelayWalletTransaction(CConnman* connman)$/;"	f	class:CWalletTx
Release	leveldb/util/cache.cc	/^  virtual void Release(Handle* handle) {$/;"	f	class:leveldb::__anon13::ShardedLRUCache
Release	leveldb/util/cache.cc	/^void LRUCache::Release(Cache::Handle* handle) {$/;"	f	class:leveldb::__anon13::LRUCache
Release	leveldb/util/env_posix.cc	/^  void Release() {$/;"	f	class:leveldb::__anon11::Limiter
Release	net.h	/^    void Release()$/;"	f	class:CNode
Release	sync.h	/^    void Release()$/;"	f	class:CSemaphoreGrant
ReleaseBlock	leveldb/table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseInputs	leveldb/db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseSnapshot	leveldb/db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* s) {$/;"	f	class:leveldb::DBImpl
ReleaseSnapshot	leveldb/db/db_test.cc	/^  virtual void ReleaseSnapshot(const Snapshot* snapshot) {$/;"	f	class:leveldb::ModelDB
Release_Store	leveldb/port/atomic_pointer.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Release_Store	leveldb/port/port_win.cc	/^void AtomicPointer::Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Remove	leveldb/util/cache.cc	/^  LRUHandle* Remove(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon13::HandleTable
Remove	leveldb/util/env_posix.cc	/^  void Remove(const std::string& fname) {$/;"	f	class:leveldb::__anon11::PosixLockTable
RemoveAddedNode	net.cpp	/^bool CConnman::RemoveAddedNode(const std::string& strNode)$/;"	f	class:CConnman
RemoveLocal	net.cpp	/^bool RemoveLocal(const CService& addr)$/;"	f
RemoveStaged	txmempool.cpp	/^void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {$/;"	f	class:CTxMemPool
RemoveWatchOnly	keystore.cpp	/^bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
RemoveWatchOnly	wallet/wallet.cpp	/^bool CWallet::RemoveWatchOnly(const CScript &dest)$/;"	f	class:CWallet
RenameFile	leveldb/db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::RenameFile(const std::string& s,$/;"	f	class:leveldb::FaultInjectionTestEnv
RenameFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status RenameFile(const std::string& src,$/;"	f	class:leveldb::__anon16::InMemoryEnv
RenameFile	leveldb/include/leveldb/env.h	/^  Status RenameFile(const std::string& s, const std::string& t) {$/;"	f	class:leveldb::EnvWrapper
RenameFile	leveldb/util/env_posix.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon11::PosixEnv
RenameFile	leveldb/util/env_win.cc	/^Status Win32Env::RenameFile( const std::string& src, const std::string& target )$/;"	f	class:leveldb::Win32::Win32Env
RenameLDBToSST	leveldb/db/db_test.cc	/^  int RenameLDBToSST() {$/;"	f	class:leveldb::DBTest
RenameOver	util.cpp	/^bool RenameOver(fs::path src, fs::path dest)$/;"	f
RenameThread	util.cpp	/^void RenameThread(const char* name)$/;"	f
Reopen	leveldb/db/corruption_test.cc	/^  void Reopen() {$/;"	f	class:leveldb::CorruptionTest
Reopen	leveldb/db/db_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
ReopenForAppend	leveldb/db/log_test.cc	/^  void ReopenForAppend() {$/;"	f	class:leveldb::log::LogTest
ReorderTransactions	wallet/wallet.cpp	/^DBErrors CWallet::ReorderTransactions()$/;"	f	class:CWallet
Rep	leveldb/table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table	file:
Rep	leveldb/table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	leveldb/table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder	file:
RepairDB	leveldb/db/corruption_test.cc	/^  void RepairDB() {$/;"	f	class:leveldb::CorruptionTest
RepairDB	leveldb/db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
RepairTable	leveldb/db/repair.cc	/^  void RepairTable(const std::string& src, TableInfo t) {$/;"	f	class:leveldb::__anon26::Repairer	file:
Repairer	leveldb/db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon26::Repairer
Repairer	leveldb/db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon26	file:
Repeat	scheduler.cpp	/^static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaMilliSeconds)$/;"	f	file:
ReplaceRedeemScript	test/transaction_tests.cpp	/^void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)$/;"	f
ReplayBlocks	validation.cpp	/^bool ReplayBlocks(const CChainParams& params, CCoinsView* view)$/;"	f
ReplyHandlerCB	torcontrol.cpp	/^    typedef std::function<void(TorControlConnection &,const TorControlReply &)> ReplyHandlerCB;$/;"	t	class:TorControlConnection	file:
Report	leveldb/db/db_bench.cc	/^  void Report(const Slice& name) {$/;"	f	class:leveldb::__anon18::Stats
ReportCollector	leveldb/db/log_test.cc	/^    ReportCollector() : dropped_bytes_(0) { }$/;"	f	class:leveldb::log::LogTest::ReportCollector
ReportCollector	leveldb/db/log_test.cc	/^  class ReportCollector : public Reader::Reporter {$/;"	c	class:leveldb::log::LogTest	file:
ReportCorruption	leveldb/db/log_reader.cc	/^void Reader::ReportCorruption(uint64_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
ReportDrop	leveldb/db/log_reader.cc	/^void Reader::ReportDrop(uint64_t bytes, const Status& reason) {$/;"	f	class:leveldb::log::Reader
ReportInvalidCertificate	qt/paymentserver.cpp	/^static void ReportInvalidCertificate(const QSslCertificate& cert)$/;"	f	file:
ReportMessage	leveldb/db/log_test.cc	/^  std::string ReportMessage() const {$/;"	f	class:leveldb::log::LogTest
Reporter	leveldb/db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
RequestContextMenu	qt/test/wallettests.cpp	/^void RequestContextMenu(QWidget* widget)$/;"	f	namespace:__anon108
RequestMethod	httpserver.h	/^    enum RequestMethod {$/;"	g	class:HTTPRequest
RequestMethodString	httpserver.cpp	/^static std::string RequestMethodString(HTTPRequest::RequestMethod m)$/;"	f	file:
RequireStandard	chainparams.h	/^    bool RequireStandard() const { return fRequireStandard; }$/;"	f	class:CChainParams
RescanFromTime	wallet/wallet.cpp	/^int64_t CWallet::RescanFromTime(int64_t startTime, bool update)$/;"	f	class:CWallet
ResendWalletTransactions	validationinterface.h	/^    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}$/;"	f	class:CValidationInterface
ResendWalletTransactions	wallet/wallet.cpp	/^void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman)$/;"	f	class:CWallet
ResendWalletTransactionsBefore	wallet/wallet.cpp	/^std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman)$/;"	f	class:CWallet
ReserveKeyFromKeyPool	wallet/wallet.cpp	/^void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)$/;"	f	class:CWallet
Reset	crypto/ripemd160.cpp	/^CRIPEMD160& CRIPEMD160::Reset()$/;"	f	class:CRIPEMD160
Reset	crypto/sha1.cpp	/^CSHA1& CSHA1::Reset()$/;"	f	class:CSHA1
Reset	crypto/sha256.cpp	/^CSHA256& CSHA256::Reset()$/;"	f	class:CSHA256
Reset	crypto/sha512.cpp	/^CSHA512& CSHA512::Reset()$/;"	f	class:CSHA512
Reset	hash.h	/^    CHash160& Reset() {$/;"	f	class:CHash160
Reset	hash.h	/^    CHash256& Reset() {$/;"	f	class:CHash256
Reset	leveldb/db/db_test.cc	/^  void Reset() {$/;"	f	class:leveldb::__anon29::AtomicCounter
Reset	leveldb/table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Reset	leveldb/table/table_test.cc	/^  void Reset() {$/;"	f	class:leveldb::TableConstructor	file:
Reset	leveldb/util/bloom_test.cc	/^  void Reset() {$/;"	f	class:leveldb::BloomTest
Reset	qt/optionsmodel.cpp	/^void OptionsModel::Reset()$/;"	f	class:OptionsModel
Reset	test/versionbits_tests.cpp	/^    VersionBitsTester& Reset() {$/;"	f	class:VersionBitsTester
Reset	wallet/db.cpp	/^void CDBEnv::Reset()$/;"	f	class:CDBEnv
ResetArgs	test/getarg_tests.cpp	/^static void ResetArgs(const std::string& strArg)$/;"	f	file:
ResetBlockFailureFlags	validation.cpp	/^bool ResetBlockFailureFlags(CBlockIndex *pindex) {$/;"	f
ResetDBState	leveldb/db/fault_injection_test.cc	/^  void ResetDBState(ResetMethod reset_method) {$/;"	f	class:leveldb::FaultInjectionTest
ResetMethod	leveldb/db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	g	class:leveldb::FaultInjectionTest	file:
ResetState	leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::ResetState() {$/;"	f	class:leveldb::FaultInjectionTestEnv
Resize	leveldb/util/cache.cc	/^  void Resize() {$/;"	f	class:leveldb::__anon13::HandleTable	file:
ResolveErrMsg	init.cpp	/^static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)$/;"	f	file:
ResolveIP	test/addrman_tests.cpp	/^static CNetAddr ResolveIP(const char* ip)$/;"	f	file:
ResolveIP	test/addrman_tests.cpp	/^static CNetAddr ResolveIP(std::string ip)$/;"	f	file:
ResolveIP	test/netbase_tests.cpp	/^static CNetAddr ResolveIP(const char* ip)$/;"	f	file:
ResolveService	test/addrman_tests.cpp	/^static CService ResolveService(const char* ip, int port = 0)$/;"	f	file:
ResolveService	test/addrman_tests.cpp	/^static CService ResolveService(std::string ip, int port = 0)$/;"	f	file:
ResolveSubNet	test/netbase_tests.cpp	/^static CSubNet ResolveSubNet(const char* subnet)$/;"	f	file:
RetFormat	rest.cpp	/^enum RetFormat {$/;"	g	file:
ReturnFalse	test/main_tests.cpp	/^bool ReturnFalse() { return false; }$/;"	f
ReturnKey	wallet/wallet.cpp	/^void CReserveKey::ReturnKey()$/;"	f	class:CReserveKey
ReturnKey	wallet/wallet.cpp	/^void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)$/;"	f	class:CWallet
ReturnTrue	test/main_tests.cpp	/^bool ReturnTrue() { return true; }$/;"	f
ReuseFileNumber	leveldb/db/version_set.h	/^  void ReuseFileNumber(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
ReuseLogs	leveldb/db/fault_injection_test.cc	/^  void ReuseLogs(bool reuse) {$/;"	f	class:leveldb::FaultInjectionTest
ReuseManifest	leveldb/db/version_set.cc	/^bool VersionSet::ReuseManifest(const std::string& dscname,$/;"	f	class:leveldb::VersionSet
Reverse	leveldb/table/table_test.cc	/^static std::string Reverse(const Slice& key) {$/;"	f	namespace:leveldb
ReverseCompareNodeMinPingTime	net.cpp	/^static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
ReverseCompareNodeTimeConnected	net.cpp	/^static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)$/;"	f	file:
ReverseKeyComparator	leveldb/table/table_test.cc	/^class ReverseKeyComparator : public Comparator {$/;"	c	namespace:leveldb::__anon40	file:
Rewind	streams.h	/^    bool Rewind(size_type n)$/;"	f	class:CDataStream
RewindBlockIndex	validation.cpp	/^bool RewindBlockIndex(const CChainParams& params)$/;"	f
Rewrite	wallet/db.cpp	/^bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)$/;"	f	class:CDB
Rewrite	wallet/db.cpp	/^bool CWalletDBWrapper::Rewrite(const char* pszSkip)$/;"	f	class:CWalletDBWrapper
RoleIndex	qt/addresstablemodel.h	/^    enum RoleIndex {$/;"	g	class:AddressTableModel
RoleIndex	qt/wificoinunits.h	/^    enum RoleIndex {$/;"	g	class:WiFicoinUnits
RoleIndex	qt/transactiontablemodel.h	/^    enum RoleIndex {$/;"	g	class:TransactionTableModel
RollforwardBlock	validation.cpp	/^static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)$/;"	f	file:
RollingBloom	bench/rollingbloom.cpp	/^BENCHMARK(RollingBloom);$/;"	v
RollingBloom	bench/rollingbloom.cpp	/^static void RollingBloom(benchmark::State& state)$/;"	f	file:
RollingBloomHash	bloom.cpp	/^static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {$/;"	f	file:
Round	crypto/ripemd160.cpp	/^void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)$/;"	f	namespace:__anon89::ripemd160
Round	crypto/sha1.cpp	/^void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)$/;"	f	namespace:__anon90::sha1
Round	crypto/sha256.cpp	/^void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k, uint32_t w)$/;"	f	namespace:__anon87::sha256
Round	crypto/sha512.cpp	/^void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)$/;"	f	namespace:__anon88::sha512
Round	secp256k1/src/hash_impl.h	23;"	d
Round	secp256k1/src/hash_impl.h	273;"	d
Run	httpserver.cpp	/^    void Run()$/;"	f	class:WorkQueue
Run	leveldb/db/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	leveldb/db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon26::Repairer
Run	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	leveldb/doc/bench/db_bench_tree_db.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
RunAll	bench/bench.cpp	/^benchmark::BenchRunner::RunAll(double elapsedTimeForOne)$/;"	f	class:benchmark::BenchRunner
RunAllTests	leveldb/util/testharness.cc	/^int RunAllTests() {$/;"	f	namespace:leveldb::test
RunBenchmark	leveldb/db/db_bench.cc	/^  void RunBenchmark(int n, Slice name,$/;"	f	class:leveldb::Benchmark	file:
RunConcurrent	leveldb/db/skiplist_test.cc	/^static void RunConcurrent(int run) {$/;"	f	namespace:leveldb
RunCreate	test/scriptnum_tests.cpp	/^static void RunCreate(const int64_t& num)$/;"	f	file:
RunOperators	test/scriptnum_tests.cpp	/^static void RunOperators(const int64_t& num1, const int64_t& num2)$/;"	f	file:
RunTest	test/bip32_tests.cpp	/^void RunTest(const TestVector &test) {$/;"	f
SAFE_CHARS	utilstrencodings.cpp	/^static const std::string SAFE_CHARS[] =$/;"	v	file:
SAFE_CHARS_DEFAULT	utilstrencodings.h	/^    SAFE_CHARS_DEFAULT, \/\/!< The full set of allowed chars$/;"	e	enum:SafeChars
SAFE_CHARS_FILENAME	utilstrencodings.h	/^    SAFE_CHARS_FILENAME, \/\/!< Chars allowed in filenames$/;"	e	enum:SafeChars
SAFE_CHARS_UA_COMMENT	utilstrencodings.h	/^    SAFE_CHARS_UA_COMMENT, \/\/!< BIP-0014 subset$/;"	e	enum:SafeChars
SC	secp256k1/src/ecmult_static_context.h	1159;"	d
SC	secp256k1/src/ecmult_static_context.h	4;"	d
SCOPED_LOCKABLE	leveldb/port/thread_annotations.h	33;"	d
SCOPED_LOCKABLE	threadsafety.h	17;"	d
SCOPED_LOCKABLE	threadsafety.h	36;"	d
SCRIPT_ADDRESS	chainparams.h	/^        SCRIPT_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
SCRIPT_ERR_BAD_OPCODE	script/script_error.h	/^    SCRIPT_ERR_BAD_OPCODE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CHECKMULTISIGVERIFY	script/script_error.h	/^    SCRIPT_ERR_CHECKMULTISIGVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CHECKSIGVERIFY	script/script_error.h	/^    SCRIPT_ERR_CHECKSIGVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CLEANSTACK	script/script_error.h	/^    SCRIPT_ERR_CLEANSTACK,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISABLED_OPCODE	script/script_error.h	/^    SCRIPT_ERR_DISABLED_OPCODE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS	script/script_error.h	/^    SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM	script/script_error.h	/^    SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_EQUALVERIFY	script/script_error.h	/^    SCRIPT_ERR_EQUALVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_ERROR_COUNT	script/script_error.h	/^    SCRIPT_ERR_ERROR_COUNT$/;"	e	enum:ScriptError_t
SCRIPT_ERR_EVAL_FALSE	script/script_error.h	/^    SCRIPT_ERR_EVAL_FALSE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_INVALID_ALTSTACK_OPERATION	script/script_error.h	/^    SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_INVALID_STACK_OPERATION	script/script_error.h	/^    SCRIPT_ERR_INVALID_STACK_OPERATION,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_LAST	script/script_error.h	70;"	d
SCRIPT_ERR_MINIMALDATA	script/script_error.h	/^    SCRIPT_ERR_MINIMALDATA,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_MINIMALIF	script/script_error.h	/^    SCRIPT_ERR_MINIMALIF,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_NEGATIVE_LOCKTIME	script/script_error.h	/^    SCRIPT_ERR_NEGATIVE_LOCKTIME,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_NUMEQUALVERIFY	script/script_error.h	/^    SCRIPT_ERR_NUMEQUALVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OK	script/script_error.h	/^    SCRIPT_ERR_OK = 0,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_COUNT	script/script_error.h	/^    SCRIPT_ERR_OP_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_RETURN	script/script_error.h	/^    SCRIPT_ERR_OP_RETURN,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUBKEYTYPE	script/script_error.h	/^    SCRIPT_ERR_PUBKEYTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUBKEY_COUNT	script/script_error.h	/^    SCRIPT_ERR_PUBKEY_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUSH_SIZE	script/script_error.h	/^    SCRIPT_ERR_PUSH_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SCRIPT_SIZE	script/script_error.h	/^    SCRIPT_ERR_SCRIPT_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_COUNT	script/script_error.h	/^    SCRIPT_ERR_SIG_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_DER	script/script_error.h	/^    SCRIPT_ERR_SIG_DER,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_HASHTYPE	script/script_error.h	/^    SCRIPT_ERR_SIG_HASHTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_HIGH_S	script/script_error.h	/^    SCRIPT_ERR_SIG_HIGH_S,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_NULLDUMMY	script/script_error.h	/^    SCRIPT_ERR_SIG_NULLDUMMY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_NULLFAIL	script/script_error.h	/^    SCRIPT_ERR_SIG_NULLFAIL,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_PUSHONLY	script/script_error.h	/^    SCRIPT_ERR_SIG_PUSHONLY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_STACK_SIZE	script/script_error.h	/^    SCRIPT_ERR_STACK_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNBALANCED_CONDITIONAL	script/script_error.h	/^    SCRIPT_ERR_UNBALANCED_CONDITIONAL,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNKNOWN_ERROR	script/script_error.h	/^    SCRIPT_ERR_UNKNOWN_ERROR,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNSATISFIED_LOCKTIME	script/script_error.h	/^    SCRIPT_ERR_UNSATISFIED_LOCKTIME,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_VERIFY	script/script_error.h	/^    SCRIPT_ERR_VERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_MALLEATED	script/script_error.h	/^    SCRIPT_ERR_WITNESS_MALLEATED,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_MALLEATED_P2SH	script/script_error.h	/^    SCRIPT_ERR_WITNESS_MALLEATED_P2SH,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH	script/script_error.h	/^    SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY	script/script_error.h	/^    SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH	script/script_error.h	/^    SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_PUBKEYTYPE	script/script_error.h	/^    SCRIPT_ERR_WITNESS_PUBKEYTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_WITNESS_UNEXPECTED	script/script_error.h	/^    SCRIPT_ERR_WITNESS_UNEXPECTED,$/;"	e	enum:ScriptError_t
SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY	script/interpreter.h	/^    SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),$/;"	e	enum:__anon101
SCRIPT_VERIFY_CHECKSEQUENCEVERIFY	script/interpreter.h	/^    SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),$/;"	e	enum:__anon101
SCRIPT_VERIFY_CLEANSTACK	script/interpreter.h	/^    SCRIPT_VERIFY_CLEANSTACK = (1U << 8),$/;"	e	enum:__anon101
SCRIPT_VERIFY_DERSIG	script/interpreter.h	/^    SCRIPT_VERIFY_DERSIG    = (1U << 2),$/;"	e	enum:__anon101
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS	script/interpreter.h	/^    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),$/;"	e	enum:__anon101
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM	script/interpreter.h	/^    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1U << 12),$/;"	e	enum:__anon101
SCRIPT_VERIFY_LOW_S	script/interpreter.h	/^    SCRIPT_VERIFY_LOW_S     = (1U << 3),$/;"	e	enum:__anon101
SCRIPT_VERIFY_MINIMALDATA	script/interpreter.h	/^    SCRIPT_VERIFY_MINIMALDATA = (1U << 6),$/;"	e	enum:__anon101
SCRIPT_VERIFY_MINIMALIF	script/interpreter.h	/^    SCRIPT_VERIFY_MINIMALIF = (1U << 13),$/;"	e	enum:__anon101
SCRIPT_VERIFY_NONE	script/interpreter.h	/^    SCRIPT_VERIFY_NONE      = 0,$/;"	e	enum:__anon101
SCRIPT_VERIFY_NULLDUMMY	script/interpreter.h	/^    SCRIPT_VERIFY_NULLDUMMY = (1U << 4),$/;"	e	enum:__anon101
SCRIPT_VERIFY_NULLFAIL	script/interpreter.h	/^    SCRIPT_VERIFY_NULLFAIL = (1U << 14),$/;"	e	enum:__anon101
SCRIPT_VERIFY_P2SH	script/interpreter.h	/^    SCRIPT_VERIFY_P2SH      = (1U << 0),$/;"	e	enum:__anon101
SCRIPT_VERIFY_SIGPUSHONLY	script/interpreter.h	/^    SCRIPT_VERIFY_SIGPUSHONLY = (1U << 5),$/;"	e	enum:__anon101
SCRIPT_VERIFY_STRICTENC	script/interpreter.h	/^    SCRIPT_VERIFY_STRICTENC = (1U << 1),$/;"	e	enum:__anon101
SCRIPT_VERIFY_WITNESS	script/interpreter.h	/^    SCRIPT_VERIFY_WITNESS = (1U << 11),$/;"	e	enum:__anon101
SCRIPT_VERIFY_WITNESS_PUBKEYTYPE	script/interpreter.h	/^    SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),$/;"	e	enum:__anon101
SECP256K1_API	secp256k1/include/secp256k1.h	119;"	d
SECP256K1_API	secp256k1/include/secp256k1.h	121;"	d
SECP256K1_API	secp256k1/include/secp256k1.h	124;"	d
SECP256K1_API	secp256k1/include/secp256k1.h	126;"	d
SECP256K1_ARG_NONNULL	secp256k1/include/secp256k1.h	139;"	d
SECP256K1_ARG_NONNULL	secp256k1/include/secp256k1.h	141;"	d
SECP256K1_CONTEXT_NONE	secp256k1/include/secp256k1.h	156;"	d
SECP256K1_CONTEXT_SIGN	secp256k1/include/secp256k1.h	155;"	d
SECP256K1_CONTEXT_VERIFY	secp256k1/include/secp256k1.h	154;"	d
SECP256K1_EC_COMPRESSED	secp256k1/include/secp256k1.h	159;"	d
SECP256K1_EC_PARSE_TEST_NINVALID	secp256k1/src/tests.c	2906;"	d	file:
SECP256K1_EC_PARSE_TEST_NVALID	secp256k1/src/tests.c	2788;"	d	file:
SECP256K1_EC_PARSE_TEST_NXVALID	secp256k1/src/tests.c	2875;"	d	file:
SECP256K1_EC_UNCOMPRESSED	secp256k1/include/secp256k1.h	160;"	d
SECP256K1_FE_CONST	secp256k1/src/field_10x26.h	36;"	d
SECP256K1_FE_CONST	secp256k1/src/field_10x26.h	38;"	d
SECP256K1_FE_CONST	secp256k1/src/field_5x52.h	31;"	d
SECP256K1_FE_CONST	secp256k1/src/field_5x52.h	33;"	d
SECP256K1_FE_CONST_INNER	secp256k1/src/field_10x26.h	22;"	d
SECP256K1_FE_CONST_INNER	secp256k1/src/field_5x52.h	22;"	d
SECP256K1_FE_STORAGE_CONST	secp256k1/src/field_10x26.h	45;"	d
SECP256K1_FE_STORAGE_CONST	secp256k1/src/field_5x52.h	40;"	d
SECP256K1_FE_STORAGE_CONST_GET	secp256k1/src/field_10x26.h	46;"	d
SECP256K1_FLAGS_BIT_COMPRESSION	secp256k1/include/secp256k1.h	151;"	d
SECP256K1_FLAGS_BIT_CONTEXT_SIGN	secp256k1/include/secp256k1.h	150;"	d
SECP256K1_FLAGS_BIT_CONTEXT_VERIFY	secp256k1/include/secp256k1.h	149;"	d
SECP256K1_FLAGS_TYPE_COMPRESSION	secp256k1/include/secp256k1.h	147;"	d
SECP256K1_FLAGS_TYPE_CONTEXT	secp256k1/include/secp256k1.h	146;"	d
SECP256K1_FLAGS_TYPE_MASK	secp256k1/include/secp256k1.h	145;"	d
SECP256K1_GEJ_CONST	secp256k1/src/group.h	31;"	d
SECP256K1_GEJ_CONST_INFINITY	secp256k1/src/group.h	32;"	d
SECP256K1_GE_CONST	secp256k1/src/group.h	20;"	d
SECP256K1_GE_CONST_INFINITY	secp256k1/src/group.h	21;"	d
SECP256K1_GE_STORAGE_CONST	secp256k1/src/group.h	39;"	d
SECP256K1_GE_STORAGE_CONST_GET	secp256k1/src/group.h	41;"	d
SECP256K1_GNUC_EXT	secp256k1/src/util.h	106;"	d
SECP256K1_GNUC_EXT	secp256k1/src/util.h	108;"	d
SECP256K1_GNUC_PREREQ	secp256k1/include/secp256k1.h	100;"	d
SECP256K1_GNUC_PREREQ	secp256k1/include/secp256k1.h	97;"	d
SECP256K1_INLINE	secp256k1/include/secp256k1.h	106;"	d
SECP256K1_INLINE	secp256k1/include/secp256k1.h	108;"	d
SECP256K1_INLINE	secp256k1/include/secp256k1.h	110;"	d
SECP256K1_INLINE	secp256k1/include/secp256k1.h	113;"	d
SECP256K1_N_0	secp256k1/src/scalar_4x64_impl.h	11;"	d
SECP256K1_N_0	secp256k1/src/scalar_8x32_impl.h	11;"	d
SECP256K1_N_1	secp256k1/src/scalar_4x64_impl.h	12;"	d
SECP256K1_N_1	secp256k1/src/scalar_8x32_impl.h	12;"	d
SECP256K1_N_2	secp256k1/src/scalar_4x64_impl.h	13;"	d
SECP256K1_N_2	secp256k1/src/scalar_8x32_impl.h	13;"	d
SECP256K1_N_3	secp256k1/src/scalar_4x64_impl.h	14;"	d
SECP256K1_N_3	secp256k1/src/scalar_8x32_impl.h	14;"	d
SECP256K1_N_4	secp256k1/src/scalar_8x32_impl.h	15;"	d
SECP256K1_N_5	secp256k1/src/scalar_8x32_impl.h	16;"	d
SECP256K1_N_6	secp256k1/src/scalar_8x32_impl.h	17;"	d
SECP256K1_N_7	secp256k1/src/scalar_8x32_impl.h	18;"	d
SECP256K1_N_C_0	secp256k1/src/scalar_4x64_impl.h	17;"	d
SECP256K1_N_C_0	secp256k1/src/scalar_8x32_impl.h	21;"	d
SECP256K1_N_C_1	secp256k1/src/scalar_4x64_impl.h	18;"	d
SECP256K1_N_C_1	secp256k1/src/scalar_8x32_impl.h	22;"	d
SECP256K1_N_C_2	secp256k1/src/scalar_4x64_impl.h	19;"	d
SECP256K1_N_C_2	secp256k1/src/scalar_8x32_impl.h	23;"	d
SECP256K1_N_C_3	secp256k1/src/scalar_8x32_impl.h	24;"	d
SECP256K1_N_C_4	secp256k1/src/scalar_8x32_impl.h	25;"	d
SECP256K1_N_H_0	secp256k1/src/scalar_4x64_impl.h	22;"	d
SECP256K1_N_H_0	secp256k1/src/scalar_8x32_impl.h	28;"	d
SECP256K1_N_H_1	secp256k1/src/scalar_4x64_impl.h	23;"	d
SECP256K1_N_H_1	secp256k1/src/scalar_8x32_impl.h	29;"	d
SECP256K1_N_H_2	secp256k1/src/scalar_4x64_impl.h	24;"	d
SECP256K1_N_H_2	secp256k1/src/scalar_8x32_impl.h	30;"	d
SECP256K1_N_H_3	secp256k1/src/scalar_4x64_impl.h	25;"	d
SECP256K1_N_H_3	secp256k1/src/scalar_8x32_impl.h	31;"	d
SECP256K1_N_H_4	secp256k1/src/scalar_8x32_impl.h	32;"	d
SECP256K1_N_H_5	secp256k1/src/scalar_8x32_impl.h	33;"	d
SECP256K1_N_H_6	secp256k1/src/scalar_8x32_impl.h	34;"	d
SECP256K1_N_H_7	secp256k1/src/scalar_8x32_impl.h	35;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	81;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	85;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	87;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	89;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	92;"	d
SECP256K1_SCALAR_CONST	secp256k1/src/scalar_4x64.h	17;"	d
SECP256K1_SCALAR_CONST	secp256k1/src/scalar_8x32.h	17;"	d
SECP256K1_WARN_UNUSED_RESULT	secp256k1/include/secp256k1.h	134;"	d
SECP256K1_WARN_UNUSED_RESULT	secp256k1/include/secp256k1.h	136;"	d
SECP_INCLUDES	secp256k1/Makefile	/^SECP_INCLUDES = $/;"	m
SECP_LIBS	secp256k1/Makefile	/^SECP_LIBS = $/;"	m
SECP_TEST_INCLUDES	secp256k1/Makefile	/^SECP_TEST_INCLUDES =   $/;"	m
SECP_TEST_LIBS	secp256k1/Makefile	/^SECP_TEST_LIBS = -lcrypto  $/;"	m
SECRET_KEY	chainparams.h	/^        SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
SECURE	ui_interface.h	/^        SECURE              = 0x40000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
SED	Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SED	secp256k1/Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SED	univalue/Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SENDCMPCT	protocol.cpp	/^const char *SENDCMPCT="sendcmpct";$/;"	m	namespace:NetMsgType	file:
SENDHEADERS	protocol.cpp	/^const char *SENDHEADERS="sendheaders";$/;"	m	namespace:NetMsgType	file:
SENDHEADERS_VERSION	version.h	/^static const int SENDHEADERS_VERSION = 70012;$/;"	v
SEND_CONFIRM_DELAY	qt/sendcoinsdialog.h	103;"	d
SEQUENCE_FINAL	primitives/transaction.h	/^    static const uint32_t SEQUENCE_FINAL = 0xffffffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_DISABLE_FLAG	primitives/transaction.h	/^    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_GRANULARITY	primitives/transaction.h	/^    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_MASK	primitives/transaction.h	/^    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_TYPE_FLAG	primitives/transaction.h	/^    static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);$/;"	m	class:CTxIn
SEQUENTIAL	leveldb/doc/bench/db_bench_sqlite3.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SEQUENTIAL	leveldb/doc/bench/db_bench_tree_db.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SERIALIZE_TRANSACTION_NO_WITNESS	primitives/transaction.h	/^static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;$/;"	v
SER_DISK	serialize.h	/^    SER_DISK            = (1 << 1),$/;"	e	enum:__anon115
SER_GETHASH	serialize.h	/^    SER_GETHASH         = (1 << 2),$/;"	e	enum:__anon115
SER_NETWORK	serialize.h	/^    SER_NETWORK         = (1 << 0),$/;"	e	enum:__anon115
SETASKFOR_MAX_SZ	net.h	/^static const size_t SETASKFOR_MAX_SZ = 2 * MAX_INV_SZ;$/;"	v
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	secp256k1/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	univalue/Makefile	/^SET_MAKE = $/;"	m
SHA1	bench/crypto_hash.cpp	/^BENCHMARK(SHA1);$/;"	v
SHA1	bench/crypto_hash.cpp	/^static void SHA1(benchmark::State& state)$/;"	f	file:
SHA256	bench/crypto_hash.cpp	/^BENCHMARK(SHA256);$/;"	v
SHA256	bench/crypto_hash.cpp	/^static void SHA256(benchmark::State& state)$/;"	f	file:
SHA256AutoDetect	crypto/sha256.cpp	/^std::string SHA256AutoDetect()$/;"	f
SHA256_32b	bench/crypto_hash.cpp	/^BENCHMARK(SHA256_32b);$/;"	v
SHA256_32b	bench/crypto_hash.cpp	/^static void SHA256_32b(benchmark::State& state)$/;"	f	file:
SHA512	bench/crypto_hash.cpp	/^BENCHMARK(SHA512);$/;"	v
SHA512	bench/crypto_hash.cpp	/^static void SHA512(benchmark::State& state)$/;"	f	file:
SHARED_ALLOBJS	leveldb/Makefile	/^SHARED_ALLOBJS := $(SHARED_LIBOBJECTS) $(SHARED_MEMENVOBJECTS) $(TESTHARNESS)$/;"	m
SHARED_LIB1	leveldb/Makefile	/^SHARED_LIB1 = libleveldb.$(PLATFORM_SHARED_EXT)$/;"	m
SHARED_LIB2	leveldb/Makefile	/^SHARED_LIB2 = $(SHARED_LIB1)$/;"	m
SHARED_LIB2	leveldb/Makefile	/^SHARED_LIB2 = $(SHARED_LIB1).$(SHARED_VERSION_MAJOR)$/;"	m
SHARED_LIB3	leveldb/Makefile	/^SHARED_LIB3 = $(SHARED_LIB1)$/;"	m
SHARED_LIB3	leveldb/Makefile	/^SHARED_LIB3 = $(SHARED_LIB1).$(SHARED_VERSION_MAJOR).$(SHARED_VERSION_MINOR)$/;"	m
SHARED_LIBOBJECTS	leveldb/Makefile	/^SHARED_LIBOBJECTS := $(addprefix $(SHARED_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
SHARED_LIBS	leveldb/Makefile	/^SHARED_LIBS = $(SHARED_LIB1)$/;"	m
SHARED_LIBS	leveldb/Makefile	/^SHARED_LIBS = $(SHARED_OUTDIR)\/$(SHARED_LIB1) $(SHARED_OUTDIR)\/$(SHARED_LIB2) $(SHARED_OUTDIR)\/$(SHARED_LIB3)$/;"	m
SHARED_LOCKS_REQUIRED	leveldb/port/thread_annotations.h	17;"	d
SHARED_LOCKS_REQUIRED	threadsafety.h	32;"	d
SHARED_LOCKS_REQUIRED	threadsafety.h	51;"	d
SHARED_LOCK_FUNCTION	leveldb/port/thread_annotations.h	41;"	d
SHARED_LOCK_FUNCTION	threadsafety.h	25;"	d
SHARED_LOCK_FUNCTION	threadsafety.h	44;"	d
SHARED_MEMENVLIB	leveldb/Makefile	/^SHARED_MEMENVLIB = $(SHARED_OUTDIR)\/libmemenv.a$/;"	m
SHARED_MEMENVOBJECTS	leveldb/Makefile	/^SHARED_MEMENVOBJECTS := $(addprefix $(SHARED_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
SHARED_OUTDIR	leveldb/Makefile	/^SHARED_OUTDIR=out-shared$/;"	m
SHARED_PROGRAMS	leveldb/Makefile	/^SHARED_PROGRAMS := $(addprefix $(SHARED_OUTDIR)\/, db_bench)$/;"	m
SHARED_TRYLOCK_FUNCTION	leveldb/port/thread_annotations.h	49;"	d
SHARED_TRYLOCK_FUNCTION	threadsafety.h	27;"	d
SHARED_TRYLOCK_FUNCTION	threadsafety.h	46;"	d
SHARED_TX_OFFSET	test/blockencodings_tests.cpp	56;"	d	file:
SHARED_VERSION_MAJOR	leveldb/Makefile	/^SHARED_VERSION_MAJOR = 1$/;"	m
SHARED_VERSION_MINOR	leveldb/Makefile	/^SHARED_VERSION_MINOR = 20$/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	secp256k1/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	univalue/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHORTTXIDS_LENGTH	blockencodings.h	/^    static const int SHORTTXIDS_LENGTH = 6;$/;"	m	class:CBlockHeaderAndShortTxIDs
SHORT_BLOCK_PERIODS	policy/fees.h	/^    static constexpr unsigned int SHORT_BLOCK_PERIODS = 12;$/;"	m	class:CBlockPolicyEstimator
SHORT_DECAY	policy/fees.h	/^    static constexpr double SHORT_DECAY = .962;$/;"	m	class:CBlockPolicyEstimator
SHORT_HALFLIFE	policy/fees.h	/^    SHORT_HALFLIFE = 0,$/;"	e	enum:FeeEstimateHorizon
SHORT_IDS_BLOCKS_VERSION	version.h	/^static const int SHORT_IDS_BLOCKS_VERSION = 70014;$/;"	v
SHORT_SCALE	policy/fees.h	/^    static constexpr unsigned int SHORT_SCALE = 1;$/;"	m	class:CBlockPolicyEstimator
SIGHASH_ALL	script/interpreter.h	/^    SIGHASH_ALL = 1,$/;"	e	enum:__anon100
SIGHASH_ANYONECANPAY	script/interpreter.h	/^    SIGHASH_ANYONECANPAY = 0x80,$/;"	e	enum:__anon100
SIGHASH_NONE	script/interpreter.h	/^    SIGHASH_NONE = 2,$/;"	e	enum:__anon100
SIGHASH_SINGLE	script/interpreter.h	/^    SIGHASH_SINGLE = 3,$/;"	e	enum:__anon100
SIGVERSION_BASE	script/interpreter.h	/^    SIGVERSION_BASE = 0,$/;"	e	enum:SigVersion
SIGVERSION_WITNESS_V0	script/interpreter.h	/^    SIGVERSION_WITNESS_V0 = 1,$/;"	e	enum:SigVersion
SIMULATORSDK	leveldb/Makefile	/^SIMULATORSDK=$(shell xcrun -sdk iphonesimulator --show-sdk-path)$/;"	m
SIMULATOR_ALLOBJS	leveldb/Makefile	/^SIMULATOR_ALLOBJS := $(SIMULATOR_LIBOBJECTS) $(SIMULATOR_MEMENVOBJECTS)$/;"	m
SIMULATOR_CFLAGS	leveldb/Makefile	/^SIMULATOR_CFLAGS = -isysroot "$(SIMULATORSDK)" -arch i686 -arch x86_64$/;"	m
SIMULATOR_LIBOBJECTS	leveldb/Makefile	/^SIMULATOR_LIBOBJECTS := $(addprefix $(SIMULATOR_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
SIMULATOR_MEMENVOBJECTS	leveldb/Makefile	/^SIMULATOR_MEMENVOBJECTS := $(addprefix $(SIMULATOR_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
SIMULATOR_OUTDIR	leveldb/Makefile	/^SIMULATOR_OUTDIR=out-ios-x86$/;"	m
SIPROUND	hash.cpp	84;"	d	file:
SIXPEREM_SP_CP	qt/wificoinunits.h	24;"	d
SIXPEREM_SP_HTML	qt/wificoinunits.h	26;"	d
SIXPEREM_SP_UTF8	qt/wificoinunits.h	25;"	d
SIZELIMIT	txmempool.h	/^    SIZELIMIT,   \/\/! Removed in size limiting$/;"	m	class:MemPoolRemovalReason
SKIPLIST_LENGTH	test/skiplist_tests.cpp	13;"	d	file:
SOCKET	compat.h	/^typedef unsigned int SOCKET;$/;"	t
SOCKET_ERROR	compat.h	63;"	d
SOCKS4	netbase.cpp	/^    SOCKS4 = 0x04,$/;"	e	enum:uint8_t	file:
SOCKS5	netbase.cpp	/^    SOCKS5 = 0x05$/;"	e	enum:uint8_t	file:
SOCKS5_RECV_TIMEOUT	netbase.cpp	/^static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;$/;"	v	file:
SOURCES	Makefile	/^SOURCES = $(crypto_libwificoin_crypto_a_SOURCES) \\$/;"	m
SOURCES	secp256k1/Makefile	/^SOURCES = $(libsecp256k1_la_SOURCES) $(libsecp256k1_common_la_SOURCES) \\$/;"	m
SOURCES	univalue/Makefile	/^SOURCES = $(libunivalue_la_SOURCES) $(test_unitester_SOURCES)$/;"	m
SPINNER_FRAMES	qt/guiconstants.h	49;"	d
SSE42_CXXFLAGS	Makefile	/^SSE42_CXXFLAGS = -msse4.2$/;"	m
SSLVerifyError	qt/paymentrequestplus.cpp	/^    SSLVerifyError(std::string err) : std::runtime_error(err) { }$/;"	f	class:SSLVerifyError
SSLVerifyError	qt/paymentrequestplus.cpp	/^class SSLVerifyError : public std::runtime_error$/;"	c	file:
SSL_CFLAGS	Makefile	/^SSL_CFLAGS =  $/;"	m
SSL_LIBS	Makefile	/^SSL_LIBS = -lssl -lcrypto  $/;"	m
SSTTableFileName	leveldb/db/filename.cc	/^std::string SSTTableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
STALE_CHECK_INTERVAL	net_processing.h	/^static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; \/\/ 10 minutes$/;"	v
STANDARD_LOCKTIME_VERIFY_FLAGS	policy/policy.h	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |$/;"	v
STANDARD_NOT_MANDATORY_VERIFY_FLAGS	policy/policy.h	/^static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;$/;"	v
STANDARD_SCRIPT_VERIFY_FLAGS	policy/policy.h	/^static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |$/;"	v
STARTING	leveldb/db/skiplist_test.cc	/^    STARTING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
STATIC_ALLOBJS	leveldb/Makefile	/^STATIC_ALLOBJS := $(STATIC_LIBOBJECTS) $(STATIC_MEMENVOBJECTS) $(STATIC_TESTOBJS) $(STATIC_UTILOBJS) $(TESTHARNESS)$/;"	m
STATIC_LIBOBJECTS	leveldb/Makefile	/^STATIC_LIBOBJECTS := $(addprefix $(STATIC_OUTDIR)\/, $(SOURCES:.cc=.o))$/;"	m
STATIC_MEMENVOBJECTS	leveldb/Makefile	/^STATIC_MEMENVOBJECTS := $(addprefix $(STATIC_OUTDIR)\/, $(MEMENV_SOURCES:.cc=.o))$/;"	m
STATIC_OUTDIR	leveldb/Makefile	/^STATIC_OUTDIR=out-ios-universal$/;"	m
STATIC_OUTDIR	leveldb/Makefile	/^STATIC_OUTDIR=out-static$/;"	m
STATIC_PROGRAMS	leveldb/Makefile	/^STATIC_PROGRAMS := $(addprefix $(STATIC_OUTDIR)\/, $(PROGNAMES))$/;"	m
STATIC_TESTOBJS	leveldb/Makefile	/^STATIC_TESTOBJS := $(addprefix $(STATIC_OUTDIR)\/, $(addsuffix .o, $(TESTS)))$/;"	m
STATIC_UTILOBJS	leveldb/Makefile	/^STATIC_UTILOBJS := $(addprefix $(STATIC_OUTDIR)\/, $(addsuffix .o, $(UTILS)))$/;"	m
STATUSBAR_ICONSIZE	qt/guiconstants.h	/^static const int STATUSBAR_ICONSIZE = 16;$/;"	v
STATUS_COLUMN_WIDTH	qt/transactionview.h	/^        STATUS_COLUMN_WIDTH = 30,$/;"	e	enum:TransactionView::ColumnWidths
STDC_HEADERS	config/wificoin-config.h	388;"	d
STDC_HEADERS	secp256k1/src/libsecp256k1-config.h	94;"	d
STDC_HEADERS	univalue/univalue-config.h	60;"	d
STEP1	leveldb/util/crc32c.cc	313;"	d	file:
STEP1	leveldb/util/crc32c.cc	349;"	d	file:
STEP4	leveldb/util/crc32c.cc	317;"	d	file:
STEP4	leveldb/util/crc32c.cc	348;"	d	file:
STLLessThan	leveldb/table/table_test.cc	/^  STLLessThan() : cmp(BytewiseComparator()) { }$/;"	f	struct:leveldb::__anon41::STLLessThan
STLLessThan	leveldb/table/table_test.cc	/^  STLLessThan(const Comparator* c) : cmp(c) { }$/;"	f	struct:leveldb::__anon41::STLLessThan
STLLessThan	leveldb/table/table_test.cc	/^struct STLLessThan {$/;"	s	namespace:leveldb::__anon41	file:
STORAGE_LEVELDB_DB_BUILDER_H_	leveldb/db/builder.h	6;"	d
STORAGE_LEVELDB_DB_DBFORMAT_H_	leveldb/db/dbformat.h	6;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	leveldb/db/db_impl.h	6;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	leveldb/db/db_iter.h	6;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	leveldb/db/filename.h	8;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	leveldb/db/log_format.h	9;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	leveldb/db/log_reader.h	6;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	leveldb/db/log_writer.h	6;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	leveldb/db/memtable.h	6;"	d
STORAGE_LEVELDB_DB_SKIPLIST_H_	leveldb/db/skiplist.h	6;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	leveldb/db/snapshot.h	6;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	leveldb/db/table_cache.h	8;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	leveldb/db/version_edit.h	6;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	leveldb/db/version_set.h	16;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	leveldb/db/write_batch_internal.h	6;"	d
STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_	leveldb/helpers/memenv/memenv.h	6;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	leveldb/include/leveldb/cache.h	19;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	leveldb/include/leveldb/comparator.h	6;"	d
STORAGE_LEVELDB_INCLUDE_C_H_	leveldb/include/leveldb/c.h	41;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	leveldb/include/leveldb/db.h	6;"	d
STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_	leveldb/include/leveldb/dumpfile.h	6;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	leveldb/include/leveldb/env.h	14;"	d
STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_	leveldb/include/leveldb/filter_policy.h	17;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	leveldb/include/leveldb/iterator.h	16;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	leveldb/include/leveldb/options.h	6;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	leveldb/include/leveldb/slice.h	16;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	leveldb/include/leveldb/status.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	leveldb/include/leveldb/table_builder.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	leveldb/include/leveldb/table.h	6;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	leveldb/include/leveldb/write_batch.h	22;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	leveldb/port/port_example.h	11;"	d
STORAGE_LEVELDB_PORT_PORT_H_	leveldb/port/port.h	6;"	d
STORAGE_LEVELDB_PORT_PORT_POSIX_H_	leveldb/port/port_posix.h	8;"	d
STORAGE_LEVELDB_PORT_PORT_WIN_H_	leveldb/port/port_win.h	32;"	d
STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_	leveldb/port/thread_annotations.h	6;"	d
STORAGE_LEVELDB_PORT_WIN_STDINT_H_	leveldb/port/win/stdint.h	8;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	leveldb/table/block_builder.h	6;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	leveldb/table/block.h	6;"	d
STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_	leveldb/table/filter_block.h	10;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	leveldb/table/format.h	6;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	leveldb/table/iterator_wrapper.h	6;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	leveldb/table/merger.h	6;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	leveldb/table/two_level_iterator.h	6;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	leveldb/util/arena.h	6;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	leveldb/util/coding.h	11;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	leveldb/util/crc32c.h	6;"	d
STORAGE_LEVELDB_UTIL_ENV_POSIX_TEST_HELPER_H_	leveldb/util/env_posix_test_helper.h	6;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	leveldb/util/hash.h	8;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	leveldb/util/histogram.h	6;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	leveldb/util/logging.h	9;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	leveldb/util/mutexlock.h	6;"	d
STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_	leveldb/util/posix_logger.h	9;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	leveldb/util/random.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTHARNESS_H_	leveldb/util/testharness.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	leveldb/util/testutil.h	6;"	d
STRERROR_R_CHAR_P	config/wificoin-config.h	391;"	d
STRINGIZE	clientversion.h	21;"	d
STRIP	Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
STRIP	secp256k1/Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
STRIP	univalue/Makefile	/^STRIP = strip$/;"	m
STYLE_INVALID	qt/guiconstants.h	20;"	d
ST_ERROR	qt/intro.cpp	/^        ST_ERROR$/;"	e	enum:FreespaceChecker::Status	file:
ST_OK	qt/intro.cpp	/^        ST_OK,$/;"	e	enum:FreespaceChecker::Status	file:
SUBDIRS	Makefile	/^SUBDIRS =$/;"	m
SUBVERSION_COLUMN_WIDTH	qt/rpcconsole.h	/^        SUBVERSION_COLUMN_WIDTH = 150,$/;"	e	enum:RPCConsole::ColumnWidths
SUCCEEDED	netbase.cpp	/^    SUCCEEDED = 0x00,        \/\/! Succeeded$/;"	e	enum:uint8_t	file:
SUCCESS_PCT	policy/fees.h	/^    static constexpr double SUCCESS_PCT = .85;$/;"	m	class:CBlockPolicyEstimator
SUFFICIENT_FEETXS	policy/fees.h	/^    static constexpr double SUFFICIENT_FEETXS = 0.1;$/;"	m	class:CBlockPolicyEstimator
SUFFICIENT_TXS_SHORT	policy/fees.h	/^    static constexpr double SUFFICIENT_TXS_SHORT = 0.5;$/;"	m	class:CBlockPolicyEstimator
S_IRUSR	compat.h	68;"	d
S_IWUSR	compat.h	69;"	d
SafeChars	utilstrencodings.h	/^enum SafeChars$/;"	g
SaltedOutpointHasher	coins.cpp	/^SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}$/;"	f	class:SaltedOutpointHasher
SaltedOutpointHasher	coins.h	/^class SaltedOutpointHasher$/;"	c
SaltedTxidHasher	txmempool.cpp	/^SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}$/;"	f	class:SaltedTxidHasher
SaltedTxidHasher	txmempool.h	/^class SaltedTxidHasher$/;"	c
Salvage	wallet/db.cpp	/^bool CDBEnv::Salvage(const std::string& strFile, bool fAggressive, std::vector<CDBEnv::KeyValPair>& vResult)$/;"	f	class:CDBEnv
SanitizeOptions	leveldb/db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SanitizeString	utilstrencodings.cpp	/^std::string SanitizeString(const std::string& str, int rule)$/;"	f
SaveBytes	crypto/ctaes/ctaes.c	/^static void SaveBytes(unsigned char* data16, const AES_state *s) {$/;"	f	file:
SaveError	leveldb/db/c.cc	/^static bool SaveError(char** errptr, const Status& s) {$/;"	f	file:
SaveError	leveldb/table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon39::TwoLevelIterator	file:
SaveKey	leveldb/db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon20::DBIter	file:
SaveTo	leveldb/db/version_set.cc	/^  void SaveTo(Version* v) {$/;"	f	class:leveldb::VersionSet::Builder
SaveValue	leveldb/db/version_set.cc	/^static void SaveValue(void* arg, const Slice& ikey, const Slice& v) {$/;"	f	namespace:leveldb
Saver	leveldb/db/version_set.cc	/^struct Saver {$/;"	s	namespace:leveldb::__anon22	file:
SaverState	leveldb/db/version_set.cc	/^enum SaverState {$/;"	g	namespace:leveldb::__anon22	file:
ScanForWalletTransactions	wallet/wallet.cpp	/^CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)$/;"	f	class:CWallet
ScanTable	leveldb/db/repair.cc	/^  void ScanTable(uint64_t number) {$/;"	f	class:leveldb::__anon26::Repairer	file:
Schedule	leveldb/include/leveldb/env.h	/^  void Schedule(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
Schedule	leveldb/util/env_posix.cc	/^void PosixEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon11::PosixEnv
Schedule	leveldb/util/env_win.cc	/^void Win32Env::Schedule( void (*function)(void* arg), void* arg )$/;"	f	class:leveldb::Win32::Win32Env
ScheduleProc	leveldb/util/env_win.cc	/^typedef void (*ScheduleProc)(void*) ;$/;"	t	namespace:leveldb::Win32	file:
ScriptError	script/script_error.h	/^} ScriptError;$/;"	t	typeref:enum:ScriptError_t
ScriptError	test/script_tests.cpp	/^    TestBuilder& ScriptError(ScriptError_t err)$/;"	f	class:__anon80::TestBuilder
ScriptErrorDesc	test/script_tests.cpp	/^struct ScriptErrorDesc$/;"	s	file:
ScriptErrorString	script/script_error.cpp	/^const char* ScriptErrorString(const ScriptError serror)$/;"	f
ScriptError_t	script/script_error.h	/^typedef enum ScriptError_t$/;"	g
ScriptFromHex	test/script_tests.cpp	/^ScriptFromHex(const char* hex)$/;"	f	file:
ScriptMap	keystore.h	/^typedef std::map<CScriptID, CScript > ScriptMap;$/;"	t
ScriptPubKeyToUniv	core_write.cpp	/^void ScriptPubKeyToUniv(const CScript& scriptPubKey,$/;"	f
ScriptToAsmStr	core_write.cpp	/^std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)$/;"	f
Secp256k1Context	secp256k1/src/java/org/wificoin/Secp256k1Context.java	/^public class Secp256k1Context {$/;"	c
Secp256k1Init	wificoin-tx.cpp	/^    Secp256k1Init() {$/;"	f	class:Secp256k1Init
Secp256k1Init	wificoin-tx.cpp	/^class Secp256k1Init$/;"	c	file:
SecureClearQLineEdit	qt/askpassphrasedialog.cpp	/^static void SecureClearQLineEdit(QLineEdit* edit)$/;"	f	file:
SecureString	support/allocators/secure.h	/^typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;$/;"	t
SeedInsecureRand	test/test_wificoin.h	/^static inline void SeedInsecureRand(bool fDeterministic = false)$/;"	f
SeedSpec6	chainparams.h	/^struct SeedSpec6 {$/;"	s
Seek	crypto/chacha20.cpp	/^void ChaCha20::Seek(uint64_t pos)$/;"	f	class:ChaCha20
Seek	dbwrapper.h	/^    template<typename K> void Seek(const K& key) {$/;"	f	class:CDBIterator
Seek	leveldb/db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon20::DBIter
Seek	leveldb/db/db_test.cc	/^    virtual void Seek(const Slice& k) {$/;"	f	class:leveldb::ModelDB::ModelIter
Seek	leveldb/db/memtable.cc	/^  virtual void Seek(const Slice& k) { iter_.Seek(EncodeKey(&tmp_, k)); }$/;"	f	class:leveldb::MemTableIterator
Seek	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	leveldb/db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Seek	leveldb/table/block.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Block::Iter
Seek	leveldb/table/iterator.cc	/^  virtual void Seek(const Slice& target) { }$/;"	f	class:leveldb::__anon42::EmptyIterator
Seek	leveldb/table/iterator_wrapper.h	/^  void Seek(const Slice& k) { assert(iter_); iter_->Seek(k);       Update(); }$/;"	f	class:leveldb::IteratorWrapper
Seek	leveldb/table/merger.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::__anon36::MergingIterator
Seek	leveldb/table/table_test.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::KeyConvertingIterator
Seek	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
Seek	streams.h	/^    bool Seek(uint64_t nPos) {$/;"	f	class:CBufferedFile
SeekRandom	leveldb/db/db_bench.cc	/^  void SeekRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SeekToFirst	dbwrapper.cpp	/^void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }$/;"	f	class:CDBIterator
SeekToFirst	leveldb/db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon20::DBIter
SeekToFirst	leveldb/db/db_test.cc	/^    virtual void SeekToFirst() { iter_ = map_->begin(); }$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToFirst	leveldb/db/memtable.cc	/^  virtual void SeekToFirst() { iter_.SeekToFirst(); }$/;"	f	class:leveldb::MemTableIterator
SeekToFirst	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	leveldb/db/version_set.cc	/^  virtual void SeekToFirst() { index_ = 0; }$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToFirst	leveldb/table/block.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Block::Iter
SeekToFirst	leveldb/table/iterator.cc	/^  virtual void SeekToFirst() { }$/;"	f	class:leveldb::__anon42::EmptyIterator
SeekToFirst	leveldb/table/iterator_wrapper.h	/^  void SeekToFirst()        { assert(iter_); iter_->SeekToFirst(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	leveldb/table/merger.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::__anon36::MergingIterator
SeekToFirst	leveldb/table/table_test.cc	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToFirst	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
SeekToLast	leveldb/db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon20::DBIter
SeekToLast	leveldb/db/db_test.cc	/^    virtual void SeekToLast() {$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToLast	leveldb/db/memtable.cc	/^  virtual void SeekToLast() { iter_.SeekToLast(); }$/;"	f	class:leveldb::MemTableIterator
SeekToLast	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	leveldb/db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToLast	leveldb/table/block.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Block::Iter
SeekToLast	leveldb/table/iterator.cc	/^  virtual void SeekToLast() { }$/;"	f	class:leveldb::__anon42::EmptyIterator
SeekToLast	leveldb/table/iterator_wrapper.h	/^  void SeekToLast()         { assert(iter_); iter_->SeekToLast();  Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	leveldb/table/merger.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::__anon36::MergingIterator
SeekToLast	leveldb/table/table_test.cc	/^  virtual void SeekToLast() { iter_->SeekToLast(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToLast	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
SeekToRestartPoint	leveldb/table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
SeenLocal	net.cpp	/^bool SeenLocal(const CService& addr)$/;"	f
Select	addrman.h	/^    CAddrInfo Select(bool newOnly = false)$/;"	f	class:CAddrMan
Select	wallet/coincontrol.h	/^    void Select(const COutPoint& output)$/;"	f	class:CCoinControl
SelectBaseParams	chainparamsbase.cpp	/^void SelectBaseParams(const std::string& chain)$/;"	f
SelectCoins	wallet/wallet.cpp	/^bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const$/;"	f	class:CWallet
SelectCoinsMinConf	wallet/wallet.cpp	/^bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,$/;"	f	class:CWallet
SelectParams	chainparams.cpp	/^void SelectParams(const std::string& network)$/;"	f
Select_	addrman.cpp	/^CAddrInfo CAddrMan::Select_(bool newOnly)$/;"	f	class:CAddrMan
SelfTest	crypto/sha256.cpp	/^bool SelfTest(TransformType tr) {$/;"	f	namespace:__anon87
SelfTest	test/coins_tests.cpp	/^    void SelfTest() const$/;"	f	class:__anon79::CCoinsViewCacheTest
Send	qt/addresstablemodel.cpp	/^const QString AddressTableModel::Send = "S";$/;"	m	class:AddressTableModel	file:
Send	qt/addresstablemodel.h	/^    static const QString Send;      \/**< Specifies send address *\/$/;"	m	class:AddressTableModel
SendBlockTransactions	net_processing.cpp	/^inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode* pfrom, CConnman* connman) {$/;"	f	file:
SendCoins	qt/test/wallettests.cpp	/^uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CWiFicoinAddress& address, CAmount amount, bool rbf)$/;"	f	namespace:__anon108
SendCoinsDialog	qt/sendcoinsdialog.cpp	/^SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:SendCoinsDialog
SendCoinsDialog	qt/sendcoinsdialog.h	/^class SendCoinsDialog : public QDialog$/;"	c
SendCoinsEntry	qt/sendcoinsentry.cpp	/^SendCoinsEntry::SendCoinsEntry(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:SendCoinsEntry
SendCoinsEntry	qt/sendcoinsentry.h	/^class SendCoinsEntry : public QStackedWidget$/;"	c
SendCoinsRecipient	qt/walletmodel.h	/^    explicit SendCoinsRecipient() : amount(0), fSubtractFeeFromAmount(false), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }$/;"	f	class:SendCoinsRecipient
SendCoinsRecipient	qt/walletmodel.h	/^    explicit SendCoinsRecipient(const QString &addr, const QString &_label, const CAmount& _amount, const QString &_message):$/;"	f	class:SendCoinsRecipient
SendCoinsRecipient	qt/walletmodel.h	/^class SendCoinsRecipient$/;"	c
SendCoinsReturn	qt/walletmodel.h	/^        SendCoinsReturn(StatusCode _status = OK, QString _reasonCommitFailed = "")$/;"	f	struct:WalletModel::SendCoinsReturn
SendCoinsReturn	qt/walletmodel.h	/^    struct SendCoinsReturn$/;"	s	class:WalletModel
SendConfirmationDialog	qt/sendcoinsdialog.cpp	/^SendConfirmationDialog::SendConfirmationDialog(const QString &title, const QString &text, int _secDelay,$/;"	f	class:SendConfirmationDialog
SendConfirmationDialog	qt/sendcoinsdialog.h	/^class SendConfirmationDialog : public QMessageBox$/;"	c
SendMessage	zmq/zmqpublishnotifier.cpp	/^bool CZMQAbstractPublishNotifier::SendMessage(const char *command, const void* data, size_t size)$/;"	f	class:CZMQAbstractPublishNotifier
SendMessages	net_processing.cpp	/^bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptMsgProc)$/;"	f	class:PeerLogicValidation
SendMoney	wallet/rpcwallet.cpp	/^static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, const CCoinControl& coin_control)$/;"	f	file:
SendRejectsAndCheckIfBanned	net_processing.cpp	/^static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)$/;"	f	file:
SendToAddress	qt/transactionrecord.h	/^        SendToAddress,$/;"	e	enum:TransactionRecord::Type
SendToOther	qt/transactionrecord.h	/^        SendToOther,$/;"	e	enum:TransactionRecord::Type
SendToSelf	qt/transactionrecord.h	/^        SendToSelf$/;"	e	enum:TransactionRecord::Type
Sending	qt/addresstablemodel.cpp	/^        Sending,$/;"	e	enum:AddressTableEntry::Type	file:
SendingTab	qt/addressbookpage.h	/^        SendingTab = 0,$/;"	e	enum:AddressBookPage::Tabs
SeparatorStyle	qt/wificoinunits.h	/^    enum SeparatorStyle$/;"	g	class:WiFicoinUnits
Sequence	leveldb/db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceLocks	consensus/tx_verify.cpp	/^bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
SequenceNumber	leveldb/db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequentialFile	leveldb/include/leveldb/env.h	/^  SequentialFile() { }$/;"	f	class:leveldb::SequentialFile
SequentialFile	leveldb/include/leveldb/env.h	/^class SequentialFile {$/;"	c	namespace:leveldb
SequentialFileImpl	leveldb/helpers/memenv/memenv.cc	/^  explicit SequentialFileImpl(FileState* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon16::SequentialFileImpl
SequentialFileImpl	leveldb/helpers/memenv/memenv.cc	/^class SequentialFileImpl : public SequentialFile {$/;"	c	namespace:leveldb::__anon16	file:
SerReadWrite	serialize.h	/^inline void SerReadWrite(Stream& s, T& obj, CSerActionUnserialize ser_action)$/;"	f
SerReadWrite	serialize.h	/^inline void SerReadWrite(Stream& s, const T& obj, CSerActionSerialize ser_action)$/;"	f
SerReadWriteMany	serialize.h	/^inline void SerReadWriteMany(Stream& s, CSerActionSerialize ser_action, Args&&... args)$/;"	f
SerReadWriteMany	serialize.h	/^inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&... args)$/;"	f
SerializationOp	addrdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBanEntry
SerializationOp	addrman.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CAddrInfo
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactions
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactionsRequest
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockHeaderAndShortTxIDs
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:PrefilledTransaction
SerializationOp	blockencodings.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:TransactionCompressor
SerializationOp	bloom.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBloomFilter
SerializationOp	chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockFileInfo
SerializationOp	chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CDiskBlockIndex
SerializationOp	chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:CDiskBlockPos
SerializationOp	compressor.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxOutCompressor
SerializationOp	merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMerkleBlock
SerializationOp	merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CPartialMerkleTree
SerializationOp	netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CNetAddr
SerializationOp	netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CService
SerializationOp	netaddress.h	/^        inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSubNet
SerializationOp	policy/feerate.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CFeeRate
SerializationOp	primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlock
SerializationOp	primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockHeader
SerializationOp	primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:CBlockLocator
SerializationOp	primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:COutPoint
SerializationOp	primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxIn
SerializationOp	primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CTxOut
SerializationOp	protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CAddress
SerializationOp	protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CInv
SerializationOp	protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CMessageHeader
SerializationOp	qt/recentrequeststablemodel.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:RecentRequestEntry
SerializationOp	qt/walletmodel.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:SendCoinsRecipient
SerializationOp	rest.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	struct:CCoin
SerializationOp	script/script.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CScript
SerializationOp	test/blockencodings_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:TestHeaderAndShortIDs
SerializationOp	test/dbwrapper_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:StringContentsSerializer
SerializationOp	test/serialize_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSerializeMethodsTestMany
SerializationOp	test/serialize_tests.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CSerializeMethodsTestSingle
SerializationOp	txdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:CDiskTxPos
SerializationOp	undo.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockUndo
SerializationOp	wallet/crypter.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMasterKey
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CAccount
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CAccountingEntry
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CKeyPool
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CMerkleTx
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CWalletKey
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CWalletTx
SerializationOp	wallet/walletdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CKeyMetadata
SerializationOp	wallet/walletdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action)$/;"	f	class:CHDChain
Serialize	addrman.h	/^    void Serialize(Stream &s) const$/;"	f	class:CAddrMan
Serialize	coins.h	/^    void Serialize(Stream &s) const {$/;"	f	class:Coin
Serialize	compressor.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CScriptCompressor
Serialize	key.h	/^    void Serialize(Stream& s) const$/;"	f	struct:CExtKey
Serialize	primitives/transaction.h	/^    inline void Serialize(Stream& s) const {$/;"	f	class:CTransaction
Serialize	primitives/transaction.h	/^    inline void Serialize(Stream& s) const {$/;"	f	struct:CMutableTransaction
Serialize	pubkey.h	/^    void Serialize(CSizeComputer& s) const$/;"	f	struct:CExtPubKey
Serialize	pubkey.h	/^    void Serialize(Stream& s) const$/;"	f	class:CPubKey
Serialize	pubkey.h	/^    void Serialize(Stream& s) const$/;"	f	struct:CExtPubKey
Serialize	script/interpreter.cpp	/^    void Serialize(S &s) const {$/;"	f	class:__anon99::CTransactionSignatureSerializer
Serialize	serialize.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CCompactSize
Serialize	serialize.h	/^    void Serialize(Stream &s) const {$/;"	f	class:CVarInt
Serialize	serialize.h	/^    void Serialize(Stream& s) const$/;"	f	class:CFlatData
Serialize	serialize.h	/^    void Serialize(Stream& s) const$/;"	f	class:LimitedString
Serialize	serialize.h	/^Serialize(Stream& os, const std::shared_ptr<const T>& p)$/;"	f
Serialize	serialize.h	/^Serialize(Stream& os, const std::unique_ptr<const T>& p)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const T& a)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const prevector<N, T>& v)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const std::vector<T, A>& v)$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } \/\/ TODO Get rid of bare char$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int16_t a ) { ser_writedata16(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_writedata32(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int8_t a  ) { ser_writedata8(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint16_t a) { ser_writedata16(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint8_t a ) { ser_writedata8(s, a); }$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::basic_string<C>& str)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::map<K, T, Pred, A>& m)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::pair<K, T>& item)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::set<K, Pred, A>& m)$/;"	f
Serialize	streams.h	/^    void Serialize(Stream& s) const$/;"	f	class:CDataStream
Serialize	test/script_P2SH_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	test/sigopcount_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	txdb.cpp	/^    void Serialize(Stream &s) const {$/;"	f	struct:__anon76::CoinEntry
Serialize	uint256.h	/^    void Serialize(Stream& s) const$/;"	f	class:base_blob
Serialize	undo.h	/^    void Serialize(Stream &s) const {$/;"	f	class:TxInUndoSerializer
Serialize	undo.h	/^    void Serialize(Stream& s) const {$/;"	f	class:CTxUndo
SerializeDB	addrdb.cpp	/^bool SerializeDB(Stream& stream, const Data& data)$/;"	f	namespace:__anon114
SerializeFileDB	addrdb.cpp	/^bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data& data)$/;"	f	namespace:__anon114
SerializeHash	hash.h	/^uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)$/;"	f
SerializeInput	script/interpreter.cpp	/^    void SerializeInput(S &s, unsigned int nInput) const {$/;"	f	class:__anon99::CTransactionSignatureSerializer
SerializeMany	serialize.h	/^void SerializeMany(Stream& s)$/;"	f
SerializeMany	serialize.h	/^void SerializeMany(Stream& s, Arg&& arg)$/;"	f
SerializeMany	serialize.h	/^void SerializeMany(Stream& s, Arg&& arg, Args&&... args)$/;"	f
SerializeOutput	script/interpreter.cpp	/^    void SerializeOutput(S &s, unsigned int nOutput) const {$/;"	f	class:__anon99::CTransactionSignatureSerializer
SerializeScriptCode	script/interpreter.cpp	/^    void SerializeScriptCode(S &s) const {$/;"	f	class:__anon99::CTransactionSignatureSerializer
SerializeToString	qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::SerializeToString(std::string* output) const$/;"	f	class:PaymentRequestPlus
SerializeTransaction	primitives/transaction.h	/^inline void SerializeTransaction(const TxType& tx, Stream& s) {$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&)$/;"	f
Set	base58.cpp	/^bool CWiFicoinAddress::Set(const CKeyID& id)$/;"	f	class:CWiFicoinAddress
Set	base58.cpp	/^bool CWiFicoinAddress::Set(const CScriptID& id)$/;"	f	class:CWiFicoinAddress
Set	base58.cpp	/^bool CWiFicoinAddress::Set(const CTxDestination& dest)$/;"	f	class:CWiFicoinAddress
Set	key.h	/^    void Set(const T pbegin, const T pend, bool fCompressedIn)$/;"	f	class:CKey
Set	leveldb/db/skiplist_test.cc	/^    void Set(int k, intptr_t v) {$/;"	f	struct:leveldb::ConcurrentTest::State
Set	leveldb/table/iterator_wrapper.h	/^  void Set(Iterator* iter) {$/;"	f	class:leveldb::IteratorWrapper
Set	pubkey.h	/^    void Set(const T pbegin, const T pend)$/;"	f	class:CPubKey
Set	script/sigcache.cpp	/^    void Set(uint256& entry)$/;"	f	class:__anon96::CSignatureCache
SetAddrLocal	net.cpp	/^void CNode::SetAddrLocal(const CService& addrLocalIn) {$/;"	f	class:CNode
SetAddress	zmq/zmqabstractnotifier.h	/^    void SetAddress(const std::string &a) { address = a; }$/;"	f	class:CZMQAbstractNotifier
SetAddressBook	wallet/wallet.cpp	/^bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& strPurpose)$/;"	f	class:CWallet
SetAllowed	leveldb/util/env_posix.cc	/^  void SetAllowed(intptr_t v) {$/;"	f	class:leveldb::__anon11::Limiter	file:
SetBackend	coins.cpp	/^void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }$/;"	f	class:CCoinsViewBacked
SetBanned	net.cpp	/^void CConnman::SetBanned(const banmap_t &banMap)$/;"	f	class:CConnman
SetBannedSetDirty	net.cpp	/^void CConnman::SetBannedSetDirty(bool dirty)$/;"	f	class:CConnman
SetBestBlock	coins.cpp	/^void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
SetBestChain	validationinterface.cpp	/^    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;$/;"	m	struct:MainSignalsInstance	file:
SetBestChain	validationinterface.cpp	/^void CMainSignals::SetBestChain(const CBlockLocator &locator) {$/;"	f	class:CMainSignals
SetBestChain	validationinterface.h	/^    virtual void SetBestChain(const CBlockLocator &locator) {}$/;"	f	class:CValidationInterface
SetBestChain	wallet/wallet.cpp	/^void CWallet::SetBestChain(const CBlockLocator& loc)$/;"	f	class:CWallet
SetBestHeight	net.cpp	/^void CConnman::SetBestHeight(int height)$/;"	f	class:CConnman
SetBool	leveldb/util/env_test.cc	/^static void SetBool(void* ptr) {$/;"	f	namespace:leveldb
SetBroadcastTransactions	wallet/wallet.h	/^    void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }$/;"	f	class:CWallet
SetByte	leveldb/db/log_test.cc	/^  void SetByte(int offset, char new_byte) {$/;"	f	class:leveldb::log::LogTest
SetCapacity	leveldb/util/cache.cc	/^  void SetCapacity(size_t capacity) { capacity_ = capacity; }$/;"	f	class:leveldb::__anon13::LRUCache
SetCoinsValue	test/coins_tests.cpp	/^void SetCoinsValue(CAmount value, Coin& coin)$/;"	f
SetCompact	arith_uint256.cpp	/^arith_uint256& arith_uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)$/;"	f	class:arith_uint256
SetCompactPointer	leveldb/db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	leveldb/db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCorruptionPossible	consensus/validation.h	/^    void SetCorruptionPossible() {$/;"	f	class:CValidationState
SetCount	leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCrypted	wallet/crypter.cpp	/^bool CCryptoKeyStore::SetCrypted()$/;"	f	class:CCryptoKeyStore
SetCurrentFile	leveldb/db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetData	base58.cpp	/^void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)$/;"	f	class:CBase58Data
SetData	base58.cpp	/^void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetDataIterator	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
SetDefaultKey	wallet/wallet.cpp	/^bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)$/;"	f	class:CWallet
SetFileLimits	leveldb/util/env_posix_test.cc	/^  static void SetFileLimits(int read_only_file_limit, int mmap_limit) {$/;"	f	class:leveldb::EnvPosixTest
SetFilesystemActive	leveldb/db/fault_injection_test.cc	/^  void SetFilesystemActive(bool active) { filesystem_active_ = active; }$/;"	f	class:leveldb::FaultInjectionTestEnv
SetFrom	leveldb/db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetHDChain	wallet/wallet.cpp	/^bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)$/;"	f	class:CWallet
SetHDMasterKey	wallet/wallet.cpp	/^bool CWallet::SetHDMasterKey(const CPubKey& pubkey)$/;"	f	class:CWallet
SetHex	arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const char* psz)$/;"	f	class:base_uint
SetHex	arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const std::string& str)$/;"	f	class:base_uint
SetHex	uint256.cpp	/^void base_blob<BITS>::SetHex(const char* psz)$/;"	f	class:base_blob
SetHex	uint256.cpp	/^void base_blob<BITS>::SetHex(const std::string& str)$/;"	f	class:base_blob
SetIP	netaddress.cpp	/^void CNetAddr::SetIP(const CNetAddr& ipIn)$/;"	f	class:CNetAddr
SetIV	crypto/chacha20.cpp	/^void ChaCha20::SetIV(uint64_t iv)$/;"	f	class:ChaCha20
SetInternal	netaddress.cpp	/^bool CNetAddr::SetInternal(const std::string &name)$/;"	f	class:CNetAddr
SetKey	base58.cpp	/^void CWiFicoinSecret::SetKey(const CKey& vchSecret)$/;"	f	class:CWiFicoinSecret
SetKey	base58.h	/^    void SetKey(const K &key) {$/;"	f	class:CWiFicoinExtKeyBase
SetKey	crypto/chacha20.cpp	/^void ChaCha20::SetKey(const unsigned char* k, size_t keylen)$/;"	f	class:ChaCha20
SetKey	wallet/crypter.cpp	/^bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)$/;"	f	class:CCrypter
SetKeyFromPassphrase	wallet/crypter.cpp	/^bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)$/;"	f	class:CCrypter
SetLastSequence	leveldb/db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	leveldb/db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLimit	streams.h	/^    bool SetLimit(uint64_t nPos = (uint64_t)(-1)) {$/;"	f	class:CBufferedFile
SetLimited	net.cpp	/^void SetLimited(enum Network net, bool fLimited)$/;"	f
SetLogNumber	leveldb/db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetMaster	key.cpp	/^void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {$/;"	f	class:CExtKey
SetMaxOutboundTarget	net.cpp	/^void CConnman::SetMaxOutboundTarget(uint64_t limit)$/;"	f	class:CConnman
SetMaxOutboundTimeframe	net.cpp	/^void CConnman::SetMaxOutboundTimeframe(uint64_t timeframe)$/;"	f	class:CConnman
SetMaxVersion	wallet/wallet.cpp	/^bool CWallet::SetMaxVersion(int nVersion)$/;"	f	class:CWallet
SetMerkleBranch	wallet/wallet.cpp	/^void CMerkleTx::SetMerkleBranch(const CBlockIndex* pindex, int posInBlock)$/;"	f	class:CMerkleTx
SetMinVersion	wallet/wallet.cpp	/^bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)$/;"	f	class:CWallet
SetMiscWarning	warnings.cpp	/^void SetMiscWarning(const std::string& strWarning)$/;"	f
SetMockTime	utiltime.cpp	/^void SetMockTime(int64_t nMockTimeIn)$/;"	f
SetNameProxy	netbase.cpp	/^bool SetNameProxy(const proxyType &addrProxy) {$/;"	f
SetNetworkActive	net.cpp	/^void CConnman::SetNetworkActive(bool active)$/;"	f	class:CConnman
SetNext	leveldb/db/skiplist.h	/^  void SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	leveldb/db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNull	addrdb.h	/^    void SetNull()$/;"	f	class:CBanEntry
SetNull	chain.h	/^     void SetNull() {$/;"	f	class:CBlockFileInfo
SetNull	chain.h	/^    void SetNull() { nFile = -1; nPos = 0; }$/;"	f	struct:CDiskBlockPos
SetNull	chain.h	/^    void SetNull()$/;"	f	class:CBlockIndex
SetNull	primitives/block.h	/^    void SetNull()$/;"	f	class:CBlock
SetNull	primitives/block.h	/^    void SetNull()$/;"	f	class:CBlockHeader
SetNull	primitives/block.h	/^    void SetNull()$/;"	f	struct:CBlockLocator
SetNull	primitives/transaction.h	/^    void SetNull() { hash.SetNull(); n = (uint32_t) -1; }$/;"	f	class:COutPoint
SetNull	primitives/transaction.h	/^    void SetNull()$/;"	f	class:CTxOut
SetNull	script/script.h	/^    void SetNull() { stack.clear(); stack.shrink_to_fit(); }$/;"	f	struct:CScriptWitness
SetNull	txdb.h	/^    void SetNull() {$/;"	f	struct:CDiskTxPos
SetNull	uint256.h	/^    void SetNull()$/;"	f	class:base_blob
SetNull	wallet/coincontrol.h	/^    void SetNull()$/;"	f	class:CCoinControl
SetNull	wallet/wallet.h	/^    void SetNull()$/;"	f	class:CAccount
SetNull	wallet/wallet.h	/^    void SetNull()$/;"	f	class:CAccountingEntry
SetNull	wallet/wallet.h	/^    void SetNull()$/;"	f	class:CWallet
SetNull	wallet/walletdb.h	/^    void SetNull()$/;"	f	class:CHDChain
SetNull	wallet/walletdb.h	/^    void SetNull()$/;"	f	class:CKeyMetadata
SetPos	streams.h	/^    bool SetPos(uint64_t nPos) {$/;"	f	class:CBufferedFile
SetPrevLogNumber	leveldb/db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetProgressBreakAction	qt/splashscreen.cpp	/^static void SetProgressBreakAction(SplashScreen *splash, const std::function<void(void)> &action)$/;"	f	file:
SetProgressBreakAction	ui_interface.h	/^    boost::signals2::signal<void (std::function<void(void)> action)> SetProgressBreakAction;$/;"	m	class:CClientUIInterface
SetProxy	netbase.cpp	/^bool SetProxy(enum Network net, const proxyType &addrProxy) {$/;"	f
SetRPCWarmupFinished	rpc/server.cpp	/^void SetRPCWarmupFinished()$/;"	f
SetRPCWarmupStatus	rpc/server.cpp	/^void SetRPCWarmupStatus(const std::string& newStatus)$/;"	f
SetRaw	netaddress.cpp	/^void CNetAddr::SetRaw(Network network, const uint8_t *ip_in)$/;"	f	class:CNetAddr
SetReadOnlyFDLimit	leveldb/util/env_posix.cc	/^void EnvPosixTestHelper::SetReadOnlyFDLimit(int limit) {$/;"	f	class:leveldb::EnvPosixTestHelper
SetReadOnlyMMapLimit	leveldb/util/env_posix.cc	/^void EnvPosixTestHelper::SetReadOnlyMMapLimit(int limit) {$/;"	f	class:leveldb::EnvPosixTestHelper
SetRecvVersion	net.h	/^    void SetRecvVersion(int nVersionIn)$/;"	f	class:CNode
SetSendVersion	net.cpp	/^void CNode::SetSendVersion(int nVersionIn)$/;"	f	class:CNode
SetSequence	leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetServices	addrman.h	/^    void SetServices(const CService &addr, ServiceFlags nServices)$/;"	f	class:CAddrMan
SetServices	net.cpp	/^void CConnman::SetServices(const CService &addr, ServiceFlags nServices)$/;"	f	class:CConnman
SetServices_	addrman.cpp	/^void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)$/;"	f	class:CAddrMan
SetSockAddr	netaddress.cpp	/^bool CService::SetSockAddr(const struct sockaddr *paddr)$/;"	f	class:CService
SetSocketNoDelay	netbase.cpp	/^bool SetSocketNoDelay(const SOCKET& hSocket)$/;"	f
SetSocketNonBlocking	netbase.cpp	/^bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking)$/;"	f
SetSpecial	netaddress.cpp	/^bool CNetAddr::SetSpecial(const std::string &strName)$/;"	f	class:CNetAddr
SetStartOnSystemStartup	qt/guiutil.cpp	/^bool SetStartOnSystemStartup(bool fAutoStart) { return false; }$/;"	f	namespace:GUIUtil
SetStartOnSystemStartup	qt/guiutil.cpp	/^bool SetStartOnSystemStartup(bool fAutoStart)$/;"	f	namespace:GUIUtil
SetString	base58.cpp	/^bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)$/;"	f	class:CBase58Data
SetString	base58.cpp	/^bool CBase58Data::SetString(const std::string& str)$/;"	f	class:CBase58Data
SetString	base58.cpp	/^bool CWiFicoinSecret::SetString(const char* pszSecret)$/;"	f	class:CWiFicoinSecret
SetString	base58.cpp	/^bool CWiFicoinSecret::SetString(const std::string& strSecret)$/;"	f	class:CWiFicoinSecret
SetTip	chain.cpp	/^void CChain::SetTip(CBlockIndex *pindex) {$/;"	f	class:CChain
SetTryNewOutboundPeer	net.cpp	/^void CConnman::SetTryNewOutboundPeer(bool flag)$/;"	f	class:CConnman
SetTx	wallet/wallet.h	/^    void SetTx(CTransactionRef arg)$/;"	f	class:CMerkleTx
SetType	streams.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CDataStream
SetType	zmq/zmqabstractnotifier.h	/^    void SetType(const std::string &t) { type = t; }$/;"	f	class:CZMQAbstractNotifier
SetVersion	net.h	/^    void SetVersion(int nVersionIn)$/;"	f	class:CNetMessage
SetVersion	streams.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CDataStream
SetfLargeWorkForkFound	warnings.cpp	/^void SetfLargeWorkForkFound(bool flag)$/;"	f
SetfLargeWorkInvalidChainFound	warnings.cpp	/^void SetfLargeWorkInvalidChainFound(bool flag)$/;"	f
SetupDummyInputs	bench/ccoins_caching.cpp	/^SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)$/;"	f	file:
SetupDummyInputs	test/transaction_tests.cpp	/^SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)$/;"	f	file:
SetupEnvironment	util.cpp	/^void SetupEnvironment()$/;"	f
SetupNetworking	util.cpp	/^bool SetupNetworking()$/;"	f
SetupOtherInputs	leveldb/db/version_set.cc	/^void VersionSet::SetupOtherInputs(Compaction* c) {$/;"	f	class:leveldb::VersionSet
Shard	leveldb/util/cache.cc	/^  static uint32_t Shard(uint32_t hash) {$/;"	f	class:leveldb::__anon13::ShardedLRUCache	file:
ShardedLRUCache	leveldb/util/cache.cc	/^  explicit ShardedLRUCache(size_t capacity)$/;"	f	class:leveldb::__anon13::ShardedLRUCache
ShardedLRUCache	leveldb/util/cache.cc	/^class ShardedLRUCache : public Cache {$/;"	c	namespace:leveldb::__anon13	file:
SharedState	leveldb/db/db_bench.cc	/^  SharedState() : cv(&mu) { }$/;"	f	struct:leveldb::__anon18::SharedState
SharedState	leveldb/db/db_bench.cc	/^struct SharedState {$/;"	s	namespace:leveldb::__anon18	file:
ShiftRows	crypto/ctaes/ctaes.c	/^static void ShiftRows(AES_state* s) {$/;"	f	file:
ShortSuccessor	leveldb/db/dbformat_test.cc	/^static std::string ShortSuccessor(const std::string& s) {$/;"	f	namespace:leveldb
Shorten	leveldb/db/dbformat_test.cc	/^static std::string Shorten(const std::string& s, const std::string& l) {$/;"	f	namespace:leveldb
ShouldStopBefore	leveldb/db/version_set.cc	/^bool Compaction::ShouldStopBefore(const Slice& internal_key) {$/;"	f	class:leveldb::Compaction
ShowProgress	qt/clientmodel.cpp	/^static void ShowProgress(ClientModel *clientmodel, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	qt/splashscreen.cpp	/^static void ShowProgress(SplashScreen *splash, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	qt/transactiontablemodel.cpp	/^static void ShowProgress(TransactionTableModel *ttm, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	qt/walletmodel.cpp	/^static void ShowProgress(WalletModel *walletmodel, const std::string &title, int nProgress)$/;"	f	file:
ShowProgress	ui_interface.h	/^    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;$/;"	m	class:CClientUIInterface
ShowProgress	wallet/wallet.h	/^    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;$/;"	m	class:CWallet
ShrinkDebugFile	util.cpp	/^void ShrinkDebugFile()$/;"	f
ShrinkSize	leveldb/db/log_test.cc	/^  void ShrinkSize(int bytes) {$/;"	f	class:leveldb::log::LogTest
Shutdown	init.cpp	/^void Shutdown()$/;"	f
Shutdown	test/test_wificoin_main.cpp	/^void Shutdown(void* parg)$/;"	f
Shutdown	zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::Shutdown()$/;"	f	class:CZMQNotificationInterface
Shutdown	zmq/zmqpublishnotifier.cpp	/^void CZMQAbstractPublishNotifier::Shutdown()$/;"	f	class:CZMQAbstractPublishNotifier
ShutdownRequested	init.cpp	/^bool ShutdownRequested()$/;"	f
ShutdownRequested	test/test_wificoin_main.cpp	/^bool ShutdownRequested()$/;"	f
ShutdownWindow	qt/utilitydialog.cpp	/^ShutdownWindow::ShutdownWindow(QWidget *parent, Qt::WindowFlags f):$/;"	f	class:ShutdownWindow
ShutdownWindow	qt/utilitydialog.h	/^class ShutdownWindow : public QWidget$/;"	c
SigOpsCost	test/test_wificoin.h	/^    TestMemPoolEntryHelper &SigOpsCost(unsigned int _sigopsCost) { sigOpCost = _sigopsCost; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
SigVersion	script/interpreter.h	/^enum SigVersion$/;"	g
Sigma0	crypto/sha256.cpp	/^uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }$/;"	f	namespace:__anon87::sha256
Sigma0	crypto/sha512.cpp	/^uint64_t inline Sigma0(uint64_t x) { return (x >> 28 | x << 36) ^ (x >> 34 | x << 30) ^ (x >> 39 | x << 25); }$/;"	f	namespace:__anon88::sha512
Sigma0	secp256k1/src/hash_impl.h	18;"	d
Sigma0	secp256k1/src/hash_impl.h	277;"	d
Sigma1	crypto/sha256.cpp	/^uint32_t inline Sigma1(uint32_t x) { return (x >> 6 | x << 26) ^ (x >> 11 | x << 21) ^ (x >> 25 | x << 7); }$/;"	f	namespace:__anon87::sha256
Sigma1	crypto/sha512.cpp	/^uint64_t inline Sigma1(uint64_t x) { return (x >> 14 | x << 50) ^ (x >> 18 | x << 46) ^ (x >> 41 | x << 23); }$/;"	f	namespace:__anon88::sha512
Sigma1	secp256k1/src/hash_impl.h	19;"	d
Sigma1	secp256k1/src/hash_impl.h	276;"	d
Sign	key.cpp	/^bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {$/;"	f	class:CKey
Sign1	script/sign.cpp	/^static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)$/;"	f	file:
SignCompact	key.cpp	/^bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {$/;"	f	class:CKey
SignN	script/sign.cpp	/^static bool SignN(const std::vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)$/;"	f	file:
SignSignature	script/sign.cpp	/^bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)$/;"	f
SignSignature	script/sign.cpp	/^bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignStep	script/sign.cpp	/^static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,$/;"	f	file:
SignTransaction	wallet/wallet.cpp	/^bool CWallet::SignTransaction(CMutableTransaction &tx)$/;"	f	class:CWallet
SignVerifyMessageDialog	qt/signverifymessagedialog.cpp	/^SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *_platformStyle, QWidget *parent) :$/;"	f	class:SignVerifyMessageDialog
SignVerifyMessageDialog	qt/signverifymessagedialog.h	/^class SignVerifyMessageDialog : public QDialog$/;"	c
Signal	leveldb/port/port_posix.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
Signal	leveldb/port/port_win.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
SignalAll	leveldb/port/port_posix.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalAll	leveldb/port/port_win.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalsOptInRBF	policy/rbf.cpp	/^bool SignalsOptInRBF(const CTransaction &tx)$/;"	f
SignatureCacheHasher	script/sigcache.h	/^class SignatureCacheHasher$/;"	c
SignatureData	script/sign.h	/^    SignatureData() {}$/;"	f	struct:SignatureData
SignatureData	script/sign.h	/^    explicit SignatureData(const CScript& script) : scriptSig(script) {}$/;"	f	struct:SignatureData
SignatureData	script/sign.h	/^struct SignatureData {$/;"	s
SignatureHash	script/interpreter.cpp	/^uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)$/;"	f
SignatureHashOld	test/sighash_tests.cpp	/^uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f	file:
SingleColor	qt/platformstyle.h	/^    QColor SingleColor() const { return singleColor; }$/;"	f	class:PlatformStyle
SingleColorIcon	qt/platformstyle.cpp	/^QIcon PlatformStyle::SingleColorIcon(const QIcon& icon) const$/;"	f	class:PlatformStyle
SingleColorIcon	qt/platformstyle.cpp	/^QIcon PlatformStyle::SingleColorIcon(const QString& filename) const$/;"	f	class:PlatformStyle
SingleColorImage	qt/platformstyle.cpp	/^QImage PlatformStyle::SingleColorImage(const QString& filename) const$/;"	f	class:PlatformStyle
SingleEntryCacheTest	test/coins_tests.cpp	/^    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)$/;"	f	class:SingleEntryCacheTest
SingleEntryCacheTest	test/coins_tests.cpp	/^class SingleEntryCacheTest$/;"	c	file:
SingleThreadedSchedulerClient	scheduler.h	/^    SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}$/;"	f	class:SingleThreadedSchedulerClient
SingleThreadedSchedulerClient	scheduler.h	/^class SingleThreadedSchedulerClient {$/;"	c
SipHashUint256	hash.cpp	/^uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)$/;"	f
SipHashUint256Extra	hash.cpp	/^uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)$/;"	f
SipHash_32b	bench/crypto_hash.cpp	/^BENCHMARK(SipHash_32b);$/;"	v
SipHash_32b	bench/crypto_hash.cpp	/^static void SipHash_32b(benchmark::State& state)$/;"	f	file:
Size	leveldb/db/autocompact_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::AutoCompactTest
Size	leveldb/db/db_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	leveldb/helpers/memenv/memenv.cc	/^  uint64_t Size() const { return size_; }$/;"	f	class:leveldb::__anon16::FileState
Size	leveldb/table/table_test.cc	/^  uint64_t Size() const { return contents_.size(); }$/;"	f	class:leveldb::StringSource
Size	test/prevector_tests.cpp	/^    typedef typename pretype::size_type Size;$/;"	t	class:prevector_tester	file:
SizeEstimate	dbwrapper.h	/^    size_t SizeEstimate() const { return size_estimate; }$/;"	f	class:CDBBatch
Skewed	leveldb/util/random.h	/^  uint32_t Skewed(int max_log) {$/;"	f	class:leveldb::Random
Skip	leveldb/db/log_test.cc	/^    virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::log::LogTest::StringSource
Skip	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon16::SequentialFileImpl
Skip	leveldb/util/env_posix.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon11::PosixSequentialFile
Skip	leveldb/util/env_win.cc	/^Status Win32SequentialFile::Skip( uint64_t n )$/;"	f	class:leveldb::Win32::Win32SequentialFile
SkipEmptyDataBlocksBackward	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
SkipEmptyDataBlocksForward	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
SkipList	leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::SkipList(Comparator cmp, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	leveldb/db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipMapTxEntry	miner.cpp	/^bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)$/;"	f	class:BlockAssembler
SkipTest	leveldb/db/skiplist_test.cc	/^class SkipTest { };$/;"	c	namespace:leveldb	file:
SkipToInitialBlock	leveldb/db/log_reader.cc	/^bool Reader::SkipToInitialBlock() {$/;"	f	class:leveldb::log::Reader
Sleep100ms	bench/Examples.cpp	/^BENCHMARK(Sleep100ms);$/;"	v
Sleep100ms	bench/Examples.cpp	/^static void Sleep100ms(benchmark::State& state)$/;"	f	file:
SleepForMicroseconds	leveldb/include/leveldb/env.h	/^  void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::EnvWrapper
SleepForMicroseconds	leveldb/util/env_posix.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon11::PosixEnv
SleepForMicroseconds	leveldb/util/env_win.cc	/^void Win32Env::SleepForMicroseconds( int micros )$/;"	f	class:leveldb::Win32::Win32Env
Slice	leveldb/include/leveldb/slice.h	/^  Slice() : data_(""), size_(0) { }$/;"	f	class:leveldb::Slice
Slice	leveldb/include/leveldb/slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) { }$/;"	f	class:leveldb::Slice
Slice	leveldb/include/leveldb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) { }$/;"	f	class:leveldb::Slice
Slice	leveldb/include/leveldb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) { }$/;"	f	class:leveldb::Slice
Slice	leveldb/include/leveldb/slice.h	/^class Slice {$/;"	c	namespace:leveldb
SnappyCompress	leveldb/db/db_bench.cc	/^  void SnappyCompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SnappyCompressionSupported	leveldb/table/table_test.cc	/^static bool SnappyCompressionSupported() {$/;"	f	namespace:leveldb
SnappyUncompress	leveldb/db/db_bench.cc	/^  void SnappyUncompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Snappy_Compress	leveldb/port/port_posix.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Compress	leveldb/port/port_win.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	leveldb/port/port_posix.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	leveldb/port/port_win.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	leveldb/port/port_posix.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	leveldb/port/port_win.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snapshot	leveldb/include/leveldb/db.h	/^class Snapshot {$/;"	c	namespace:leveldb
SnapshotImpl	leveldb/db/snapshot.h	/^class SnapshotImpl : public Snapshot {$/;"	c	namespace:leveldb
SnapshotList	leveldb/db/snapshot.h	/^  SnapshotList() {$/;"	f	class:leveldb::SnapshotList
SnapshotList	leveldb/db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SocketSendData	net.cpp	/^size_t CConnman::SocketSendData(CNode *pnode) const$/;"	f	class:CConnman
Socks5	netbase.cpp	/^static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)$/;"	f	file:
Socks5ErrorString	netbase.cpp	/^std::string Socks5ErrorString(uint8_t err)$/;"	f
SoftForkDesc	rpc/blockchain.cpp	/^static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)$/;"	f	file:
SoftForkMajorityDesc	rpc/blockchain.cpp	/^static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)$/;"	f	file:
SoftSetArg	util.cpp	/^bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)$/;"	f	class:ArgsManager
SoftSetBoolArg	util.cpp	/^bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)$/;"	f	class:ArgsManager
Solver	script/standard.cpp	/^bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet)$/;"	f
SomeFileOverlapsRange	leveldb/db/version_set.cc	/^bool SomeFileOverlapsRange($/;"	f	namespace:leveldb
SortForBlock	miner.cpp	/^void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)$/;"	f	class:BlockAssembler
SpecialEnv	leveldb/db/db_test.cc	/^  explicit SpecialEnv(Env* base) : EnvWrapper(base) {$/;"	f	class:leveldb::SpecialEnv
SpecialEnv	leveldb/db/db_test.cc	/^class SpecialEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
SpendCoin	coins.cpp	/^bool CCoinsViewCache::SpendCoin(const COutPoint &outpoint, Coin* moveout) {$/;"	f	class:CCoinsViewCache
SpendZeroConfChange	qt/optionsmodel.h	/^        SpendZeroConfChange,    \/\/ bool$/;"	e	enum:OptionsModel::OptionID
SpendsCoinbase	test/test_wificoin.h	/^    TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
SplashScreen	qt/splashscreen.cpp	/^SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle) :$/;"	f	class:SplashScreen
SplashScreen	qt/splashscreen.h	/^class SplashScreen : public QWidget$/;"	c
SplitHostPort	utilstrencodings.cpp	/^void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {$/;"	f
SplitTorReplyLine	torcontrol.cpp	/^static std::pair<std::string,std::string> SplitTorReplyLine(const std::string &s)$/;"	f	file:
Stacks	script/sign.cpp	/^    Stacks() {}$/;"	f	struct:__anon102::Stacks
Stacks	script/sign.cpp	/^    explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {$/;"	f	struct:__anon102::Stacks
Stacks	script/sign.cpp	/^    explicit Stacks(const std::vector<valtype>& scriptSigStack_) : script(scriptSigStack_), witness() {}$/;"	f	struct:__anon102::Stacks
Stacks	script/sign.cpp	/^struct Stacks$/;"	s	namespace:__anon102	file:
StandardDeviation	leveldb/util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Standard_Queue	test/checkqueue_tests.cpp	/^typedef CCheckQueue<FakeCheck> Standard_Queue;$/;"	t	file:
Start	leveldb/db/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::__anon18::Stats
Start	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	leveldb/doc/bench/db_bench_tree_db.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	net.cpp	/^bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)$/;"	f	class:CConnman
StartAtStartup	qt/optionsmodel.h	/^        StartAtStartup,         \/\/ bool$/;"	e	enum:OptionsModel::OptionID
StartBlock	leveldb/table/filter_block.cc	/^void FilterBlockBuilder::StartBlock(uint64_t block_offset) {$/;"	f	class:leveldb::FilterBlockBuilder
StartHTTPRPC	httprpc.cpp	/^bool StartHTTPRPC()$/;"	f
StartHTTPServer	httpserver.cpp	/^bool StartHTTPServer()$/;"	f
StartPhase	leveldb/db/c_test.c	/^static void StartPhase(const char* name) {$/;"	f	file:
StartREST	rest.cpp	/^bool StartREST()$/;"	f
StartRPC	rpc/server.cpp	/^bool StartRPC()$/;"	f
StartReadingAt	leveldb/db/log_test.cc	/^  void StartReadingAt(uint64_t initial_offset) {$/;"	f	class:leveldb::log::LogTest
StartShutdown	init.cpp	/^void StartShutdown()$/;"	f
StartShutdown	test/test_wificoin_main.cpp	/^void StartShutdown()$/;"	f
StartThread	leveldb/include/leveldb/env.h	/^  void StartThread(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
StartThread	leveldb/util/env_posix.cc	/^void PosixEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon11::PosixEnv
StartThread	leveldb/util/env_win.cc	/^void Win32Env::StartThread( void (*function)(void* arg), void* arg )$/;"	f	class:leveldb::Win32::Win32Env
StartThreadState	leveldb/util/env_posix.cc	/^struct StartThreadState {$/;"	s	namespace:leveldb::__anon11::__anon12	file:
StartThreadWrapper	leveldb/util/env_posix.cc	/^static void* StartThreadWrapper(void* arg) {$/;"	f	namespace:leveldb::__anon11
StartTorControl	torcontrol.cpp	/^void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)$/;"	f
Started	rpc/server.cpp	/^    boost::signals2::signal<void ()> Started;$/;"	m	struct:CRPCSignals	file:
StartupShortcutPath	qt/guiutil.cpp	/^fs::path static StartupShortcutPath()$/;"	f	namespace:GUIUtil
State	bench/bench.h	/^        State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {$/;"	f	class:benchmark::State
State	bench/bench.h	/^    class State {$/;"	c	namespace:benchmark
State	leveldb/db/skiplist_test.cc	/^    State() {$/;"	f	struct:leveldb::ConcurrentTest::State
State	leveldb/db/skiplist_test.cc	/^  struct State {$/;"	s	class:leveldb::ConcurrentTest	file:
State	leveldb/util/env_test.cc	/^struct State {$/;"	s	namespace:leveldb	file:
State	net_processing.cpp	/^CNodeState *State(NodeId pnode) {$/;"	f	namespace:__anon50
Stats	leveldb/db/db_bench.cc	/^  Stats() { Start(); }$/;"	f	class:leveldb::__anon18::Stats
Stats	leveldb/db/db_bench.cc	/^class Stats {$/;"	c	namespace:leveldb::__anon18	file:
Stats	support/lockedpool.h	/^    struct Stats$/;"	s	class:Arena
Stats	support/lockedpool.h	/^    struct Stats$/;"	s	class:LockedPool
Status	leveldb/include/leveldb/status.h	/^  Status() : state_(NULL) { }$/;"	f	class:leveldb::Status
Status	leveldb/include/leveldb/status.h	/^class Status {$/;"	c	namespace:leveldb
Status	leveldb/include/leveldb/status.h	/^inline Status::Status(const Status& s) {$/;"	f	class:leveldb::Status
Status	leveldb/util/status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:leveldb::Status
Status	qt/intro.cpp	/^    enum Status {$/;"	g	class:FreespaceChecker	file:
Status	qt/transactionrecord.h	/^    enum Status {$/;"	g	class:TransactionStatus
Status	qt/transactiontablemodel.h	/^        Status = 0,$/;"	e	enum:TransactionTableModel::ColumnIndex
StatusCode	qt/walletmodel.h	/^    enum StatusCode \/\/ Returned by sendCoins$/;"	g	class:WalletModel
StatusRole	qt/transactiontablemodel.h	/^        StatusRole,$/;"	e	enum:TransactionTableModel::RoleIndex
StdoutPrinter	leveldb/db/leveldbutil.cc	/^class StdoutPrinter : public WritableFile {$/;"	c	namespace:leveldb::__anon23	file:
StepErrorCheck	leveldb/doc/bench/db_bench_sqlite3.cc	/^static void StepErrorCheck(int status) {$/;"	f	file:
Stop	leveldb/db/db_bench.cc	/^  void Stop() {$/;"	f	class:leveldb::__anon18::Stats
Stop	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	leveldb/doc/bench/db_bench_tree_db.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	net.cpp	/^void CConnman::Stop()$/;"	f	class:CConnman
StopHTTPRPC	httprpc.cpp	/^void StopHTTPRPC()$/;"	f
StopHTTPServer	httpserver.cpp	/^void StopHTTPServer()$/;"	f
StopREST	rest.cpp	/^void StopREST()$/;"	f
StopRPC	rpc/server.cpp	/^void StopRPC()$/;"	f
StopTorControl	torcontrol.cpp	/^void StopTorControl()$/;"	f
Stopped	rpc/server.cpp	/^    boost::signals2::signal<void ()> Stopped;$/;"	m	struct:CRPCSignals	file:
StringContentsSerializer	test/dbwrapper_tests.cpp	/^    StringContentsSerializer() {}$/;"	f	struct:StringContentsSerializer
StringContentsSerializer	test/dbwrapper_tests.cpp	/^    StringContentsSerializer(const std::string& inp) : str(inp) {}$/;"	f	struct:StringContentsSerializer
StringContentsSerializer	test/dbwrapper_tests.cpp	/^struct StringContentsSerializer {$/;"	s	file:
StringDest	leveldb/db/log_test.cc	/^  class StringDest : public WritableFile {$/;"	c	class:leveldb::log::LogTest	file:
StringForFeeEstimateHorizon	policy/fees.cpp	/^std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon) {$/;"	f
StringForFeeReason	policy/fees.cpp	/^std::string StringForFeeReason(FeeReason reason) {$/;"	f
StringMap	wallet/wallet.h	/^    typedef std::map<std::string, std::string> StringMap;$/;"	t	class:CAddressBookData
StringSink	leveldb/table/table_test.cc	/^class StringSink: public WritableFile {$/;"	c	namespace:leveldb	file:
StringSource	leveldb/db/log_test.cc	/^    StringSource() : force_error_(false), returned_partial_(false) { }$/;"	f	class:leveldb::log::LogTest::StringSource
StringSource	leveldb/db/log_test.cc	/^  class StringSource : public SequentialFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSource	leveldb/table/table_test.cc	/^  StringSource(const Slice& contents)$/;"	f	class:leveldb::StringSource
StringSource	leveldb/table/table_test.cc	/^class StringSource: public RandomAccessFile {$/;"	c	namespace:leveldb	file:
SubBytes	crypto/ctaes/ctaes.c	/^static void SubBytes(AES_state *s, int inv) {$/;"	f	file:
SubstituteFonts	qt/guiutil.cpp	/^void SubstituteFonts(const QString& language)$/;"	f	namespace:GUIUtil
Subversion	qt/peertablemodel.h	/^        Subversion = 2,$/;"	e	enum:PeerTableModel::ColumnIndex
SwapRandom	addrman.cpp	/^void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)$/;"	f	class:CAddrMan
SweepBanned	net.cpp	/^void CConnman::SweepBanned()$/;"	f	class:CConnman
Sync	dbwrapper.h	/^    bool Sync()$/;"	f	class:CDBWrapper
Sync	leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::Sync() {$/;"	f	class:leveldb::TestWritableFile
Sync	leveldb/db/leveldbutil.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon23::StdoutPrinter
Sync	leveldb/db/log_test.cc	/^    virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Sync	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon16::WritableFileImpl
Sync	leveldb/table/table_test.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Sync	leveldb/util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon11::PosixWritableFile
Sync	leveldb/util/env_win.cc	/^Status Win32WritableFile::Sync()$/;"	f	class:leveldb::Win32::Win32WritableFile
SyncDir	leveldb/db/fault_injection_test.cc	/^Status SyncDir(const std::string& dir) {$/;"	f	namespace:leveldb::__anon21
SyncDirIfManifest	leveldb/util/env_posix.cc	/^  Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon11::PosixWritableFile
SyncMetaData	wallet/wallet.cpp	/^void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> range)$/;"	f	class:CWallet
SyncParent	leveldb/db/fault_injection_test.cc	/^Status TestWritableFile::SyncParent() {$/;"	f	class:leveldb::TestWritableFile
SyncTransaction	wallet/wallet.cpp	/^void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pindex, int posInBlock) {$/;"	f	class:CWallet
T	test/hash_tests.cpp	18;"	d	file:
T	test/hash_tests.cpp	45;"	d	file:
TABLE_TEST	leveldb/table/table_test.cc	/^  TABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
TAB_CONSOLE	qt/rpcconsole.h	/^        TAB_CONSOLE = 1,$/;"	e	enum:RPCConsole::TabTypes
TAB_GRAPH	qt/rpcconsole.h	/^        TAB_GRAPH = 2,$/;"	e	enum:RPCConsole::TabTypes
TAB_INFO	qt/rpcconsole.h	/^        TAB_INFO = 0,$/;"	e	enum:RPCConsole::TabTypes
TAB_PEERS	qt/rpcconsole.h	/^        TAB_PEERS = 3$/;"	e	enum:RPCConsole::TabTypes
TCONCAT	leveldb/util/testharness.h	114;"	d
TCONCAT1	leveldb/util/testharness.h	115;"	d
TEST	leveldb/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadAll) {$/;"	f	namespace:leveldb
TEST	leveldb/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadHalf) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputError) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputErrorParanoid) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CorruptedDescriptor) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, MissingDescriptor) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, NewFileErrorDuringWrite) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, RecoverWriteError) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, Recovery) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, SequenceNumberRecovery) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFile) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileIndexData) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileRepair) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, UnrelatedKeys) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ApproximateSizes) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, BloomFilter) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, CompactionsGenerateMultipleFiles) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ComparatorCheck) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, CustomComparator) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, DBOpen_Options) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, DeletionMarkers1) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, DeletionMarkers2) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, FilesDeletedAfterCompaction) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetEncountersEmptyLevel) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetFromImmutableLayer) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetFromVersions) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetLevel0Ordering) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetMemUsage) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetOrderedByLevels) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetPicksCorrectFile) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetSnapshot) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, HiddenValuesAreRemoved) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterEmpty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterMulti) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterMultiWithDelete) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterSingle) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterSmallAndLargeMix) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IteratorPinsRef) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_a) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_b) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Locking) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ManifestWriteError) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ManualCompaction) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, MinorCompactionsHappen) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, MissingSSTFile) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, MultiThreaded) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, NoSpace) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, NonWritableFileSystem) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, OverlapInLevel0) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, PutDeleteGet) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Randomized) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Recover) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, RecoverDuringMemtableCompaction) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, RecoverWithLargeLog) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, RecoveryWithEmptyLog) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, RepeatedWritesToSameKey) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Snapshot) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, SparseMerge) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, StillReadSST) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, WriteSyncError) {$/;"	f	namespace:leveldb
TEST	leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortSeparator) {$/;"	f	namespace:leveldb
TEST	leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortestSuccessor) {$/;"	f	namespace:leveldb
TEST	leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_EncodeDecode) {$/;"	f	namespace:leveldb
TEST	leveldb/db/fault_injection_test.cc	/^TEST(FaultInjectionTest, FaultTestNoLogReuse) {$/;"	f	namespace:leveldb
TEST	leveldb/db/fault_injection_test.cc	/^TEST(FaultInjectionTest, FaultTestWithLogReuse) {$/;"	f	namespace:leveldb
TEST	leveldb/db/filename_test.cc	/^TEST(FileNameTest, Construction) {$/;"	f	namespace:leveldb
TEST	leveldb/db/filename_test.cc	/^TEST(FileNameTest, Parse) {$/;"	f	namespace:leveldb
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, AlignedEof) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, BadLength) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, BadLengthAtEndIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, BadRecordType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ChecksumMismatch) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, Empty) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ErrorJoinsRecords) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, Fragmentation) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ManyBlocks) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, MarginalTrailer) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, MarginalTrailer2) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, MissingLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, OpenForAppend) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, PartialLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, RandomRead) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadEnd) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadError) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthFirstBlockTrailer) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthLastBlock) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthMiddleBlock) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthOneOff) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthStart) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadInitialOffsetIntoBlockPadding) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadPastEnd) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondOneOff) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondStart) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondTenThousand) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadStart) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadThirdOneOff) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadThirdStart) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadWrite) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ShortTrailer) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, SkipIntoMultiRecord) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, TruncatedTrailingRecordIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedFirstType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedFullType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedLastType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedMiddleType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, LargeManifestCompacted) {$/;"	f	namespace:leveldb
TEST	leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, LogFileReuse) {$/;"	f	namespace:leveldb
TEST	leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, ManifestReused) {$/;"	f	namespace:leveldb
TEST	leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, MultipleLogFiles) {$/;"	f	namespace:leveldb
TEST	leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, MultipleMemTables) {$/;"	f	namespace:leveldb
TEST	leveldb/db/recovery_test.cc	/^TEST(RecoveryTest, NoLogFiles) {$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent1) { RunConcurrent(1); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent2) { RunConcurrent(2); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent3) { RunConcurrent(3); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent4) { RunConcurrent(4); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent5) { RunConcurrent(5); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, ConcurrentWithoutThreads) {$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, InsertAndLookup) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_edit_test.cc	/^TEST(VersionEditTest, EncodeDecode) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Multiple) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, MultipleNullBoundaries) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, OverlapSequenceChecks) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, OverlappingFiles) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Single) {$/;"	f	namespace:leveldb
TEST	leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Append) {$/;"	f	namespace:leveldb
TEST	leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Corruption) {$/;"	f	namespace:leveldb
TEST	leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Multiple) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Basics) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, DBTest) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, LargeWrite) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Locks) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Misc) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	leveldb/issues/issue178_test.cc	/^TEST(Issue178, Test) {$/;"	f	namespace:__anon32
TEST	leveldb/issues/issue200_test.cc	/^TEST(Issue200, Test) {$/;"	f	namespace:leveldb
TEST	leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, EmptyBuilder) {$/;"	f	namespace:leveldb
TEST	leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, MultiChunk) {$/;"	f	namespace:leveldb
TEST	leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, SingleChunk) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, Randomized) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, RandomizedLongDB) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, SimpleEmptyKey) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, SimpleMulti) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, SimpleSingle) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, SimpleSpecialKey) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, ZeroRestartPointsInBlock) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(MemTableTest, Simple) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfCompressed) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfPlain) {$/;"	f	namespace:leveldb
TEST	leveldb/util/arena_test.cc	/^TEST(ArenaTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/util/arena_test.cc	/^TEST(ArenaTest, Simple) {$/;"	f	namespace:leveldb
TEST	leveldb/util/bloom_test.cc	/^TEST(BloomTest, EmptyFilter) {$/;"	f	namespace:leveldb
TEST	leveldb/util/bloom_test.cc	/^TEST(BloomTest, Small) {$/;"	f	namespace:leveldb
TEST	leveldb/util/bloom_test.cc	/^TEST(BloomTest, VaryingLengths) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, EntriesArePinned) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, Erase) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, EvictionPolicy) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, HeavyEntries) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, HitAndMiss) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, NewId) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, Prune) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, UseExceedsCacheSize) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, EncodingOutput) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Fixed32) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Fixed64) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Strings) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint32) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint32Overflow) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint32Truncation) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint64) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint64Overflow) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint64Truncation) {$/;"	f	namespace:leveldb
TEST	leveldb/util/crc32c_test.cc	/^TEST(CRC, Extend) {$/;"	f	namespace:leveldb::crc32c
TEST	leveldb/util/crc32c_test.cc	/^TEST(CRC, Mask) {$/;"	f	namespace:leveldb::crc32c
TEST	leveldb/util/crc32c_test.cc	/^TEST(CRC, StandardResults) {$/;"	f	namespace:leveldb::crc32c
TEST	leveldb/util/crc32c_test.cc	/^TEST(CRC, Values) {$/;"	f	namespace:leveldb::crc32c
TEST	leveldb/util/env_posix_test.cc	/^TEST(EnvPosixTest, TestOpenOnRead) {$/;"	f	namespace:leveldb
TEST	leveldb/util/env_test.cc	/^TEST(EnvTest, RunImmediately) {$/;"	f	namespace:leveldb
TEST	leveldb/util/env_test.cc	/^TEST(EnvTest, RunMany) {$/;"	f	namespace:leveldb
TEST	leveldb/util/env_test.cc	/^TEST(EnvTest, StartThread) {$/;"	f	namespace:leveldb
TEST	leveldb/util/hash_test.cc	/^TEST(HASH, SignedUnsignedIssue) {$/;"	f	namespace:leveldb
TEST	leveldb/util/testharness.h	117;"	d
TESTDEFS	Makefile	/^TESTDEFS =  -DBOOST_TEST_DYN_LINK$/;"	m
TESTHARNESS	leveldb/Makefile	/^TESTHARNESS := $(STATIC_OUTDIR)\/util\/testharness.o $(TESTUTIL)$/;"	m
TESTNET	chainparamsbase.cpp	/^const std::string CBaseChainParams::TESTNET = "test";$/;"	m	class:CBaseChainParams	file:
TESTNET	chainparamsbase.h	/^    static const std::string TESTNET;$/;"	m	class:CBaseChainParams
TESTS	Makefile	/^TESTS = $(am__EXEEXT_3) $(am__EXEEXT_6)$/;"	m
TESTS	leveldb/Makefile	/^TESTS = \\$/;"	m
TESTS	secp256k1/Makefile	/^TESTS = $(am__EXEEXT_2) $(am__EXEEXT_3)$/;"	m
TESTS	univalue/Makefile	/^TESTS = test\/unitester$(EXEEXT)$/;"	m
TESTUTIL	leveldb/Makefile	/^TESTUTIL := $(STATIC_OUTDIR)\/util\/testutil.o$/;"	m
TEST_BINARY	Makefile	/^TEST_BINARY = test\/test_wificoin$(EXEEXT)$/;"	m
TEST_CompactMemTable	leveldb/db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	leveldb/db/db_impl.cc	/^void DBImpl::TEST_CompactRange(int level, const Slice* begin,const Slice* end) {$/;"	f	class:leveldb::DBImpl
TEST_DATA_DIR	univalue/Makefile	/^TEST_DATA_DIR = test$/;"	m
TEST_EXTENSIONS	Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_EXTENSIONS	secp256k1/Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_EXTENSIONS	univalue/Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_FAILURE	secp256k1/src/util.h	28;"	d
TEST_FAILURE	secp256k1/src/util.h	33;"	d
TEST_FILES	univalue/Makefile	/^TEST_FILES = \\$/;"	m
TEST_ID	test/test_wificoin_fuzzy.cpp	/^enum TEST_ID {$/;"	g	file:
TEST_ID_END	test/test_wificoin_fuzzy.cpp	/^    TEST_ID_END$/;"	e	enum:TEST_ID	file:
TEST_LOGS	Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOGS	secp256k1/Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOGS	univalue/Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOG_COMPILE	Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_COMPILE	secp256k1/Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_COMPILE	univalue/Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_DRIVER	Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_LOG_DRIVER	secp256k1/Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_LOG_DRIVER	univalue/Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_MaxNextLevelOverlappingBytes	leveldb/db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	leveldb/db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
TEST_SRCDIR	Makefile	/^TEST_SRCDIR = test$/;"	m
TEST_SUITE_LOG	Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TEST_SUITE_LOG	secp256k1/Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TEST_SUITE_LOG	univalue/Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
THIN_SP_CP	qt/wificoinunits.h	40;"	d
THIN_SP_HTML	qt/wificoinunits.h	42;"	d
THIN_SP_UTF8	qt/wificoinunits.h	41;"	d
THRESHOLD_ACTIVE	versionbits.h	/^    THRESHOLD_ACTIVE,$/;"	e	enum:ThresholdState
THRESHOLD_DEFINED	versionbits.h	/^    THRESHOLD_DEFINED,$/;"	e	enum:ThresholdState
THRESHOLD_FAILED	versionbits.h	/^    THRESHOLD_FAILED,$/;"	e	enum:ThresholdState
THRESHOLD_LOCKED_IN	versionbits.h	/^    THRESHOLD_LOCKED_IN,$/;"	e	enum:ThresholdState
THRESHOLD_STARTED	versionbits.h	/^    THRESHOLD_STARTED,$/;"	e	enum:ThresholdState
TIFFCP	Makefile	/^TIFFCP = $/;"	m
TIMEOUT_INTERVAL	net.h	/^static const int TIMEOUT_INTERVAL = 20 * 60;$/;"	v
TIMESTAMP_MIN	wallet/wallet.h	/^static const int64_t TIMESTAMP_MIN = 0;$/;"	v
TIMESTAMP_WINDOW	chain.h	/^static const int64_t TIMESTAMP_WINDOW = MAX_FUTURE_BLOCK_TIME;$/;"	v
TINYFORMAT_ARGTYPES	tinyformat.h	374;"	d
TINYFORMAT_ARGTYPES_1	tinyformat.h	415;"	d
TINYFORMAT_ARGTYPES_10	tinyformat.h	424;"	d
TINYFORMAT_ARGTYPES_11	tinyformat.h	425;"	d
TINYFORMAT_ARGTYPES_12	tinyformat.h	426;"	d
TINYFORMAT_ARGTYPES_13	tinyformat.h	427;"	d
TINYFORMAT_ARGTYPES_14	tinyformat.h	428;"	d
TINYFORMAT_ARGTYPES_15	tinyformat.h	429;"	d
TINYFORMAT_ARGTYPES_16	tinyformat.h	430;"	d
TINYFORMAT_ARGTYPES_2	tinyformat.h	416;"	d
TINYFORMAT_ARGTYPES_3	tinyformat.h	417;"	d
TINYFORMAT_ARGTYPES_4	tinyformat.h	418;"	d
TINYFORMAT_ARGTYPES_5	tinyformat.h	419;"	d
TINYFORMAT_ARGTYPES_6	tinyformat.h	420;"	d
TINYFORMAT_ARGTYPES_7	tinyformat.h	421;"	d
TINYFORMAT_ARGTYPES_8	tinyformat.h	422;"	d
TINYFORMAT_ARGTYPES_9	tinyformat.h	423;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	tinyformat.h	350;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	tinyformat.h	366;"	d
TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR	tinyformat.h	281;"	d
TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR	tinyformat.h	293;"	d
TINYFORMAT_ERROR	tinyformat.h	126;"	d
TINYFORMAT_ERROR	tinyformat.h	142;"	d
TINYFORMAT_FOREACH_ARGNUM	tinyformat.h	483;"	d
TINYFORMAT_HIDDEN	tinyformat.h	160;"	d
TINYFORMAT_HIDDEN	tinyformat.h	162;"	d
TINYFORMAT_H_INCLUDED	tinyformat.h	116;"	d
TINYFORMAT_MAKE_FORMAT_FUNCS	tinyformat.h	1009;"	d
TINYFORMAT_MAKE_FORMAT_FUNCS	tinyformat.h	1039;"	d
TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND	tinyformat.h	154;"	d
TINYFORMAT_PASSARGS	tinyformat.h	376;"	d
TINYFORMAT_PASSARGS_1	tinyformat.h	449;"	d
TINYFORMAT_PASSARGS_10	tinyformat.h	458;"	d
TINYFORMAT_PASSARGS_11	tinyformat.h	459;"	d
TINYFORMAT_PASSARGS_12	tinyformat.h	460;"	d
TINYFORMAT_PASSARGS_13	tinyformat.h	461;"	d
TINYFORMAT_PASSARGS_14	tinyformat.h	462;"	d
TINYFORMAT_PASSARGS_15	tinyformat.h	463;"	d
TINYFORMAT_PASSARGS_16	tinyformat.h	464;"	d
TINYFORMAT_PASSARGS_2	tinyformat.h	450;"	d
TINYFORMAT_PASSARGS_3	tinyformat.h	451;"	d
TINYFORMAT_PASSARGS_4	tinyformat.h	452;"	d
TINYFORMAT_PASSARGS_5	tinyformat.h	453;"	d
TINYFORMAT_PASSARGS_6	tinyformat.h	454;"	d
TINYFORMAT_PASSARGS_7	tinyformat.h	455;"	d
TINYFORMAT_PASSARGS_8	tinyformat.h	456;"	d
TINYFORMAT_PASSARGS_9	tinyformat.h	457;"	d
TINYFORMAT_PASSARGS_TAIL	tinyformat.h	377;"	d
TINYFORMAT_PASSARGS_TAIL_1	tinyformat.h	466;"	d
TINYFORMAT_PASSARGS_TAIL_10	tinyformat.h	475;"	d
TINYFORMAT_PASSARGS_TAIL_11	tinyformat.h	476;"	d
TINYFORMAT_PASSARGS_TAIL_12	tinyformat.h	477;"	d
TINYFORMAT_PASSARGS_TAIL_13	tinyformat.h	478;"	d
TINYFORMAT_PASSARGS_TAIL_14	tinyformat.h	479;"	d
TINYFORMAT_PASSARGS_TAIL_15	tinyformat.h	480;"	d
TINYFORMAT_PASSARGS_TAIL_16	tinyformat.h	481;"	d
TINYFORMAT_PASSARGS_TAIL_2	tinyformat.h	467;"	d
TINYFORMAT_PASSARGS_TAIL_3	tinyformat.h	468;"	d
TINYFORMAT_PASSARGS_TAIL_4	tinyformat.h	469;"	d
TINYFORMAT_PASSARGS_TAIL_5	tinyformat.h	470;"	d
TINYFORMAT_PASSARGS_TAIL_6	tinyformat.h	471;"	d
TINYFORMAT_PASSARGS_TAIL_7	tinyformat.h	472;"	d
TINYFORMAT_PASSARGS_TAIL_8	tinyformat.h	473;"	d
TINYFORMAT_PASSARGS_TAIL_9	tinyformat.h	474;"	d
TINYFORMAT_USE_VARIADIC_TEMPLATES	tinyformat.h	130;"	d
TINYFORMAT_USE_VARIADIC_TEMPLATES	tinyformat.h	147;"	d
TINYFORMAT_VARARGS	tinyformat.h	375;"	d
TINYFORMAT_VARARGS_1	tinyformat.h	432;"	d
TINYFORMAT_VARARGS_10	tinyformat.h	441;"	d
TINYFORMAT_VARARGS_11	tinyformat.h	442;"	d
TINYFORMAT_VARARGS_12	tinyformat.h	443;"	d
TINYFORMAT_VARARGS_13	tinyformat.h	444;"	d
TINYFORMAT_VARARGS_14	tinyformat.h	445;"	d
TINYFORMAT_VARARGS_15	tinyformat.h	446;"	d
TINYFORMAT_VARARGS_16	tinyformat.h	447;"	d
TINYFORMAT_VARARGS_2	tinyformat.h	433;"	d
TINYFORMAT_VARARGS_3	tinyformat.h	434;"	d
TINYFORMAT_VARARGS_4	tinyformat.h	435;"	d
TINYFORMAT_VARARGS_5	tinyformat.h	436;"	d
TINYFORMAT_VARARGS_6	tinyformat.h	437;"	d
TINYFORMAT_VARARGS_7	tinyformat.h	438;"	d
TINYFORMAT_VARARGS_8	tinyformat.h	439;"	d
TINYFORMAT_VARARGS_9	tinyformat.h	440;"	d
TOOLTIP_WRAP_THRESHOLD	qt/guiconstants.h	/^static const int TOOLTIP_WRAP_THRESHOLD = 80;$/;"	v
TOR_COOKIE_SIZE	torcontrol.cpp	/^static const int TOR_COOKIE_SIZE = 32;$/;"	v	file:
TOR_NONCE_SIZE	torcontrol.cpp	/^static const int TOR_NONCE_SIZE = 32;$/;"	v	file:
TOR_SAFE_CLIENTKEY	torcontrol.cpp	/^static const std::string TOR_SAFE_CLIENTKEY = "Tor safe cookie authentication controller-to-server hash";$/;"	v	file:
TOR_SAFE_SERVERKEY	torcontrol.cpp	/^static const std::string TOR_SAFE_SERVERKEY = "Tor safe cookie authentication server-to-controller hash";$/;"	v	file:
TRY_LOCK	sync.h	177;"	d
TTLEXPIRED	netbase.cpp	/^    TTLEXPIRED = 0x06,       \/\/! TTL expired$/;"	e	enum:uint8_t	file:
TX	protocol.cpp	/^const char *TX="tx";$/;"	m	namespace:NetMsgType	file:
TX_MULTISIG	script/standard.h	/^    TX_MULTISIG,$/;"	e	enum:txnouttype
TX_NONSTANDARD	script/standard.h	/^    TX_NONSTANDARD,$/;"	e	enum:txnouttype
TX_NULL_DATA	script/standard.h	/^    TX_NULL_DATA,$/;"	e	enum:txnouttype
TX_PUBKEY	script/standard.h	/^    TX_PUBKEY,$/;"	e	enum:txnouttype
TX_PUBKEYHASH	script/standard.h	/^    TX_PUBKEYHASH,$/;"	e	enum:txnouttype
TX_SCRIPTHASH	script/standard.h	/^    TX_SCRIPTHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V0_KEYHASH	script/standard.h	/^    TX_WITNESS_V0_KEYHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V0_SCRIPTHASH	script/standard.h	/^    TX_WITNESS_V0_SCRIPTHASH,$/;"	e	enum:txnouttype
TYPE	qt/transactionfilterproxy.h	/^    static quint32 TYPE(int type) { return 1<<type; }$/;"	f	class:TransactionFilterProxy
TYPE_COLUMN_WIDTH	qt/transactionview.h	/^        TYPE_COLUMN_WIDTH = 113,$/;"	e	enum:TransactionView::ColumnWidths
TabTypes	qt/rpcconsole.h	/^    enum TabTypes {$/;"	g	class:RPCConsole
Table	leveldb/db/memtable.h	/^  typedef SkipList<const char*, KeyComparator> Table;$/;"	t	class:leveldb::MemTable
Table	leveldb/include/leveldb/table.h	/^  explicit Table(Rep* rep) { rep_ = rep; }$/;"	f	class:leveldb::Table
Table	leveldb/include/leveldb/table.h	/^class Table {$/;"	c	namespace:leveldb
TableAndFile	leveldb/db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb	file:
TableBuilder	leveldb/include/leveldb/table_builder.h	/^class TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	leveldb/table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	leveldb/db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname,$/;"	f	class:leveldb::TableCache
TableCache	leveldb/db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableConstructor	leveldb/table/table_test.cc	/^  TableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::TableConstructor
TableConstructor	leveldb/table/table_test.cc	/^class TableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
TableFileName	leveldb/db/filename.cc	/^std::string TableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	leveldb/db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon26::Repairer	file:
TableTest	leveldb/table/table_test.cc	/^class TableTest { };$/;"	c	namespace:leveldb	file:
TableViewLastColumnResizingFixer	qt/guiutil.cpp	/^TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int lastColMinimumWidth, int allColsMinimumWidth, QObject *parent) :$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
TableViewLastColumnResizingFixer	qt/guiutil.h	/^    class TableViewLastColumnResizingFixer: public QObject$/;"	c	namespace:GUIUtil
Tabs	qt/addressbookpage.h	/^    enum Tabs {$/;"	g	class:AddressBookPage
Tag	leveldb/db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb	file:
TargetFileSize	leveldb/db/version_set.cc	/^static size_t TargetFileSize(const Options* options) {$/;"	f	namespace:leveldb
TempFileName	leveldb/db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Test	leveldb/table/table_test.cc	/^  void Test(Random* rnd) {$/;"	f	class:leveldb::Harness
Test	leveldb/util/testharness.cc	/^struct Test {$/;"	s	namespace:leveldb::test::__anon15	file:
Test	test/script_tests.cpp	/^    TestBuilder& Test()$/;"	f	class:__anon80::TestBuilder
TestAES128	test/crypto_tests.cpp	/^void TestAES128(const std::string &hexkey, const std::string &hexin, const std::string &hexout)$/;"	f
TestAES128CBC	test/crypto_tests.cpp	/^void TestAES128CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)$/;"	f
TestAES256	test/crypto_tests.cpp	/^void TestAES256(const std::string &hexkey, const std::string &hexin, const std::string &hexout)$/;"	f
TestAES256CBC	test/crypto_tests.cpp	/^void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)$/;"	f
TestActive	test/versionbits_tests.cpp	/^    VersionBitsTester& TestActive() {$/;"	f	class:VersionBitsTester
TestAddrTypeVisitor	test/base58_tests.cpp	/^    TestAddrTypeVisitor(const std::string &_exp_addrType) : exp_addrType(_exp_addrType) { }$/;"	f	class:TestAddrTypeVisitor
TestAddrTypeVisitor	test/base58_tests.cpp	/^class TestAddrTypeVisitor : public boost::static_visitor<bool>$/;"	c	file:
TestArgs	leveldb/table/table_test.cc	/^struct TestArgs {$/;"	s	namespace:leveldb	file:
TestArgsManager	test/util_tests.cpp	/^class TestArgsManager : public ArgsManager$/;"	c	file:
TestBackwardScan	leveldb/table/table_test.cc	/^  void TestBackwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestBlockSubsidyHalvings	test/main_tests.cpp	/^static void TestBlockSubsidyHalvings(const Consensus::Params& consensusParams)$/;"	f	file:
TestBlockSubsidyHalvings	test/main_tests.cpp	/^static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)$/;"	f	file:
TestBlockValidity	validation.cpp	/^bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)$/;"	f
TestBuilder	test/script_tests.cpp	/^    TestBuilder(const CScript& script_, const std::string& comment_, int flags_, bool P2SH = false, WitnessMode wm = WITNESS_NONE, int witnessversion = 0, CAmount nValue_ = 0) : script(script_), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK), nValue(nValue_)$/;"	f	class:__anon80::TestBuilder
TestBuilder	test/script_tests.cpp	/^class TestBuilder$/;"	c	namespace:__anon80	file:
TestChaCha20	test/crypto_tests.cpp	/^void TestChaCha20(const std::string &hexkey, uint64_t nonce, uint64_t seek, const std::string& hexout)$/;"	f
TestChain100Setup	test/test_wificoin.cpp	/^TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)$/;"	f	class:TestChain100Setup
TestChain100Setup	test/test_wificoin.h	/^struct TestChain100Setup : public TestingSetup {$/;"	s
TestConditionChecker	test/versionbits_tests.cpp	/^class TestConditionChecker : public AbstractThresholdConditionChecker$/;"	c	file:
TestCrypter	wallet/test/crypto_tests.cpp	/^class TestCrypter$/;"	c	file:
TestDecode	test/compress_tests.cpp	/^bool static TestDecode(uint64_t in) {$/;"	f	file:
TestDecrypt	wallet/test/crypto_tests.cpp	/^static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\$/;"	f	class:TestCrypter
TestDefined	test/versionbits_tests.cpp	/^    VersionBitsTester& TestDefined() {$/;"	f	class:VersionBitsTester
TestDerivation	test/bip32_tests.cpp	/^struct TestDerivation {$/;"	s	file:
TestEncode	test/compress_tests.cpp	/^bool static TestEncode(uint64_t in) {$/;"	f	file:
TestEncodeDecode	leveldb/db/version_edit_test.cc	/^static void TestEncodeDecode(const VersionEdit& edit) {$/;"	f	namespace:leveldb
TestEncrypt	wallet/test/crypto_tests.cpp	/^static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\$/;"	f	class:TestCrypter
TestEncryptSingle	wallet/test/crypto_tests.cpp	/^static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,$/;"	f	class:TestCrypter
TestFailed	test/versionbits_tests.cpp	/^    VersionBitsTester& TestFailed() {$/;"	f	class:VersionBitsTester
TestForwardScan	leveldb/table/table_test.cc	/^  void TestForwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestHMACSHA256	test/crypto_tests.cpp	/^void TestHMACSHA256(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {$/;"	f
TestHMACSHA512	test/crypto_tests.cpp	/^void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {$/;"	f
TestHashFilter	leveldb/table/filter_block_test.cc	/^class TestHashFilter : public FilterPolicy {$/;"	c	namespace:leveldb	file:
TestHeaderAndShortIDs	test/blockencodings_tests.cpp	/^    TestHeaderAndShortIDs(const CBlock& block) :$/;"	f	class:TestHeaderAndShortIDs
TestHeaderAndShortIDs	test/blockencodings_tests.cpp	/^    TestHeaderAndShortIDs(const CBlockHeaderAndShortTxIDs& orig) {$/;"	f	class:TestHeaderAndShortIDs
TestHeaderAndShortIDs	test/blockencodings_tests.cpp	/^class TestHeaderAndShortIDs {$/;"	c	file:
TestKey	leveldb/db/dbformat_test.cc	/^static void TestKey(const std::string& key,$/;"	f	namespace:leveldb
TestLockPointValidity	validation.cpp	/^bool TestLockPointValidity(const LockPoints* lp)$/;"	f
TestLockedIn	test/versionbits_tests.cpp	/^    VersionBitsTester& TestLockedIn() {$/;"	f	class:VersionBitsTester
TestLockedPageAllocator	test/allocator_tests.cpp	/^    TestLockedPageAllocator(int count_in, int lockedcount_in): count(count_in), lockedcount(lockedcount_in) {}$/;"	f	class:TestLockedPageAllocator
TestLockedPageAllocator	test/allocator_tests.cpp	/^class TestLockedPageAllocator: public LockedPageAllocator$/;"	c	file:
TestMemPoolEntryHelper	test/test_wificoin.h	/^    TestMemPoolEntryHelper() :$/;"	f	struct:TestMemPoolEntryHelper
TestMemPoolEntryHelper	test/test_wificoin.h	/^struct TestMemPoolEntryHelper$/;"	s
TestPackage	miner.cpp	/^bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost)$/;"	f	class:BlockAssembler
TestPackageSelection	test/miner_tests.cpp	/^void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey, std::vector<CTransactionRef>& txFirst)$/;"	f
TestPackageTransactions	miner.cpp	/^bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)$/;"	f	class:BlockAssembler
TestPair	test/compress_tests.cpp	/^bool static TestPair(uint64_t dec, uint64_t enc) {$/;"	f	file:
TestParse	test/netbase_tests.cpp	/^bool static TestParse(std::string src, std::string canon)$/;"	f	file:
TestPassphrase	wallet/test/crypto_tests.cpp	/^static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,$/;"	f	class:TestCrypter
TestPassphraseSingle	wallet/test/crypto_tests.cpp	/^static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,$/;"	f	class:TestCrypter
TestPayloadVisitor	test/base58_tests.cpp	/^    TestPayloadVisitor(std::vector<unsigned char> &_exp_payload) : exp_payload(_exp_payload) { }$/;"	f	class:TestPayloadVisitor
TestPayloadVisitor	test/base58_tests.cpp	/^class TestPayloadVisitor : public boost::static_visitor<bool>$/;"	c	file:
TestRIPEMD160	test/crypto_tests.cpp	/^void TestRIPEMD160(const std::string &in, const std::string &hexout) { TestVector(CRIPEMD160(), in, ParseHex(hexout));}$/;"	f
TestRandomAccess	leveldb/table/table_test.cc	/^  void TestRandomAccess(Random* rnd,$/;"	f	class:leveldb::Harness
TestSHA1	test/crypto_tests.cpp	/^void TestSHA1(const std::string &in, const std::string &hexout) { TestVector(CSHA1(), in, ParseHex(hexout));}$/;"	f
TestSHA256	test/crypto_tests.cpp	/^void TestSHA256(const std::string &in, const std::string &hexout) { TestVector(CSHA256(), in, ParseHex(hexout));}$/;"	f
TestSHA512	test/crypto_tests.cpp	/^void TestSHA512(const std::string &in, const std::string &hexout) { TestVector(CSHA512(), in, ParseHex(hexout));}$/;"	f
TestSendCoins	qt/test/wallettests.cpp	/^void TestSendCoins()$/;"	f	namespace:__anon108
TestSequenceLocks	test/miner_tests.cpp	/^bool TestSequenceLocks(const CTransaction &tx, int flags)$/;"	f
TestSplitHost	test/netbase_tests.cpp	/^bool static TestSplitHost(std::string test, std::string host, int port)$/;"	f	file:
TestStarted	test/versionbits_tests.cpp	/^    VersionBitsTester& TestStarted() {$/;"	f	class:VersionBitsTester
TestState	leveldb/db/skiplist_test.cc	/^  explicit TestState(int s)$/;"	f	class:leveldb::TestState
TestState	leveldb/db/skiplist_test.cc	/^class TestState {$/;"	c	namespace:leveldb	file:
TestStateSinceHeight	test/versionbits_tests.cpp	/^    VersionBitsTester& TestStateSinceHeight(int height) {$/;"	f	class:VersionBitsTester
TestTime	test/versionbits_tests.cpp	/^int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }$/;"	f
TestType	leveldb/table/table_test.cc	/^enum TestType {$/;"	g	namespace:leveldb	file:
TestVector	test/bip32_tests.cpp	/^    TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}$/;"	f	struct:TestVector
TestVector	test/bip32_tests.cpp	/^struct TestVector {$/;"	s	file:
TestVector	test/crypto_tests.cpp	/^void TestVector(const Hasher &h, const In &in, const Out &out) {$/;"	f
TestWritableFile	leveldb/db/fault_injection_test.cc	/^TestWritableFile::TestWritableFile(const FileState& state,$/;"	f	class:leveldb::TestWritableFile
TestWritableFile	leveldb/db/fault_injection_test.cc	/^class TestWritableFile : public WritableFile {$/;"	c	namespace:leveldb	file:
Tester	leveldb/util/testharness.h	/^  Tester(const char* f, int l)$/;"	f	class:leveldb::test::Tester
Tester	leveldb/util/testharness.h	/^class Tester {$/;"	c	namespace:leveldb::test
TestingSetup	test/test_wificoin.cpp	/^TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)$/;"	f	class:TestingSetup
TestingSetup	test/test_wificoin.h	/^struct TestingSetup: public BasicTestingSetup {$/;"	s
TextColor	qt/platformstyle.h	/^    QColor TextColor() const { return textColor; }$/;"	f	class:PlatformStyle
TextColorIcon	qt/platformstyle.cpp	/^QIcon PlatformStyle::TextColorIcon(const QIcon& icon) const$/;"	f	class:PlatformStyle
TextColorIcon	qt/platformstyle.cpp	/^QIcon PlatformStyle::TextColorIcon(const QString& filename) const$/;"	f	class:PlatformStyle
ThirdPartyTxUrls	qt/optionsmodel.h	/^        ThirdPartyTxUrls,       \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ThisMonth	qt/transactionview.h	/^        ThisMonth,$/;"	e	enum:TransactionView::DateEnum
ThisWeek	qt/transactionview.h	/^        ThisWeek,$/;"	e	enum:TransactionView::DateEnum
ThisYear	qt/transactionview.h	/^        ThisYear,$/;"	e	enum:TransactionView::DateEnum
Thread	checkqueue.h	/^    void Thread()$/;"	f	class:CCheckQueue
ThreadArg	leveldb/db/db_bench.cc	/^  struct ThreadArg {$/;"	s	class:leveldb::Benchmark	file:
ThreadBody	leveldb/db/db_bench.cc	/^  static void ThreadBody(void* v) {$/;"	f	class:leveldb::Benchmark	file:
ThreadBody	leveldb/util/env_test.cc	/^static void ThreadBody(void* arg) {$/;"	f	namespace:leveldb
ThreadCounter	httpserver.cpp	/^        ThreadCounter(WorkQueue &w): wq(w)$/;"	f	class:WorkQueue::ThreadCounter
ThreadCounter	httpserver.cpp	/^    class ThreadCounter$/;"	c	class:WorkQueue	file:
ThreadDNSAddressSeed	net.cpp	/^void CConnman::ThreadDNSAddressSeed()$/;"	f	class:CConnman
ThreadHTTP	httpserver.cpp	/^static bool ThreadHTTP(struct event_base* base, struct evhttp* http)$/;"	f	file:
ThreadImport	init.cpp	/^void ThreadImport(std::vector<fs::path> vImportFiles)$/;"	f
ThreadMapPort	net.cpp	/^void ThreadMapPort()$/;"	f
ThreadMessageHandler	net.cpp	/^void CConnman::ThreadMessageHandler()$/;"	f	class:CConnman
ThreadOpenAddedConnections	net.cpp	/^void CConnman::ThreadOpenAddedConnections()$/;"	f	class:CConnman
ThreadOpenConnections	net.cpp	/^void CConnman::ThreadOpenConnections()$/;"	f	class:CConnman
ThreadSafeMessageBox	qt/wificoingui.cpp	/^static bool ThreadSafeMessageBox(WiFicoinGUI *gui, const std::string& message, const std::string& caption, unsigned int style)$/;"	f	file:
ThreadSafeMessageBox	ui_interface.h	/^    boost::signals2::signal<bool (const std::string& message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeMessageBox;$/;"	m	class:CClientUIInterface
ThreadSafeQuestion	ui_interface.h	/^    boost::signals2::signal<bool (const std::string& message, const std::string& noninteractive_message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeQuestion;$/;"	m	class:CClientUIInterface
ThreadScriptCheck	validation.cpp	/^void ThreadScriptCheck() {$/;"	f
ThreadSocketHandler	net.cpp	/^void CConnman::ThreadSocketHandler()$/;"	f	class:CConnman
ThreadState	leveldb/db/db_bench.cc	/^  ThreadState(int index)$/;"	f	struct:leveldb::__anon18::ThreadState
ThreadState	leveldb/db/db_bench.cc	/^struct ThreadState {$/;"	s	namespace:leveldb::__anon18	file:
ThreadsScriptVerif	qt/optionsmodel.h	/^        ThreadsScriptVerif,     \/\/ int$/;"	e	enum:OptionsModel::OptionID
ThresholdConditionCache	versionbits.h	/^typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;$/;"	t
ThresholdState	versionbits.h	/^enum ThresholdState {$/;"	g
Time	test/test_wificoin.h	/^    TestMemPoolEntryHelper &Time(int64_t _time) { nTime = _time; return *this; }$/;"	f	struct:TestMemPoolEntryHelper
Timeout	netbase.cpp	/^    Timeout,$/;"	m	class:IntrRecvError	file:
TimingResistantEqual	utilstrencodings.h	/^bool TimingResistantEqual(const T& a, const T& b)$/;"	f
Tip	chain.h	/^    CBlockIndex *Tip() const {$/;"	f	class:CChain
Tip	test/versionbits_tests.cpp	/^    CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : nullptr; }$/;"	f	class:VersionBitsTester
TipMayBeStale	net_processing.cpp	/^bool TipMayBeStale(const Consensus::Params &consensusParams)$/;"	f	namespace:__anon50
TmpDir	leveldb/util/testharness.cc	/^std::string TmpDir() {$/;"	f	namespace:leveldb::test
ToAddress	qt/transactiontablemodel.h	/^        ToAddress = 4,$/;"	e	enum:TransactionTableModel::ColumnIndex
ToByteVector	script/script.h	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToMemPool	test/txvalidationcache_tests.cpp	/^ToMemPool(CMutableTransaction& tx)$/;"	f	file:
ToNarrowPath	leveldb/util/env_win.cc	/^void ToNarrowPath(const std::wstring& value, std::string& target) {$/;"	f	namespace:leveldb::Win32
ToString	arith_uint256.cpp	/^std::string base_uint<BITS>::ToString() const$/;"	f	class:base_uint
ToString	base58.cpp	/^std::string CBase58Data::ToString() const$/;"	f	class:CBase58Data
ToString	chain.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	chain.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	chain.h	/^    std::string ToString() const$/;"	f	struct:CDiskBlockPos
ToString	leveldb/include/leveldb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	leveldb/table/table_test.cc	/^  std::string ToString(const Iterator* it) {$/;"	f	class:leveldb::Harness
ToString	leveldb/table/table_test.cc	/^  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {$/;"	f	class:leveldb::Harness
ToString	leveldb/table/table_test.cc	/^  std::string ToString(const KVMap& data,$/;"	f	class:leveldb::Harness
ToString	leveldb/util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	leveldb/util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
ToString	netaddress.cpp	/^std::string CNetAddr::ToString() const$/;"	f	class:CNetAddr
ToString	netaddress.cpp	/^std::string CService::ToString() const$/;"	f	class:CService
ToString	netaddress.cpp	/^std::string CSubNet::ToString() const$/;"	f	class:CSubNet
ToString	policy/feerate.cpp	/^std::string CFeeRate::ToString() const$/;"	f	class:CFeeRate
ToString	primitives/block.cpp	/^std::string CBlock::ToString() const$/;"	f	class:CBlock
ToString	primitives/transaction.cpp	/^std::string COutPoint::ToString() const$/;"	f	class:COutPoint
ToString	primitives/transaction.cpp	/^std::string CTransaction::ToString() const$/;"	f	class:CTransaction
ToString	primitives/transaction.cpp	/^std::string CTxIn::ToString() const$/;"	f	class:CTxIn
ToString	primitives/transaction.cpp	/^std::string CTxOut::ToString() const$/;"	f	class:CTxOut
ToString	protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	script/script.cpp	/^std::string CScriptWitness::ToString() const$/;"	f	class:CScriptWitness
ToString	sync.cpp	/^    std::string ToString() const$/;"	f	struct:CLockLocation
ToString	uint256.cpp	/^std::string base_blob<BITS>::ToString() const$/;"	f	class:base_blob
ToString	validation.cpp	/^std::string CBlockFileInfo::ToString() const$/;"	f	class:CBlockFileInfo
ToString	wallet/wallet.cpp	/^std::string COutput::ToString() const$/;"	f	class:COutput
ToStringIP	netaddress.cpp	/^std::string CNetAddr::ToStringIP() const$/;"	f	class:CNetAddr
ToStringIPPort	netaddress.cpp	/^std::string CService::ToStringIPPort() const$/;"	f	class:CService
ToStringPort	netaddress.cpp	/^std::string CService::ToStringPort() const$/;"	f	class:CService
ToWidePath	leveldb/util/env_win.cc	/^void ToWidePath(const std::string& value, std::wstring& target) {$/;"	f	namespace:leveldb::Win32
Today	qt/transactionview.h	/^        Today,$/;"	e	enum:TransactionView::DateEnum
ToolTipToRichTextFilter	qt/guiutil.cpp	/^ToolTipToRichTextFilter::ToolTipToRichTextFilter(int _size_threshold, QObject *parent) :$/;"	f	class:GUIUtil::ToolTipToRichTextFilter
ToolTipToRichTextFilter	qt/guiutil.h	/^    class ToolTipToRichTextFilter : public QObject$/;"	c	namespace:GUIUtil
TopUpKeyPool	wallet/wallet.cpp	/^bool CWallet::TopUpKeyPool(unsigned int kpSize)$/;"	f	class:CWallet
TorControlConnection	torcontrol.cpp	/^TorControlConnection::TorControlConnection(struct event_base *_base):$/;"	f	class:TorControlConnection
TorControlConnection	torcontrol.cpp	/^class TorControlConnection$/;"	c	file:
TorControlReply	torcontrol.cpp	/^    TorControlReply() { Clear(); }$/;"	f	class:TorControlReply
TorControlReply	torcontrol.cpp	/^class TorControlReply$/;"	c	file:
TorControlThread	torcontrol.cpp	/^static void TorControlThread()$/;"	f	file:
TorController	torcontrol.cpp	/^TorController::TorController(struct event_base* _base, const std::string& _target):$/;"	f	class:TorController
TorController	torcontrol.cpp	/^class TorController$/;"	c	file:
TotalCharge	leveldb/util/cache.cc	/^  size_t TotalCharge() const {$/;"	f	class:leveldb::__anon13::LRUCache
TotalCharge	leveldb/util/cache.cc	/^  virtual size_t TotalCharge() const {$/;"	f	class:leveldb::__anon13::ShardedLRUCache
TotalFileSize	leveldb/db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TotalTableFiles	leveldb/db/db_test.cc	/^  int TotalTableFiles() {$/;"	f	class:leveldb::DBTest
TraceThread	util.h	/^template <typename Callable> void TraceThread(const char* name,  Callable func)$/;"	f
TrafficGraphWidget	qt/trafficgraphwidget.cpp	/^TrafficGraphWidget::TrafficGraphWidget(QWidget *parent) :$/;"	f	class:TrafficGraphWidget
TrafficGraphWidget	qt/trafficgraphwidget.h	/^class TrafficGraphWidget : public QWidget$/;"	c
TransactionAddedToMempool	validationinterface.cpp	/^    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;$/;"	m	struct:MainSignalsInstance	file:
TransactionAddedToMempool	validationinterface.cpp	/^void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {$/;"	f	class:CMainSignals
TransactionAddedToMempool	validationinterface.h	/^    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}$/;"	f	class:CValidationInterface
TransactionAddedToMempool	wallet/wallet.cpp	/^void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {$/;"	f	class:CWallet
TransactionAddedToMempool	zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef& ptx)$/;"	f	class:CZMQNotificationInterface
TransactionCanBeAbandoned	wallet/wallet.cpp	/^bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const$/;"	f	class:CWallet
TransactionCommitFailed	qt/walletmodel.h	/^        TransactionCommitFailed,$/;"	e	enum:WalletModel::StatusCode
TransactionCompressor	blockencodings.h	/^    TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}$/;"	f	struct:TransactionCompressor
TransactionCompressor	blockencodings.h	/^struct TransactionCompressor {$/;"	s
TransactionCreationFailed	qt/walletmodel.h	/^        TransactionCreationFailed, \/\/ Error returned when wallet is still locked$/;"	e	enum:WalletModel::StatusCode
TransactionDesc	qt/transactiondesc.h	/^    TransactionDesc() {}$/;"	f	class:TransactionDesc
TransactionDesc	qt/transactiondesc.h	/^class TransactionDesc: public QObject$/;"	c
TransactionDescDialog	qt/transactiondescdialog.cpp	/^TransactionDescDialog::TransactionDescDialog(const QModelIndex &idx, QWidget *parent) :$/;"	f	class:TransactionDescDialog
TransactionDescDialog	qt/transactiondescdialog.h	/^class TransactionDescDialog : public QDialog$/;"	c
TransactionFilterProxy	qt/transactionfilterproxy.cpp	/^TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :$/;"	f	class:TransactionFilterProxy
TransactionFilterProxy	qt/transactionfilterproxy.h	/^class TransactionFilterProxy : public QSortFilterProxyModel$/;"	c
TransactionNotification	qt/transactiontablemodel.cpp	/^    TransactionNotification() {}$/;"	f	struct:TransactionNotification
TransactionNotification	qt/transactiontablemodel.cpp	/^    TransactionNotification(uint256 _hash, ChangeType _status, bool _showTransaction):$/;"	f	struct:TransactionNotification
TransactionNotification	qt/transactiontablemodel.cpp	/^struct TransactionNotification$/;"	s	file:
TransactionRecord	qt/transactionrecord.h	/^    TransactionRecord():$/;"	f	class:TransactionRecord
TransactionRecord	qt/transactionrecord.h	/^    TransactionRecord(uint256 _hash, qint64 _time):$/;"	f	class:TransactionRecord
TransactionRecord	qt/transactionrecord.h	/^    TransactionRecord(uint256 _hash, qint64 _time,$/;"	f	class:TransactionRecord
TransactionRecord	qt/transactionrecord.h	/^class TransactionRecord$/;"	c
TransactionSignatureChecker	script/interpreter.h	/^    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(nullptr) {}$/;"	f	class:TransactionSignatureChecker
TransactionSignatureChecker	script/interpreter.h	/^    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}$/;"	f	class:TransactionSignatureChecker
TransactionSignatureChecker	script/interpreter.h	/^class TransactionSignatureChecker : public BaseSignatureChecker$/;"	c
TransactionSignatureCreator	script/sign.cpp	/^TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}$/;"	f	class:TransactionSignatureCreator
TransactionSignatureCreator	script/sign.h	/^class TransactionSignatureCreator : public BaseSignatureCreator {$/;"	c
TransactionStatus	qt/transactionrecord.h	/^    TransactionStatus():$/;"	f	class:TransactionStatus
TransactionStatus	qt/transactionrecord.h	/^class TransactionStatus$/;"	c
TransactionTableModel	qt/transactiontablemodel.cpp	/^TransactionTableModel::TransactionTableModel(const PlatformStyle *_platformStyle, CWallet* _wallet, WalletModel *parent):$/;"	f	class:TransactionTableModel
TransactionTableModel	qt/transactiontablemodel.h	/^class TransactionTableModel : public QAbstractTableModel$/;"	c
TransactionTablePriv	qt/transactiontablemodel.cpp	/^    TransactionTablePriv(CWallet *_wallet, TransactionTableModel *_parent) :$/;"	f	class:TransactionTablePriv
TransactionTablePriv	qt/transactiontablemodel.cpp	/^class TransactionTablePriv$/;"	c	file:
TransactionView	qt/transactionview.cpp	/^TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *parent) :$/;"	f	class:TransactionView
TransactionView	qt/transactionview.h	/^class TransactionView : public QWidget$/;"	c
TransactionWithinChainLimit	txmempool.cpp	/^bool CTxMemPool::TransactionWithinChainLimit(const uint256& txid, size_t chainLimit) const {$/;"	f	class:CTxMemPool
Transform	crypto/ripemd160.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon89::ripemd160
Transform	crypto/sha1.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon90::sha1
Transform	crypto/sha256.cpp	/^TransformType Transform = sha256::Transform;$/;"	m	namespace:__anon87	file:
Transform	crypto/sha256.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)$/;"	f	namespace:__anon87::sha256
Transform	crypto/sha256_sse4.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)$/;"	f	namespace:sha256_sse4
Transform	crypto/sha512.cpp	/^void Transform(uint64_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon88::sha512
TransformType	crypto/sha256.cpp	/^typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);$/;"	t	namespace:__anon87	file:
Translate	qt/wificoin.cpp	/^static std::string Translate(const char* psz)$/;"	f	file:
Translate	util.h	/^    boost::signals2::signal<std::string (const char* psz)> Translate;$/;"	m	class:CTranslationInterface
TraverseAndBuild	merkleblock.cpp	/^void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) {$/;"	f	class:CPartialMerkleTree
TraverseAndExtract	merkleblock.cpp	/^uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex) {$/;"	f	class:CPartialMerkleTree
Trig	bench/Examples.cpp	/^BENCHMARK(Trig);$/;"	v
Trig	bench/Examples.cpp	/^static void Trig(benchmark::State& state)$/;"	f	file:
TrimSpace	leveldb/db/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon18
TrimSpace	leveldb/doc/bench/db_bench_sqlite3.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon35
TrimSpace	leveldb/doc/bench/db_bench_tree_db.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon34
TrimToSize	txmempool.cpp	/^void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining) {$/;"	f	class:CTxMemPool
Truncate	leveldb/db/fault_injection_test.cc	/^Status Truncate(const std::string& filename, uint64_t length) {$/;"	f	namespace:leveldb::__anon21
TruncateFile	util.cpp	/^bool TruncateFile(FILE *file, unsigned int length) {$/;"	f
TryAcquire	sync.h	/^    bool TryAcquire()$/;"	f	class:CSemaphoreGrant
TryCreateDirectories	util.cpp	/^bool TryCreateDirectories(const fs::path& p)$/;"	f
TryEnter	sync.h	/^    bool TryEnter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
TryReopen	leveldb/db/corruption_test.cc	/^  Status TryReopen() {$/;"	f	class:leveldb::CorruptionTest
TryReopen	leveldb/db/db_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TwoLevelIterator	leveldb/table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator($/;"	f	class:leveldb::__anon39::TwoLevelIterator
TwoLevelIterator	leveldb/table/two_level_iterator.cc	/^class TwoLevelIterator: public Iterator {$/;"	c	namespace:leveldb::__anon39	file:
TxConfirmStats	policy/fees.cpp	/^TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,$/;"	f	class:TxConfirmStats
TxConfirmStats	policy/fees.cpp	/^class TxConfirmStats$/;"	c	file:
TxData	chainparams.h	/^    const ChainTxData& TxData() const { return chainTxData; }$/;"	f	class:CChainParams
TxHashRole	qt/transactiontablemodel.h	/^        TxHashRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxHexRole	qt/transactiontablemodel.h	/^        TxHexRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxIDRole	qt/transactiontablemodel.h	/^        TxIDRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxInErrorToJSON	rpc/rawtransaction.cpp	/^static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)$/;"	f	file:
TxInUndoDeserializer	undo.h	/^    TxInUndoDeserializer(Coin* coin) : txout(coin) {}$/;"	f	class:TxInUndoDeserializer
TxInUndoDeserializer	undo.h	/^class TxInUndoDeserializer$/;"	c
TxInUndoSerializer	undo.h	/^    TxInUndoSerializer(const Coin* coin) : txout(coin) {}$/;"	f	class:TxInUndoSerializer
TxInUndoSerializer	undo.h	/^class TxInUndoSerializer$/;"	c
TxInputStream	script/wificoinconsensus.cpp	/^    TxInputStream(int nTypeIn, int nVersionIn, const unsigned char *txTo, size_t txToLen) :$/;"	f	class:__anon95::TxInputStream
TxInputStream	script/wificoinconsensus.cpp	/^class TxInputStream$/;"	c	namespace:__anon95	file:
TxItems	wallet/wallet.h	/^    typedef std::multimap<int64_t, TxPair > TxItems;$/;"	t	class:CWallet
TxLessThan	qt/transactiontablemodel.cpp	/^struct TxLessThan$/;"	s	file:
TxLinks	txmempool.h	/^    struct TxLinks {$/;"	s	class:CTxMemPool
TxMempoolInfo	txmempool.h	/^struct TxMempoolInfo$/;"	s
TxPair	wallet/wallet.h	/^    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;$/;"	t	class:CWallet
TxPlainTextRole	qt/transactiontablemodel.h	/^        TxPlainTextRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxSpends	wallet/wallet.h	/^    typedef std::multimap<COutPoint, uint256> TxSpends;$/;"	t	class:CWallet
TxStatsInfo	policy/fees.h	/^        TxStatsInfo() : blockHeight(0), bucketIndex(0) {}$/;"	f	struct:CBlockPolicyEstimator::TxStatsInfo
TxStatsInfo	policy/fees.h	/^    struct TxStatsInfo$/;"	s	class:CBlockPolicyEstimator
TxToJSON	rpc/rawtransaction.cpp	/^void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)$/;"	f
TxToUniv	core_write.cpp	/^void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags)$/;"	f
TxViewDelegate	qt/overviewpage.cpp	/^    TxViewDelegate(const PlatformStyle *_platformStyle, QObject *parent=nullptr):$/;"	f	class:TxViewDelegate
TxViewDelegate	qt/overviewpage.cpp	/^class TxViewDelegate : public QAbstractItemDelegate$/;"	c	file:
TxnAbort	wallet/db.h	/^    bool TxnAbort()$/;"	f	class:CDB
TxnAbort	wallet/walletdb.cpp	/^bool CWalletDB::TxnAbort()$/;"	f	class:CWalletDB
TxnBegin	wallet/db.h	/^    DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)$/;"	f	class:CDBEnv
TxnBegin	wallet/db.h	/^    bool TxnBegin()$/;"	f	class:CDB
TxnBegin	wallet/walletdb.cpp	/^bool CWalletDB::TxnBegin()$/;"	f	class:CWalletDB
TxnCommit	wallet/db.h	/^    bool TxnCommit()$/;"	f	class:CDB
TxnCommit	wallet/walletdb.cpp	/^bool CWalletDB::TxnCommit()$/;"	f	class:CWalletDB
Type	qt/addresstablemodel.cpp	/^    enum Type {$/;"	g	struct:AddressTableEntry	file:
Type	qt/transactionrecord.h	/^    enum Type$/;"	g	class:TransactionRecord
Type	qt/transactiontablemodel.h	/^        Type = 3,$/;"	e	enum:TransactionTableModel::ColumnIndex
TypeRole	qt/addresstablemodel.h	/^        TypeRole = Qt::UserRole \/**< Type of address (#Send or #Receive) *\/$/;"	e	enum:AddressTableModel::RoleIndex
TypeRole	qt/transactiontablemodel.h	/^        TypeRole = Qt::UserRole,$/;"	e	enum:TransactionTableModel::RoleIndex
UBEGIN	utilstrencodings.h	18;"	d
UDP_ASSOCIATE	netbase.cpp	/^    UDP_ASSOCIATE = 0x03$/;"	e	enum:uint8_t	file:
UEND	utilstrencodings.h	19;"	d
UIC	Makefile	/^UIC = $/;"	m
UNDEFINED	protocol.h	/^    UNDEFINED = 0,$/;"	e	enum:GetDataMsg
UNDOFILE_CHUNK_SIZE	validation.h	/^static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; \/\/ 1 MiB$/;"	v
UNIVALUE_CFLAGS	Makefile	/^UNIVALUE_CFLAGS = -I$(srcdir)\/univalue\/include$/;"	m
UNIVALUE_LIBS	Makefile	/^UNIVALUE_LIBS = univalue\/libunivalue.la$/;"	m
UNIVALUE_UTFFILTER_H	univalue/lib/univalue_utffilter.h	5;"	d
UNKNOWN	httpserver.h	/^        UNKNOWN,$/;"	e	enum:HTTPRequest::RequestMethod
UNKNOWN	txmempool.h	/^    UNKNOWN = 0, \/\/! Manually removed or unknown reason$/;"	m	class:MemPoolRemovalReason
UNLOCK_FUNCTION	leveldb/port/thread_annotations.h	53;"	d
UNLOCK_FUNCTION	leveldb/util/mutexlock.h	/^  ~MutexLock() UNLOCK_FUNCTION() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
UNLOCK_FUNCTION	sync.h	/^    void unlock() UNLOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
UNLOCK_FUNCTION	sync.h	/^    ~CMutexLock() UNLOCK_FUNCTION()$/;"	f	class:CMutexLock
UNLOCK_FUNCTION	threadsafety.h	28;"	d
UNLOCK_FUNCTION	threadsafety.h	47;"	d
UNSET	policy/fees.h	/^    UNSET,        \/\/! Use default settings based on other criteria$/;"	m	class:FeeEstimateMode
UNUSED	qt/wificoinstrings.cpp	7;"	d	file:
UNUSED	qt/wificoinstrings.cpp	9;"	d	file:
UPPER_BOUND	utilstrencodings.cpp	/^static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;$/;"	v	file:
URI	rpc/server.h	/^    std::string URI;$/;"	m	class:JSONRPCRequest
URITests	qt/test/uritests.h	/^class URITests : public QObject$/;"	c
USER_PASS	netbase.cpp	/^    USER_PASS = 0x02,     \/\/! Username\/password$/;"	e	enum:uint8_t	file:
USE_ASM_X86_64	secp256k1/src/basic-config.h	12;"	d
USE_ASM_X86_64	secp256k1/src/libsecp256k1-config.h	97;"	d
USE_BASIC_CONFIG	secp256k1/src/gen_context.c	7;"	d	file:
USE_ECMULT_STATIC_PRECOMPUTATION	secp256k1/src/libsecp256k1-config.h	100;"	d
USE_ECMULT_STATIC_PRECOMPUTATION	secp256k1/src/tests_exhaustive.c	16;"	d	file:
USE_ENDOMORPHISM	secp256k1/src/basic-config.h	13;"	d
USE_FIELD_10X26	secp256k1/src/basic-config.h	14;"	d
USE_FIELD_10X26	secp256k1/src/basic-config.h	28;"	d
USE_FIELD_5X52	secp256k1/src/basic-config.h	15;"	d
USE_FIELD_5X52	secp256k1/src/libsecp256k1-config.h	113;"	d
USE_FIELD_INV_BUILTIN	secp256k1/src/basic-config.h	16;"	d
USE_FIELD_INV_BUILTIN	secp256k1/src/basic-config.h	26;"	d
USE_FIELD_INV_BUILTIN	secp256k1/src/libsecp256k1-config.h	116;"	d
USE_FIELD_INV_NUM	secp256k1/src/basic-config.h	17;"	d
USE_NUM_GMP	secp256k1/src/basic-config.h	18;"	d
USE_NUM_NONE	secp256k1/src/basic-config.h	19;"	d
USE_NUM_NONE	secp256k1/src/basic-config.h	25;"	d
USE_NUM_NONE	secp256k1/src/libsecp256k1-config.h	125;"	d
USE_QRCODE	Makefile	/^USE_QRCODE = $/;"	m
USE_SCALAR_4X64	secp256k1/src/basic-config.h	20;"	d
USE_SCALAR_4X64	secp256k1/src/libsecp256k1-config.h	128;"	d
USE_SCALAR_8X32	secp256k1/src/basic-config.h	21;"	d
USE_SCALAR_8X32	secp256k1/src/basic-config.h	29;"	d
USE_SCALAR_INV_BUILTIN	secp256k1/src/basic-config.h	22;"	d
USE_SCALAR_INV_BUILTIN	secp256k1/src/basic-config.h	27;"	d
USE_SCALAR_INV_BUILTIN	secp256k1/src/libsecp256k1-config.h	134;"	d
USE_SCALAR_INV_NUM	secp256k1/src/basic-config.h	23;"	d
USE_UPNP	Makefile	/^USE_UPNP = $/;"	m
UTILS	leveldb/Makefile	/^UTILS = \\$/;"	m
Ui	qt/addressbookpage.h	/^namespace Ui {$/;"	n
Ui	qt/askpassphrasedialog.h	/^namespace Ui {$/;"	n
Ui	qt/coincontroldialog.h	/^namespace Ui {$/;"	n
Ui	qt/editaddressdialog.h	/^namespace Ui {$/;"	n
Ui	qt/intro.h	/^namespace Ui {$/;"	n
Ui	qt/modaloverlay.h	/^namespace Ui {$/;"	n
Ui	qt/openuridialog.h	/^namespace Ui {$/;"	n
Ui	qt/optionsdialog.h	/^namespace Ui {$/;"	n
Ui	qt/overviewpage.h	/^namespace Ui {$/;"	n
Ui	qt/receivecoinsdialog.h	/^namespace Ui {$/;"	n
Ui	qt/receiverequestdialog.h	/^namespace Ui {$/;"	n
Ui	qt/rpcconsole.h	/^namespace Ui {$/;"	n
Ui	qt/sendcoinsdialog.h	/^namespace Ui {$/;"	n
Ui	qt/sendcoinsentry.h	/^namespace Ui {$/;"	n
Ui	qt/signverifymessagedialog.h	/^namespace Ui {$/;"	n
Ui	qt/transactiondescdialog.h	/^namespace Ui {$/;"	n
Ui	qt/utilitydialog.h	/^namespace Ui {$/;"	n
UintToArith256	arith_uint256.cpp	/^arith_uint256 UintToArith256(const uint256 &a)$/;"	f
UnSelect	wallet/coincontrol.h	/^    void UnSelect(const COutPoint& output)$/;"	f	class:CCoinControl
UnSelectAll	wallet/coincontrol.h	/^    void UnSelectAll()$/;"	f	class:CCoinControl
Unban	net.cpp	/^bool CConnman::Unban(const CNetAddr &addr) {$/;"	f	class:CConnman
Unban	net.cpp	/^bool CConnman::Unban(const CSubNet &subNet) {$/;"	f	class:CConnman
Uncache	coins.cpp	/^void CCoinsViewCache::Uncache(const COutPoint& hash)$/;"	f	class:CCoinsViewCache
Unconfirmed	qt/transactionrecord.h	/^        Unconfirmed,        \/**< Not yet mined into a block **\/$/;"	e	enum:TransactionStatus::Status
UndoReadFromDisk	validation.cpp	/^bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)$/;"	f	namespace:__anon44
UndoWriteToDisk	validation.cpp	/^bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)$/;"	f	namespace:__anon44
Unencrypted	qt/walletmodel.h	/^        Unencrypted,  \/\/ !wallet->IsCrypted()$/;"	e	enum:WalletModel::EncryptionStatus
UniValue	univalue/include/univalue.h	/^    UniValue() { typ = VNULL; }$/;"	f	class:UniValue
UniValue	univalue/include/univalue.h	/^    UniValue(UniValue::VType initialType, const std::string& initialStr = "") {$/;"	f	class:UniValue
UniValue	univalue/include/univalue.h	/^    UniValue(bool val_) {$/;"	f	class:UniValue
UniValue	univalue/include/univalue.h	/^    UniValue(const char *val_) {$/;"	f	class:UniValue
UniValue	univalue/include/univalue.h	/^    UniValue(const std::string& val_) {$/;"	f	class:UniValue
UniValue	univalue/include/univalue.h	/^    UniValue(double val_) {$/;"	f	class:UniValue
UniValue	univalue/include/univalue.h	/^    UniValue(int val_) {$/;"	f	class:UniValue
UniValue	univalue/include/univalue.h	/^    UniValue(int64_t val_) {$/;"	f	class:UniValue
UniValue	univalue/include/univalue.h	/^    UniValue(uint64_t val_) {$/;"	f	class:UniValue
UniValue	univalue/include/univalue.h	/^class UniValue {$/;"	c
UniValueType	rpc/server.h	/^    UniValueType() : typeAny(true) {}$/;"	f	struct:UniValueType
UniValueType	rpc/server.h	/^    UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}$/;"	f	struct:UniValueType
UniValueType	rpc/server.h	/^struct UniValueType {$/;"	s
Uniform	leveldb/util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
UniqueCheck	test/checkqueue_tests.cpp	/^    UniqueCheck() : check_id(0){};$/;"	f	struct:UniqueCheck
UniqueCheck	test/checkqueue_tests.cpp	/^    UniqueCheck(size_t check_id_in) : check_id(check_id_in){};$/;"	f	struct:UniqueCheck
UniqueCheck	test/checkqueue_tests.cpp	/^struct UniqueCheck {$/;"	s	file:
Unique_Queue	test/checkqueue_tests.cpp	/^typedef CCheckQueue<UniqueCheck> Unique_Queue;$/;"	t	file:
Unit	qt/wificoinunits.h	/^    enum Unit$/;"	g	class:WiFicoinUnits
UnitDisplayStatusBarControl	qt/wificoingui.cpp	/^UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *platformStyle) :$/;"	f	class:UnitDisplayStatusBarControl
UnitDisplayStatusBarControl	qt/wificoingui.h	/^class UnitDisplayStatusBarControl : public QLabel$/;"	c
UnitRole	qt/wificoinunits.h	/^        UnitRole = Qt::UserRole$/;"	e	enum:WiFicoinUnits::RoleIndex
UnlinkPrunedFiles	validation.cpp	/^void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)$/;"	f
UnloadBlockIndex	validation.cpp	/^void UnloadBlockIndex()$/;"	f
Unlock	leveldb/port/port_posix.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Unlock	leveldb/port/port_win.cc	/^void Mutex::Unlock() {$/;"	f	class:leveldb::port::Mutex
Unlock	qt/askpassphrasedialog.h	/^        Unlock,     \/**< Ask passphrase and unlock *\/$/;"	e	enum:AskPassphraseDialog::Mode
Unlock	wallet/crypter.cpp	/^bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
Unlock	wallet/wallet.cpp	/^bool CWallet::Unlock(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
UnlockAllCoins	wallet/wallet.cpp	/^void CWallet::UnlockAllCoins()$/;"	f	class:CWallet
UnlockCoin	wallet/wallet.cpp	/^void CWallet::UnlockCoin(const COutPoint& output)$/;"	f	class:CWallet
UnlockContext	qt/walletmodel.cpp	/^WalletModel::UnlockContext::UnlockContext(WalletModel *_wallet, bool _valid, bool _relock):$/;"	f	class:WalletModel::UnlockContext
UnlockContext	qt/walletmodel.h	/^        UnlockContext(const UnlockContext& obj) { CopyFrom(obj); }$/;"	f	class:WalletModel::UnlockContext
UnlockContext	qt/walletmodel.h	/^    class UnlockContext$/;"	c	class:WalletModel
UnlockFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon16::InMemoryEnv
UnlockFile	leveldb/include/leveldb/env.h	/^  Status UnlockFile(FileLock* l) { return target_->UnlockFile(l); }$/;"	f	class:leveldb::EnvWrapper
UnlockFile	leveldb/util/env_posix.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon11::PosixEnv
UnlockFile	leveldb/util/env_win.cc	/^Status Win32Env::UnlockFile( FileLock* lock )$/;"	f	class:leveldb::Win32::Win32Env
Unlocked	qt/walletmodel.h	/^        Unlocked      \/\/ wallet->IsCrypted() && !wallet->IsLocked()$/;"	e	enum:WalletModel::EncryptionStatus
Unmask	leveldb/util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	leveldb/db/memtable.h	/^  void Unref() {$/;"	f	class:leveldb::MemTable
Unref	leveldb/db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	leveldb/helpers/memenv/memenv.cc	/^  void Unref() {$/;"	f	class:leveldb::__anon16::FileState
Unref	leveldb/util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon13::LRUCache
UnrefEntry	leveldb/db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
UnregisterAllValidationInterfaces	validationinterface.cpp	/^void UnregisterAllValidationInterfaces() {$/;"	f
UnregisterBackgroundSignalScheduler	validationinterface.cpp	/^void CMainSignals::UnregisterBackgroundSignalScheduler() {$/;"	f	class:CMainSignals
UnregisterHTTPHandler	httpserver.cpp	/^void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)$/;"	f
UnregisterValidationInterface	validationinterface.cpp	/^void UnregisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
Unserialize	addrman.h	/^    void Unserialize(Stream& s)$/;"	f	class:CAddrMan
Unserialize	coins.h	/^    void Unserialize(Stream &s) {$/;"	f	class:Coin
Unserialize	compressor.h	/^    void Unserialize(Stream &s) {$/;"	f	class:CScriptCompressor
Unserialize	key.h	/^    void Unserialize(Stream& s)$/;"	f	struct:CExtKey
Unserialize	primitives/transaction.h	/^    inline void Unserialize(Stream& s) {$/;"	f	struct:CMutableTransaction
Unserialize	pubkey.h	/^    void Unserialize(Stream& s)$/;"	f	class:CPubKey
Unserialize	pubkey.h	/^    void Unserialize(Stream& s)$/;"	f	struct:CExtPubKey
Unserialize	serialize.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CCompactSize
Unserialize	serialize.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CVarInt
Unserialize	serialize.h	/^    void Unserialize(Stream& s)$/;"	f	class:CFlatData
Unserialize	serialize.h	/^    void Unserialize(Stream& s)$/;"	f	class:LimitedString
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, T& a)$/;"	f
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, prevector<N, T>& v)$/;"	f
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, std::vector<T, A>& v)$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } \/\/ TODO Get rid of bare char$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int16_t& a ) { a = ser_readdata16(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a = ser_readdata32(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a) { a = ser_readdata16(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a ) { a = ser_readdata8(s); }$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::basic_string<C>& str)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::map<K, T, Pred, A>& m)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::pair<K, T>& item)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::set<K, Pred, A>& m)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::shared_ptr<const T>& p)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::unique_ptr<const T>& p)$/;"	f
Unserialize	txdb.cpp	/^    void Unserialize(Stream &s) {$/;"	f	class:__anon77::CCoins
Unserialize	txdb.cpp	/^    void Unserialize(Stream& s) {$/;"	f	struct:__anon76::CoinEntry
Unserialize	uint256.h	/^    void Unserialize(Stream& s)$/;"	f	class:base_blob
Unserialize	undo.h	/^    void Unserialize(Stream &s) {$/;"	f	class:TxInUndoDeserializer
Unserialize	undo.h	/^    void Unserialize(Stream& s) {$/;"	f	class:CTxUndo
UnserializeMany	serialize.h	/^inline void UnserializeMany(Stream& s)$/;"	f
UnserializeMany	serialize.h	/^inline void UnserializeMany(Stream& s, Arg& arg)$/;"	f
UnserializeMany	serialize.h	/^inline void UnserializeMany(Stream& s, Arg& arg, Args&... args)$/;"	f
UnserializeTransaction	primitives/transaction.h	/^inline void UnserializeTransaction(TxType& tx, Stream& s) {$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&)$/;"	f
UntrackFile	leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::UntrackFile(const std::string& f) {$/;"	f	class:leveldb::FaultInjectionTestEnv
Update	leveldb/table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UpdateAncestorState	txmempool.cpp	/^void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int modifySigOps)$/;"	f	class:CTxMemPoolEntry
UpdateAncestorsOf	txmempool.cpp	/^void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)$/;"	f	class:CTxMemPool
UpdateBlockAvailability	net_processing.cpp	/^void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {$/;"	f	namespace:__anon50
UpdateChild	txmempool.cpp	/^void CTxMemPool::UpdateChild(txiter entry, txiter child, bool add)$/;"	f	class:CTxMemPool
UpdateChildrenForRemoval	txmempool.cpp	/^void CTxMemPool::UpdateChildrenForRemoval(txiter it)$/;"	f	class:CTxMemPool
UpdateCoins	validation.cpp	/^void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txundo, int nHeight)$/;"	f
UpdateCoins	validation.cpp	/^void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)$/;"	f
UpdateDescendantState	txmempool.cpp	/^void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)$/;"	f	class:CTxMemPoolEntry
UpdateEmptyFull	bloom.cpp	/^void CBloomFilter::UpdateEmptyFull()$/;"	f	class:CBloomFilter
UpdateEntryForAncestors	txmempool.cpp	/^void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors)$/;"	f	class:CTxMemPool
UpdateFeeDelta	txmempool.cpp	/^void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)$/;"	f	class:CTxMemPoolEntry
UpdateForDescendants	txmempool.cpp	/^void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)$/;"	f	class:CTxMemPool
UpdateForRemoveFromMempool	txmempool.cpp	/^void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants)$/;"	f	class:CTxMemPool
UpdateHTTPServerLogging	httpserver.cpp	/^bool UpdateHTTPServerLogging(bool enable) {$/;"	f
UpdateLastBlockAnnounceTime	net_processing.cpp	/^void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)$/;"	f
UpdateLockPoints	txmempool.cpp	/^void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)$/;"	f	class:CTxMemPoolEntry
UpdateMempoolForReorg	validation.cpp	/^void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool)$/;"	f
UpdateMovingAverages	policy/fees.cpp	/^void TxConfirmStats::UpdateMovingAverages()$/;"	f	class:TxConfirmStats
UpdatePackagesForAdded	miner.cpp	/^int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,$/;"	f	class:BlockAssembler
UpdateParent	txmempool.cpp	/^void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add)$/;"	f	class:CTxMemPool
UpdatePreferredDownload	net_processing.cpp	/^void UpdatePreferredDownload(CNode* node, CNodeState* state)$/;"	f	namespace:__anon50
UpdateStats	leveldb/db/version_set.cc	/^bool Version::UpdateStats(const GetStats& stats) {$/;"	f	class:leveldb::Version
UpdateTime	miner.cpp	/^int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)$/;"	f
UpdateTimeFirstKey	wallet/wallet.cpp	/^void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)$/;"	f	class:CWallet
UpdateTip	validation.cpp	/^void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {$/;"	f	file:
UpdateTransaction	script/sign.cpp	/^void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data)$/;"	f
UpdateTransactionsFromBlock	txmempool.cpp	/^void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)$/;"	f	class:CTxMemPool
UpdateUncommittedBlockStructures	validation.cpp	/^void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)$/;"	f
UpdateVersionBitsParameters	chainparams.cpp	/^void CChainParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)$/;"	f	class:CChainParams
UpdateVersionBitsParameters	chainparams.cpp	/^void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)$/;"	f
UpdatedBlockTip	net_processing.cpp	/^void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {$/;"	f	class:PeerLogicValidation
UpdatedBlockTip	validationinterface.cpp	/^    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;$/;"	m	struct:MainSignalsInstance	file:
UpdatedBlockTip	validationinterface.cpp	/^void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {$/;"	f	class:CMainSignals
UpdatedBlockTip	validationinterface.h	/^    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}$/;"	f	class:CValidationInterface
UpdatedBlockTip	zmq/zmqnotificationinterface.cpp	/^void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)$/;"	f	class:CZMQNotificationInterface
Upgrade	txdb.cpp	/^bool CCoinsViewDB::Upgrade() {$/;"	f	class:CCoinsViewDB
Usage	leveldb/db/leveldbutil.cc	/^static void Usage() {$/;"	f	file:
UseDescendantScore	txmempool.h	/^    bool UseDescendantScore(const CTxMemPoolEntry &a)$/;"	f	class:CompareTxMemPoolEntryByDescendantScore
UserNotificationCenter	qt/notificator.h	/^        UserNotificationCenter      \/**< Use the 10.8+ User Notification Center (Mac only) *\/$/;"	e	enum:Notificator::Mode
UtxoData	test/coins_tests.cpp	/^typedef std::map<COutPoint, std::tuple<CTransaction,CTxUndo,Coin>> UtxoData;$/;"	t	file:
VALUE1	test/coins_tests.cpp	/^const static CAmount VALUE1 = 100;$/;"	v	file:
VALUE2	test/coins_tests.cpp	/^const static CAmount VALUE2 = 200;$/;"	v	file:
VALUE3	test/coins_tests.cpp	/^const static CAmount VALUE3 = 300;$/;"	v	file:
VAL_EXPECT_ERROR	leveldb/db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	e	enum:leveldb::FaultInjectionTest::ExpectedVerifResult	file:
VAL_EXPECT_NO_ERROR	leveldb/db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	e	enum:leveldb::FaultInjectionTest::ExpectedVerifResult	file:
VARINT	serialize.h	355;"	d
VARR	univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VBDeploymentInfo	versionbits.h	/^struct VBDeploymentInfo {$/;"	s
VBOOL	univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VERACK	protocol.cpp	/^const char *VERACK="verack";$/;"	m	namespace:NetMsgType	file:
VERIFY_BITS	secp256k1/src/field_10x26_impl.h	456;"	d
VERIFY_BITS	secp256k1/src/field_10x26_impl.h	458;"	d
VERIFY_BITS	secp256k1/src/field_5x52_int128_impl.h	13;"	d
VERIFY_BITS	secp256k1/src/field_5x52_int128_impl.h	15;"	d
VERIFY_CHECK	secp256k1/src/util.h	61;"	d
VERIFY_CHECK	secp256k1/src/util.h	64;"	d
VERIFY_CHECK	secp256k1/src/util.h	67;"	d
VERIFY_OK	wallet/db.h	/^    enum VerifyResult { VERIFY_OK,$/;"	e	enum:CDBEnv::VerifyResult
VERIFY_SETUP	secp256k1/src/util.h	62;"	d
VERIFY_SETUP	secp256k1/src/util.h	65;"	d
VERIFY_SETUP	secp256k1/src/util.h	68;"	d
VERSION	Makefile	/^VERSION = 0.15.1$/;"	m
VERSION	protocol.cpp	/^const char *VERSION="version";$/;"	m	namespace:NetMsgType	file:
VERSION	secp256k1/Makefile	/^VERSION = 0.1$/;"	m
VERSION	secp256k1/src/libsecp256k1-config.h	140;"	d
VERSION	univalue/Makefile	/^VERSION = 1.0.2$/;"	m
VERSION	univalue/univalue-config.h	63;"	d
VERSIONBITS_LAST_OLD_BLOCK_VERSION	versionbits.h	/^static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;$/;"	v
VERSIONBITS_NUM_BITS	versionbits.h	/^static const int32_t VERSIONBITS_NUM_BITS = 29;$/;"	v
VERSIONBITS_TOP_BITS	versionbits.h	/^static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;$/;"	v
VERSIONBITS_TOP_MASK	versionbits.h	/^static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;$/;"	v
VERSION_BASIC	wallet/walletdb.h	/^    static const int VERSION_BASIC=1;$/;"	m	class:CKeyMetadata
VERSION_HD_BASE	wallet/walletdb.h	/^    static const int VERSION_HD_BASE        = 1;$/;"	m	class:CHDChain
VERSION_HD_CHAIN_SPLIT	wallet/walletdb.h	/^    static const int VERSION_HD_CHAIN_SPLIT = 2;$/;"	m	class:CHDChain
VERSION_WITH_HDDATA	wallet/walletdb.h	/^    static const int VERSION_WITH_HDDATA=10;$/;"	m	class:CKeyMetadata
VG_CHECK	secp256k1/src/tests.c	35;"	d	file:
VG_CHECK	secp256k1/src/tests.c	38;"	d	file:
VG_UNDEF	secp256k1/src/tests.c	34;"	d	file:
VG_UNDEF	secp256k1/src/tests.c	37;"	d	file:
VNULL	univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VNUM	univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VOBJ	univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VSTR	univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VType	univalue/include/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	g	class:UniValue
Valid	dbwrapper.cpp	/^bool CDBIterator::Valid() { return piter->Valid(); }$/;"	f	class:CDBIterator
Valid	leveldb/db/db_iter.cc	/^  virtual bool Valid() const { return valid_; }$/;"	f	class:leveldb::__anon20::DBIter
Valid	leveldb/db/db_test.cc	/^    virtual bool Valid() const { return iter_ != map_->end(); }$/;"	f	class:leveldb::ModelDB::ModelIter
Valid	leveldb/db/memtable.cc	/^  virtual bool Valid() const { return iter_.Valid(); }$/;"	f	class:leveldb::MemTableIterator
Valid	leveldb/db/skiplist.h	/^inline bool SkipList<Key,Comparator>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	leveldb/db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Valid	leveldb/table/block.cc	/^  virtual bool Valid() const { return current_ < restarts_; }$/;"	f	class:leveldb::Block::Iter
Valid	leveldb/table/iterator.cc	/^  virtual bool Valid() const { return false; }$/;"	f	class:leveldb::__anon42::EmptyIterator
Valid	leveldb/table/iterator_wrapper.h	/^  bool Valid() const        { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Valid	leveldb/table/merger.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon36::MergingIterator
Valid	leveldb/table/table_test.cc	/^  virtual bool Valid() const { return iter_->Valid(); }$/;"	f	class:leveldb::KeyConvertingIterator
Valid	leveldb/table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
Valid	txdb.cpp	/^bool CCoinsViewDBCursor::Valid() const$/;"	f	class:CCoinsViewDBCursor
ValidateCheckInputsForAllFlags	test/txvalidationcache_tests.cpp	/^void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_flags, bool add_to_cache, bool upgraded_nop)$/;"	f
Value	leveldb/db/corruption_test.cc	/^  Slice Value(int k, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Value	leveldb/db/fault_injection_test.cc	/^  Slice Value(int k, std::string* storage) const {$/;"	f	class:leveldb::FaultInjectionTest
Value	leveldb/util/cache.cc	/^  virtual void* Value(Handle* handle) {$/;"	f	class:leveldb::__anon13::ShardedLRUCache
Value	leveldb/util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ValueFromAmount	core_write.cpp	/^UniValue ValueFromAmount(const CAmount& amount)$/;"	f
ValueFromString	test/rpc_tests.cpp	/^static UniValue ValueFromString(const std::string &str)$/;"	f	file:
ValueType	leveldb/db/dbformat.h	/^enum ValueType {$/;"	g	namespace:leveldb
VarintLength	leveldb/util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
Verify	leveldb/db/fault_injection_test.cc	/^  Status Verify(int start_idx, int num_vals,$/;"	f	class:leveldb::FaultInjectionTest
Verify	pubkey.cpp	/^bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {$/;"	f	class:CPubKey
Verify	test/script_P2SH_tests.cpp	/^Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, ScriptError& err)$/;"	f	file:
Verify	wallet/db.cpp	/^CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename)$/;"	f	class:CDBEnv
Verify	wallet/wallet.cpp	/^bool CWallet::Verify()$/;"	f	class:CWallet
VerifyDB	validation.cpp	/^bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)$/;"	f	class:CVerifyDB
VerifyDatabaseFile	wallet/db.cpp	/^bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)$/;"	f	class:CDB
VerifyDatabaseFile	wallet/walletdb.cpp	/^bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr)$/;"	f	class:CWalletDB
VerifyEnvironment	wallet/db.cpp	/^bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)$/;"	f	class:CDB
VerifyEnvironment	wallet/walletdb.cpp	/^bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)$/;"	f	class:CWalletDB
VerifyPubKey	key.cpp	/^bool CKey::VerifyPubKey(const CPubKey& pubkey) const {$/;"	f	class:CKey
VerifyResult	wallet/db.h	/^    enum VerifyResult { VERIFY_OK,$/;"	g	class:CDBEnv
VerifyScript	script/interpreter.cpp	/^bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)$/;"	f
VerifyScriptBench	bench/verify_script.cpp	/^BENCHMARK(VerifyScriptBench);$/;"	v
VerifyScriptBench	bench/verify_script.cpp	/^static void VerifyScriptBench(benchmark::State& state)$/;"	f	file:
VerifySignature	script/interpreter.cpp	/^bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const$/;"	f	class:TransactionSignatureChecker
VerifySignature	script/sigcache.cpp	/^bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const$/;"	f	class:CachingTransactionSignatureChecker
VerifyWithFlag	test/sigopcount_tests.cpp	/^ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags)$/;"	f
VerifyWitnessProgram	script/interpreter.cpp	/^static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)$/;"	f	file:
Version	leveldb/db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	leveldb/db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionBitsCache	versionbits.h	/^struct VersionBitsCache$/;"	s
VersionBitsConditionChecker	versionbits.cpp	/^    VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}$/;"	f	class:__anon94::VersionBitsConditionChecker
VersionBitsConditionChecker	versionbits.cpp	/^class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {$/;"	c	namespace:__anon94	file:
VersionBitsDeploymentInfo	versionbits.cpp	/^const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {$/;"	v	typeref:struct:VBDeploymentInfo
VersionBitsMask	versionbits.cpp	/^uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsState	versionbits.cpp	/^ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)$/;"	f
VersionBitsStateSinceHeight	versionbits.cpp	/^int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)$/;"	f
VersionBitsStatistics	versionbits.cpp	/^BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTester	test/versionbits_tests.cpp	/^    VersionBitsTester() : num(0) {}$/;"	f	class:VersionBitsTester
VersionBitsTester	test/versionbits_tests.cpp	/^class VersionBitsTester$/;"	c	file:
VersionBitsTipState	validation.cpp	/^ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTipStateSinceHeight	validation.cpp	/^int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionBitsTipStatistics	validation.cpp	/^BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::DeploymentPos pos)$/;"	f
VersionEdit	leveldb/db/version_edit.h	/^  VersionEdit() { Clear(); }$/;"	f	class:leveldb::VersionEdit
VersionEdit	leveldb/db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditPrinter	leveldb/db/dumpfile.cc	/^static void VersionEditPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon19
VersionEditTest	leveldb/db/version_edit_test.cc	/^class VersionEditTest { };$/;"	c	namespace:leveldb	file:
VersionSet	leveldb/db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname,$/;"	f	class:leveldb::VersionSet
VersionSet	leveldb/db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
WALLET_CRYPTO_IV_SIZE	wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_IV_SIZE = 16;$/;"	v
WALLET_CRYPTO_KEY_SIZE	wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;$/;"	v
WALLET_CRYPTO_SALT_SIZE	wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;$/;"	v
WALLET_ENDPOINT_BASE	wallet/rpcwallet.cpp	/^static const std::string WALLET_ENDPOINT_BASE = "\/wallet\/";$/;"	v	file:
WALLET_ERROR	wallet/feebumper.h	/^    WALLET_ERROR,$/;"	m	class:BumpFeeResult
WALLET_INCREMENTAL_RELAY_FEE	wallet/wallet.h	/^static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;$/;"	v
WALLET_UNLOCK_FAILURE	qt/addresstablemodel.h	/^        WALLET_UNLOCK_FAILURE,  \/**< Wallet could not be unlocked to create new receiving address *\/$/;"	e	enum:AddressTableModel::EditStatus
WATCHONLY_COLUMN_WIDTH	qt/transactionview.h	/^        WATCHONLY_COLUMN_WIDTH = 23,$/;"	e	enum:TransactionView::ColumnWidths
WIDTH	arith_uint256.h	/^    enum { WIDTH=BITS\/32 };$/;"	e	enum:base_uint::__anon93
WIDTH	uint256.h	/^    enum { WIDTH=BITS\/8 };$/;"	e	enum:base_blob::__anon1
WIN32_LEAN_AND_MEAN	compat.h	19;"	d
WIN32_LEAN_AND_MEAN	qt/guiutil.cpp	30;"	d	file:
WIN32_LEAN_AND_MEAN	support/lockedpool.cpp	17;"	d	file:
WIN32_LEAN_AND_MEAN	util.cpp	62;"	d	file:
WINDOWS_BITS	Makefile	/^WINDOWS_BITS = $/;"	m
WINDOW_A	secp256k1/src/ecmult_impl.h	21;"	d
WINDOW_A	secp256k1/src/ecmult_impl.h	24;"	d
WINDOW_A	secp256k1/src/ecmult_impl.h	27;"	d
WINDOW_A	secp256k1/src/ecmult_impl.h	32;"	d
WINDOW_G	secp256k1/src/ecmult_impl.h	22;"	d
WINDOW_G	secp256k1/src/ecmult_impl.h	25;"	d
WINDOW_G	secp256k1/src/ecmult_impl.h	28;"	d
WINDOW_G	secp256k1/src/ecmult_impl.h	37;"	d
WINDOW_G	secp256k1/src/ecmult_impl.h	40;"	d
WINDRES	Makefile	/^WINDRES = $/;"	m
WITNESS_NONE	test/script_tests.cpp	/^    WITNESS_NONE,$/;"	e	enum:__anon80::WitnessMode	file:
WITNESS_PKH	test/script_tests.cpp	/^    WITNESS_PKH,$/;"	e	enum:__anon80::WitnessMode	file:
WITNESS_SCALE_FACTOR	consensus/consensus.h	/^static const int WITNESS_SCALE_FACTOR = 4;$/;"	v
WITNESS_SH	test/script_tests.cpp	/^    WITNESS_SH$/;"	e	enum:__anon80::WitnessMode	file:
WNAF_BITS	secp256k1/src/ecmult_const_impl.h	16;"	d
WNAF_BITS	secp256k1/src/ecmult_const_impl.h	18;"	d
WNAF_SIZE	secp256k1/src/ecmult_const_impl.h	20;"	d
WORDS_BIGENDIAN	config/wificoin-config.h	410;"	d
WORDS_BIGENDIAN	secp256k1/src/libsecp256k1-config.h	146;"	d
WSAEADDRINUSE	compat.h	60;"	d
WSAEALREADY	compat.h	55;"	d
WSAEINPROGRESS	compat.h	59;"	d
WSAEINTR	compat.h	58;"	d
WSAEINVAL	compat.h	54;"	d
WSAEMSGSIZE	compat.h	57;"	d
WSAENOTSOCK	compat.h	61;"	d
WSAEWOULDBLOCK	compat.h	56;"	d
WSAGetLastError	compat.h	53;"	d
WWW_AUTH_HEADER_DATA	httprpc.cpp	/^static const char* WWW_AUTH_HEADER_DATA = "Basic realm=\\"jsonrpc\\"";$/;"	v	file:
Wait	checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueue
Wait	checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueueControl
Wait	leveldb/db/skiplist_test.cc	/^  void Wait(ReaderState s) {$/;"	f	class:leveldb::TestState
Wait	leveldb/port/port_posix.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
Wait	leveldb/port/port_win.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
WaitExit	httpserver.cpp	/^    void WaitExit()$/;"	f	class:WorkQueue
WaitForShutdown	wificoind.cpp	/^void WaitForShutdown(boost::thread_group* threadGroup)$/;"	f
WakeMessageHandler	net.cpp	/^void CConnman::WakeMessageHandler()$/;"	f	class:CConnman
WalCheckpoint	leveldb/doc/bench/db_bench_sqlite3.cc	/^static void WalCheckpoint(sqlite3* db_) {$/;"	f	file:
WalletFeature	wallet/wallet.h	/^enum WalletFeature$/;"	g
WalletFrame	qt/walletframe.cpp	/^WalletFrame::WalletFrame(const PlatformStyle *_platformStyle, WiFicoinGUI *_gui) :$/;"	f	class:WalletFrame
WalletFrame	qt/walletframe.h	/^class WalletFrame : public QFrame$/;"	c
WalletModel	qt/walletmodel.cpp	/^WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *_wallet, OptionsModel *_optionsModel, QObject *parent) :$/;"	f	class:WalletModel
WalletModel	qt/walletmodel.h	/^class WalletModel : public QObject$/;"	c
WalletModelTransaction	qt/walletmodeltransaction.cpp	/^WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &_recipients) :$/;"	f	class:WalletModelTransaction
WalletModelTransaction	qt/walletmodeltransaction.h	/^class WalletModelTransaction$/;"	c
WalletTestingSetup	wallet/test/wallet_test_fixture.cpp	/^WalletTestingSetup::WalletTestingSetup(const std::string& chainName):$/;"	f	class:WalletTestingSetup
WalletTestingSetup	wallet/test/wallet_test_fixture.h	/^struct WalletTestingSetup: public TestingSetup {$/;"	s
WalletTests	qt/test/wallettests.h	/^class WalletTests : public QObject$/;"	c
WalletTxToJSON	wallet/rpcwallet.cpp	/^void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)$/;"	f
WalletView	qt/walletview.cpp	/^WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):$/;"	f	class:WalletView
WalletView	qt/walletview.h	/^class WalletView : public QStackedWidget$/;"	c
Warning	qt/notificator.h	/^        Warning,        \/**< Notify user of potential problem *\/$/;"	e	enum:Notificator::Class
WarningBitsConditionChecker	validation.cpp	/^    WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}$/;"	f	class:WarningBitsConditionChecker
WarningBitsConditionChecker	validation.cpp	/^class WarningBitsConditionChecker : public AbstractThresholdConditionChecker$/;"	c	file:
WatchKeyMap	keystore.h	/^typedef std::map<CKeyID, CPubKey> WatchKeyMap;$/;"	t
WatchOnlyFilter	qt/transactionfilterproxy.h	/^    enum WatchOnlyFilter$/;"	g	class:TransactionFilterProxy
WatchOnlyFilter_All	qt/transactionfilterproxy.h	/^        WatchOnlyFilter_All,$/;"	e	enum:TransactionFilterProxy::WatchOnlyFilter
WatchOnlyFilter_No	qt/transactionfilterproxy.h	/^        WatchOnlyFilter_No$/;"	e	enum:TransactionFilterProxy::WatchOnlyFilter
WatchOnlyFilter_Yes	qt/transactionfilterproxy.h	/^        WatchOnlyFilter_Yes,$/;"	e	enum:TransactionFilterProxy::WatchOnlyFilter
WatchOnlySet	keystore.h	/^typedef std::set<CScript> WatchOnlySet;$/;"	t
Watchonly	qt/transactiontablemodel.h	/^        Watchonly = 1,$/;"	e	enum:TransactionTableModel::ColumnIndex
WatchonlyDecorationRole	qt/transactiontablemodel.h	/^        WatchonlyDecorationRole,$/;"	e	enum:TransactionTableModel::RoleIndex
WatchonlyRole	qt/transactiontablemodel.h	/^        WatchonlyRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Win32	leveldb/util/env_win.cc	/^namespace Win32$/;"	n	namespace:leveldb	file:
Win32Env	leveldb/util/env_win.cc	/^Win32Env::Win32Env()$/;"	f	class:leveldb::Win32::Win32Env
Win32Env	leveldb/util/env_win.cc	/^class Win32Env : public Env$/;"	c	namespace:leveldb::Win32	file:
Win32FileLock	leveldb/util/env_win.cc	/^Win32FileLock::Win32FileLock( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32FileLock
Win32FileLock	leveldb/util/env_win.cc	/^class Win32FileLock : public FileLock$/;"	c	namespace:leveldb::Win32	file:
Win32LockedPageAllocator	support/lockedpool.cpp	/^Win32LockedPageAllocator::Win32LockedPageAllocator()$/;"	f	class:Win32LockedPageAllocator
Win32LockedPageAllocator	support/lockedpool.cpp	/^class Win32LockedPageAllocator: public LockedPageAllocator$/;"	c	file:
Win32Logger	leveldb/util/env_win.cc	/^Win32Logger::Win32Logger(WritableFile* pFile) : _pFileProxy(pFile)$/;"	f	class:leveldb::Win32::Win32Logger
Win32Logger	leveldb/util/env_win.cc	/^class Win32Logger : public Logger$/;"	c	namespace:leveldb::Win32	file:
Win32RandomAccessFile	leveldb/util/env_win.cc	/^Win32RandomAccessFile::Win32RandomAccessFile( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
Win32RandomAccessFile	leveldb/util/env_win.cc	/^class Win32RandomAccessFile : public RandomAccessFile$/;"	c	namespace:leveldb::Win32	file:
Win32SequentialFile	leveldb/util/env_win.cc	/^Win32SequentialFile::Win32SequentialFile( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32SequentialFile
Win32SequentialFile	leveldb/util/env_win.cc	/^class Win32SequentialFile : public SequentialFile$/;"	c	namespace:leveldb::Win32	file:
Win32WritableFile	leveldb/util/env_win.cc	/^Win32WritableFile::Win32WritableFile(const std::string& fname, bool append)$/;"	f	class:leveldb::Win32::Win32WritableFile
Win32WritableFile	leveldb/util/env_win.cc	/^class Win32WritableFile : public WritableFile$/;"	c	namespace:leveldb::Win32	file:
WinShutdownMonitor	qt/winshutdownmonitor.h	/^class WinShutdownMonitor : public QAbstractNativeEventFilter$/;"	c
WithOrVersion	streams.h	/^OverrideStream<S> WithOrVersion(S* s, int nVersionFlag)$/;"	f
WitnessMode	test/script_tests.cpp	/^enum WitnessMode {$/;"	g	namespace:__anon80	file:
WitnessSigOps	script/interpreter.cpp	/^size_t static WitnessSigOps(int witversion, const std::vector<unsigned char>& witprogram, const CScriptWitness& witness, int flags)$/;"	f	file:
Witnessifier	wallet/rpcwallet.cpp	/^    Witnessifier(CWallet *_pwallet) : pwallet(_pwallet) {}$/;"	f	class:Witnessifier
Witnessifier	wallet/rpcwallet.cpp	/^class Witnessifier : public boost::static_visitor<bool>$/;"	c	file:
WorkItemWrapper	leveldb/util/env_win.cc	/^WorkItemWrapper::WorkItemWrapper( ScheduleProc proc_,void* content_ ) :$/;"	f	class:leveldb::Win32::WorkItemWrapper
WorkItemWrapper	leveldb/util/env_win.cc	/^struct WorkItemWrapper$/;"	s	namespace:leveldb::Win32	file:
WorkItemWrapperProc	leveldb/util/env_win.cc	/^DWORD WINAPI WorkItemWrapperProc(LPVOID pContent)$/;"	f	namespace:leveldb::Win32
WorkQueue	httpserver.cpp	/^    WorkQueue(size_t _maxDepth) : running(true),$/;"	f	class:WorkQueue
WorkQueue	httpserver.cpp	/^class WorkQueue$/;"	c	file:
WrapVarInt	serialize.h	/^CVarInt<I> WrapVarInt(I& n) { return CVarInt<I>(n); }$/;"	f
WritableFile	leveldb/include/leveldb/env.h	/^  WritableFile() { }$/;"	f	class:leveldb::WritableFile
WritableFile	leveldb/include/leveldb/env.h	/^class WritableFile {$/;"	c	namespace:leveldb
WritableFileClosed	leveldb/db/fault_injection_test.cc	/^void FaultInjectionTestEnv::WritableFileClosed(const FileState& state) {$/;"	f	class:leveldb::FaultInjectionTestEnv
WritableFileImpl	leveldb/helpers/memenv/memenv.cc	/^  WritableFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon16::WritableFileImpl
WritableFileImpl	leveldb/helpers/memenv/memenv.cc	/^class WritableFileImpl : public WritableFile {$/;"	c	namespace:leveldb::__anon16	file:
Write	addrdb.cpp	/^bool CAddrDB::Write(const CAddrMan& addr)$/;"	f	class:CAddrDB
Write	addrdb.cpp	/^bool CBanDB::Write(const banmap_t& banSet)$/;"	f	class:CBanDB
Write	crypto/hmac_sha256.h	/^    CHMAC_SHA256& Write(const unsigned char* data, size_t len)$/;"	f	class:CHMAC_SHA256
Write	crypto/hmac_sha512.h	/^    CHMAC_SHA512& Write(const unsigned char* data, size_t len)$/;"	f	class:CHMAC_SHA512
Write	crypto/ripemd160.cpp	/^CRIPEMD160& CRIPEMD160::Write(const unsigned char* data, size_t len)$/;"	f	class:CRIPEMD160
Write	crypto/sha1.cpp	/^CSHA1& CSHA1::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA1
Write	crypto/sha256.cpp	/^CSHA256& CSHA256::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA256
Write	crypto/sha512.cpp	/^CSHA512& CSHA512::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA512
Write	dbwrapper.h	/^    bool Write(const K& key, const V& value, bool fSync = false)$/;"	f	class:CDBWrapper
Write	dbwrapper.h	/^    void Write(const K& key, const V& value)$/;"	f	class:CDBBatch
Write	hash.cpp	/^CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)$/;"	f	class:CSipHasher
Write	hash.cpp	/^CSipHasher& CSipHasher::Write(uint64_t data)$/;"	f	class:CSipHasher
Write	hash.h	/^    CHash160& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash160
Write	hash.h	/^    CHash256& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash256
Write	leveldb/db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* my_batch) {$/;"	f	class:leveldb::DBImpl
Write	leveldb/db/db_test.cc	/^  virtual Status Write(const WriteOptions& options, WriteBatch* batch) {$/;"	f	class:leveldb::ModelDB
Write	leveldb/db/log_test.cc	/^  void Write(const std::string& msg) {$/;"	f	class:leveldb::log::LogTest
Write	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Write(bool write_sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark
Write	leveldb/doc/bench/db_bench_tree_db.cc	/^  void Write(bool sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark	file:
Write	policy/fees.cpp	/^bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const$/;"	f	class:CBlockPolicyEstimator
Write	policy/fees.cpp	/^void TxConfirmStats::Write(CAutoFile& fileout) const$/;"	f	class:TxConfirmStats
Write	wallet/db.h	/^    bool Write(const K& key, const T& value, bool fOverwrite = true)$/;"	f	class:CDB
WriteAccount	wallet/walletdb.cpp	/^bool CWalletDB::WriteAccount(const std::string& strAccount, const CAccount& account)$/;"	f	class:CWalletDB
WriteAccountingEntry	wallet/walletdb.cpp	/^bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)$/;"	f	class:CWalletDB
WriteBE32	crypto/common.h	/^void static inline WriteBE32(unsigned char* ptr, uint32_t x)$/;"	f
WriteBE64	crypto/common.h	/^void static inline WriteBE64(unsigned char* ptr, uint64_t x)$/;"	f
WriteBatch	dbwrapper.cpp	/^bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)$/;"	f	class:CDBWrapper
WriteBatch	leveldb/db/write_batch.cc	/^WriteBatch::WriteBatch() {$/;"	f	class:leveldb::WriteBatch
WriteBatch	leveldb/include/leveldb/write_batch.h	/^class WriteBatch {$/;"	c	namespace:leveldb
WriteBatchInternal	leveldb/db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchItemPrinter	leveldb/db/dumpfile.cc	/^class WriteBatchItemPrinter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon19	file:
WriteBatchPrinter	leveldb/db/dumpfile.cc	/^static void WriteBatchPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon19
WriteBatchSync	txdb.cpp	/^bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {$/;"	f	class:CBlockTreeDB
WriteBatchTest	leveldb/db/write_batch_test.cc	/^class WriteBatchTest { };$/;"	c	namespace:leveldb	file:
WriteBestBlock	wallet/walletdb.cpp	/^bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)$/;"	f	class:CWalletDB
WriteBinaryFile	torcontrol.cpp	/^static bool WriteBinaryFile(const fs::path &filename, const std::string &data)$/;"	f	file:
WriteBlock	leveldb/table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteBlockToDisk	validation.cpp	/^static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)$/;"	f	file:
WriteCScript	wallet/walletdb.cpp	/^bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)$/;"	f	class:CWalletDB
WriteCoinsViewEntry	test/coins_tests.cpp	/^void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)$/;"	f
WriteCompactSize	serialize.h	/^inline void WriteCompactSize(CSizeComputer &s, uint64_t nSize)$/;"	f
WriteCompactSize	serialize.h	/^void WriteCompactSize(Stream& os, uint64_t nSize)$/;"	f
WriteCryptedKey	wallet/walletdb.cpp	/^bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,$/;"	f	class:CWalletDB
WriteDefaultKey	wallet/walletdb.cpp	/^bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)$/;"	f	class:CWalletDB
WriteDescriptor	leveldb/db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon26::Repairer	file:
WriteDestData	wallet/walletdb.cpp	/^bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)$/;"	f	class:CWalletDB
WriteFlag	txdb.cpp	/^bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {$/;"	f	class:CBlockTreeDB
WriteHDChain	wallet/walletdb.cpp	/^bool CWalletDB::WriteHDChain(const CHDChain& chain)$/;"	f	class:CWalletDB
WriteHeader	httpserver.cpp	/^void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)$/;"	f	class:HTTPRequest
WriteIC	wallet/walletdb.h	/^    bool WriteIC(const K& key, const T& value, bool fOverwrite = true)$/;"	f	class:CWalletDB
WriteInitialOffsetLog	leveldb/db/log_test.cc	/^  void WriteInitialOffsetLog() {$/;"	f	class:leveldb::log::LogTest
WriteKey	wallet/walletdb.cpp	/^bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)$/;"	f	class:CWalletDB
WriteLE16	crypto/common.h	/^void static inline WriteLE16(unsigned char* ptr, uint16_t x)$/;"	f
WriteLE32	crypto/common.h	/^void static inline WriteLE32(unsigned char* ptr, uint32_t x)$/;"	f
WriteLE64	crypto/common.h	/^void static inline WriteLE64(unsigned char* ptr, uint64_t x)$/;"	f
WriteLevel0Table	leveldb/db/db_impl.cc	/^Status DBImpl::WriteLevel0Table(MemTable* mem, VersionEdit* edit,$/;"	f	class:leveldb::DBImpl
WriteMasterKey	wallet/walletdb.cpp	/^bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)$/;"	f	class:CWalletDB
WriteMinVersion	wallet/walletdb.cpp	/^bool CWalletDB::WriteMinVersion(int nVersion)$/;"	f	class:CWalletDB
WriteName	wallet/walletdb.cpp	/^bool CWalletDB::WriteName(const std::string& strAddress, const std::string& strName)$/;"	f	class:CWalletDB
WriteOptions	leveldb/include/leveldb/options.h	/^  WriteOptions()$/;"	f	struct:leveldb::WriteOptions
WriteOptions	leveldb/include/leveldb/options.h	/^struct WriteOptions {$/;"	s	namespace:leveldb
WriteOrderPos	wallet/wallet.h	/^static inline void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)$/;"	f
WriteOrderPosNext	wallet/walletdb.cpp	/^bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)$/;"	f	class:CWalletDB
WritePool	wallet/walletdb.cpp	/^bool CWalletDB::WritePool(int64_t nPool, const CKeyPool& keypool)$/;"	f	class:CWalletDB
WritePurpose	wallet/walletdb.cpp	/^bool CWalletDB::WritePurpose(const std::string& strAddress, const std::string& strPurpose)$/;"	f	class:CWalletDB
WriteRandom	leveldb/db/db_bench.cc	/^  void WriteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteRawBlock	leveldb/table/table_builder.cc	/^void TableBuilder::WriteRawBlock(const Slice& block_contents,$/;"	f	class:leveldb::TableBuilder
WriteReindexing	txdb.cpp	/^bool CBlockTreeDB::WriteReindexing(bool fReindexing) {$/;"	f	class:CBlockTreeDB
WriteReply	httpserver.cpp	/^void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)$/;"	f	class:HTTPRequest
WriteSeq	leveldb/db/db_bench.cc	/^  void WriteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteSnapshot	leveldb/db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStep	leveldb/db/skiplist_test.cc	/^  void WriteStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
WriteStringToFile	leveldb/util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteStringToFileSync	leveldb/util/env.cc	/^Status WriteStringToFileSync(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToFile	leveldb/db/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark	file:
WriteTx	wallet/walletdb.cpp	/^bool CWalletDB::WriteTx(const CWalletTx& wtx)$/;"	f	class:CWalletDB
WriteTxIndex	txdb.cpp	/^bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {$/;"	f	class:CBlockTreeDB
WriteVarInt	serialize.h	/^inline void WriteVarInt(CSizeComputer &s, I n)$/;"	f
WriteVarInt	serialize.h	/^void WriteVarInt(Stream& os, I n)$/;"	f
WriteVersion	wallet/db.h	/^    bool WriteVersion(int nVersion)$/;"	f	class:CDB
WriteVersion	wallet/walletdb.cpp	/^bool CWalletDB::WriteVersion(int nVersion)$/;"	f	class:CWalletDB
WriteWatchOnly	wallet/walletdb.cpp	/^bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)$/;"	f	class:CWalletDB
Writer	leveldb/db/db_impl.cc	/^  explicit Writer(port::Mutex* mu) : cv(mu) { }$/;"	f	struct:leveldb::DBImpl::Writer
Writer	leveldb/db/db_impl.cc	/^struct DBImpl::Writer {$/;"	s	class:leveldb::DBImpl	file:
Writer	leveldb/db/log_writer.cc	/^Writer::Writer(WritableFile* dest)$/;"	f	class:leveldb::log::Writer
Writer	leveldb/db/log_writer.cc	/^Writer::Writer(WritableFile* dest, uint64_t dest_length)$/;"	f	class:leveldb::log::Writer
Writer	leveldb/db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
WrittenBytes	leveldb/db/log_test.cc	/^  size_t WrittenBytes() const {$/;"	f	class:leveldb::log::LogTest
X	net.cpp	641;"	d	file:
X	net.cpp	642;"	d	file:
X	net.cpp	698;"	d	file:
X11XCB_CFLAGS	Makefile	/^X11XCB_CFLAGS = $/;"	m
X11XCB_LIBS	Makefile	/^X11XCB_LIBS = $/;"	m
X509Deleter	qt/paymentserver.cpp	/^struct X509Deleter {$/;"	s	file:
X509StoreDeleter	qt/paymentserver.cpp	/^struct X509StoreDeleter {$/;"	s	file:
XGETTEXT	Makefile	/^XGETTEXT = \/usr\/bin\/xgettext$/;"	m
XMARGIN	qt/trafficgraphwidget.cpp	16;"	d	file:
Xor	streams.h	/^    void Xor(const std::vector<unsigned char>& key)$/;"	f	class:CDataStream
YMARGIN	qt/trafficgraphwidget.cpp	17;"	d	file:
ZMQ_CFLAGS	Makefile	/^ZMQ_CFLAGS = $/;"	m
ZMQ_LIBS	Makefile	/^ZMQ_LIBS = $/;"	m
ZapSelectTx	wallet/wallet.cpp	/^DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)$/;"	f	class:CWallet
ZapSelectTx	wallet/walletdb.cpp	/^DBErrors CWalletDB::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<uint256>& vTxHashOut)$/;"	f	class:CWalletDB
ZapWalletTx	wallet/wallet.cpp	/^DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)$/;"	f	class:CWallet
ZapWalletTx	wallet/walletdb.cpp	/^DBErrors CWalletDB::ZapWalletTx(std::vector<CWalletTx>& vWtx)$/;"	f	class:CWalletDB
ZeroArray	test/arith_uint256_tests.cpp	/^const unsigned char ZeroArray[] =$/;"	v
ZeroArray	test/uint256_tests.cpp	/^const unsigned char ZeroArray[] =$/;"	v
ZeroL	test/arith_uint256_tests.cpp	/^const arith_uint256 ZeroL = arith_uint256V(std::vector<unsigned char>(ZeroArray,ZeroArray+32));$/;"	v
ZeroL	test/uint256_tests.cpp	/^const uint256 ZeroL = uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));$/;"	v
ZeroS	test/uint256_tests.cpp	/^const uint160 ZeroS = uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));$/;"	v
_	util.h	/^inline std::string _(const char* psz)$/;"	f
_ACJNI_JAVAC	secp256k1/Makefile	/^_ACJNI_JAVAC = $/;"	m
_WIFICOIN_CUCKOOCACHE_H_	cuckoocache.h	6;"	d
_WIFICOIN_PREVECTOR_H_	prevector.h	6;"	d
_CTAES_H_	crypto/ctaes/ctaes.h	8;"	d
_CleanUp	leveldb/util/env_win.cc	/^void Win32FileLock::_CleanUp()$/;"	f	class:leveldb::Win32::Win32FileLock
_CleanUp	leveldb/util/env_win.cc	/^void Win32RandomAccessFile::_CleanUp()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
_CleanUp	leveldb/util/env_win.cc	/^void Win32SequentialFile::_CleanUp()$/;"	f	class:leveldb::Win32::Win32SequentialFile
_DARWIN_USE_64_BIT_INODE	config/wificoin-config.h	420;"	d
_Included_org_wificoin_NativeSecp256k1	secp256k1/src/java/org_wificoin_NativeSecp256k1.h	7;"	d
_Included_org_wificoin_Secp256k1Context	secp256k1/src/java/org_wificoin_Secp256k1Context.h	7;"	d
_Init	leveldb/util/env_win.cc	/^BOOL Win32FileLock::_Init( LPCWSTR path )$/;"	f	class:leveldb::Win32::Win32FileLock
_Init	leveldb/util/env_win.cc	/^BOOL Win32RandomAccessFile::_Init( LPCWSTR path )$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
_Init	leveldb/util/env_win.cc	/^BOOL Win32SequentialFile::_Init()$/;"	f	class:leveldb::Win32::Win32SequentialFile
_POSIX_C_SOURCE	util.cpp	31;"	d	file:
_POSIX_C_SOURCE	util.cpp	34;"	d	file:
_SECP256K1_	secp256k1/include/secp256k1.h	2;"	d
_SECP256K1_BASIC_CONFIG_	secp256k1/src/basic-config.h	8;"	d
_SECP256K1_BENCH_H_	secp256k1/src/bench.h	8;"	d
_SECP256K1_CONTRIB_BER_PRIVATEKEY_H_	secp256k1/contrib/lax_der_privatekey_parsing.h	29;"	d
_SECP256K1_CONTRIB_LAX_DER_PARSING_H_	secp256k1/contrib/lax_der_parsing.h	52;"	d
_SECP256K1_ECDH_	secp256k1/include/secp256k1_ecdh.h	2;"	d
_SECP256K1_ECDSA_	secp256k1/src/ecdsa.h	8;"	d
_SECP256K1_ECDSA_IMPL_H_	secp256k1/src/ecdsa_impl.h	9;"	d
_SECP256K1_ECKEY_	secp256k1/src/eckey.h	8;"	d
_SECP256K1_ECKEY_IMPL_H_	secp256k1/src/eckey_impl.h	8;"	d
_SECP256K1_ECMULT_	secp256k1/src/ecmult.h	8;"	d
_SECP256K1_ECMULT_CONST_	secp256k1/src/ecmult_const.h	8;"	d
_SECP256K1_ECMULT_CONST_IMPL_	secp256k1/src/ecmult_const_impl.h	8;"	d
_SECP256K1_ECMULT_GEN_	secp256k1/src/ecmult_gen.h	8;"	d
_SECP256K1_ECMULT_GEN_IMPL_H_	secp256k1/src/ecmult_gen_impl.h	8;"	d
_SECP256K1_ECMULT_IMPL_H_	secp256k1/src/ecmult_impl.h	8;"	d
_SECP256K1_ECMULT_STATIC_CONTEXT_	secp256k1/src/ecmult_static_context.h	2;"	d
_SECP256K1_FIELD_	secp256k1/src/field.h	8;"	d
_SECP256K1_FIELD_IMPL_H_	secp256k1/src/field_impl.h	8;"	d
_SECP256K1_FIELD_INNER5X52_IMPL_H_	secp256k1/src/field_5x52_asm_impl.h	15;"	d
_SECP256K1_FIELD_INNER5X52_IMPL_H_	secp256k1/src/field_5x52_int128_impl.h	8;"	d
_SECP256K1_FIELD_REPR_	secp256k1/src/field_10x26.h	8;"	d
_SECP256K1_FIELD_REPR_	secp256k1/src/field_5x52.h	8;"	d
_SECP256K1_FIELD_REPR_IMPL_H_	secp256k1/src/field_10x26_impl.h	8;"	d
_SECP256K1_FIELD_REPR_IMPL_H_	secp256k1/src/field_5x52_impl.h	8;"	d
_SECP256K1_GROUP_	secp256k1/src/group.h	8;"	d
_SECP256K1_GROUP_IMPL_H_	secp256k1/src/group_impl.h	8;"	d
_SECP256K1_HASH_	secp256k1/src/hash.h	8;"	d
_SECP256K1_HASH_IMPL_H_	secp256k1/src/hash_impl.h	8;"	d
_SECP256K1_MODULE_ECDH_MAIN_	secp256k1/src/modules/ecdh/main_impl.h	8;"	d
_SECP256K1_MODULE_ECDH_TESTS_	secp256k1/src/modules/ecdh/tests_impl.h	8;"	d
_SECP256K1_MODULE_RECOVERY_MAIN_	secp256k1/src/modules/recovery/main_impl.h	8;"	d
_SECP256K1_MODULE_RECOVERY_TESTS_	secp256k1/src/modules/recovery/tests_impl.h	8;"	d
_SECP256K1_NUM_	secp256k1/src/num.h	8;"	d
_SECP256K1_NUM_IMPL_H_	secp256k1/src/num_impl.h	8;"	d
_SECP256K1_NUM_REPR_	secp256k1/src/num_gmp.h	8;"	d
_SECP256K1_NUM_REPR_IMPL_H_	secp256k1/src/num_gmp_impl.h	8;"	d
_SECP256K1_RECOVERY_	secp256k1/include/secp256k1_recovery.h	2;"	d
_SECP256K1_SCALAR_	secp256k1/src/scalar.h	8;"	d
_SECP256K1_SCALAR_IMPL_H_	secp256k1/src/scalar_impl.h	8;"	d
_SECP256K1_SCALAR_REPR_	secp256k1/src/scalar_4x64.h	8;"	d
_SECP256K1_SCALAR_REPR_	secp256k1/src/scalar_8x32.h	8;"	d
_SECP256K1_SCALAR_REPR_	secp256k1/src/scalar_low.h	8;"	d
_SECP256K1_SCALAR_REPR_IMPL_H_	secp256k1/src/scalar_4x64_impl.h	8;"	d
_SECP256K1_SCALAR_REPR_IMPL_H_	secp256k1/src/scalar_8x32_impl.h	8;"	d
_SECP256K1_SCALAR_REPR_IMPL_H_	secp256k1/src/scalar_low_impl.h	8;"	d
_SECP256K1_TESTRAND_H_	secp256k1/src/testrand.h	8;"	d
_SECP256K1_TESTRAND_IMPL_H_	secp256k1/src/testrand_impl.h	8;"	d
_SECP256K1_UTIL_H_	secp256k1/src/util.h	8;"	d
_WIN32_IE	qt/guiutil.cpp	27;"	d	file:
_WIN32_IE	qt/guiutil.cpp	29;"	d	file:
_WIN32_IE	util.cpp	58;"	d	file:
_WIN32_IE	util.cpp	60;"	d	file:
_WIN32_WINNT	compat.h	15;"	d
_WIN32_WINNT	compat.h	17;"	d
_WIN32_WINNT	qt/guiutil.cpp	23;"	d	file:
_WIN32_WINNT	qt/guiutil.cpp	25;"	d	file:
_WIN32_WINNT	support/lockedpool.cpp	14;"	d	file:
_WIN32_WINNT	support/lockedpool.cpp	16;"	d	file:
_WIN32_WINNT	util.cpp	53;"	d	file:
_WIN32_WINNT	util.cpp	55;"	d	file:
__UNIVALUE_H__	univalue/include/univalue.h	7;"	d
__fdelt_warn	compat/glibc_compat.cpp	/^extern "C" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)$/;"	f
_clear	txmempool.cpp	/^void CTxMemPool::_clear()$/;"	f	class:CTxMemPool
_createmultisig_redeemScript	rpc/misc.cpp	/^CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniValue& params)$/;"	f
_filename	leveldb/util/env_win.cc	/^    const std::string _filename;$/;"	m	class:leveldb::Win32::Win32RandomAccessFile	file:
_filename	leveldb/util/env_win.cc	/^    std::string _filename;$/;"	m	class:leveldb::Win32::Win32FileLock	file:
_filename	leveldb/util/env_win.cc	/^    std::string _filename;$/;"	m	class:leveldb::Win32::Win32SequentialFile	file:
_hFile	leveldb/util/env_win.cc	/^    ::HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32SequentialFile	file:
_hFile	leveldb/util/env_win.cc	/^    ::HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32WritableFile	file:
_hFile	leveldb/util/env_win.cc	/^    HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32FileLock	file:
_hFile	leveldb/util/env_win.cc	/^    HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32RandomAccessFile	file:
_instance	support/lockedpool.cpp	/^LockedPoolManager* LockedPoolManager::_instance = nullptr;$/;"	m	class:LockedPoolManager	file:
_instance	support/lockedpool.h	/^    static LockedPoolManager* _instance;$/;"	m	class:LockedPoolManager
_pFileProxy	leveldb/util/env_win.cc	/^    WritableFile* _pFileProxy;$/;"	m	class:leveldb::Win32::Win32Logger	file:
_size	prevector.h	/^    size_type _size;$/;"	m	class:prevector
_ssExtra	wallet/wallet.h	/^    std::vector<char> _ssExtra;$/;"	m	class:CAccountingEntry
_union	prevector.h	/^    } _union;$/;"	m	class:prevector	typeref:union:prevector::direct_or_indirect
abandonAction	qt/transactionview.h	/^    QAction *abandonAction;$/;"	m	class:TransactionView
abandonTransaction	qt/walletmodel.cpp	/^bool WalletModel::abandonTransaction(uint256 hash) const$/;"	f	class:WalletModel
abandonTx	qt/transactionview.cpp	/^void TransactionView::abandonTx()$/;"	f	class:TransactionView
abandontransaction	wallet/rpcwallet.cpp	/^UniValue abandontransaction(const JSONRPCRequest& request)$/;"	f
abortrescan	wallet/rpcdump.cpp	/^UniValue abortrescan(const JSONRPCRequest& request)$/;"	f
aboutAction	qt/wificoingui.h	/^    QAction *aboutAction;$/;"	m	class:WiFicoinGUI
aboutClicked	qt/wificoingui.cpp	/^void WiFicoinGUI::aboutClicked()$/;"	f	class:WiFicoinGUI
aboutQtAction	qt/wificoingui.h	/^    QAction *aboutQtAction;$/;"	m	class:WiFicoinGUI
abs64	timedata.cpp	/^static int64_t abs64(int64_t n)$/;"	f	file:
abs_builddir	Makefile	/^abs_builddir = \/opt\/wificoin\/src$/;"	m
abs_builddir	secp256k1/Makefile	/^abs_builddir = \/opt\/wificoin\/src\/secp256k1$/;"	m
abs_builddir	univalue/Makefile	/^abs_builddir = \/opt\/wificoin\/src\/univalue$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/opt\/wificoin\/src$/;"	m
abs_srcdir	secp256k1/Makefile	/^abs_srcdir = \/opt\/wificoin\/src\/secp256k1$/;"	m
abs_srcdir	univalue/Makefile	/^abs_srcdir = \/opt\/wificoin\/src\/univalue$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/opt\/wificoin$/;"	m
abs_top_builddir	secp256k1/Makefile	/^abs_top_builddir = \/opt\/wificoin\/src\/secp256k1$/;"	m
abs_top_builddir	univalue/Makefile	/^abs_top_builddir = \/opt\/wificoin\/src\/univalue$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/opt\/wificoin$/;"	m
abs_top_srcdir	secp256k1/Makefile	/^abs_top_srcdir = \/opt\/wificoin\/src\/secp256k1$/;"	m
abs_top_srcdir	univalue/Makefile	/^abs_top_srcdir = \/opt\/wificoin\/src\/univalue$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	secp256k1/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	univalue/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	secp256k1/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	univalue/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC_FOR_BUILD	secp256k1/Makefile	/^ac_ct_CC_FOR_BUILD = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	univalue/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	secp256k1/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	univalue/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_OBJCXX	Makefile	/^ac_ct_OBJCXX = $/;"	m
ac_fn_c_check_func	secp256k1/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_func	univalue/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	secp256k1/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_compile	univalue/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	secp256k1/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	secp256k1/configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_try_compile	secp256k1/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_compile	univalue/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	secp256k1/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_cpp	univalue/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	secp256k1/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_link	univalue/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	secp256k1/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_c_try_run	univalue/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_try_compile	univalue/configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	univalue/configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	univalue/configure	/^ac_fn_cxx_try_link ()$/;"	f
accept	qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::accept()$/;"	f	class:AskPassphraseDialog
accept	qt/editaddressdialog.cpp	/^void EditAddressDialog::accept()$/;"	f	class:EditAddressDialog
accept	qt/openuridialog.cpp	/^void OpenURIDialog::accept()$/;"	f	class:OpenURIDialog
accept	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::accept()$/;"	f	class:ReceiveCoinsDialog
accept	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::accept()$/;"	f	class:SendCoinsDialog
active	util.h	/^    bool active;$/;"	m	struct:CLogCategoryActive
activeTxn	wallet/db.h	/^    DbTxn* activeTxn;$/;"	m	class:CDB
actor	rpc/server.h	/^    rpcfn_type actor;$/;"	m	class:CRPCCommand
addCoin	bench/coin_selection.cpp	/^static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<COutput>& vCoins)$/;"	f	file:
addColumn	qt/csvmodelwriter.cpp	/^void CSVModelWriter::addColumn(const QString &title, int column, int role)$/;"	f	class:CSVModelWriter
addEntry	qt/sendcoinsdialog.cpp	/^SendCoinsEntry *SendCoinsDialog::addEntry()$/;"	f	class:SendCoinsDialog
addNewRequest	qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::addNewRequest(RecentRequestEntry &recipient)$/;"	f	class:RecentRequestsTableModel
addNewRequest	qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::addNewRequest(const SendCoinsRecipient &recipient)$/;"	f	class:RecentRequestsTableModel
addNewRequest	qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::addNewRequest(const std::string &recipient)$/;"	f	class:RecentRequestsTableModel
addOverriddenOption	qt/optionsmodel.cpp	/^void OptionsModel::addOverriddenOption(const std::string &option)$/;"	f	class:OptionsModel
addPackageTxs	miner.cpp	/^void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)$/;"	f	class:BlockAssembler
addRow	qt/addresstablemodel.cpp	/^QString AddressTableModel::addRow(const QString &type, const QString &label, const QString &address)$/;"	f	class:AddressTableModel
addTransaction	txmempool.h	/^    void addTransaction(const CTransactionRef& tx)$/;"	f	struct:DisconnectedBlockTransactions
addUnchecked	txmempool.cpp	/^bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)$/;"	f	class:CTxMemPool
addUnchecked	txmempool.cpp	/^bool CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool validFeeEstimate)$/;"	f	class:CTxMemPool
addWallet	qt/wificoingui.cpp	/^bool WiFicoinGUI::addWallet(const QString& name, WalletModel *walletModel)$/;"	f	class:WiFicoinGUI
addWallet	qt/walletframe.cpp	/^bool WalletFrame::addWallet(const QString& name, WalletModel *walletModel)$/;"	f	class:WalletFrame
add_coin	wallet/test/wallet_tests.cpp	/^static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)$/;"	f	file:
add_onion_cb	torcontrol.cpp	/^void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
added_files	leveldb/db/version_set.cc	/^    FileSet* added_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
addmultisigaddress	wallet/rpcwallet.cpp	/^UniValue addmultisigaddress(const JSONRPCRequest& request)$/;"	f
addnode	rpc/net.cpp	/^UniValue addnode(const JSONRPCRequest& request)$/;"	f
addr	base58.cpp	/^    CWiFicoinAddress* addr;$/;"	m	class:__anon46::CWiFicoinAddressVisitor	file:
addr	chainparams.h	/^    uint8_t addr[16];$/;"	m	struct:SeedSpec6
addr	net.cpp	/^    CAddress addr;$/;"	m	struct:NodeEvictionCandidate	file:
addr	net.h	/^    CAddress addr;$/;"	m	class:CNodeStats
addr	net.h	/^    const CAddress addr;$/;"	m	class:CNode
addrBind	net.h	/^    CAddress addrBind;$/;"	m	class:CNodeStats
addrBind	net.h	/^    const CAddress addrBind;$/;"	m	class:CNode
addrKnown	net.h	/^    CRollingBloomFilter addrKnown;$/;"	m	class:CNode
addrLocal	net.h	/^    CService addrLocal;$/;"	m	class:CNode
addrLocal	net.h	/^    std::string addrLocal;$/;"	m	class:CNodeStats
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNode
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNodeStats
addrPrefix	qt/transactionfilterproxy.h	/^    QString addrPrefix;$/;"	m	class:TransactionFilterProxy
address	net_processing.cpp	/^    const CService address;$/;"	m	struct:__anon50::CNodeState	file:
address	qt/addresstablemodel.cpp	/^    QString address;$/;"	m	struct:AddressTableEntry	file:
address	qt/editaddressdialog.h	/^    QString address;$/;"	m	class:EditAddressDialog
address	qt/transactionrecord.h	/^    std::string address;$/;"	m	class:TransactionRecord
address	qt/walletmodel.h	/^    QString address;$/;"	m	class:SendCoinsRecipient
address	zmq/zmqabstractnotifier.h	/^    std::string address;$/;"	m	class:CZMQAbstractNotifier
addressColor	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::addressColor(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
addressInArena	support/lockedpool.h	/^    bool addressInArena(void *ptr) const { return ptr >= base && ptr < end; }$/;"	f	class:Arena
addressTableModel	qt/walletmodel.h	/^    AddressTableModel *addressTableModel;$/;"	m	class:WalletModel
addressWidget	qt/transactionview.h	/^    QLineEdit *addressWidget;$/;"	m	class:TransactionView
addrman	net.h	/^    CAddrMan addrman;$/;"	m	class:CConnman
addwitnessaddress	wallet/rpcwallet.cpp	/^UniValue addwitnessaddress(const JSONRPCRequest& request)$/;"	f
adjustTableColumnsWidth	qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
aix_post_process_depfile	secp256k1/build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
aix_post_process_depfile	univalue/build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
align_up	support/lockedpool.cpp	/^static inline size_t align_up(size_t x, size_t align)$/;"	f	file:
alignment	support/lockedpool.h	/^    size_t alignment;$/;"	m	class:Arena
allColumnsMinimumWidth	qt/guiutil.h	/^            int allColumnsMinimumWidth;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
allNetMessageTypes	protocol.cpp	/^const static std::string allNetMessageTypes[] = {$/;"	v	file:
alloc	support/lockedpool.cpp	/^void* Arena::alloc(size_t size)$/;"	f	class:Arena
alloc	support/lockedpool.cpp	/^void* LockedPool::alloc(size_t size)$/;"	f	class:LockedPool
alloc_bytes_remaining_	leveldb/util/arena.h	/^  size_t alloc_bytes_remaining_;$/;"	m	class:leveldb::Arena
alloc_ptr_	leveldb/util/arena.h	/^  char* alloc_ptr_;$/;"	m	class:leveldb::Arena
allocate	support/allocators/secure.h	/^    T* allocate(std::size_t n, const void* hint = 0)$/;"	f	struct:secure_allocator
allocated_memory	prevector.h	/^    size_t allocated_memory() const {$/;"	f	class:prevector
allocator	support/lockedpool.h	/^        LockedPageAllocator *allocator;$/;"	m	class:LockedPool::LockedPageArena
allocator	support/lockedpool.h	/^    std::unique_ptr<LockedPageAllocator> allocator;$/;"	m	class:LockedPool
allocator_type	streams.h	/^    typedef vector_type::allocator_type   allocator_type;$/;"	t	class:CDataStream
allow_erase	cuckoocache.h	/^    inline void allow_erase(uint32_t n) const$/;"	f	class:CuckooCache::cache
allowed_	leveldb/util/env_posix.cc	/^  port::AtomicPointer allowed_;$/;"	m	class:leveldb::__anon11::Limiter	file:
allowed_seeks	leveldb/db/version_edit.h	/^  int allowed_seeks;          \/\/ Seeks allowed until compaction$/;"	m	struct:leveldb::FileMetaData
almostEqual	test/arith_uint256_tests.cpp	/^bool almostEqual(double d1, double d2)$/;"	f
altstacktop	script/interpreter.cpp	56;"	d	file:
am__CONFIG_DISTCLEAN_FILES	secp256k1/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__CONFIG_DISTCLEAN_FILES	univalue/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DEPENDENCIES_1	Makefile	/^am__DEPENDENCIES_1 = $(am__append_10)$/;"	m
am__DEPENDENCIES_2	Makefile	/^am__DEPENDENCIES_2 = $(am__append_11)$/;"	m
am__DEPENDENCIES_2	secp256k1/Makefile	/^am__DEPENDENCIES_2 =$/;"	m
am__DEPENDENCIES_3	Makefile	/^am__DEPENDENCIES_3 =$/;"	m
am__DEPENDENCIES_4	Makefile	/^am__DEPENDENCIES_4 = univalue\/libunivalue.la$/;"	m
am__EXEEXT_1	Makefile	/^am__EXEEXT_1 = wificoind$(EXEEXT)$/;"	m
am__EXEEXT_1	univalue/Makefile	/^am__EXEEXT_1 = test\/unitester$(EXEEXT)$/;"	m
am__EXEEXT_2	Makefile	/^am__EXEEXT_2 = wificoin-cli$(EXEEXT) \\$/;"	m
am__EXEEXT_2	secp256k1/Makefile	/^am__EXEEXT_2 = tests$(EXEEXT)$/;"	m
am__EXEEXT_3	Makefile	/^am__EXEEXT_3 = test\/test_wificoin$(EXEEXT)$/;"	m
am__EXEEXT_3	secp256k1/Makefile	/^am__EXEEXT_3 = exhaustive_tests$(EXEEXT)$/;"	m
am__EXEEXT_4	Makefile	/^am__EXEEXT_4 = bench\/bench_wificoin$(EXEEXT)$/;"	m
am__EXEEXT_7	Makefile	/^am__EXEEXT_7 = test\/test_wificoin_fuzzy$(EXEEXT)$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/ax_boost_base.m4 \\$/;"	m
am__aclocal_m4_deps	secp256k1/Makefile	/^am__aclocal_m4_deps =  \\$/;"	m
am__aclocal_m4_deps	univalue/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/libtool.m4 \\$/;"	m
am__append_1	Makefile	/^am__append_1 = wificoind$/;"	m
am__append_10	Makefile	/^am__append_10 = $(LIBLEVELDB_INT)$/;"	m
am__append_11	Makefile	/^am__append_11 = $(LIBMEMENV_INT)$/;"	m
am__append_12	Makefile	/^am__append_12 = -I$(srcdir)\/leveldb\/include \\$/;"	m
am__append_13	secp256k1/Makefile	/^am__append_13 = include\/secp256k1_recovery.h$/;"	m
am__append_14	Makefile	/^am__append_14 = -DLEVELDB_PLATFORM_POSIX$/;"	m
am__append_14	secp256k1/Makefile	/^am__append_14 =  \\$/;"	m
am__append_16	Makefile	/^am__append_16 = leveldb\/port\/port_posix.cc$/;"	m
am__append_17	Makefile	/^am__append_17 = -DLEVELDB_PLATFORM_POSIX_SSE$/;"	m
am__append_18	Makefile	/^am__append_18 = $(SSE42_CXXFLAGS)$/;"	m
am__append_19	Makefile	/^am__append_19 = test\/test_wificoin$/;"	m
am__append_2	Makefile	/^am__append_2 = wificoin-cli wificoin-tx$/;"	m
am__append_2	secp256k1/Makefile	/^am__append_2 = tests$/;"	m
am__append_20	Makefile	/^am__append_20 = test\/test_wificoin$/;"	m
am__append_21	Makefile	/^am__append_21 = test\/test_wificoin_fuzzy$/;"	m
am__append_22	Makefile	/^am__append_22 = \\$/;"	m
am__append_23	Makefile	/^am__append_23 = $(LIBWIFICOIN_WALLET)$/;"	m
am__append_25	Makefile	/^am__append_25 = $(CLEAN_WIFICOIN_TEST)$/;"	m
am__append_26	Makefile	/^am__append_26 = bench\/bench_wificoin$/;"	m
am__append_28	Makefile	/^am__append_28 = bench\/coin_selection.cpp$/;"	m
am__append_29	Makefile	/^am__append_29 = $(LIBWIFICOIN_WALLET) $(LIBWIFICOIN_CRYPTO)$/;"	m
am__append_3	secp256k1/Makefile	/^am__append_3 = -DVERIFY$/;"	m
am__append_30	Makefile	/^am__append_30 = $(CLEAN_WIFICOIN_BENCH)$/;"	m
am__append_4	secp256k1/Makefile	/^am__append_4 = tests$/;"	m
am__append_5	secp256k1/Makefile	/^am__append_5 = exhaustive_tests$/;"	m
am__append_6	secp256k1/Makefile	/^am__append_6 = -DVERIFY$/;"	m
am__append_7	secp256k1/Makefile	/^am__append_7 = exhaustive_tests$/;"	m
am__append_8	secp256k1/Makefile	/^am__append_8 = -I$(top_srcdir)$/;"	m
am__append_9	Makefile	/^am__append_9 = $(LIBLEVELDB_INT) \\$/;"	m
am__append_9	secp256k1/Makefile	/^am__append_9 = -Wall -Wextra -Wno-unused-function$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__base_list	secp256k1/Makefile	/^am__base_list = \\$/;"	m
am__base_list	univalue/Makefile	/^am__base_list = \\$/;"	m
am__bench_bench_wificoin_SOURCES_DIST	Makefile	/^am__bench_bench_wificoin_SOURCES_DIST = bench\/bench_wificoin.cpp \\$/;"	m
am__bench_ecdh_SOURCES_DIST	secp256k1/Makefile	/^am__bench_ecdh_SOURCES_DIST = src\/bench_ecdh.c$/;"	m
am__bench_internal_SOURCES_DIST	secp256k1/Makefile	/^am__bench_internal_SOURCES_DIST = src\/bench_internal.c$/;"	m
am__bench_recover_SOURCES_DIST	secp256k1/Makefile	/^am__bench_recover_SOURCES_DIST = src\/bench_recover.c$/;"	m
am__bench_sign_SOURCES_DIST	secp256k1/Makefile	/^am__bench_sign_SOURCES_DIST = src\/bench_sign.c$/;"	m
am__bench_verify_SOURCES_DIST	secp256k1/Makefile	/^am__bench_verify_SOURCES_DIST = src\/bench_verify.c$/;"	m
am__wificoin_cli_SOURCES_DIST	Makefile	/^am__wificoin_cli_SOURCES_DIST = wificoin-cli.cpp wificoin-cli-res.rc$/;"	m
am__wificoin_tx_SOURCES_DIST	Makefile	/^am__wificoin_tx_SOURCES_DIST = wificoin-tx.cpp wificoin-tx-res.rc$/;"	m
am__wificoind_SOURCES_DIST	Makefile	/^am__wificoind_SOURCES_DIST = wificoind.cpp wificoind-res.rc$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	secp256k1/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	univalue/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	secp256k1/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	univalue/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__check_pre	Makefile	/^am__check_pre = \\$/;"	m
am__check_pre	secp256k1/Makefile	/^am__check_pre = \\$/;"	m
am__check_pre	univalue/Makefile	/^am__check_pre = \\$/;"	m
am__common_driver_flags	Makefile	/^am__common_driver_flags = \\$/;"	m
am__common_driver_flags	secp256k1/Makefile	/^am__common_driver_flags = \\$/;"	m
am__common_driver_flags	univalue/Makefile	/^am__common_driver_flags = \\$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	secp256k1/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	univalue/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__copy_in_global_log_rx	Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__copy_in_global_log_rx	secp256k1/Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__copy_in_global_log_rx	univalue/Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__create_global_log	Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__create_global_log	secp256k1/Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__create_global_log	univalue/Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__crypto_libwificoin_crypto_a_SOURCES_DIST	Makefile	/^am__crypto_libwificoin_crypto_a_SOURCES_DIST = crypto\/aes.cpp \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	secp256k1/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	univalue/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	secp256k1/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	univalue/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dirstamp	secp256k1/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dirstamp	univalue/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__distuninstallcheck_listfiles	secp256k1/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__distuninstallcheck_listfiles	univalue/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__exhaustive_tests_SOURCES_DIST	secp256k1/Makefile	/^am__exhaustive_tests_SOURCES_DIST = src\/tests_exhaustive.c$/;"	m
am__global_test_result_rx	Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__global_test_result_rx	secp256k1/Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__global_test_result_rx	univalue/Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__include	secp256k1/Makefile	/^am__include = include$/;"	m
am__include	univalue/Makefile	/^am__include = include$/;"	m
am__include_HEADERS_DIST	Makefile	/^am__include_HEADERS_DIST = script\/wificoinconsensus.h$/;"	m
am__include_HEADERS_DIST	secp256k1/Makefile	/^am__include_HEADERS_DIST = include\/secp256k1.h \\$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__install_max	secp256k1/Makefile	/^am__install_max = 40$/;"	m
am__install_max	univalue/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \\$/;"	m
am__installdirs	secp256k1/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgconfigdir)" \\$/;"	m
am__installdirs	univalue/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgconfigdir)" \\$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	secp256k1/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	univalue/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	secp256k1/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	univalue/Makefile	/^am__leading_dot = .$/;"	m
am__leveldb_libleveldb_a_SOURCES_DIST	Makefile	/^am__leveldb_libleveldb_a_SOURCES_DIST = leveldb\/port\/atomic_pointer.h \\$/;"	m
am__leveldb_libleveldb_sse42_a_SOURCES_DIST	Makefile	/^am__leveldb_libleveldb_sse42_a_SOURCES_DIST =  \\$/;"	m
am__leveldb_libmemenv_a_SOURCES_DIST	Makefile	/^am__leveldb_libmemenv_a_SOURCES_DIST =  \\$/;"	m
am__libwificoin_util_a_SOURCES_DIST	Makefile	/^am__libwificoin_util_a_SOURCES_DIST = support\/lockedpool.cpp \\$/;"	m
am__libwificoin_zmq_a_SOURCES_DIST	Makefile	/^am__libwificoin_zmq_a_SOURCES_DIST = zmq\/zmqabstractnotifier.cpp \\$/;"	m
am__libwificoinconsensus_la_SOURCES_DIST	Makefile	/^am__libwificoinconsensus_la_SOURCES_DIST = crypto\/aes.cpp crypto\/aes.h \\$/;"	m
am__libsecp256k1_common_la_SOURCES_DIST	secp256k1/Makefile	/^am__libsecp256k1_common_la_SOURCES_DIST = src\/asm\/field_10x26_arm.s$/;"	m
am__list_recheck_tests	Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__list_recheck_tests	secp256k1/Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__list_recheck_tests	univalue/Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	secp256k1/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	univalue/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	secp256k1/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	univalue/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	secp256k1/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	univalue/Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__mv	secp256k1/Makefile	/^am__mv = mv -f$/;"	m
am__mv	univalue/Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	secp256k1/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	univalue/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	secp256k1/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	univalue/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	secp256k1/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	univalue/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__noinst_HEADERS_DIST	secp256k1/Makefile	/^am__noinst_HEADERS_DIST = src\/scalar.h src\/scalar_4x64.h \\$/;"	m
am__objects_17	Makefile	/^am__objects_17 = crypto\/libwificoinconsensus_la-aes.lo \\$/;"	m
am__objects_18	Makefile	/^am__objects_18 = libwificoinconsensus_la-arith_uint256.lo \\$/;"	m
am__objects_20	Makefile	/^am__objects_20 = bench\/bench_bench_wificoin-coin_selection.$(OBJEXT)$/;"	m
am__objects_21	Makefile	/^am__objects_21 = $(am__objects_4)$/;"	m
am__objects_3	Makefile	/^am__objects_3 = leveldb\/port\/leveldb_libleveldb_a-port_posix.$(OBJEXT)$/;"	m
am__objects_33	Makefile	/^am__objects_33 = wallet\/test\/test_test_wificoin-wallet_test_fixture.$(OBJEXT) \\$/;"	m
am__objects_34	Makefile	/^am__objects_34 = test\/test_test_wificoin-arith_uint256_tests.$(OBJEXT) \\$/;"	m
am__objects_4	Makefile	/^am__objects_4 =$/;"	m
am__post_remove_distdir	secp256k1/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__post_remove_distdir	univalue/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__qt_wificoin_qt_SOURCES_DIST	Makefile	/^am__qt_wificoin_qt_SOURCES_DIST = qt\/wificoin.cpp \\$/;"	m
am__qt_libwificoinqt_a_SOURCES_DIST	Makefile	/^am__qt_libwificoinqt_a_SOURCES_DIST = qt\/bantablemodel.cpp \\$/;"	m
am__qt_test_test_wificoin_qt_SOURCES_DIST	Makefile	/^am__qt_test_test_wificoin_qt_SOURCES_DIST = qt\/test\/compattests.cpp \\$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__quote	secp256k1/Makefile	/^am__quote = $/;"	m
am__quote	univalue/Makefile	/^am__quote = $/;"	m
am__recheck_rx	Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recheck_rx	secp256k1/Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recheck_rx	univalue/Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recursive_targets	Makefile	/^am__recursive_targets = \\$/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	secp256k1/Makefile	/^am__remove_distdir = \\$/;"	m
am__remove_distdir	univalue/Makefile	/^am__remove_distdir = \\$/;"	m
am__rst_title	Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__rst_title	secp256k1/Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__rst_title	univalue/Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__set_TESTS_bases	Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_TESTS_bases	secp256k1/Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_TESTS_bases	univalue/Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_b	Makefile	/^am__set_b = \\$/;"	m
am__set_b	secp256k1/Makefile	/^am__set_b = \\$/;"	m
am__set_b	univalue/Makefile	/^am__set_b = \\$/;"	m
am__sh_e_setup	Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__sh_e_setup	secp256k1/Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__sh_e_setup	univalue/Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	secp256k1/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	univalue/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	secp256k1/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	univalue/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	secp256k1/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	univalue/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__test_logs1	Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs1	secp256k1/Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs1	univalue/Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs2	Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_logs2	secp256k1/Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_logs2	univalue/Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_test_wificoin_SOURCES_DIST	Makefile	/^am__test_test_wificoin_SOURCES_DIST = test\/arith_uint256_tests.cpp \\$/;"	m
am__test_test_wificoin_fuzzy_SOURCES_DIST	Makefile	/^am__test_test_wificoin_fuzzy_SOURCES_DIST =  \\$/;"	m
am__tests_SOURCES_DIST	secp256k1/Makefile	/^am__tests_SOURCES_DIST = src\/tests.c$/;"	m
am__tty_colors	Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors	secp256k1/Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors	univalue/Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors_dummy	Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__tty_colors_dummy	secp256k1/Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__tty_colors_dummy	univalue/Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__uninstall_files_from_dir	Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	secp256k1/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	univalue/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	secp256k1/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	univalue/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	secp256k1/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	univalue/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_AR_	Makefile	/^am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_AR_0	Makefile	/^am__v_AR_0 = @echo "  AR      " $@;$/;"	m
am__v_AR_1	Makefile	/^am__v_AR_1 = $/;"	m
am__v_CCAS_	secp256k1/Makefile	/^am__v_CCAS_ = $(am__v_CCAS_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCAS_0	secp256k1/Makefile	/^am__v_CCAS_0 = @echo "  CCAS    " $@;$/;"	m
am__v_CCAS_1	secp256k1/Makefile	/^am__v_CCAS_1 = $/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_	secp256k1/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_0	secp256k1/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CCLD_1	secp256k1/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_	secp256k1/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_0	secp256k1/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_CC_1	secp256k1/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_	univalue/Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_0	univalue/Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXXLD_1	univalue/Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_	univalue/Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_0	univalue/Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	Makefile	/^am__v_CXX_1 = $/;"	m
am__v_CXX_1	univalue/Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	secp256k1/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	univalue/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	secp256k1/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	univalue/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	secp256k1/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	univalue/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_OBJCXXLD_	Makefile	/^am__v_OBJCXXLD_ = $(am__v_OBJCXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJCXXLD_0	Makefile	/^am__v_OBJCXXLD_0 = @echo "  OBJCXXLD" $@;$/;"	m
am__v_OBJCXXLD_1	Makefile	/^am__v_OBJCXXLD_1 = $/;"	m
am__v_OBJCXX_	Makefile	/^am__v_OBJCXX_ = $(am__v_OBJCXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJCXX_0	Makefile	/^am__v_OBJCXX_0 = @echo "  OBJCXX  " $@;$/;"	m
am__v_OBJCXX_1	Makefile	/^am__v_OBJCXX_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	secp256k1/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	univalue/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	secp256k1/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	univalue/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	secp256k1/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	univalue/Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	secp256k1/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	univalue/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	secp256k1/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	univalue/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	secp256k1/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	univalue/Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	secp256k1/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	univalue/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	secp256k1/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	univalue/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	secp256k1/Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	univalue/Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	secp256k1/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	univalue/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	secp256k1/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	univalue/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_bench_bench_wificoin_OBJECTS	Makefile	/^am_bench_bench_wificoin_OBJECTS = bench\/bench_bench_wificoin-bench_wificoin.$(OBJEXT) \\$/;"	m
am_wificoin_cli_OBJECTS	Makefile	/^am_wificoin_cli_OBJECTS = wificoin_cli-wificoin-cli.$(OBJEXT) \\$/;"	m
am_wificoin_tx_OBJECTS	Makefile	/^am_wificoin_tx_OBJECTS = wificoin_tx-wificoin-tx.$(OBJEXT) \\$/;"	m
am_wificoind_OBJECTS	Makefile	/^am_wificoind_OBJECTS = wificoind-wificoind.$(OBJEXT) $(am__objects_24)$/;"	m
am_crypto_libwificoin_crypto_a_OBJECTS	Makefile	/^am_crypto_libwificoin_crypto_a_OBJECTS =  \\$/;"	m
am_exhaustive_tests_OBJECTS	secp256k1/Makefile	/^am_exhaustive_tests_OBJECTS = src\/exhaustive_tests-tests_exhaustive.$(OBJEXT)$/;"	m
am_leveldb_libleveldb_a_OBJECTS	Makefile	/^am_leveldb_libleveldb_a_OBJECTS = leveldb\/db\/leveldb_libleveldb_a-builder.$(OBJEXT) \\$/;"	m
am_leveldb_libleveldb_sse42_a_OBJECTS	Makefile	/^am_leveldb_libleveldb_sse42_a_OBJECTS = leveldb\/port\/leveldb_libleveldb_sse42_a-port_posix_sse.$(OBJEXT)$/;"	m
am_leveldb_libmemenv_a_OBJECTS	Makefile	/^am_leveldb_libmemenv_a_OBJECTS = leveldb\/helpers\/memenv\/leveldb_libmemenv_a-memenv.$(OBJEXT)$/;"	m
am_libwificoin_cli_a_OBJECTS	Makefile	/^am_libwificoin_cli_a_OBJECTS = rpc\/libwificoin_cli_a-client.$(OBJEXT) \\$/;"	m
am_libwificoin_common_a_OBJECTS	Makefile	/^am_libwificoin_common_a_OBJECTS = libwificoin_common_a-base58.$(OBJEXT) \\$/;"	m
am_libwificoin_consensus_a_OBJECTS	Makefile	/^am_libwificoin_consensus_a_OBJECTS =  \\$/;"	m
am_libwificoin_server_a_OBJECTS	Makefile	/^am_libwificoin_server_a_OBJECTS = libwificoin_server_a-addrdb.$(OBJEXT) \\$/;"	m
am_libwificoin_util_a_OBJECTS	Makefile	/^am_libwificoin_util_a_OBJECTS =  \\$/;"	m
am_libwificoin_wallet_a_OBJECTS	Makefile	/^am_libwificoin_wallet_a_OBJECTS =  \\$/;"	m
am_libwificoinconsensus_la_OBJECTS	Makefile	/^am_libwificoinconsensus_la_OBJECTS =  \\$/;"	m
am_libwificoinconsensus_la_rpath	Makefile	/^am_libwificoinconsensus_la_rpath = -rpath \\$/;"	m
am_libsecp256k1_jni_la_OBJECTS	secp256k1/Makefile	/^am_libsecp256k1_jni_la_OBJECTS =  \\$/;"	m
am_libsecp256k1_la_OBJECTS	secp256k1/Makefile	/^am_libsecp256k1_la_OBJECTS = src\/libsecp256k1_la-secp256k1.lo$/;"	m
am_libunivalue_la_OBJECTS	univalue/Makefile	/^am_libunivalue_la_OBJECTS = lib\/libunivalue_la-univalue.lo \\$/;"	m
am_test_test_wificoin_OBJECTS	Makefile	/^am_test_test_wificoin_OBJECTS = $(am__objects_34) \\$/;"	m
am_test_test_wificoin_fuzzy_OBJECTS	Makefile	/^am_test_test_wificoin_fuzzy_OBJECTS = test\/test_test_wificoin_fuzzy-test_wificoin_fuzzy.$(OBJEXT)$/;"	m
am_test_unitester_OBJECTS	univalue/Makefile	/^am_test_unitester_OBJECTS = test\/test_unitester-unitester.$(OBJEXT)$/;"	m
am_tests_OBJECTS	secp256k1/Makefile	/^am_tests_OBJECTS = src\/tests-tests.$(OBJEXT)$/;"	m
amount	qt/wificoinamountfield.h	/^    AmountSpinBox *amount;$/;"	m	class:WiFicoinAmountField
amount	qt/walletmodel.h	/^    CAmount amount;$/;"	m	class:SendCoinsRecipient
amount	script/interpreter.h	/^    const CAmount amount;$/;"	m	class:TransactionSignatureChecker
amount	script/sign.h	/^    CAmount amount;$/;"	m	class:TransactionSignatureCreator
amount	validation.h	/^    CAmount amount;$/;"	m	class:CScriptCheck
amount	wallet/wallet.h	/^    CAmount amount;$/;"	m	struct:COutputEntry
amountWidget	qt/transactionview.h	/^    QLineEdit *amountWidget;$/;"	m	class:TransactionView
ancestor_score	txmempool.h	/^struct ancestor_score {};$/;"	s
appIcon	qt/networkstyle.h	/^    QIcon appIcon;$/;"	m	class:NetworkStyle
appMenuBar	qt/wificoingui.h	/^    QMenuBar *appMenuBar;$/;"	m	class:WiFicoinGUI
appName	qt/networkstyle.cpp	/^    const char *appName;$/;"	m	struct:__anon107	file:
appName	qt/networkstyle.h	/^    QString appName;$/;"	m	class:NetworkStyle
appendCommand	rpc/server.cpp	/^bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)$/;"	f	class:CRPCTable
append_codepoint	univalue/lib/univalue_utffilter.h	/^    void append_codepoint(unsigned int codepoint)$/;"	f	class:JSONUTF8StringFilter
arena_	leveldb/db/memtable.h	/^  Arena arena_;$/;"	m	class:leveldb::MemTable
arena_	leveldb/db/skiplist.h	/^  Arena* const arena_;    \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arena_	leveldb/db/skiplist_test.cc	/^  Arena arena_;$/;"	m	class:leveldb::ConcurrentTest	file:
arenas	support/lockedpool.h	/^    std::list<LockedPageArena> arenas;$/;"	m	class:LockedPool
arg	leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon11::PosixEnv::BGItem	file:
arg	leveldb/util/env_posix.cc	/^  void* arg;$/;"	m	struct:leveldb::__anon11::__anon12::StartThreadState	file:
arg1	leveldb/include/leveldb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::Cleanup
arg2	leveldb/include/leveldb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::Cleanup
argNames	rpc/server.h	/^    std::vector<std::string> argNames;$/;"	m	class:CRPCCommand
arg_	leveldb/table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon39::TwoLevelIterator	file:
arith_uint256	arith_uint256.h	/^    arith_uint256() {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^    arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^    arith_uint256(uint64_t b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^    explicit arith_uint256(const std::string& str) : base_uint<256>(str) {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^class arith_uint256 : public base_uint<256> {$/;"	c
arith_uint256V	test/arith_uint256_tests.cpp	/^inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)$/;"	f
as_fn_append	secp256k1/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	secp256k1/configure	/^  as_fn_append ()$/;"	f
as_fn_append	univalue/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	univalue/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	secp256k1/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	secp256k1/configure	/^  as_fn_arith ()$/;"	f
as_fn_arith	univalue/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	univalue/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	secp256k1/config.status	/^as_fn_error ()$/;"	f
as_fn_error	secp256k1/configure	/^as_fn_error ()$/;"	f
as_fn_error	univalue/config.status	/^as_fn_error ()$/;"	f
as_fn_error	univalue/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	secp256k1/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	secp256k1/configure	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	univalue/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	univalue/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	secp256k1/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	secp256k1/configure	/^as_fn_exit ()$/;"	f
as_fn_exit	univalue/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	univalue/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	secp256k1/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_failure	univalue/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	secp256k1/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	secp256k1/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	univalue/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	univalue/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	secp256k1/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_failure	univalue/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	secp256k1/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_ret_success	univalue/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	secp256k1/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	secp256k1/configure	/^as_fn_set_status ()$/;"	f
as_fn_set_status	univalue/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	univalue/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	secp256k1/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_success	univalue/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	secp256k1/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	secp256k1/configure	/^as_fn_unset ()$/;"	f
as_fn_unset	univalue/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	univalue/configure	/^as_fn_unset ()$/;"	f
assertEquals	secp256k1/src/java/org/wificoin/NativeSecp256k1Util.java	/^    public static void assertEquals( String val, String val2, String message ) throws AssertFailException{$/;"	m	class:NativeSecp256k1Util
assertEquals	secp256k1/src/java/org/wificoin/NativeSecp256k1Util.java	/^    public static void assertEquals( boolean val, boolean val2, String message ) throws AssertFailException{$/;"	m	class:NativeSecp256k1Util
assertEquals	secp256k1/src/java/org/wificoin/NativeSecp256k1Util.java	/^    public static void assertEquals( int val, int val2, String message ) throws AssertFailException{$/;"	m	class:NativeSecp256k1Util
assign	prevector.h	/^    void assign(InputIterator first, InputIterator last) {$/;"	f	class:prevector
assign	prevector.h	/^    void assign(size_type n, const T& val) {$/;"	f	class:prevector
assign	test/prevector_tests.cpp	/^    void assign(Size n, const T& value) {$/;"	f	class:prevector_tester
assign_big_endian	secp256k1/src/tests.c	/^static void assign_big_endian(unsigned char *ptr, size_t ptrlen, uint32_t val) {$/;"	f	file:
async_handler	torcontrol.cpp	/^    boost::signals2::signal<void(TorControlConnection &,const TorControlReply &)> async_handler;$/;"	m	class:TorControlConnection	file:
atoi	utilstrencodings.cpp	/^int atoi(const std::string& str)$/;"	f
atoi64	utilstrencodings.cpp	/^int64_t atoi64(const char* psz)$/;"	f
atoi64	utilstrencodings.cpp	/^int64_t atoi64(const std::string& str)$/;"	f
attr	bench/perf.cpp	/^static struct perf_event_attr attr;$/;"	v	typeref:struct:perf_event_attr	file:
authUser	rpc/server.h	/^    std::string authUser;$/;"	m	class:JSONRPCRequest
auth_cb	torcontrol.cpp	/^void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
authchallenge_cb	torcontrol.cpp	/^void TorController::authchallenge_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
authenticatedMerchant	qt/walletmodel.h	/^    QString authenticatedMerchant;$/;"	m	class:SendCoinsRecipient
autoCompleter	qt/rpcconsole.h	/^    QCompleter *autoCompleter;$/;"	m	class:RPCConsole
available	sync.cpp	/^    bool available;$/;"	m	struct:LockData	file:
availableUnits	qt/wificoinunits.cpp	/^QList<WiFicoinUnits::Unit> WiFicoinUnits::availableUnits()$/;"	f	class:WiFicoinUnits
avg	policy/fees.cpp	/^    std::vector<double> avg;$/;"	m	class:TxConfirmStats	file:
ax_pthread_config	Makefile	/^ax_pthread_config = $/;"	m
bOutOfSync	qt/walletframe.h	/^    bool bOutOfSync;$/;"	m	class:WalletFrame
bSpendZeroConfChange	wallet/wallet.cpp	/^bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;$/;"	v
b_conn	torcontrol.cpp	/^    struct bufferevent *b_conn;$/;"	m	class:TorControlConnection	typeref:struct:TorControlConnection::bufferevent	file:
back	prevector.h	/^    T& back() {$/;"	f	class:prevector
back	prevector.h	/^    const T& back() const {$/;"	f	class:prevector
backing_store_	leveldb/db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
backupWallet	qt/walletframe.cpp	/^void WalletFrame::backupWallet()$/;"	f	class:WalletFrame
backupWallet	qt/walletmodel.cpp	/^bool WalletModel::backupWallet(const QString &filename)$/;"	f	class:WalletModel
backupWallet	qt/walletview.cpp	/^void WalletView::backupWallet()$/;"	f	class:WalletView
backupWalletAction	qt/wificoingui.h	/^    QAction *backupWalletAction;$/;"	m	class:WiFicoinGUI
backupwallet	wallet/rpcwallet.cpp	/^UniValue backupwallet(const JSONRPCRequest& request)$/;"	f
banEntry	qt/bantablemodel.h	/^    CBanEntry banEntry;$/;"	m	struct:CCombinedBan
banReason	addrdb.h	/^    uint8_t banReason;$/;"	m	class:CBanEntry
banReasonToString	addrdb.h	/^    std::string banReasonToString()$/;"	f	class:CBanEntry
banSelectedNode	qt/rpcconsole.cpp	/^void RPCConsole::banSelectedNode(int bantime)$/;"	f	class:RPCConsole
banTableContextMenu	qt/rpcconsole.h	/^    QMenu *banTableContextMenu;$/;"	m	class:RPCConsole
banTableModel	qt/clientmodel.h	/^    BanTableModel *banTableModel;$/;"	m	class:ClientModel
banmap_t	addrdb.h	/^typedef std::map<CSubNet, CBanEntry> banmap_t;$/;"	t
base	coins.h	/^    CCoinsView *base;$/;"	m	class:CCoinsViewBacked
base	httprpc.cpp	/^    struct event_base* base;$/;"	m	class:HTTPRPCTimerInterface	typeref:struct:HTTPRPCTimerInterface::event_base	file:
base	indirectmap.h	/^    typedef std::map<const K*, T, DereferencingComparator<const K*> > base;$/;"	t	class:indirectmap
base	leveldb/util/testharness.cc	/^  const char* base;$/;"	m	struct:leveldb::test::__anon15::Test	file:
base	support/allocators/secure.h	/^    typedef std::allocator<T> base;$/;"	t	struct:secure_allocator
base	support/allocators/zeroafterfree.h	/^    typedef std::allocator<T> base;$/;"	t	struct:zero_after_free_allocator
base	support/lockedpool.h	/^        void *base;$/;"	m	class:LockedPool::LockedPageArena
base	support/lockedpool.h	/^    char* base;$/;"	m	class:Arena
base	torcontrol.cpp	/^    struct event_base *base;$/;"	m	class:TorControlConnection	typeref:struct:TorControlConnection::event_base	file:
base	torcontrol.cpp	/^    struct event_base* base;$/;"	m	class:TorController	typeref:struct:TorController::event_base	file:
base58Prefixes	chainparams.h	/^    std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];$/;"	m	class:CChainParams
base58_encode_decode	test/data/base58_encode_decode.json.h	/^static unsigned const char base58_encode_decode[] = {$/;"	m	namespace:json_tests
base58_keys_invalid	test/data/base58_keys_invalid.json.h	/^static unsigned const char base58_keys_invalid[] = {$/;"	m	namespace:json_tests
base58_keys_valid	test/data/base58_keys_valid.json.h	/^static unsigned const char base58_keys_valid[] = {$/;"	m	namespace:json_tests
baseInitialize	qt/wificoin.cpp	/^bool WiFicoinCore::baseInitialize()$/;"	f	class:WiFicoinCore
base_	leveldb/db/version_set.cc	/^  Version* base_;$/;"	m	class:leveldb::VersionSet::Builder	file:
base_blob	uint256.cpp	/^base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)$/;"	f	class:base_blob
base_blob	uint256.h	/^    base_blob()$/;"	f	class:base_blob
base_blob	uint256.h	/^class base_blob$/;"	c
base_lg_	leveldb/table/filter_block.h	/^  size_t base_lg_;      \/\/ Encoding parameter (see kFilterBaseLg in .cc file)$/;"	m	class:leveldb::FilterBlockReader
base_uint	arith_uint256.cpp	/^base_uint<BITS>::base_uint(const std::string& str)$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^    base_uint()$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^    base_uint(const base_uint& b)$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^    base_uint(uint64_t b)$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^class base_uint$/;"	c
batch	dbwrapper.h	/^    leveldb::WriteBatch batch;$/;"	m	class:CDBBatch
batch	leveldb/db/db_impl.cc	/^  WriteBatch* batch;$/;"	m	struct:leveldb::DBImpl::Writer	file:
batch	wallet/walletdb.h	/^    CDB batch;$/;"	m	class:CWalletDB
be16toh	compat/endian.h	/^inline uint16_t be16toh(uint16_t big_endian_16bits)$/;"	f
be32toh	compat/endian.h	/^inline uint32_t be32toh(uint32_t big_endian_32bits)$/;"	f
be64toh	compat/endian.h	/^inline uint64_t be64toh(uint64_t big_endian_64bits)$/;"	f
begin	indirectmap.h	/^    const_iterator begin() const    { return m.begin(); }$/;"	f	class:indirectmap
begin	indirectmap.h	/^    iterator begin()                { return m.begin(); }$/;"	f	class:indirectmap
begin	key.h	/^    const unsigned char* begin() const { return keydata.data(); }$/;"	f	class:CKey
begin	leveldb/db/db_impl.h	/^    const InternalKey* begin;   \/\/ NULL means beginning of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
begin	limitedmap.h	/^    const_iterator begin() const { return map.begin(); }$/;"	f	class:limitedmap
begin	prevector.h	/^    const_iterator begin() const { return const_iterator(item_ptr(0)); }$/;"	f	class:prevector
begin	prevector.h	/^    iterator begin() { return iterator(item_ptr(0)); }$/;"	f	class:prevector
begin	pubkey.h	/^    const unsigned char* begin() const { return vch; }$/;"	f	class:CPubKey
begin	serialize.h	/^    char* begin() { return pbegin; }$/;"	f	class:CFlatData
begin	serialize.h	/^    const char* begin() const { return pbegin; }$/;"	f	class:CFlatData
begin	streams.h	/^    const_iterator begin() const                     { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	streams.h	/^    iterator begin()                                 { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	uint256.h	/^    const unsigned char* begin() const$/;"	f	class:base_blob
begin	uint256.h	/^    unsigned char* begin()$/;"	f	class:base_blob
beginCycles	bench/bench.h	/^        uint64_t beginCycles;$/;"	m	class:benchmark::State
beginTime	bench/bench.h	/^        double beginTime;$/;"	m	class:benchmark::State
bench_AES128_decrypt	crypto/ctaes/bench.c	/^static void bench_AES128_decrypt(void* data) {$/;"	f	file:
bench_AES128_encrypt	crypto/ctaes/bench.c	/^static void bench_AES128_encrypt(void* data) {$/;"	f	file:
bench_AES128_encrypt_setup	crypto/ctaes/bench.c	/^static void bench_AES128_encrypt_setup(void* data) {$/;"	f	file:
bench_AES128_init	crypto/ctaes/bench.c	/^static void bench_AES128_init(void* data) {$/;"	f	file:
bench_AES192_decrypt	crypto/ctaes/bench.c	/^static void bench_AES192_decrypt(void* data) {$/;"	f	file:
bench_AES192_encrypt	crypto/ctaes/bench.c	/^static void bench_AES192_encrypt(void* data) {$/;"	f	file:
bench_AES192_encrypt_setup	crypto/ctaes/bench.c	/^static void bench_AES192_encrypt_setup(void* data) {$/;"	f	file:
bench_AES192_init	crypto/ctaes/bench.c	/^static void bench_AES192_init(void* data) {$/;"	f	file:
bench_AES256_decrypt	crypto/ctaes/bench.c	/^static void bench_AES256_decrypt(void* data) {$/;"	f	file:
bench_AES256_encrypt	crypto/ctaes/bench.c	/^static void bench_AES256_encrypt(void* data) {$/;"	f	file:
bench_AES256_encrypt_setup	crypto/ctaes/bench.c	/^static void bench_AES256_encrypt_setup(void* data) {$/;"	f	file:
bench_AES256_init	crypto/ctaes/bench.c	/^static void bench_AES256_init(void* data) {$/;"	f	file:
bench_bench_wificoin_CPPFLAGS	Makefile	/^bench_bench_wificoin_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)\/bench\/$/;"	m
bench_bench_wificoin_CXXFLAGS	Makefile	/^bench_bench_wificoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
bench_bench_wificoin_DEPENDENCIES	Makefile	/^bench_bench_wificoin_DEPENDENCIES =  \\$/;"	m
bench_bench_wificoin_LDADD	Makefile	/^bench_bench_wificoin_LDADD = $(LIBWIFICOIN_SERVER) \\$/;"	m
bench_bench_wificoin_LDFLAGS	Makefile	/^bench_bench_wificoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
bench_bench_wificoin_LINK	Makefile	/^bench_bench_wificoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
bench_bench_wificoin_OBJECTS	Makefile	/^bench_bench_wificoin_OBJECTS = $(am_bench_bench_wificoin_OBJECTS) \\$/;"	m
bench_bench_wificoin_SOURCES	Makefile	/^bench_bench_wificoin_SOURCES =  \\$/;"	m
bench_context_sign	secp256k1/src/bench_internal.c	/^void bench_context_sign(void* arg) {$/;"	f
bench_context_verify	secp256k1/src/bench_internal.c	/^void bench_context_verify(void* arg) {$/;"	f
bench_ecdh	secp256k1/src/bench_ecdh.c	/^static void bench_ecdh(void* arg) {$/;"	f	file:
bench_ecdh_OBJECTS	secp256k1/Makefile	/^bench_ecdh_OBJECTS = $(am_bench_ecdh_OBJECTS)$/;"	m
bench_ecdh_setup	secp256k1/src/bench_ecdh.c	/^static void bench_ecdh_setup(void* arg) {$/;"	f	file:
bench_ecdh_t	secp256k1/src/bench_ecdh.c	/^} bench_ecdh_t;$/;"	t	typeref:struct:__anon59	file:
bench_ecmult_wnaf	secp256k1/src/bench_internal.c	/^void bench_ecmult_wnaf(void* arg) {$/;"	f
bench_field_inverse	secp256k1/src/bench_internal.c	/^void bench_field_inverse(void* arg) {$/;"	f
bench_field_inverse_var	secp256k1/src/bench_internal.c	/^void bench_field_inverse_var(void* arg) {$/;"	f
bench_field_mul	secp256k1/src/bench_internal.c	/^void bench_field_mul(void* arg) {$/;"	f
bench_field_normalize	secp256k1/src/bench_internal.c	/^void bench_field_normalize(void* arg) {$/;"	f
bench_field_normalize_weak	secp256k1/src/bench_internal.c	/^void bench_field_normalize_weak(void* arg) {$/;"	f
bench_field_sqr	secp256k1/src/bench_internal.c	/^void bench_field_sqr(void* arg) {$/;"	f
bench_field_sqrt	secp256k1/src/bench_internal.c	/^void bench_field_sqrt(void* arg) {$/;"	f
bench_group_add_affine	secp256k1/src/bench_internal.c	/^void bench_group_add_affine(void* arg) {$/;"	f
bench_group_add_affine_var	secp256k1/src/bench_internal.c	/^void bench_group_add_affine_var(void* arg) {$/;"	f
bench_group_add_var	secp256k1/src/bench_internal.c	/^void bench_group_add_var(void* arg) {$/;"	f
bench_group_double_var	secp256k1/src/bench_internal.c	/^void bench_group_double_var(void* arg) {$/;"	f
bench_group_jacobi_var	secp256k1/src/bench_internal.c	/^void bench_group_jacobi_var(void* arg) {$/;"	f
bench_hmac_sha256	secp256k1/src/bench_internal.c	/^void bench_hmac_sha256(void* arg) {$/;"	f
bench_internal_OBJECTS	secp256k1/Makefile	/^bench_internal_OBJECTS = $(am_bench_internal_OBJECTS)$/;"	m
bench_inv_t	secp256k1/src/bench_internal.c	/^} bench_inv_t;$/;"	t	typeref:struct:__anon66	file:
bench_num_jacobi	secp256k1/src/bench_internal.c	/^void bench_num_jacobi(void* arg) {$/;"	f
bench_recover	secp256k1/src/bench_recover.c	/^void bench_recover(void* arg) {$/;"	f
bench_recover_OBJECTS	secp256k1/Makefile	/^bench_recover_OBJECTS = $(am_bench_recover_OBJECTS)$/;"	m
bench_recover_setup	secp256k1/src/bench_recover.c	/^void bench_recover_setup(void* arg) {$/;"	f
bench_recover_t	secp256k1/src/bench_recover.c	/^} bench_recover_t;$/;"	t	typeref:struct:__anon63	file:
bench_rfc6979_hmac_sha256	secp256k1/src/bench_internal.c	/^void bench_rfc6979_hmac_sha256(void* arg) {$/;"	f
bench_scalar_add	secp256k1/src/bench_internal.c	/^void bench_scalar_add(void* arg) {$/;"	f
bench_scalar_inverse	secp256k1/src/bench_internal.c	/^void bench_scalar_inverse(void* arg) {$/;"	f
bench_scalar_inverse_var	secp256k1/src/bench_internal.c	/^void bench_scalar_inverse_var(void* arg) {$/;"	f
bench_scalar_mul	secp256k1/src/bench_internal.c	/^void bench_scalar_mul(void* arg) {$/;"	f
bench_scalar_negate	secp256k1/src/bench_internal.c	/^void bench_scalar_negate(void* arg) {$/;"	f
bench_scalar_split	secp256k1/src/bench_internal.c	/^void bench_scalar_split(void* arg) {$/;"	f
bench_scalar_sqr	secp256k1/src/bench_internal.c	/^void bench_scalar_sqr(void* arg) {$/;"	f
bench_setup	secp256k1/src/bench_internal.c	/^void bench_setup(void* arg) {$/;"	f
bench_sha256	secp256k1/src/bench_internal.c	/^void bench_sha256(void* arg) {$/;"	f
bench_sign	secp256k1/src/bench_sign.c	/^static void bench_sign(void* arg) {$/;"	f	file:
bench_sign_OBJECTS	secp256k1/Makefile	/^bench_sign_OBJECTS = $(am_bench_sign_OBJECTS)$/;"	m
bench_sign_setup	secp256k1/src/bench_sign.c	/^static void bench_sign_setup(void* arg) {$/;"	f	file:
bench_sign_t	secp256k1/src/bench_sign.c	/^} bench_sign_t;$/;"	t	typeref:struct:__anon65	file:
bench_verify_OBJECTS	secp256k1/Makefile	/^bench_verify_OBJECTS = $(am_bench_verify_OBJECTS)$/;"	m
bench_wnaf_const	secp256k1/src/bench_internal.c	/^void bench_wnaf_const(void* arg) {$/;"	f
benchmark	bench/bench.h	/^namespace benchmark {$/;"	n
benchmark_verify	secp256k1/src/bench_verify.c	/^static void benchmark_verify(void* arg) {$/;"	f	file:
benchmark_verify_openssl	secp256k1/src/bench_verify.c	/^static void benchmark_verify_openssl(void* arg) {$/;"	f	file:
benchmark_verify_t	secp256k1/src/bench_verify.c	/^} benchmark_verify_t;$/;"	t	typeref:struct:__anon55	file:
benchmarks	bench/bench.cpp	/^benchmark::BenchRunner::BenchmarkMap &benchmark::BenchRunner::benchmarks() {$/;"	f	class:benchmark::BenchRunner
bestHeaderDate	qt/modaloverlay.h	/^    QDateTime bestHeaderDate;$/;"	m	class:ModalOverlay
bestHeaderHeight	qt/modaloverlay.h	/^    int bestHeaderHeight; \/\/best known height (based on the headers)$/;"	m	class:ModalOverlay
bg_compaction_scheduled_	leveldb/db/db_impl.h	/^  bool bg_compaction_scheduled_;$/;"	m	class:leveldb::DBImpl
bg_cv_	leveldb/db/db_impl.h	/^  port::CondVar bg_cv_;          \/\/ Signalled when background work finishes$/;"	m	class:leveldb::DBImpl
bg_error_	leveldb/db/db_impl.h	/^  Status bg_error_;$/;"	m	class:leveldb::DBImpl
bgsignal_	leveldb/util/env_posix.cc	/^  pthread_cond_t bgsignal_;$/;"	m	class:leveldb::__anon11::PosixEnv	file:
bgthread_	leveldb/util/env_posix.cc	/^  pthread_t bgthread_;$/;"	m	class:leveldb::__anon11::PosixEnv	file:
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \\$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	secp256k1/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	univalue/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit	consensus/params.h	/^    int bit;$/;"	m	struct:Consensus::BIP9Deployment
bit	validation.cpp	/^    int bit;$/;"	m	class:WarningBitsConditionChecker	file:
bit_is_set	cuckoocache.h	/^    inline bool bit_is_set(uint32_t s) const$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_packed_atomic_flags	cuckoocache.h	/^    bit_packed_atomic_flags(uint32_t size)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_packed_atomic_flags	cuckoocache.h	/^class bit_packed_atomic_flags$/;"	c	namespace:CuckooCache
bit_set	cuckoocache.h	/^    inline void bit_set(uint32_t s)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bit_unset	cuckoocache.h	/^    inline void bit_unset(uint32_t s)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
bitbuf	random.h	/^    uint64_t bitbuf;$/;"	m	class:FastRandomContext
bitbuf_size	random.h	/^    int bitbuf_size;$/;"	m	class:FastRandomContext
wificoin_cli_CPPFLAGS	Makefile	/^wificoin_cli_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES) $(EVENT_CFLAGS)$/;"	m
wificoin_cli_CXXFLAGS	Makefile	/^wificoin_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
wificoin_cli_DEPENDENCIES	Makefile	/^wificoin_cli_DEPENDENCIES = $(LIBWIFICOIN_CLI) $(am__DEPENDENCIES_4) \\$/;"	m
wificoin_cli_LDADD	Makefile	/^wificoin_cli_LDADD = $(LIBWIFICOIN_CLI) $(LIBUNIVALUE) \\$/;"	m
wificoin_cli_LDFLAGS	Makefile	/^wificoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
wificoin_cli_LINK	Makefile	/^wificoin_cli_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
wificoin_cli_OBJECTS	Makefile	/^wificoin_cli_OBJECTS = $(am_wificoin_cli_OBJECTS)$/;"	m
wificoin_cli_SOURCES	Makefile	/^wificoin_cli_SOURCES = wificoin-cli.cpp $(am__append_6)$/;"	m
wificoin_strings	qt/wificoinstrings.cpp	/^static const char UNUSED *wificoin_strings[] = {$/;"	v	file:
wificoin_tx_CPPFLAGS	Makefile	/^wificoin_tx_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES)$/;"	m
wificoin_tx_CXXFLAGS	Makefile	/^wificoin_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
wificoin_tx_DEPENDENCIES	Makefile	/^wificoin_tx_DEPENDENCIES = $(am__DEPENDENCIES_4) $(LIBWIFICOIN_COMMON) \\$/;"	m
wificoin_tx_LDADD	Makefile	/^wificoin_tx_LDADD = $(LIBUNIVALUE) $(LIBWIFICOIN_COMMON) \\$/;"	m
wificoin_tx_LDFLAGS	Makefile	/^wificoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
wificoin_tx_LINK	Makefile	/^wificoin_tx_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
wificoin_tx_OBJECTS	Makefile	/^wificoin_tx_OBJECTS = $(am_wificoin_tx_OBJECTS)$/;"	m
wificoin_tx_SOURCES	Makefile	/^wificoin_tx_SOURCES = wificoin-tx.cpp $(am__append_7)$/;"	m
wificoinconsensus_ERR_AMOUNT_REQUIRED	script/wificoinconsensus.h	/^    wificoinconsensus_ERR_AMOUNT_REQUIRED,$/;"	e	enum:wificoinconsensus_error_t
wificoinconsensus_ERR_INVALID_FLAGS	script/wificoinconsensus.h	/^    wificoinconsensus_ERR_INVALID_FLAGS,$/;"	e	enum:wificoinconsensus_error_t
wificoinconsensus_ERR_OK	script/wificoinconsensus.h	/^    wificoinconsensus_ERR_OK = 0,$/;"	e	enum:wificoinconsensus_error_t
wificoinconsensus_ERR_TX_DESERIALIZE	script/wificoinconsensus.h	/^    wificoinconsensus_ERR_TX_DESERIALIZE,$/;"	e	enum:wificoinconsensus_error_t
wificoinconsensus_ERR_TX_INDEX	script/wificoinconsensus.h	/^    wificoinconsensus_ERR_TX_INDEX,$/;"	e	enum:wificoinconsensus_error_t
wificoinconsensus_ERR_TX_SIZE_MISMATCH	script/wificoinconsensus.h	/^    wificoinconsensus_ERR_TX_SIZE_MISMATCH,$/;"	e	enum:wificoinconsensus_error_t
wificoinconsensus_SCRIPT_FLAGS_VERIFY_ALL	script/wificoinconsensus.h	/^    wificoinconsensus_SCRIPT_FLAGS_VERIFY_ALL                 = wificoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH | wificoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG |$/;"	e	enum:__anon97
wificoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY	script/wificoinconsensus.h	/^    wificoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), \/\/ enable CHECKLOCKTIMEVERIFY (BIP65)$/;"	e	enum:__anon97
wificoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY	script/wificoinconsensus.h	/^    wificoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), \/\/ enable CHECKSEQUENCEVERIFY (BIP112)$/;"	e	enum:__anon97
wificoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG	script/wificoinconsensus.h	/^    wificoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), \/\/ enforce strict DER (BIP66) compliance$/;"	e	enum:__anon97
wificoinconsensus_SCRIPT_FLAGS_VERIFY_NONE	script/wificoinconsensus.h	/^    wificoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                = 0,$/;"	e	enum:__anon97
wificoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY	script/wificoinconsensus.h	/^    wificoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), \/\/ enforce NULLDUMMY (BIP147)$/;"	e	enum:__anon97
wificoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH	script/wificoinconsensus.h	/^    wificoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), \/\/ evaluate P2SH (BIP16) subscripts$/;"	e	enum:__anon97
wificoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS	script/wificoinconsensus.h	/^    wificoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), \/\/ enable WITNESS (BIP141)$/;"	e	enum:__anon97
wificoinconsensus_error	script/wificoinconsensus.h	/^} wificoinconsensus_error;$/;"	t	typeref:enum:wificoinconsensus_error_t
wificoinconsensus_error_t	script/wificoinconsensus.h	/^typedef enum wificoinconsensus_error_t$/;"	g
wificoinconsensus_verify_script	script/wificoinconsensus.cpp	/^int wificoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,$/;"	f
wificoinconsensus_verify_script_with_amount	script/wificoinconsensus.cpp	/^int wificoinconsensus_verify_script_with_amount(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, int64_t amount,$/;"	f
wificoinconsensus_version	script/wificoinconsensus.cpp	/^unsigned int wificoinconsensus_version()$/;"	f
wificoind_CPPFLAGS	Makefile	/^wificoind_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES)$/;"	m
wificoind_CXXFLAGS	Makefile	/^wificoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
wificoind_DEPENDENCIES	Makefile	/^wificoind_DEPENDENCIES = $(LIBWIFICOIN_SERVER) $(LIBWIFICOIN_COMMON) \\$/;"	m
wificoind_LDADD	Makefile	/^wificoind_LDADD = $(LIBWIFICOIN_SERVER) $(LIBWIFICOIN_COMMON) \\$/;"	m
wificoind_LDFLAGS	Makefile	/^wificoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
wificoind_LINK	Makefile	/^wificoind_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
wificoind_OBJECTS	Makefile	/^wificoind_OBJECTS = $(am_wificoind_OBJECTS)$/;"	m
wificoind_SOURCES	Makefile	/^wificoind_SOURCES = wificoind.cpp $(am__append_5)$/;"	m
bits	arith_uint256.cpp	/^unsigned int base_uint<BITS>::bits() const$/;"	f	class:base_uint
bitsPerSample	qt/notificator.cpp	/^    int bitsPerSample;$/;"	m	class:FreedesktopImage	file:
bits_per_key_	leveldb/util/bloom.cc	/^  size_t bits_per_key_;$/;"	m	class:leveldb::__anon10::BloomFilterPolicy	file:
blind	secp256k1/src/ecmult_gen.h	/^    secp256k1_scalar blind;$/;"	m	struct:__anon54
block	miner.h	/^    CBlock block;$/;"	m	struct:CBlockTemplate
block413567	bench/data/block413567.raw.h	/^static unsigned const char block413567[] = {$/;"	v
blockHeight	policy/fees.h	/^        unsigned int blockHeight;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
blockMinFeeRate	miner.h	/^        CFeeRate blockMinFeeRate;$/;"	m	struct:BlockAssembler::Options
blockMinFeeRate	miner.h	/^    CFeeRate blockMinFeeRate;$/;"	m	class:BlockAssembler
blockMinFeeRate	test/miner_tests.cpp	/^static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);$/;"	v	file:
blockProcessTime	qt/modaloverlay.h	/^    QVector<QPair<qint64, double> > blockProcessTime;$/;"	m	class:ModalOverlay
blockSinceLastRollingFeeBump	txmempool.h	/^    mutable bool blockSinceLastRollingFeeBump;$/;"	m	class:CTxMemPool
blockToJSON	rpc/blockchain.cpp	/^UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails)$/;"	f
block_	leveldb/table/table_test.cc	/^  Block* block_;$/;"	m	class:leveldb::BlockConstructor	file:
block_bench	bench/checkblock.cpp	/^namespace block_bench {$/;"	n	file:
block_cache	leveldb/include/leveldb/options.h	/^  Cache* block_cache;$/;"	m	struct:leveldb::Options
block_function_	leveldb/table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon39::TwoLevelIterator	file:
block_offset_	leveldb/db/log_writer.h	/^  int block_offset_;       \/\/ Current offset in block$/;"	m	class:leveldb::log::Writer
block_restart_interval	leveldb/include/leveldb/options.h	/^  int block_restart_interval;$/;"	m	struct:leveldb::Options
block_size	leveldb/include/leveldb/options.h	/^  size_t block_size;$/;"	m	struct:leveldb::Options
blockhash	blockencodings.h	/^    uint256 blockhash;$/;"	m	class:BlockTransactions
blockhash	blockencodings.h	/^    uint256 blockhash;$/;"	m	class:BlockTransactionsRequest
blockheaderToJSON	rpc/blockchain.cpp	/^UniValue blockheaderToJSON(const CBlockIndex* blockindex)$/;"	f
blockinfo	test/miner_tests.cpp	/^} blockinfo[] = {$/;"	v	typeref:struct:__anon81	file:
blockingGUIThreadConnection	qt/guiutil.cpp	/^Qt::ConnectionType blockingGUIThreadConnection()$/;"	f	namespace:GUIUtil
blocksConnected	validation.cpp	/^    std::vector<PerBlockConnectTrace> blocksConnected;$/;"	m	class:ConnectTrace	file:
blocks_	leveldb/helpers/memenv/memenv.cc	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::__anon16::FileState	file:
blocks_	leveldb/util/arena.h	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::Arena
bloomflags	bloom.h	/^enum bloomflags$/;"	g
bm	leveldb/db/db_bench.cc	/^    Benchmark* bm;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
body	wificoin-cli.cpp	/^    std::string body;$/;"	m	struct:HTTPReply	file:
boolval	test/serialize_tests.cpp	/^    bool boolval;$/;"	m	class:CSerializeMethodsTestSingle	file:
boost	init.h	/^namespace boost$/;"	n
boost	net.h	/^namespace boost {$/;"	n
boostPathToQString	qt/guiutil.cpp	/^QString boostPathToQString(const fs::path &path)$/;"	f	namespace:GUIUtil
boundSockets	httpserver.cpp	/^std::vector<evhttp_bound_socket *> boundSockets;$/;"	v
breakAction	qt/splashscreen.h	/^    std::function<void(void)> breakAction;$/;"	m	class:SplashScreen
browseHistory	qt/rpcconsole.cpp	/^void RPCConsole::browseHistory(int offset)$/;"	f	class:RPCConsole
bswapTests	qt/test/compattests.cpp	/^void CompatTests::bswapTests()$/;"	f	class:CompatTests
bswap_16	compat/byteswap.h	/^inline uint16_t bswap_16(uint16_t x)$/;"	f
bswap_16	compat/byteswap.h	26;"	d
bswap_32	compat/byteswap.h	/^inline uint32_t bswap_32(uint32_t x)$/;"	f
bswap_32	compat/byteswap.h	27;"	d
bswap_64	compat/byteswap.h	/^inline uint64_t bswap_64(uint64_t x)$/;"	f
bswap_64	compat/byteswap.h	28;"	d
bucketIndex	policy/fees.h	/^        unsigned int bucketIndex;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
bucketMap	policy/fees.cpp	/^    const std::map<double, unsigned int>& bucketMap; \/\/ Map of bucket upper-bound to index into all vectors by bucket$/;"	m	class:TxConfirmStats	file:
bucketMap	policy/fees.h	/^    std::map<double, unsigned int> bucketMap; \/\/ Map of bucket upper-bound to index into all vectors by bucket$/;"	m	class:CBlockPolicyEstimator
buckets	policy/fees.cpp	/^    const std::vector<double>& buckets;              \/\/ The upper-bound of the range for the bucket (inclusive)$/;"	m	class:TxConfirmStats	file:
buckets	policy/fees.h	/^    std::vector<double> buckets;              \/\/ The upper-bound of the range for the bucket (inclusive)$/;"	m	class:CBlockPolicyEstimator
buckets_	leveldb/util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buf	crypto/ripemd160.h	/^    unsigned char buf[64];$/;"	m	class:CRIPEMD160
buf	crypto/sha1.h	/^    unsigned char buf[64];$/;"	m	class:CSHA1
buf	crypto/sha256.h	/^    unsigned char buf[64];$/;"	m	class:CSHA256
buf	crypto/sha512.h	/^    unsigned char buf[128];$/;"	m	class:CSHA512
buf	secp256k1/src/hash.h	/^    uint32_t buf[16]; \/* In big endian *\/$/;"	m	struct:__anon60
buffer	leveldb/db/version_set.h	/^    char buffer[100];$/;"	m	struct:leveldb::VersionSet::LevelSummaryStorage
buffer_	leveldb/db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	leveldb/table/block_builder.h	/^  std::string           buffer_;      \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	secp256k1/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	univalue/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_alias	secp256k1/Makefile	/^build_alias = $/;"	m
build_alias	univalue/Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	secp256k1/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	univalue/Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_os	secp256k1/Makefile	/^build_os = linux-gnu$/;"	m
build_os	univalue/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	secp256k1/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	univalue/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
build_vendor	secp256k1/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	univalue/Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
builddir	secp256k1/Makefile	/^builddir = .$/;"	m
builddir	univalue/Makefile	/^builddir = .$/;"	m
builder	leveldb/db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
bumpFee	qt/transactionview.cpp	/^void TransactionView::bumpFee()$/;"	f	class:TransactionView
bumpFee	qt/walletmodel.cpp	/^bool WalletModel::bumpFee(uint256 hash)$/;"	f	class:WalletModel
bumpFeeAction	qt/transactionview.h	/^    QAction *bumpFeeAction;$/;"	m	class:TransactionView
bumpedTxid	wallet/feebumper.h	/^    uint256 bumpedTxid;$/;"	m	class:CFeeBumper
bumpfee	wallet/rpcwallet.cpp	/^UniValue bumpfee(const JSONRPCRequest& request)$/;"	f
buttonBoxClicked	qt/coincontroldialog.cpp	/^void CoinControlDialog::buttonBoxClicked(QAbstractButton* button)$/;"	f	class:CoinControlDialog
buttonSelectAllClicked	qt/coincontroldialog.cpp	/^void CoinControlDialog::buttonSelectAllClicked()$/;"	f	class:CoinControlDialog
bytebuf	random.h	/^    unsigned char bytebuf[64];$/;"	m	class:FastRandomContext
bytebuf_size	random.h	/^    int bytebuf_size;$/;"	m	class:FastRandomContext
bytes	crypto/ripemd160.h	/^    uint64_t bytes;$/;"	m	class:CRIPEMD160
bytes	crypto/sha1.h	/^    uint64_t bytes;$/;"	m	class:CSHA1
bytes	crypto/sha256.h	/^    uint64_t bytes;$/;"	m	class:CSHA256
bytes	crypto/sha512.h	/^    uint64_t bytes;$/;"	m	class:CSHA512
bytes	secp256k1/src/hash.h	/^    size_t bytes;$/;"	m	struct:__anon60
bytes_	leveldb/db/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::__anon18::Stats	file:
bytes_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_counter_	leveldb/db/db_iter.cc	/^  ssize_t bytes_counter_;$/;"	m	class:leveldb::__anon20::DBIter	file:
bytes_read	leveldb/db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_written	leveldb/db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytewise	leveldb/util/comparator.cc	/^static const Comparator* bytewise;$/;"	m	namespace:leveldb	file:
caCert1_BASE64	qt/test/paymentrequestdata.h	/^const char* caCert1_BASE64 =$/;"	v
caCert2_BASE64	qt/test/paymentrequestdata.h	/^const char* caCert2_BASE64 =$/;"	v
cachable	leveldb/table/format.h	/^  bool cachable;        \/\/ True iff data can be cached$/;"	m	struct:leveldb::BlockContents
cache	cuckoocache.h	/^    cache() : table(), size(), collection_flags(0), epoch_flags(),$/;"	f	class:CuckooCache::cache
cache	cuckoocache.h	/^class cache$/;"	c	namespace:CuckooCache
cache	test/versionbits_tests.cpp	/^    mutable ThresholdConditionCache cache;$/;"	m	class:TestConditionChecker	file:
cacheCoins	coins.h	/^    mutable CCoinsMap cacheCoins;$/;"	m	class:CCoinsViewCache
cacheMap	txmempool.h	/^    typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;$/;"	t	class:CTxMemPool
cacheStore	validation.h	/^    bool cacheStore;$/;"	m	class:CScriptCheck
cache_	leveldb/db/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark	file:
cache_	leveldb/db/table_cache.h	/^  Cache* cache_;$/;"	m	class:leveldb::TableCache
cache_	leveldb/util/cache_test.cc	/^  Cache* cache_;$/;"	m	class:leveldb::CacheTest	file:
cache_id	leveldb/table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep	file:
cachedAddressTable	qt/addresstablemodel.cpp	/^    QList<AddressTableEntry> cachedAddressTable;$/;"	m	class:AddressTablePriv	file:
cachedBalance	qt/walletmodel.h	/^    CAmount cachedBalance;$/;"	m	class:WalletModel
cachedBanlist	qt/bantablemodel.cpp	/^    QList<CCombinedBan> cachedBanlist;$/;"	m	class:BanTablePriv	file:
cachedBestHeaderHeight	qt/clientmodel.h	/^    mutable std::atomic<int> cachedBestHeaderHeight;$/;"	m	class:ClientModel
cachedBestHeaderTime	qt/clientmodel.h	/^    mutable std::atomic<int64_t> cachedBestHeaderTime;$/;"	m	class:ClientModel
cachedCoinsUsage	coins.h	/^    mutable size_t cachedCoinsUsage;$/;"	m	class:CCoinsViewCache
cachedEncryptionStatus	qt/walletmodel.h	/^    EncryptionStatus cachedEncryptionStatus;$/;"	m	class:WalletModel
cachedImmatureBalance	qt/walletmodel.h	/^    CAmount cachedImmatureBalance;$/;"	m	class:WalletModel
cachedInnerUsage	txmempool.h	/^    uint64_t cachedInnerUsage = 0;$/;"	m	struct:DisconnectedBlockTransactions
cachedInnerUsage	txmempool.h	/^    uint64_t cachedInnerUsage; \/\/!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)$/;"	m	class:CTxMemPool
cachedMinimumSizeHint	qt/wificoinamountfield.cpp	/^    mutable QSize cachedMinimumSizeHint;$/;"	m	class:AmountSpinBox	file:
cachedNodeStats	qt/peertablemodel.cpp	/^    QList<CNodeCombinedStats> cachedNodeStats;$/;"	m	class:PeerTablePriv	file:
cachedNodeids	qt/rpcconsole.h	/^    QList<NodeId> cachedNodeids;$/;"	m	class:RPCConsole
cachedNumBlocks	qt/walletmodel.h	/^    int cachedNumBlocks;$/;"	m	class:WalletModel
cachedUnconfirmedBalance	qt/walletmodel.h	/^    CAmount cachedUnconfirmedBalance;$/;"	m	class:WalletModel
cachedWallet	qt/transactiontablemodel.cpp	/^    QList<TransactionRecord> cachedWallet;$/;"	m	class:TransactionTablePriv	file:
cachedWatchImmatureBalance	qt/walletmodel.h	/^    CAmount cachedWatchImmatureBalance;$/;"	m	class:WalletModel
cachedWatchOnlyBalance	qt/walletmodel.h	/^    CAmount cachedWatchOnlyBalance;$/;"	m	class:WalletModel
cachedWatchUnconfBalance	qt/walletmodel.h	/^    CAmount cachedWatchUnconfBalance;$/;"	m	class:WalletModel
caches	versionbits.h	/^    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];$/;"	m	struct:VersionBitsCache
capacity	prevector.h	/^            size_type capacity;$/;"	m	struct:prevector::direct_or_indirect::__anon75
capacity	prevector.h	/^    size_t capacity() const {$/;"	f	class:prevector
capacity	test/prevector_tests.cpp	/^    Size capacity() {$/;"	f	class:prevector_tester
capacity_	leveldb/util/cache.cc	/^  size_t capacity_;$/;"	m	class:leveldb::__anon13::LRUCache	file:
category	rpc/server.h	/^    std::string category;$/;"	m	class:CRPCCommand
category	util.cpp	/^    std::string category;$/;"	m	struct:CLogCategoryDesc	file:
category	util.h	/^    std::string category;$/;"	m	struct:CLogCategoryActive
categoryClass	qt/rpcconsole.cpp	/^static QString categoryClass(int category)$/;"	f	file:
cbegin	indirectmap.h	/^    const_iterator cbegin() const   { return m.cbegin(); }$/;"	f	class:indirectmap
cend	indirectmap.h	/^    const_iterator cend() const     { return m.cend(); }$/;"	f	class:indirectmap
certStore	qt/paymentserver.cpp	/^    std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;$/;"	m	namespace:__anon109	file:
chRejectCode	consensus/validation.h	/^    unsigned int chRejectCode;$/;"	m	class:CValidationState
chRejectCode	net_processing.cpp	/^    unsigned char chRejectCode;$/;"	m	struct:__anon50::CBlockReject	file:
chainActive	validation.cpp	/^CChain chainActive;$/;"	v
chainTxData	chainparams.h	/^    ChainTxData chainTxData;$/;"	m	class:CChainParams
chaincode	key.h	/^    ChainCode chaincode;$/;"	m	struct:CExtKey
chaincode	pubkey.h	/^    ChainCode chaincode;$/;"	m	struct:CExtPubKey
chainparams	miner.h	/^    const CChainParams& chainparams;$/;"	m	class:BlockAssembler
changeEvent	qt/wificoingui.cpp	/^void WiFicoinGUI::changeEvent(QEvent *e)$/;"	f	class:WiFicoinGUI
changePassphrase	qt/walletframe.cpp	/^void WalletFrame::changePassphrase()$/;"	f	class:WalletFrame
changePassphrase	qt/walletmodel.cpp	/^bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureString &newPass)$/;"	f	class:WalletModel
changePassphrase	qt/walletview.cpp	/^void WalletView::changePassphrase()$/;"	f	class:WalletView
changePassphraseAction	qt/wificoingui.h	/^    QAction *changePassphraseAction;$/;"	m	class:WiFicoinGUI
change_capacity	prevector.h	/^    void change_capacity(size_type new_capacity) {$/;"	f	class:prevector
changedAmount	qt/transactionview.cpp	/^void TransactionView::changedAmount()$/;"	f	class:TransactionView
changedPrefix	qt/transactionview.cpp	/^void TransactionView::changedPrefix()$/;"	f	class:TransactionView
channels	qt/notificator.cpp	/^    int channels;$/;"	m	class:FreedesktopImage	file:
charge	leveldb/util/cache.cc	/^  size_t charge;      \/\/ TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
charstrval	test/serialize_tests.cpp	/^    const char* charstrval;$/;"	m	class:CSerializeMethodsTestSingle	file:
check	qt/intro.cpp	/^void FreespaceChecker::check()$/;"	f	class:FreespaceChecker
check	txmempool.cpp	/^void CTxMemPool::check(const CCoinsViewCache *pcoins) const$/;"	f	class:CTxMemPool
checkAndMigrate	qt/optionsmodel.cpp	/^void OptionsModel::checkAndMigrate()$/;"	f	class:OptionsModel
checkBalanceChanged	qt/walletmodel.cpp	/^void WalletModel::checkBalanceChanged()$/;"	f	class:WalletModel
checkObject	univalue/lib/univalue.cpp	/^bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)$/;"	f	class:UniValue
checkPath	qt/intro.cpp	/^void Intro::checkPath(const QString &dataDir)$/;"	f	class:Intro
checkPoint	qt/guiutil.cpp	/^bool checkPoint(const QPoint &p, const QWidget *w)$/;"	f	namespace:GUIUtil
checkValidator	qt/qvalidatedlineedit.h	/^    const QValidator *checkValidator;$/;"	m	class:QValidatedLineEdit
checkValidity	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::checkValidity()$/;"	f	class:QValidatedLineEdit
check_fe_equal	secp256k1/src/tests.c	/^int check_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
check_fe_inverse	secp256k1/src/tests.c	/^int check_fe_inverse(const secp256k1_fe *a, const secp256k1_fe *ai) {$/;"	f
check_id	test/checkqueue_tests.cpp	/^    size_t check_id;$/;"	m	struct:UniqueCheck	file:
checked_malloc	secp256k1/src/util.h	/^static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_t size) {$/;"	f
checker	script/sign.h	/^    const TransactionSignatureChecker checker;$/;"	m	class:TransactionSignatureCreator
checker	test/versionbits_tests.cpp	/^    TestConditionChecker checker[CHECKERS];$/;"	m	class:VersionBitsTester	file:
checkpointData	chainparams.h	/^    CCheckpointData checkpointData;$/;"	m	class:CChainParams
checksum_	leveldb/db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
children	txmempool.h	/^        setEntries children;$/;"	m	struct:CTxMemPool::TxLinks
children_	leveldb/table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon36::MergingIterator	file:
chooseDate	qt/transactionview.cpp	/^void TransactionView::chooseDate(int idx)$/;"	f	class:TransactionView
chooseType	qt/transactionview.cpp	/^void TransactionView::chooseType(int idx)$/;"	f	class:TransactionView
chooseWatchonly	qt/transactionview.cpp	/^void TransactionView::chooseWatchonly(int idx)$/;"	f	class:TransactionView
chunks_free	support/lockedpool.h	/^        size_t chunks_free;$/;"	m	struct:Arena::Stats
chunks_free	support/lockedpool.h	/^        size_t chunks_free;$/;"	m	struct:LockedPool::Stats
chunks_free	support/lockedpool.h	/^    std::map<char*, size_t> chunks_free;$/;"	m	class:Arena
chunks_used	support/lockedpool.h	/^        size_t chunks_used;$/;"	m	struct:Arena::Stats
chunks_used	support/lockedpool.h	/^        size_t chunks_used;$/;"	m	struct:LockedPool::Stats
chunks_used	support/lockedpool.h	/^    std::map<char*, size_t> chunks_used;$/;"	m	class:Arena
cipher	crypto/ctaes/test.c	/^    const char* cipher;$/;"	m	struct:__anon82	file:
class_type	memusage.h	/^    void* class_type;$/;"	m	struct:memusage::stl_shared_counter
cleanSubVer	net.h	/^    std::string cleanSubVer;$/;"	m	class:CNodeStats
cleanSubVer	net.h	/^    std::string strSubVer, cleanSubVer;$/;"	m	class:CNode
cleanup	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static synchronized void cleanup() {$/;"	m	class:NativeSecp256k1
cleanup_	leveldb/include/leveldb/iterator.h	/^  Cleanup cleanup_;$/;"	m	class:leveldb::Iterator
clear	bloom.cpp	/^void CBloomFilter::clear()$/;"	f	class:CBloomFilter
clear	indirectmap.h	/^    void clear()                    { m.clear(); }$/;"	f	class:indirectmap
clear	leveldb/include/leveldb/slice.h	/^  void clear() { data_ = ""; size_ = 0; }$/;"	f	class:leveldb::Slice
clear	prevector.h	/^    void clear() {$/;"	f	class:prevector
clear	qt/wificoinamountfield.cpp	/^void WiFicoinAmountField::clear()$/;"	f	class:WiFicoinAmountField
clear	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::clear()$/;"	f	class:QValidatedLineEdit
clear	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::clear()$/;"	f	class:ReceiveCoinsDialog
clear	qt/rpcconsole.cpp	/^void RPCConsole::clear(bool clearHistory)$/;"	f	class:RPCConsole
clear	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::clear()$/;"	f	class:SendCoinsDialog
clear	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::clear()$/;"	f	class:SendCoinsEntry
clear	qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::clear()$/;"	f	class:TrafficGraphWidget
clear	script/script.h	/^    void clear()$/;"	f	class:CScript
clear	streams.h	/^    void clear()                                     { vch.clear(); nReadPos = 0; }$/;"	f	class:CDataStream
clear	test/prevector_tests.cpp	/^    void clear() {$/;"	f	class:prevector_tester
clear	txmempool.cpp	/^void CTxMemPool::clear()$/;"	f	class:CTxMemPool
clear	txmempool.h	/^    void clear()$/;"	f	struct:DisconnectedBlockTransactions
clear	univalue/lib/univalue.cpp	/^void UniValue::clear()$/;"	f	class:UniValue
clearExpect	univalue/lib/univalue_read.cpp	247;"	d	file:
clearSelectedNode	qt/rpcconsole.cpp	/^void RPCConsole::clearSelectedNode()$/;"	f	class:RPCConsole
clearStatusLabel	qt/optionsdialog.cpp	/^void OptionsDialog::clearStatusLabel()$/;"	f	class:OptionsDialog
clearbanned	rpc/net.cpp	/^UniValue clearbanned(const JSONRPCRequest& request)$/;"	f
clientInterface	net.h	/^    CClientUIInterface* clientInterface;$/;"	m	class:CConnman
clientModel	qt/bantablemodel.h	/^    ClientModel *clientModel;$/;"	m	class:BanTableModel
clientModel	qt/wificoin.cpp	/^    ClientModel *clientModel;$/;"	m	class:WiFicoinApplication	file:
clientModel	qt/wificoingui.h	/^    ClientModel *clientModel;$/;"	m	class:WiFicoinGUI
clientModel	qt/overviewpage.h	/^    ClientModel *clientModel;$/;"	m	class:OverviewPage
clientModel	qt/peertablemodel.h	/^    ClientModel *clientModel;$/;"	m	class:PeerTableModel
clientModel	qt/rpcconsole.h	/^    ClientModel *clientModel;$/;"	m	class:RPCConsole
clientModel	qt/sendcoinsdialog.h	/^    ClientModel *clientModel;$/;"	m	class:SendCoinsDialog
clientModel	qt/trafficgraphwidget.h	/^    ClientModel *clientModel;$/;"	m	class:TrafficGraphWidget
clientModel	qt/walletframe.h	/^    ClientModel *clientModel;$/;"	m	class:WalletFrame
clientModel	qt/walletview.h	/^    ClientModel *clientModel;$/;"	m	class:WalletView
clientNonce	torcontrol.cpp	/^    std::vector<uint8_t> clientNonce;$/;"	m	class:TorController	file:
clipboardAfterFee	qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardAfterFee()$/;"	f	class:CoinControlDialog
clipboardAmount	qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardAmount()$/;"	f	class:CoinControlDialog
clipboardBytes	qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardBytes()$/;"	f	class:CoinControlDialog
clipboardChange	qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardChange()$/;"	f	class:CoinControlDialog
clipboardFee	qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardFee()$/;"	f	class:CoinControlDialog
clipboardLowOutput	qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardLowOutput()$/;"	f	class:CoinControlDialog
clipboardQuantity	qt/coincontroldialog.cpp	/^void CoinControlDialog::clipboardQuantity()$/;"	f	class:CoinControlDialog
cloneContext	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static long cloneContext() {$/;"	m	class:NativeSecp256k1
close	leveldb/port/port_win.h	36;"	d
closeClicked	qt/modaloverlay.cpp	/^void ModalOverlay::closeClicked()$/;"	f	class:ModalOverlay
closeEvent	qt/wificoingui.cpp	/^void WiFicoinGUI::closeEvent(QCloseEvent *event)$/;"	f	class:WiFicoinGUI
closeEvent	qt/splashscreen.cpp	/^void SplashScreen::closeEvent(QCloseEvent *event)$/;"	f	class:SplashScreen
closeEvent	qt/utilitydialog.cpp	/^void ShutdownWindow::closeEvent(QCloseEvent *event)$/;"	f	class:ShutdownWindow
closed	leveldb/table/table_builder.cc	/^  bool closed;          \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep	file:
cmdBeforeBrowsing	qt/rpcconsole.h	/^    QString cmdBeforeBrowsing;$/;"	m	class:RPCConsole
cmp	leveldb/table/table_test.cc	/^  const Comparator* cmp;$/;"	m	struct:leveldb::__anon41::STLLessThan	file:
code	leveldb/include/leveldb/status.h	/^  Code code() const {$/;"	f	class:leveldb::Status
code	torcontrol.cpp	/^    int code;$/;"	m	class:TorControlReply	file:
codepoint	univalue/lib/univalue_utffilter.h	/^    unsigned int codepoint;$/;"	m	class:JSONUTF8StringFilter
coin	coins.h	/^    Coin coin; \/\/ The actual cached data.$/;"	m	struct:CCoinsCacheEntry
coinControl	qt/coincontroldialog.cpp	/^CCoinControl* CoinControlDialog::coinControl = new CCoinControl();$/;"	m	class:CoinControlDialog	file:
coinControl	qt/coincontroldialog.h	/^    static CCoinControl *coinControl;$/;"	m	class:CoinControlDialog
coinControlButtonClicked	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlButtonClicked()$/;"	f	class:SendCoinsDialog
coinControlChangeChecked	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlChangeChecked(int state)$/;"	f	class:SendCoinsDialog
coinControlChangeEdited	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlChangeEdited(const QString& text)$/;"	f	class:SendCoinsDialog
coinControlClipboardAfterFee	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardAfterFee()$/;"	f	class:SendCoinsDialog
coinControlClipboardAmount	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardAmount()$/;"	f	class:SendCoinsDialog
coinControlClipboardBytes	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardBytes()$/;"	f	class:SendCoinsDialog
coinControlClipboardChange	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardChange()$/;"	f	class:SendCoinsDialog
coinControlClipboardFee	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardFee()$/;"	f	class:SendCoinsDialog
coinControlClipboardLowOutput	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardLowOutput()$/;"	f	class:SendCoinsDialog
coinControlClipboardQuantity	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlClipboardQuantity()$/;"	f	class:SendCoinsDialog
coinControlFeatureChanged	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlFeatureChanged(bool checked)$/;"	f	class:SendCoinsDialog
coinControlUpdateLabels	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::coinControlUpdateLabels()$/;"	f	class:SendCoinsDialog
coinEmpty	coins.cpp	/^static const Coin coinEmpty;$/;"	v	file:
coinbaseKey	test/test_wificoin.h	/^    CKey coinbaseKey; \/\/ private\/public key needed to spend coinbase transactions$/;"	m	struct:TestChain100Setup
coinbaseTxns	test/test_wificoin.h	/^    std::vector<CTransaction> coinbaseTxns; \/\/ For convenience, coinbase transactions$/;"	m	struct:TestChain100Setup
collection_flags	cuckoocache.h	/^    mutable bit_packed_atomic_flags collection_flags;$/;"	m	class:CuckooCache::cache
color	memusage.h	/^    int color;$/;"	m	struct:memusage::stl_tree_node
colorizeIcons	qt/platformstyle.cpp	/^    const bool colorizeIcons;$/;"	m	struct:__anon112	file:
colorizeIcons	qt/platformstyle.h	/^    bool colorizeIcons;$/;"	m	class:PlatformStyle
column	qt/bantablemodel.h	/^    int column;$/;"	m	class:BannedNodeLessThan
column	qt/csvmodelwriter.h	/^        int column;$/;"	m	struct:CSVModelWriter::Column
column	qt/peertablemodel.h	/^    int column;$/;"	m	class:NodeLessThan
column	qt/recentrequeststablemodel.h	/^    int column;$/;"	m	class:RecentRequestEntryLessThan
columnCount	qt/addresstablemodel.cpp	/^int AddressTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:AddressTableModel
columnCount	qt/bantablemodel.cpp	/^int BanTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:BanTableModel
columnCount	qt/guiutil.h	/^            int columnCount;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
columnCount	qt/peertablemodel.cpp	/^int PeerTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:PeerTableModel
columnCount	qt/recentrequeststablemodel.cpp	/^int RecentRequestsTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:RecentRequestsTableModel
columnCount	qt/transactiontablemodel.cpp	/^int TransactionTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
columnResizingFixer	qt/receivecoinsdialog.h	/^    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;$/;"	m	class:ReceiveCoinsDialog
columnResizingFixer	qt/transactionview.h	/^    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;$/;"	m	class:TransactionView
column_alignments	qt/transactiontablemodel.cpp	/^static int column_alignments[] = {$/;"	v	file:
columns	qt/addresstablemodel.h	/^    QStringList columns;$/;"	m	class:AddressTableModel
columns	qt/bantablemodel.h	/^    QStringList columns;$/;"	m	class:BanTableModel
columns	qt/csvmodelwriter.h	/^    QList<Column> columns;$/;"	m	class:CSVModelWriter
columns	qt/peertablemodel.h	/^    QStringList columns;$/;"	m	class:PeerTableModel
columns	qt/recentrequeststablemodel.h	/^    QStringList columns;$/;"	m	class:RecentRequestsTableModel
columns	qt/transactiontablemodel.h	/^    QStringList columns;$/;"	m	class:TransactionTableModel
combinerawtransaction	rpc/rawtransaction.cpp	/^UniValue combinerawtransaction(const JSONRPCRequest& request)$/;"	f
command	net.h	/^    std::string command;$/;"	m	struct:CSerializedNetMsg
commands	rpc/blockchain.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	rpc/mining.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	rpc/misc.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	rpc/net.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	rpc/rawtransaction.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
commands	wallet/rpcwallet.cpp	/^static const CRPCCommand commands[] =$/;"	v	file:
comment	test/script_tests.cpp	/^    std::string comment;$/;"	m	class:__anon80::TestBuilder	file:
commit	wallet/feebumper.cpp	/^bool CFeeBumper::commit(CWallet *pWallet)$/;"	f	class:CFeeBumper
comp_	leveldb/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::LZOCompressor<kyotocabinet::LZO::RAW> comp_;$/;"	m	class:leveldb::Benchmark	file:
compact_pointer_	leveldb/db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet
compact_pointers_	leveldb/db/version_edit.h	/^  std::vector< std::pair<int, InternalKey> > compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compaction	leveldb/db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
compaction_level_	leveldb/db/version_set.h	/^  int compaction_level_;$/;"	m	class:leveldb::Version
compaction_score_	leveldb/db/version_set.h	/^  double compaction_score_;$/;"	m	class:leveldb::Version
comparator	leveldb/db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	leveldb/include/leveldb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	leveldb/db/memtable.h	/^  KeyComparator comparator_;$/;"	m	class:leveldb::MemTable
comparator_	leveldb/db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	leveldb/table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter	file:
comparator_	leveldb/table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon36::MergingIterator	file:
comparator_	leveldb/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::BlockConstructor	file:
comparator_	leveldb/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::DBConstructor	file:
compare	leveldb/include/leveldb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare_	leveldb/db/c.cc	/^  int (*compare_)($/;"	m	struct:leveldb_comparator_t	file:
compare_	leveldb/db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
complete	net.h	/^    bool complete() const$/;"	f	class:CNetMessage
compressed_output	leveldb/table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
compression	leveldb/include/leveldb/options.h	/^  CompressionType compression;$/;"	m	struct:leveldb::Options
computePubkey	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static byte[] computePubkey(byte[] seckey) throws AssertFailException{$/;"	m	class:NativeSecp256k1
compute_hashes	cuckoocache.h	/^    inline std::array<uint32_t, 8> compute_hashes(const Element& e) const$/;"	f	class:CuckooCache::cache
cond	httpserver.cpp	/^    std::condition_variable cond;$/;"	m	class:WorkQueue	file:
cond	threadinterrupt.h	/^    std::condition_variable cond;$/;"	m	class:CThreadInterrupt
condMaster	checkqueue.h	/^    boost::condition_variable condMaster;$/;"	m	class:CCheckQueue
condMsgProc	net.h	/^    std::condition_variable condMsgProc;$/;"	m	class:CConnman
condWorker	checkqueue.h	/^    boost::condition_variable condWorker;$/;"	m	class:CCheckQueue
cond_blockchange	rpc/blockchain.cpp	/^static std::condition_variable cond_blockchange;$/;"	v	file:
condition	sync.h	/^    boost::condition_variable condition;$/;"	m	class:CSemaphore
condvar_GenesisWait	init.cpp	/^static CConditionVariable condvar_GenesisWait;$/;"	v	file:
confAvg	policy/fees.cpp	/^    std::vector<std::vector<double>> confAvg; \/\/ confAvg[Y][X]$/;"	m	class:TxConfirmStats	file:
confTargets	qt/sendcoinsdialog.cpp	/^static const std::array<int, 9> confTargets = { {2, 4, 6, 12, 24, 48, 144, 504, 1008} };$/;"	v	file:
config	leveldb/db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
conflictedTxs	validation.cpp	/^    std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;$/;"	m	struct:PerBlockConnectTrace	file:
conn	torcontrol.cpp	/^    TorControlConnection conn;$/;"	m	class:TorController	file:
connectViewHeadersSignals	qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::connectViewHeadersSignals()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
connected	torcontrol.cpp	/^    std::function<void(TorControlConnection&)> connected;$/;"	m	class:TorControlConnection	file:
connectedWallets	qt/splashscreen.h	/^    QList<CWallet*> connectedWallets;$/;"	m	class:SplashScreen
connected_cb	torcontrol.cpp	/^void TorController::connected_cb(TorControlConnection& _conn)$/;"	f	class:TorController
connectionsControl	qt/wificoingui.h	/^    QLabel *connectionsControl;$/;"	m	class:WiFicoinGUI
connman	net_processing.h	/^    CConnman* const connman;$/;"	m	class:PeerLogicValidation
connman	test/test_wificoin.h	/^    CConnman* connman;$/;"	m	struct:TestingSetup
consensus	chainparams.h	/^    Consensus::Params consensus;$/;"	m	class:CChainParams
consoleFontSize	qt/rpcconsole.h	/^    int consoleFontSize;$/;"	m	class:RPCConsole
const_iterator	indirectmap.h	/^    typedef typename base::const_iterator const_iterator;$/;"	t	class:indirectmap
const_iterator	limitedmap.h	/^    typedef typename std::map<K, V>::const_iterator const_iterator;$/;"	t	class:limitedmap
const_iterator	prevector.h	/^        const_iterator(const T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::const_iterator
const_iterator	prevector.h	/^        const_iterator(iterator x) : ptr(&(*x)) {}$/;"	f	class:prevector::const_iterator
const_iterator	prevector.h	/^    class const_iterator {$/;"	c	class:prevector
const_iterator	streams.h	/^    typedef vector_type::const_iterator   const_iterator;$/;"	t	class:CDataStream
const_pointer	prevector.h	/^    typedef const value_type* const_pointer;$/;"	t	class:prevector
const_pointer	support/allocators/secure.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:secure_allocator
const_pointer	support/allocators/zeroafterfree.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:zero_after_free_allocator
const_reference	prevector.h	/^    typedef const value_type& const_reference;$/;"	t	class:prevector
const_reference	streams.h	/^    typedef vector_type::const_reference  const_reference;$/;"	t	class:CDataStream
const_reference	support/allocators/secure.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:secure_allocator
const_reference	support/allocators/zeroafterfree.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:zero_after_free_allocator
const_reverse_iterator	prevector.h	/^        const_reverse_iterator(const T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::const_reverse_iterator
const_reverse_iterator	prevector.h	/^        const_reverse_iterator(reverse_iterator x) : ptr(&(*x)) {}$/;"	f	class:prevector::const_reverse_iterator
const_reverse_iterator	prevector.h	/^    class const_reverse_iterator {$/;"	c	class:prevector
constructor_	leveldb/table/table_test.cc	/^  Constructor* constructor_;$/;"	m	class:leveldb::Harness	file:
contains	bloom.cpp	/^bool CBloomFilter::contains(const COutPoint& outpoint) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CBloomFilter::contains(const uint256& hash) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CRollingBloomFilter
contains	bloom.cpp	/^bool CRollingBloomFilter::contains(const uint256& hash) const$/;"	f	class:CRollingBloomFilter
contains	cuckoocache.h	/^    inline bool contains(const Element& e, const bool erase) const$/;"	f	class:CuckooCache::cache
contents	leveldb/table/table_test.cc	/^  const std::string& contents() const { return contents_; }$/;"	f	class:leveldb::StringSink
contents_	leveldb/db/log_test.cc	/^    Slice contents_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
contents_	leveldb/db/log_test.cc	/^    std::string contents_;$/;"	m	class:leveldb::log::LogTest::StringDest	file:
contents_	leveldb/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSink	file:
contents_	leveldb/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSource	file:
context	secp256k1/src/java/org/wificoin/Secp256k1Context.java	/^  private static final long context; \/\/ref to pointer to context obj$/;"	f	class:Secp256k1Context	file:
contextMenu	qt/addressbookpage.h	/^    QMenu *contextMenu;$/;"	m	class:AddressBookPage
contextMenu	qt/coincontroldialog.h	/^    QMenu *contextMenu;$/;"	m	class:CoinControlDialog
contextMenu	qt/receivecoinsdialog.h	/^    QMenu *contextMenu;$/;"	m	class:ReceiveCoinsDialog
contextMenu	qt/receiverequestdialog.h	/^    QMenu *contextMenu;$/;"	m	class:QRImageWidget
contextMenu	qt/transactionview.h	/^    QMenu *contextMenu;$/;"	m	class:TransactionView
contextMenuEvent	qt/receiverequestdialog.cpp	/^void QRImageWidget::contextMenuEvent(QContextMenuEvent *event)$/;"	f	class:QRImageWidget
contextMenuItem	qt/coincontroldialog.h	/^    QTreeWidgetItem *contextMenuItem;$/;"	m	class:CoinControlDialog
contextualMenu	qt/addressbookpage.cpp	/^void AddressBookPage::contextualMenu(const QPoint &point)$/;"	f	class:AddressBookPage
contextualMenu	qt/transactionview.cpp	/^void TransactionView::contextualMenu(const QPoint &point)$/;"	f	class:TransactionView
convert	rpc/client.cpp	/^    bool convert(const std::string& method, const std::string& name) {$/;"	f	class:CRPCConvertTable
convert	rpc/client.cpp	/^    bool convert(const std::string& method, int idx) {$/;"	f	class:CRPCConvertTable
convertSeed6	net.cpp	/^static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn)$/;"	f	file:
convertToInt	tinyformat.h	/^struct convertToInt$/;"	s	namespace:tinyformat::detail
convertToInt	tinyformat.h	/^struct convertToInt<T,true>$/;"	s	namespace:tinyformat::detail
cookie	torcontrol.cpp	/^    std::vector<uint8_t> cookie;$/;"	m	class:TorController	file:
copy	test/prevector_tests.cpp	/^    void copy() {$/;"	f	class:prevector_tester
copyAddress	qt/coincontroldialog.cpp	/^void CoinControlDialog::copyAddress()$/;"	f	class:CoinControlDialog
copyAddress	qt/transactionview.cpp	/^void TransactionView::copyAddress()$/;"	f	class:TransactionView
copyAmount	qt/coincontroldialog.cpp	/^void CoinControlDialog::copyAmount()$/;"	f	class:CoinControlDialog
copyAmount	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyAmount()$/;"	f	class:ReceiveCoinsDialog
copyAmount	qt/transactionview.cpp	/^void TransactionView::copyAmount()$/;"	f	class:TransactionView
copyColumnToClipboard	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyColumnToClipboard(int column)$/;"	f	class:ReceiveCoinsDialog
copyEntryData	qt/guiutil.cpp	/^void copyEntryData(QAbstractItemView *view, int column, int role)$/;"	f	namespace:GUIUtil
copyImage	qt/receiverequestdialog.cpp	/^void QRImageWidget::copyImage()$/;"	f	class:QRImageWidget
copyLabel	qt/coincontroldialog.cpp	/^void CoinControlDialog::copyLabel()$/;"	f	class:CoinControlDialog
copyLabel	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyLabel()$/;"	f	class:ReceiveCoinsDialog
copyLabel	qt/transactionview.cpp	/^void TransactionView::copyLabel()$/;"	f	class:TransactionView
copyMessage	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyMessage()$/;"	f	class:ReceiveCoinsDialog
copyStats	net.cpp	/^void CNode::copyStats(CNodeStats &stats)$/;"	f	class:CNode
copyTransactionHash	qt/coincontroldialog.cpp	/^void CoinControlDialog::copyTransactionHash()$/;"	f	class:CoinControlDialog
copyTransactionHashAction	qt/coincontroldialog.h	/^    QAction *copyTransactionHashAction;$/;"	m	class:CoinControlDialog
copyTxHex	qt/transactionview.cpp	/^void TransactionView::copyTxHex()$/;"	f	class:TransactionView
copyTxID	qt/transactionview.cpp	/^void TransactionView::copyTxID()$/;"	f	class:TransactionView
copyTxPlainText	qt/transactionview.cpp	/^void TransactionView::copyTxPlainText()$/;"	f	class:TransactionView
copyURI	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::copyURI()$/;"	f	class:ReceiveCoinsDialog
coreThread	qt/wificoin.cpp	/^    QThread *coreThread;$/;"	m	class:WiFicoinApplication	file:
corruptionPossible	consensus/validation.h	/^    bool corruptionPossible;$/;"	m	class:CValidationState
count	bench/bench.h	/^        uint64_t count;$/;"	m	class:benchmark::State
count	hash.h	/^    int count;$/;"	m	class:CSipHasher
count	indirectmap.h	/^    size_type count(const K& key) const             { return m.count(&key); }$/;"	f	class:indirectmap
count	limitedmap.h	/^    size_type count(const key_type& k) const { return map.count(k); }$/;"	f	class:limitedmap
count	secp256k1/src/tests.c	/^static int count = 64;$/;"	v	file:
count	test/allocator_tests.cpp	/^    int count;$/;"	m	class:TestLockedPageAllocator	file:
count	versionbits.h	/^    int count;$/;"	m	struct:BIP9Stats
countDown	qt/sendcoinsdialog.cpp	/^void SendConfirmationDialog::countDown()$/;"	f	class:SendConfirmationDialog
countDownTimer	qt/sendcoinsdialog.h	/^    QTimer countDownTimer;$/;"	m	class:SendConfirmationDialog
countMask	bench/bench.h	/^        uint64_t countMask;$/;"	m	class:benchmark::State
countMaskInv	bench/bench.h	/^        double lastTime, minTime, maxTime, countMaskInv;$/;"	m	class:benchmark::State
count_	leveldb/db/db_test.cc	/^  int count_;$/;"	m	class:leveldb::__anon29::AtomicCounter	file:
count_random_reads_	leveldb/db/db_test.cc	/^  bool count_random_reads_;$/;"	m	class:leveldb::SpecialEnv	file:
counter	leveldb/db/db_test.cc	/^  port::AtomicPointer counter[kNumThreads];$/;"	m	struct:leveldb::__anon30::MTState	file:
counter_	leveldb/table/block_builder.h	/^  int                   counter_;     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
counting_illegal_callback_fn	secp256k1/src/tests.c	/^static void counting_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
countsForBalance	qt/transactionrecord.h	/^    bool countsForBalance;$/;"	m	class:TransactionStatus
crc32c	leveldb/util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c	leveldb/util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	leveldb/util/crc32c_test.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
createActions	qt/wificoingui.cpp	/^void WiFicoinGUI::createActions()$/;"	f	class:WiFicoinGUI
createContextMenu	qt/wificoingui.cpp	/^void UnitDisplayStatusBarControl::createContextMenu()$/;"	f	class:UnitDisplayStatusBarControl
createDateRangeWidget	qt/transactionview.cpp	/^QWidget *TransactionView::createDateRangeWidget()$/;"	f	class:TransactionView
createECDHSecret	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static byte[] createECDHSecret(byte[] seckey, byte[] pubkey) throws AssertFailException{$/;"	m	class:NativeSecp256k1
createMenuBar	qt/wificoingui.cpp	/^void WiFicoinGUI::createMenuBar()$/;"	f	class:WiFicoinGUI
createOptionsModel	qt/wificoin.cpp	/^void WiFicoinApplication::createOptionsModel(bool resetSettings)$/;"	f	class:WiFicoinApplication
createPaymentServer	qt/wificoin.cpp	/^void WiFicoinApplication::createPaymentServer()$/;"	f	class:WiFicoinApplication
createSplashScreen	qt/wificoin.cpp	/^void WiFicoinApplication::createSplashScreen(const NetworkStyle *networkStyle)$/;"	f	class:WiFicoinApplication
createToolBars	qt/wificoingui.cpp	/^void WiFicoinGUI::createToolBars()$/;"	f	class:WiFicoinGUI
createTrayIcon	qt/wificoingui.cpp	/^void WiFicoinGUI::createTrayIcon(const NetworkStyle *networkStyle)$/;"	f	class:WiFicoinGUI
createTrayIconMenu	qt/wificoingui.cpp	/^void WiFicoinGUI::createTrayIconMenu()$/;"	f	class:WiFicoinGUI
createWindow	qt/wificoin.cpp	/^void WiFicoinApplication::createWindow(const NetworkStyle *networkStyle)$/;"	f	class:WiFicoinApplication
create_	leveldb/db/c.cc	/^  char* (*create_)($/;"	m	struct:leveldb_filterpolicy_t	file:
create_if_missing	leveldb/include/leveldb/options.h	/^  bool create_if_missing;$/;"	m	struct:leveldb::Options
createmultisig	rpc/misc.cpp	/^UniValue createmultisig(const JSONRPCRequest& request)$/;"	f
createrawtransaction	rpc/rawtransaction.cpp	/^UniValue createrawtransaction(const JSONRPCRequest& request)$/;"	f
credit	qt/transactionrecord.h	/^    CAmount credit;$/;"	m	class:TransactionRecord
creditTx	test/script_tests.cpp	/^    CTransactionRef creditTx;$/;"	m	class:__anon80::TestBuilder	file:
crypto_libwificoin_crypto_a_AR	Makefile	/^crypto_libwificoin_crypto_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libwificoin_crypto_a_CPPFLAGS	Makefile	/^crypto_libwificoin_crypto_a_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_CONFIG_INCLUDES)$/;"	m
crypto_libwificoin_crypto_a_CXXFLAGS	Makefile	/^crypto_libwificoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
crypto_libwificoin_crypto_a_LIBADD	Makefile	/^crypto_libwificoin_crypto_a_LIBADD =$/;"	m
crypto_libwificoin_crypto_a_OBJECTS	Makefile	/^crypto_libwificoin_crypto_a_OBJECTS =  \\$/;"	m
crypto_libwificoin_crypto_a_SOURCES	Makefile	/^crypto_libwificoin_crypto_a_SOURCES = crypto\/aes.cpp crypto\/aes.h \\$/;"	m
cs	addrman.h	/^    mutable CCriticalSection cs;$/;"	m	class:CAddrMan
cs	httpserver.cpp	/^    std::mutex cs;$/;"	m	class:WorkQueue	file:
cs	txmempool.h	/^    mutable CCriticalSection cs;$/;"	m	class:CTxMemPool
csBestBlock	validation.cpp	/^CWaitableCriticalSection csBestBlock;$/;"	v
csPathCached	util.cpp	/^static CCriticalSection csPathCached;$/;"	v	file:
cs_	leveldb/port/port_win.h	/^  void * cs_;$/;"	m	class:leveldb::port::Mutex
cs_GenesisWait	init.cpp	/^static boost::mutex cs_GenesisWait;$/;"	v	file:
cs_KeyStore	keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CKeyStore
cs_LastBlockFile	validation.cpp	/^    CCriticalSection cs_LastBlockFile;$/;"	m	namespace:__anon43	file:
cs_SubVer	net.h	/^    CCriticalSection cs_SubVer; \/\/ used for both cleanSubVer and strSubVer$/;"	m	class:CNode
cs_addrLocal	net.h	/^    mutable CCriticalSection cs_addrLocal;$/;"	m	class:CNode
cs_addrName	net.h	/^    mutable CCriticalSection cs_addrName;$/;"	m	class:CNode
cs_args	util.h	/^    CCriticalSection cs_args;$/;"	m	class:ArgsManager
cs_blockchange	rpc/blockchain.cpp	/^static std::mutex cs_blockchange;$/;"	v	file:
cs_db	wallet/db.h	/^    mutable CCriticalSection cs_db;$/;"	m	class:CDBEnv
cs_feeEstimator	policy/fees.h	/^    mutable CCriticalSection cs_feeEstimator;$/;"	m	class:CBlockPolicyEstimator
cs_feeFilter	net.h	/^    CCriticalSection cs_feeFilter;$/;"	m	class:CNode
cs_filter	net.h	/^    CCriticalSection cs_filter;$/;"	m	class:CNode
cs_hSocket	net.h	/^    CCriticalSection cs_hSocket;$/;"	m	class:CNode
cs_inventory	net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_main	net_processing.cpp	/^void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);$/;"	v
cs_main	validation.cpp	/^CCriticalSection cs_main;$/;"	v
cs_mapLocalHost	net.cpp	/^CCriticalSection cs_mapLocalHost;$/;"	v
cs_most_recent_block	net_processing.cpp	/^static CCriticalSection cs_most_recent_block;$/;"	v	file:
cs_nBlockSequenceId	validation.cpp	/^    CCriticalSection cs_nBlockSequenceId;$/;"	m	namespace:__anon43	file:
cs_nTimeOffset	timedata.cpp	/^static CCriticalSection cs_nTimeOffset;$/;"	v	file:
cs_proxyInfos	netbase.cpp	/^static CCriticalSection cs_proxyInfos;$/;"	v	file:
cs_rng_state	random.cpp	/^static std::mutex cs_rng_state;$/;"	v	file:
cs_rpcWarmup	rpc/server.cpp	/^static CCriticalSection cs_rpcWarmup;$/;"	v	file:
cs_sendProcessing	net.h	/^    CCriticalSection cs_sendProcessing;$/;"	m	class:CNode
cs_setBanned	net.h	/^    CCriticalSection cs_setBanned;$/;"	m	class:CConnman
cs_sigcache	script/sigcache.cpp	/^    boost::shared_mutex cs_sigcache;$/;"	m	class:__anon96::CSignatureCache	file:
cs_totalBytesRecv	net.h	/^    CCriticalSection cs_totalBytesRecv;$/;"	m	class:CConnman
cs_totalBytesSent	net.h	/^    CCriticalSection cs_totalBytesSent;$/;"	m	class:CConnman
cs_vAddedNodes	net.h	/^    CCriticalSection cs_vAddedNodes;$/;"	m	class:CConnman
cs_vNodes	net.h	/^    mutable CCriticalSection cs_vNodes;$/;"	m	class:CConnman
cs_vOneShots	net.h	/^    CCriticalSection cs_vOneShots;$/;"	m	class:CConnman
cs_vProcessMsg	net.h	/^    CCriticalSection cs_vProcessMsg;$/;"	m	class:CNode
cs_vRecv	net.h	/^    CCriticalSection cs_vRecv;$/;"	m	class:CNode
cs_vSend	net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_wallet	wallet/wallet.h	/^    mutable CCriticalSection cs_wallet;$/;"	m	class:CWallet
cs_warnings	warnings.cpp	/^CCriticalSection cs_warnings;$/;"	v
ctaes_test	crypto/ctaes/test.c	/^} ctaes_test;$/;"	t	typeref:struct:__anon82	file:
ctaes_tests	crypto/ctaes/test.c	/^static const ctaes_test ctaes_tests[] = {$/;"	v	file:
ctx	crypto/aes.h	/^    AES128_ctx ctx;$/;"	m	class:AES128Decrypt
ctx	crypto/aes.h	/^    AES128_ctx ctx;$/;"	m	class:AES128Encrypt
ctx	crypto/aes.h	/^    AES256_ctx ctx;$/;"	m	class:AES256Decrypt
ctx	crypto/aes.h	/^    AES256_ctx ctx;$/;"	m	class:AES256Encrypt
ctx	hash.h	/^    CHash256 ctx;$/;"	m	class:CHashWriter
ctx	secp256k1/src/bench_ecdh.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon59	file:
ctx	secp256k1/src/bench_recover.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon63	file:
ctx	secp256k1/src/bench_sign.c	/^    secp256k1_context* ctx;$/;"	m	struct:__anon65	file:
ctx	secp256k1/src/bench_verify.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon55	file:
ctx	secp256k1/src/tests.c	/^static secp256k1_context *ctx = NULL;$/;"	v	file:
ctz	test/merkle_tests.cpp	/^static inline int ctz(uint32_t i) {$/;"	f	file:
cuckoocache_tests	test/cuckoocache_tests.cpp	/^BOOST_AUTO_TEST_SUITE(cuckoocache_tests);$/;"	v
cumulative_bytes_locked	support/lockedpool.h	/^    size_t cumulative_bytes_locked;$/;"	m	class:LockedPool
curAlignment	qt/splashscreen.h	/^    int curAlignment;$/;"	m	class:SplashScreen
curColor	qt/splashscreen.h	/^    QColor curColor;$/;"	m	class:SplashScreen
curMessage	qt/splashscreen.h	/^    QString curMessage;$/;"	m	class:SplashScreen
cur_num_blocks	qt/transactionrecord.h	/^    int cur_num_blocks;$/;"	m	class:TransactionStatus
current	leveldb/db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
currentBalance	qt/overviewpage.h	/^    CAmount currentBalance;$/;"	m	class:OverviewPage
currentImmatureBalance	qt/overviewpage.h	/^    CAmount currentImmatureBalance;$/;"	m	class:OverviewPage
currentResult	wallet/feebumper.h	/^    BumpFeeResult currentResult;$/;"	m	class:CFeeBumper
currentUnconfirmedBalance	qt/overviewpage.h	/^    CAmount currentUnconfirmedBalance;$/;"	m	class:OverviewPage
currentUnit	qt/wificoinamountfield.cpp	/^    int currentUnit;$/;"	m	class:AmountSpinBox	file:
currentWalletView	qt/walletframe.cpp	/^WalletView *WalletFrame::currentWalletView()$/;"	f	class:WalletFrame
currentWatchImmatureBalance	qt/overviewpage.h	/^    CAmount currentWatchImmatureBalance;$/;"	m	class:OverviewPage
currentWatchOnlyBalance	qt/overviewpage.h	/^    CAmount currentWatchOnlyBalance;$/;"	m	class:OverviewPage
currentWatchUnconfBalance	qt/overviewpage.h	/^    CAmount currentWatchUnconfBalance;$/;"	m	class:OverviewPage
current_	leveldb/db/skiplist_test.cc	/^  State current_;$/;"	m	class:leveldb::ConcurrentTest	file:
current_	leveldb/db/version_set.h	/^  Version* current_;        \/\/ == dummy_versions_.prev_$/;"	m	class:leveldb::VersionSet
current_	leveldb/table/block.cc	/^  uint32_t current_;$/;"	m	class:leveldb::Block::Iter	file:
current_	leveldb/table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon36::MergingIterator	file:
current_	leveldb/util/cache_test.cc	/^  static CacheTest* current_;$/;"	m	class:leveldb::CacheTest	file:
current_	leveldb/util/cache_test.cc	/^CacheTest* CacheTest::current_;$/;"	m	class:leveldb::CacheTest	file:
current_output	leveldb/db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
cv	leveldb/db/db_bench.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::__anon18::SharedState	file:
cv	leveldb/db/db_impl.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::DBImpl::Writer	file:
cv	test/checkqueue_tests.cpp	/^    static std::condition_variable cv;$/;"	m	struct:FrozenCleanupCheck	file:
cvBlockChange	validation.cpp	/^CConditionVariable cvBlockChange;$/;"	v
cv_	leveldb/port/port_posix.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
d	secp256k1/src/scalar_4x64.h	/^    uint64_t d[4];$/;"	m	struct:__anon68
d	secp256k1/src/scalar_8x32.h	/^    uint32_t d[8];$/;"	m	struct:__anon69
dMinPing	net.h	/^    double dMinPing;$/;"	m	class:CNodeStats
dPingTime	net.h	/^    double dPingTime;$/;"	m	class:CNodeStats
dPingWait	net.h	/^    double dPingWait;$/;"	m	class:CNodeStats
dTxRate	chainparams.h	/^    double dTxRate;$/;"	m	struct:ChainTxData
d_assert	univalue/test/unitester.cpp	24;"	d	file:
damage_array	secp256k1/src/tests.c	/^static void damage_array(unsigned char *sig, size_t *len) {$/;"	f	file:
data	bloom.h	/^    std::vector<uint64_t> data;$/;"	m	class:CRollingBloomFilter
data	leveldb/include/leveldb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	leveldb/table/format.h	/^  Slice data;           \/\/ Actual contents of data$/;"	m	struct:leveldb::BlockContents
data	leveldb/table/table_test.cc	/^  virtual const KVMap& data() { return data_; }$/;"	f	class:leveldb::Constructor
data	net.h	/^    std::vector<unsigned char> data;$/;"	m	struct:CSerializedNetMsg
data	prevector.h	/^    const value_type* data() const {$/;"	f	class:prevector
data	prevector.h	/^    value_type* data() {$/;"	f	class:prevector
data	qt/addresstablemodel.cpp	/^QVariant AddressTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:AddressTableModel
data	qt/bantablemodel.cpp	/^QVariant BanTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:BanTableModel
data	qt/wificoinunits.cpp	/^QVariant WiFicoinUnits::data(const QModelIndex &index, int role) const$/;"	f	class:WiFicoinUnits
data	qt/optionsmodel.cpp	/^QVariant OptionsModel::data(const QModelIndex & index, int role) const$/;"	f	class:OptionsModel
data	qt/peertablemodel.cpp	/^QVariant PeerTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:PeerTableModel
data	qt/recentrequeststablemodel.cpp	/^QVariant RecentRequestsTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:RecentRequestsTableModel
data	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:TransactionTableModel
data	secp256k1/include/secp256k1.h	/^    unsigned char data[64];$/;"	m	struct:__anon51
data	secp256k1/include/secp256k1.h	/^    unsigned char data[64];$/;"	m	struct:__anon52
data	secp256k1/include/secp256k1_recovery.h	/^    unsigned char data[65];$/;"	m	struct:__anon53
data	secp256k1/src/bench_internal.c	/^    unsigned char data[64];$/;"	m	struct:__anon66	file:
data	secp256k1/src/num_gmp.h	/^    mp_limb_t data[2*NUM_LIMBS];$/;"	m	struct:__anon67
data	secp256k1/src/util.h	/^    const void* data;$/;"	m	struct:__anon64
data	streams.h	/^    const value_type* data() const                   { return vch.data() + nReadPos; }$/;"	f	class:CDataStream
data	streams.h	/^    value_type* data()                               { return vch.data() + nReadPos; }$/;"	f	class:CDataStream
data	uint256.h	/^    uint8_t data[WIDTH];$/;"	m	class:base_blob
dataDir	qt/clientmodel.cpp	/^QString ClientModel::dataDir() const$/;"	f	class:ClientModel
data_	leveldb/db/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon18::RandomGenerator	file:
data_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon35::RandomGenerator	file:
data_	leveldb/doc/bench/db_bench_tree_db.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon34::RandomGenerator	file:
data_	leveldb/include/leveldb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	leveldb/table/block.cc	/^  const char* const data_;      \/\/ underlying block contents$/;"	m	class:leveldb::Block::Iter	file:
data_	leveldb/table/block.h	/^  const char* data_;$/;"	m	class:leveldb::Block
data_	leveldb/table/filter_block.h	/^  const char* data_;    \/\/ Pointer to filter data (at block-start)$/;"	m	class:leveldb::FilterBlockReader
data_	leveldb/table/table_test.cc	/^  KVMap data_;$/;"	m	class:leveldb::Constructor	file:
data_	leveldb/table/table_test.cc	/^  std::string data_;$/;"	m	class:leveldb::BlockConstructor	file:
data_block	leveldb/table/table_builder.cc	/^  BlockBuilder data_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
data_block_handle_	leveldb/table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon39::TwoLevelIterator	file:
data_hash	net.h	/^    mutable uint256 data_hash;$/;"	m	class:CNetMessage
data_iter_	leveldb/table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon39::TwoLevelIterator	file:
data_sync_error_	leveldb/db/db_test.cc	/^  port::AtomicPointer data_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	secp256k1/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	univalue/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	secp256k1/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	univalue/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
date	qt/recentrequeststablemodel.h	/^    QDateTime date;$/;"	m	class:RecentRequestEntry
dateFrom	qt/transactionfilterproxy.h	/^    QDateTime dateFrom;$/;"	m	class:TransactionFilterProxy
dateFrom	qt/transactionview.h	/^    QDateTimeEdit *dateFrom;$/;"	m	class:TransactionView
dateRangeChanged	qt/transactionview.cpp	/^void TransactionView::dateRangeChanged()$/;"	f	class:TransactionView
dateRangeWidget	qt/transactionview.h	/^    QFrame *dateRangeWidget;$/;"	m	class:TransactionView
dateTimeStr	qt/guiutil.cpp	/^QString dateTimeStr(const QDateTime &date)$/;"	f	namespace:GUIUtil
dateTimeStr	qt/guiutil.cpp	/^QString dateTimeStr(qint64 nTime)$/;"	f	namespace:GUIUtil
dateTo	qt/transactionfilterproxy.h	/^    QDateTime dateTo;$/;"	m	class:TransactionFilterProxy
dateTo	qt/transactionview.h	/^    QDateTimeEdit *dateTo;$/;"	m	class:TransactionView
dateWidget	qt/transactionview.h	/^    QComboBox *dateWidget;$/;"	m	class:TransactionView
db	leveldb/table/table_test.cc	/^  DB* db() const { return constructor_->db(); }$/;"	f	class:leveldb::Harness
db	leveldb/table/table_test.cc	/^  virtual DB* db() const { return NULL; }  \/\/ Overridden in DBConstructor$/;"	f	class:leveldb::Constructor
db	leveldb/table/table_test.cc	/^  virtual DB* db() const { return db_; }$/;"	f	class:leveldb::DBConstructor
db	txdb.h	/^    CDBWrapper db;$/;"	m	class:CCoinsViewDB
db_	leveldb/db/autocompact_test.cc	/^  DB* db_;$/;"	m	class:leveldb::AutoCompactTest	file:
db_	leveldb/db/corruption_test.cc	/^  DB* db_;$/;"	m	class:leveldb::CorruptionTest	file:
db_	leveldb/db/db_bench.cc	/^  DB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	leveldb/db/db_iter.cc	/^  DBImpl* db_;$/;"	m	class:leveldb::__anon20::DBIter	file:
db_	leveldb/db/db_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest	file:
db_	leveldb/db/fault_injection_test.cc	/^  DB* db_;$/;"	m	class:leveldb::FaultInjectionTest	file:
db_	leveldb/db/recovery_test.cc	/^  DB* db_;$/;"	m	class:leveldb::RecoveryTest	file:
db_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  sqlite3* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	leveldb/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::TreeDB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	leveldb/table/table_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBConstructor	file:
db_file_state_	leveldb/db/fault_injection_test.cc	/^  std::map<std::string, FileState> db_file_state_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
db_lock_	leveldb/db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
db_num_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
db_num_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
dbenv	wallet/db.h	/^    DbEnv *dbenv;$/;"	m	class:CDBEnv
dbfull	leveldb/db/db_test.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::DBTest
dbfull	leveldb/db/recovery_test.cc	/^  DBImpl* dbfull() const { return reinterpret_cast<DBImpl*>(db_); }$/;"	f	class:leveldb::RecoveryTest
dbname	leveldb/db/c_test.c	/^static char dbname[200];$/;"	v	file:
dbname_	leveldb/db/autocompact_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::AutoCompactTest	file:
dbname_	leveldb/db/corruption_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::CorruptionTest	file:
dbname_	leveldb/db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	leveldb/db/db_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest	file:
dbname_	leveldb/db/fault_injection_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::FaultInjectionTest	file:
dbname_	leveldb/db/recovery_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::RecoveryTest	file:
dbname_	leveldb/db/repair.cc	/^  std::string const dbname_;$/;"	m	class:leveldb::__anon26::Repairer::std	file:
dbname_	leveldb/db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	leveldb/db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
dbw	wallet/wallet.h	/^    std::unique_ptr<CWalletDBWrapper> dbw;$/;"	m	class:CWallet
dbwrapper_error	dbwrapper.h	/^    dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}$/;"	f	class:dbwrapper_error
dbwrapper_error	dbwrapper.h	/^class dbwrapper_error : public std::runtime_error$/;"	c
dbwrapper_private	dbwrapper.cpp	/^namespace dbwrapper_private {$/;"	n	file:
dbwrapper_private	dbwrapper.h	/^namespace dbwrapper_private {$/;"	n
dd_mutex	sync.cpp	/^    boost::mutex dd_mutex;$/;"	m	struct:LockData	file:
deadlineTimers	rpc/server.cpp	/^static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;$/;"	v	file:
deallocate	support/allocators/secure.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:secure_allocator
deallocate	support/allocators/zeroafterfree.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:zero_after_free_allocator
debit	qt/transactionrecord.h	/^    CAmount debit;$/;"	m	class:TransactionRecord
debugPrintInitFlag	util.cpp	/^static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;$/;"	v	file:
dec	crypto/aes.h	/^    const AES128Decrypt dec;$/;"	m	class:AES128CBCDecrypt
dec	crypto/aes.h	/^    const AES256Decrypt dec;$/;"	m	class:AES256CBCDecrypt
decay	policy/fees.cpp	/^    double decay;$/;"	m	class:TxConfirmStats	file:
decay	policy/fees.h	/^    double decay = 0;$/;"	m	struct:EstimationResult
decimals	qt/wificoinunits.cpp	/^int WiFicoinUnits::decimals(int unit)$/;"	f	class:WiFicoinUnits
decltype	reverse_iterator.h	/^    auto begin() const -> decltype(this->m_x.rbegin())$/;"	f	class:reverse_range
decltype	reverse_iterator.h	/^    auto end() const -> decltype(this->m_x.rend())$/;"	f	class:reverse_range
decoderawtransaction	rpc/rawtransaction.cpp	/^UniValue decoderawtransaction(const JSONRPCRequest& request)$/;"	f
decodescript	rpc/rawtransaction.cpp	/^UniValue decodescript(const JSONRPCRequest& request)$/;"	f
decomposeTransaction	qt/transactionrecord.cpp	/^QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *wallet, const CWalletTx &wtx)$/;"	f	class:TransactionRecord
defaultAssumeValid	consensus/params.h	/^    uint256 defaultAssumeValid;$/;"	m	struct:Consensus::Params
default_env	leveldb/util/env_posix.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
default_env	leveldb/util/env_win.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
default_error_callback	secp256k1/src/gen_context.c	/^static const secp256k1_callback default_error_callback = {$/;"	v	file:
default_error_callback	secp256k1/src/secp256k1.c	/^static const secp256k1_callback default_error_callback = {$/;"	v	file:
default_error_callback_fn	secp256k1/src/gen_context.c	/^static void default_error_callback_fn(const char* str, void* data) {$/;"	f	file:
default_error_callback_fn	secp256k1/src/secp256k1.c	/^static void default_error_callback_fn(const char* str, void* data) {$/;"	f	file:
default_illegal_callback	secp256k1/src/secp256k1.c	/^static const secp256k1_callback default_illegal_callback = {$/;"	v	file:
default_illegal_callback_fn	secp256k1/src/secp256k1.c	/^static void default_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
delay_data_sync_	leveldb/db/db_test.cc	/^  port::AtomicPointer delay_data_sync_;$/;"	m	class:leveldb::SpecialEnv	file:
deleteAction	qt/addressbookpage.h	/^    QAction *deleteAction; \/\/ to be able to explicitly disable it$/;"	m	class:AddressBookPage
deleteClicked	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::deleteClicked()$/;"	f	class:SendCoinsEntry
deleteWhenTriggered	httpserver.h	/^    bool deleteWhenTriggered;$/;"	m	class:HTTPEvent
deleted_files	leveldb/db/version_set.cc	/^    std::set<uint64_t> deleted_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
deleted_files_	leveldb/db/version_edit.h	/^  DeletedFileSet deleted_files_;$/;"	m	class:leveldb::VersionEdit
deleted_keys_	leveldb/util/cache_test.cc	/^  std::vector<int> deleted_keys_;$/;"	m	class:leveldb::CacheTest	file:
deleted_values_	leveldb/util/cache_test.cc	/^  std::vector<int> deleted_values_;$/;"	m	class:leveldb::CacheTest	file:
deleter	leveldb/util/cache.cc	/^  void (*deleter)(const Slice&, void* value);$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depcomp	secp256k1/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depcomp	univalue/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depth	qt/transactionrecord.h	/^    qint64 depth;$/;"	m	class:TransactionStatus
depth_limit	cuckoocache.h	/^    uint8_t depth_limit;$/;"	m	class:CuckooCache::cache
descendant_score	txmempool.h	/^struct descendant_score {};$/;"	s
describe	qt/transactiontablemodel.cpp	/^    QString describe(TransactionRecord *rec, int unit)$/;"	f	class:TransactionTablePriv
description	qt/wificoinunits.cpp	/^QString WiFicoinUnits::description(int unit)$/;"	f	class:WiFicoinUnits
descriptor_file_	leveldb/db/version_set.h	/^  WritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	leveldb/db/version_set.h	/^  log::Writer* descriptor_log_;$/;"	m	class:leveldb::VersionSet
deserialize_type	serialize.h	/^struct deserialize_type {};$/;"	s
desiredTarget	policy/fees.h	/^    int desiredTarget = 0;$/;"	m	struct:FeeCalculation
destChange	wallet/coincontrol.h	/^    CTxDestination destChange;$/;"	m	class:CCoinControl
dest_	leveldb/db/log_test.cc	/^  StringDest dest_;$/;"	m	class:leveldb::log::LogTest	file:
dest_	leveldb/db/log_writer.h	/^  WritableFile* dest_;$/;"	m	class:leveldb::log::Writer
destdata	wallet/wallet.h	/^    StringMap destdata;$/;"	m	class:CAddressBookData
destination	wallet/wallet.h	/^    CTxDestination destination;$/;"	m	struct:COutputEntry
destructor_	leveldb/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
destructor_	leveldb/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
detail	tinyformat.h	/^namespace detail {$/;"	n	namespace:tinyformat
details	qt/paymentrequestplus.h	/^    payments::PaymentDetails details;$/;"	m	class:PaymentRequestPlus
detectShutdown	qt/wificoingui.cpp	/^void WiFicoinGUI::detectShutdown()$/;"	f	class:WiFicoinGUI
difference_type	prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::const_iterator
difference_type	prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::const_reverse_iterator
difference_type	prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::iterator
difference_type	prevector.h	/^        typedef Diff difference_type;$/;"	t	class:prevector::reverse_iterator
difference_type	prevector.h	/^    typedef Diff difference_type;$/;"	t	class:prevector
difference_type	streams.h	/^    typedef vector_type::difference_type  difference_type;$/;"	t	class:CDataStream
difference_type	support/allocators/secure.h	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:secure_allocator
difference_type	support/allocators/zeroafterfree.h	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:zero_after_free_allocator
direct	prevector.h	/^        char direct[sizeof(T) * N];$/;"	m	union:prevector::direct_or_indirect
direct_or_indirect	prevector.h	/^    union direct_or_indirect {$/;"	u	class:prevector
direct_ptr	prevector.h	/^    T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }$/;"	f	class:prevector
direct_ptr	prevector.h	/^    const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }$/;"	f	class:prevector
direction_	leveldb/db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon20::DBIter	file:
direction_	leveldb/table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon36::MergingIterator	file:
disconnectSelectedNode	qt/rpcconsole.cpp	/^void RPCConsole::disconnectSelectedNode()$/;"	f	class:RPCConsole
disconnectViewHeadersSignals	qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
disconnected	torcontrol.cpp	/^    std::function<void(TorControlConnection&)> disconnected;$/;"	m	class:TorControlConnection	file:
disconnected_cb	torcontrol.cpp	/^void TorController::disconnected_cb(TorControlConnection& _conn)$/;"	f	class:TorController
disconnectnode	rpc/net.cpp	/^UniValue disconnectnode(const JSONRPCRequest& request)$/;"	f
disjoint_sorted_files_	leveldb/db/version_set_test.cc	/^  bool disjoint_sorted_files_;$/;"	m	class:leveldb::FindFileTest	file:
distcleancheck_listfiles	secp256k1/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distcleancheck_listfiles	univalue/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	secp256k1/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distdir	univalue/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	secp256k1/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
distuninstallcheck_listfiles	univalue/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
do_fuzz	test/test_wificoin_fuzzy.cpp	/^int do_fuzz()$/;"	f
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	secp256k1/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	univalue/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
done	leveldb/db/db_impl.cc	/^  bool done;$/;"	m	struct:leveldb::DBImpl::Writer	file:
done	leveldb/db/db_impl.h	/^    bool done;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
done	qt/addressbookpage.cpp	/^void AddressBookPage::done(int retval)$/;"	f	class:AddressBookPage
done_	leveldb/db/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::__anon18::Stats	file:
done_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
done_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
dragEnterEvent	qt/wificoingui.cpp	/^void WiFicoinGUI::dragEnterEvent(QDragEnterEvent *event)$/;"	f	class:WiFicoinGUI
dropEvent	qt/wificoingui.cpp	/^void WiFicoinGUI::dropEvent(QDropEvent *event)$/;"	f	class:WiFicoinGUI
dropped_bytes_	leveldb/db/log_test.cc	/^    size_t dropped_bytes_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
dst_	leveldb/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon19::CorruptionReporter	file:
dst_	leveldb/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon19::WriteBatchItemPrinter	file:
dummy	tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	m	struct:tinyformat::detail::is_convertible::fail
dummy	tinyformat.h	/^        struct succeed { char dummy; };$/;"	m	struct:tinyformat::detail::is_convertible::succeed
dummyChecker	script/sign.cpp	/^const DummySignatureChecker dummyChecker;$/;"	m	namespace:__anon103	file:
dummy_versions_	leveldb/db/version_set.h	/^  Version dummy_versions_;  \/\/ Head of circular doubly-linked list of versions.$/;"	m	class:leveldb::VersionSet
dummydata	qt/guiutil.cpp	/^static const uint8_t dummydata[] = {0xeb,0x15,0x23,0x1d,0xfc,0xeb,0x60,0x92,0x58,0x86,0xb6,0x7d,0x06,0x52,0x99,0x92,0x59,0x15,0xae,0xb1,0x72,0xc0,0x66,0x47};$/;"	m	namespace:GUIUtil	file:
dumpprivkey	wallet/rpcdump.cpp	/^UniValue dumpprivkey(const JSONRPCRequest& request)$/;"	f
dumpwallet	wallet/rpcdump.cpp	/^UniValue dumpwallet(const JSONRPCRequest& request)$/;"	f
dustRelayFee	policy/policy.cpp	/^CFeeRate dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);$/;"	v
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	secp256k1/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	univalue/Makefile	/^dvidir = ${docdir}$/;"	m
ec_group	secp256k1/src/bench_verify.c	/^    EC_GROUP* ec_group;$/;"	m	struct:__anon55	file:
ec_privkey_export_der	key.cpp	/^static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {$/;"	f	file:
ec_privkey_export_der	secp256k1/contrib/lax_der_privatekey_parsing.c	/^int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {$/;"	f
ec_privkey_import_der	key.cpp	/^static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {$/;"	f	file:
ec_privkey_import_der	secp256k1/contrib/lax_der_privatekey_parsing.c	/^int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {$/;"	f
ec_pubkey_parse_pointtest	secp256k1/src/tests.c	/^void ec_pubkey_parse_pointtest(const unsigned char *input, int xvalid, int yvalid) {$/;"	f
ecdsa_signature_parse_der_lax	pubkey.cpp	/^static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f	file:
ecdsa_signature_parse_der_lax	secp256k1/contrib/lax_der_parsing.c	/^int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f
echo	rpc/misc.cpp	/^UniValue echo(const JSONRPCRequest& request)$/;"	f
ecmult_const_chain_multiply	secp256k1/src/tests.c	/^void ecmult_const_chain_multiply(void) {$/;"	f
ecmult_const_commutativity	secp256k1/src/tests.c	/^void ecmult_const_commutativity(void) {$/;"	f
ecmult_const_mult_zero_one	secp256k1/src/tests.c	/^void ecmult_const_mult_zero_one(void) {$/;"	f
ecmult_const_random_mult	secp256k1/src/tests.c	/^void ecmult_const_random_mult(void) {$/;"	f
ecmult_ctx	secp256k1/src/secp256k1.c	/^    secp256k1_ecmult_context ecmult_ctx;$/;"	m	struct:secp256k1_context_struct	file:
ecmult_gen_ctx	secp256k1/src/secp256k1.c	/^    secp256k1_ecmult_gen_context ecmult_gen_ctx;$/;"	m	struct:secp256k1_context_struct	file:
edit	leveldb/db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
editLabel	qt/transactionview.cpp	/^void TransactionView::editLabel()$/;"	f	class:TransactionView
editStatus	qt/addresstablemodel.h	/^    EditStatus editStatus;$/;"	m	class:AddressTableModel
edit_	leveldb/db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon26::Repairer	file:
edit_	leveldb/db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
elapsed	versionbits.h	/^    int elapsed;$/;"	m	struct:BIP9Stats
elems_	leveldb/util/cache.cc	/^  uint32_t elems_;$/;"	m	class:leveldb::__anon13::HandleTable	file:
emitDataChanged	qt/addresstablemodel.cpp	/^void AddressTableModel::emitDataChanged(int idx)$/;"	f	class:AddressTableModel
empty	indirectmap.h	/^    bool empty() const              { return m.empty(); }$/;"	f	class:indirectmap
empty	leveldb/db/snapshot.h	/^  bool empty() const { return list_.next_ == &list_; }$/;"	f	class:leveldb::SnapshotList
empty	leveldb/include/leveldb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	leveldb/table/block_builder.h	/^  bool empty() const {$/;"	f	class:leveldb::BlockBuilder
empty	limitedmap.h	/^    bool empty() const { return map.empty(); }$/;"	f	class:limitedmap
empty	prevector.h	/^    bool empty() const {$/;"	f	class:prevector
empty	streams.h	/^    bool empty() const                               { return vch.size() == nReadPos; }$/;"	f	class:CDataStream
empty	univalue/include/univalue.h	/^    bool empty() const { return (values.size() == 0); }$/;"	f	class:UniValue
empty_wallet	wallet/test/wallet_tests.cpp	/^static void empty_wallet(void)$/;"	f	file:
enableWallet	qt/wificoingui.h	/^    bool enableWallet;$/;"	m	class:WiFicoinGUI
enabled	secp256k1/src/java/org/wificoin/Secp256k1Context.java	/^  private static final boolean enabled; \/\/true if the library is loaded$/;"	f	class:Secp256k1Context	file:
enc	crypto/aes.h	/^    const AES128Encrypt enc;$/;"	m	class:AES128CBCEncrypt
enc	crypto/aes.h	/^    const AES256Encrypt enc;$/;"	m	class:AES256CBCEncrypt
encryptWallet	qt/walletframe.cpp	/^void WalletFrame::encryptWallet(bool status)$/;"	f	class:WalletFrame
encryptWallet	qt/walletview.cpp	/^void WalletView::encryptWallet(bool status)$/;"	f	class:WalletView
encryptWalletAction	qt/wificoingui.h	/^    QAction *encryptWalletAction;$/;"	m	class:WiFicoinGUI
encryptwallet	wallet/rpcwallet.cpp	/^UniValue encryptwallet(const JSONRPCRequest& request)$/;"	f
end	indirectmap.h	/^    const_iterator end() const      { return m.end(); }$/;"	f	class:indirectmap
end	indirectmap.h	/^    iterator end()                  { return m.end(); }$/;"	f	class:indirectmap
end	key.h	/^    const unsigned char* end() const { return keydata.data() + size(); }$/;"	f	class:CKey
end	leveldb/db/db_impl.h	/^    const InternalKey* end;     \/\/ NULL means end of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
end	limitedmap.h	/^    const_iterator end() const { return map.end(); }$/;"	f	class:limitedmap
end	policy/fees.h	/^    double end = -1;$/;"	m	struct:EstimatorBucket
end	prevector.h	/^    const_iterator end() const { return const_iterator(item_ptr(size())); }$/;"	f	class:prevector
end	prevector.h	/^    iterator end() { return iterator(item_ptr(size())); }$/;"	f	class:prevector
end	pubkey.h	/^    const unsigned char* end() const { return vch + size(); }$/;"	f	class:CPubKey
end	serialize.h	/^    char* end() { return pend; }$/;"	f	class:CFlatData
end	serialize.h	/^    const char* end() const { return pend; }$/;"	f	class:CFlatData
end	streams.h	/^    const_iterator end() const                       { return vch.end(); }$/;"	f	class:CDataStream
end	streams.h	/^    iterator end()                                   { return vch.end(); }$/;"	f	class:CDataStream
end	support/lockedpool.h	/^    char* end;$/;"	m	class:Arena
end	uint256.h	/^    const unsigned char* end() const$/;"	f	class:base_blob
end	uint256.h	/^    unsigned char* end()$/;"	f	class:base_blob
end_	leveldb/db/dbformat.h	/^  const char* end_;$/;"	m	class:leveldb::LookupKey
end_of_buffer_offset_	leveldb/db/log_reader.h	/^  uint64_t end_of_buffer_offset_;$/;"	m	class:leveldb::log::Reader
entries_per_batch_	leveldb/db/db_bench.cc	/^  int entries_per_batch_;$/;"	m	class:leveldb::Benchmark	file:
entry	qt/recentrequeststablemodel.h	/^    const RecentRequestEntry &entry(int row) const { return list[row]; }$/;"	f	class:RecentRequestsTableModel
entryHeight	txmempool.h	/^    unsigned int entryHeight;  \/\/!< Chain height when entering the mempool$/;"	m	class:CTxMemPoolEntry
entryToJSON	rpc/blockchain.cpp	/^void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)$/;"	f
entry_time	txmempool.h	/^struct entry_time {};$/;"	s
env	leveldb/db/recovery_test.cc	/^  Env* env() const { return env_; }$/;"	f	class:leveldb::RecoveryTest
env	leveldb/include/leveldb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env	wallet/db.h	/^    CDBEnv *env;$/;"	m	class:CDB
env	wallet/db.h	/^    CDBEnv *env;$/;"	m	class:CWalletDBWrapper
env_	leveldb/db/corruption_test.cc	/^  test::ErrorEnv env_;$/;"	m	class:leveldb::CorruptionTest	file:
env_	leveldb/db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	leveldb/db/db_test.cc	/^  SpecialEnv* env_;$/;"	m	class:leveldb::DBTest	file:
env_	leveldb/db/fault_injection_test.cc	/^  FaultInjectionTestEnv* env_;$/;"	m	class:leveldb::FaultInjectionTest	file:
env_	leveldb/db/fault_injection_test.cc	/^  FaultInjectionTestEnv* env_;$/;"	m	class:leveldb::TestWritableFile	file:
env_	leveldb/db/recovery_test.cc	/^  Env* env_;$/;"	m	class:leveldb::RecoveryTest	file:
env_	leveldb/db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon26::Repairer	file:
env_	leveldb/db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	leveldb/db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
env_	leveldb/helpers/memenv/memenv_test.cc	/^  Env* env_;$/;"	m	class:leveldb::MemEnvTest	file:
env_	leveldb/util/env_posix_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvPosixTest	file:
env_	leveldb/util/env_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvTest	file:
eof	streams.h	/^    bool eof() const             { return size() == 0; }$/;"	f	class:CDataStream
eof	streams.h	/^    bool eof() const {$/;"	f	class:CBufferedFile
eof_	leveldb/db/log_reader.h	/^  bool eof_;   \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
epoch_check	cuckoocache.h	/^    void epoch_check()$/;"	f	class:CuckooCache::cache
epoch_flags	cuckoocache.h	/^    mutable std::vector<bool> epoch_flags;$/;"	m	class:CuckooCache::cache
epoch_heuristic_counter	cuckoocache.h	/^    uint32_t epoch_heuristic_counter;$/;"	m	class:CuckooCache::cache
epoch_size	cuckoocache.h	/^    uint32_t epoch_size;$/;"	m	class:CuckooCache::cache
equal_sets	wallet/test/wallet_tests.cpp	/^static bool equal_sets(CoinSet a, CoinSet b)$/;"	f	file:
erase	indirectmap.h	/^    size_type erase(const K& key)                   { return m.erase(&key); }$/;"	f	class:indirectmap
erase	limitedmap.h	/^    void erase(const key_type& k)$/;"	f	class:limitedmap
erase	prevector.h	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:prevector
erase	prevector.h	/^    iterator erase(iterator pos) {$/;"	f	class:prevector
erase	streams.h	/^    iterator erase(iterator first, iterator last)$/;"	f	class:CDataStream
erase	streams.h	/^    iterator erase(iterator it)$/;"	f	class:CDataStream
erase	test/prevector_tests.cpp	/^    void erase(Size first, Size last) {$/;"	f	class:prevector_tester
erase	test/prevector_tests.cpp	/^    void erase(Size position) {$/;"	f	class:prevector_tester
err	test/script_tests.cpp	/^    ScriptError_t err;$/;"	m	struct:ScriptErrorDesc	file:
error	wificoin-cli.cpp	/^    int error;$/;"	m	struct:HTTPReply	file:
error	util.h	/^bool error(const char* fmt, const Args&... args)$/;"	f
error	validation.h	/^    ScriptError error;$/;"	m	class:CScriptCheck
error_callback	secp256k1/src/secp256k1.c	/^    secp256k1_callback error_callback;$/;"	m	struct:secp256k1_context_struct	file:
error_if_exists	leveldb/include/leveldb/options.h	/^  bool error_if_exists;$/;"	m	struct:leveldb::Options
escapes	univalue/gen/gen.cpp	/^static std::string escapes[256];$/;"	v	file:
escapes	univalue/lib/univalue_escapes.h	/^static const char *escapes[256] = {$/;"	v
est	policy/fees.h	/^    EstimationResult est;$/;"	m	struct:FeeCalculation
estimateCombinedFee	policy/fees.cpp	/^double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const$/;"	f	class:CBlockPolicyEstimator
estimateConservativeFee	policy/fees.cpp	/^double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const$/;"	f	class:CBlockPolicyEstimator
estimateFee	policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const$/;"	f	class:CBlockPolicyEstimator
estimateRawFee	policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const$/;"	f	class:CBlockPolicyEstimator
estimateSmartFee	policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const$/;"	f	class:CBlockPolicyEstimator
estimatefee	rpc/mining.cpp	/^UniValue estimatefee(const JSONRPCRequest& request)$/;"	f
estimaterawfee	rpc/mining.cpp	/^UniValue estimaterawfee(const JSONRPCRequest& request)$/;"	f
estimatesmartfee	rpc/mining.cpp	/^UniValue estimatesmartfee(const JSONRPCRequest& request)$/;"	f
ev	httprpc.cpp	/^    HTTPEvent ev;$/;"	m	class:HTTPRPCTimer	file:
ev	httpserver.h	/^    struct event* ev;$/;"	m	class:HTTPEvent	typeref:struct:HTTPEvent::event
event	qt/askpassphrasedialog.cpp	/^bool AskPassphraseDialog::event(QEvent *event)$/;"	f	class:AskPassphraseDialog
event	qt/wificoinamountfield.cpp	/^    bool event(QEvent *event)$/;"	f	class:AmountSpinBox
event	qt/guiutil.h	/^        bool event(QEvent *e) {$/;"	f	class:GUIUtil::ProgressBar
event	qt/modaloverlay.cpp	/^bool ModalOverlay::event(QEvent* ev) {$/;"	f	class:ModalOverlay
event	support/events.h	/^MAKE_RAII(event);$/;"	v
eventBase	httpserver.cpp	/^static struct event_base* eventBase = 0;$/;"	v	typeref:struct:event_base	file:
eventFilter	qt/askpassphrasedialog.cpp	/^bool AskPassphraseDialog::eventFilter(QObject *object, QEvent *event)$/;"	f	class:AskPassphraseDialog
eventFilter	qt/wificoinamountfield.cpp	/^bool WiFicoinAmountField::eventFilter(QObject *object, QEvent *event)$/;"	f	class:WiFicoinAmountField
eventFilter	qt/wificoingui.cpp	/^bool WiFicoinGUI::eventFilter(QObject *object, QEvent *event)$/;"	f	class:WiFicoinGUI
eventFilter	qt/guiutil.cpp	/^bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)$/;"	f	class:GUIUtil::ToolTipToRichTextFilter
eventFilter	qt/modaloverlay.cpp	/^bool ModalOverlay::eventFilter(QObject * obj, QEvent * ev) {$/;"	f	class:ModalOverlay
eventFilter	qt/paymentserver.cpp	/^bool PaymentServer::eventFilter(QObject *object, QEvent *event)$/;"	f	class:PaymentServer
eventFilter	qt/rpcconsole.cpp	/^bool RPCConsole::eventFilter(QObject* obj, QEvent *event)$/;"	f	class:RPCConsole
eventFilter	qt/signverifymessagedialog.cpp	/^bool SignVerifyMessageDialog::eventFilter(QObject *object, QEvent *event)$/;"	f	class:SignVerifyMessageDialog
eventFilter	qt/splashscreen.cpp	/^bool SplashScreen::eventFilter(QObject * obj, QEvent * ev) {$/;"	f	class:SplashScreen
eventFilter	qt/transactionview.cpp	/^bool TransactionView::eventFilter(QObject *obj, QEvent *event)$/;"	f	class:TransactionView
eventHTTP	httpserver.cpp	/^struct evhttp* eventHTTP = 0;$/;"	v	typeref:struct:evhttp
event_base	support/events.h	/^MAKE_RAII(event_base);$/;"	v
eventcb	torcontrol.cpp	/^void TorControlConnection::eventcb(struct bufferevent *bev, short what, void *ctx)$/;"	f	class:TorControlConnection
events_	leveldb/util/env_test.cc	/^  std::string events_;$/;"	m	class:leveldb::EnvTest	file:
evhttp	support/events.h	/^MAKE_RAII(evhttp);$/;"	v
evhttp_connection	support/events.h	/^MAKE_RAII(evhttp_connection);$/;"	v
evhttp_request	support/events.h	/^MAKE_RAII(evhttp_request);$/;"	v
exactMatch	httpserver.cpp	/^    bool exactMatch;$/;"	m	struct:HTTPPathHandler	file:
exec	qt/sendcoinsdialog.cpp	/^int SendConfirmationDialog::exec()$/;"	f	class:SendConfirmationDialog
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	secp256k1/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	univalue/Makefile	/^exec_prefix = ${prefix}$/;"	m
execute	rpc/server.cpp	/^UniValue CRPCTable::execute(const JSONRPCRequest &request) const$/;"	f	class:CRPCTable
exhaustive_tests_CPPFLAGS	secp256k1/Makefile	/^exhaustive_tests_CPPFLAGS =  \\$/;"	m
exhaustive_tests_DEPENDENCIES	secp256k1/Makefile	/^exhaustive_tests_DEPENDENCIES =  \\$/;"	m
exhaustive_tests_LDADD	secp256k1/Makefile	/^exhaustive_tests_LDADD = $(SECP_LIBS)$/;"	m
exhaustive_tests_LDFLAGS	secp256k1/Makefile	/^exhaustive_tests_LDFLAGS = -static$/;"	m
exhaustive_tests_LINK	secp256k1/Makefile	/^exhaustive_tests_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\$/;"	m
exhaustive_tests_OBJECTS	secp256k1/Makefile	/^exhaustive_tests_OBJECTS = $(am_exhaustive_tests_OBJECTS)$/;"	m
exhaustive_tests_SOURCES	secp256k1/Makefile	/^exhaustive_tests_SOURCES = src\/tests_exhaustive.c$/;"	m
exists	txmempool.h	/^    bool exists(uint256 hash) const$/;"	f	class:CTxMemPool
exists	univalue/include/univalue.h	/^    bool exists(const std::string& key) const { return (findKey(key) >= 0); }$/;"	f	class:UniValue
exp_addrType	test/base58_tests.cpp	/^    std::string exp_addrType;$/;"	m	class:TestAddrTypeVisitor	file:
exp_payload	test/base58_tests.cpp	/^    std::vector<unsigned char> exp_payload;$/;"	m	class:TestPayloadVisitor	file:
expect	univalue/lib/univalue_read.cpp	245;"	d	file:
expect_bits	univalue/lib/univalue_read.cpp	/^enum expect_bits {$/;"	g	file:
exportClicked	qt/transactionview.cpp	/^void TransactionView::exportClicked()$/;"	f	class:TransactionView
exportImage	qt/receiverequestdialog.cpp	/^QImage QRImageWidget::exportImage()$/;"	f	class:QRImageWidget
extend	support/lockedpool.cpp	/^template <class Iterator, class Pair> bool extend(Iterator it, const Pair& other) {$/;"	f
extra_count	blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
extra_txn	test/blockencodings_tests.cpp	/^std::vector<std::pair<uint256, CTransactionRef>> extra_txn;$/;"	v
extract	secp256k1/src/scalar_4x64_impl.h	255;"	d
extract	secp256k1/src/scalar_4x64_impl.h	888;"	d
extract	secp256k1/src/scalar_8x32_impl.h	334;"	d
extract	secp256k1/src/scalar_8x32_impl.h	644;"	d
extract_fast	secp256k1/src/scalar_4x64_impl.h	263;"	d
extract_fast	secp256k1/src/scalar_4x64_impl.h	889;"	d
extract_fast	secp256k1/src/scalar_8x32_impl.h	342;"	d
extract_fast	secp256k1/src/scalar_8x32_impl.h	645;"	d
extranonce	test/miner_tests.cpp	/^    unsigned char extranonce;$/;"	m	struct:__anon81	file:
f	qt/callback.h	/^    F f;$/;"	m	class:FunctionCallback
f1	crypto/ripemd160.cpp	/^uint32_t inline f1(uint32_t x, uint32_t y, uint32_t z) { return x ^ y ^ z; }$/;"	f	namespace:__anon89::ripemd160
f1	crypto/sha1.cpp	/^uint32_t inline f1(uint32_t b, uint32_t c, uint32_t d) { return d ^ (b & (c ^ d)); }$/;"	f	namespace:__anon90::sha1
f2	crypto/ripemd160.cpp	/^uint32_t inline f2(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (~x & z); }$/;"	f	namespace:__anon89::ripemd160
f2	crypto/sha1.cpp	/^uint32_t inline f2(uint32_t b, uint32_t c, uint32_t d) { return b ^ c ^ d; }$/;"	f	namespace:__anon90::sha1
f3	crypto/ripemd160.cpp	/^uint32_t inline f3(uint32_t x, uint32_t y, uint32_t z) { return (x | ~y) ^ z; }$/;"	f	namespace:__anon89::ripemd160
f3	crypto/sha1.cpp	/^uint32_t inline f3(uint32_t b, uint32_t c, uint32_t d) { return (b & c) | (d & (b | c)); }$/;"	f	namespace:__anon90::sha1
f4	crypto/ripemd160.cpp	/^uint32_t inline f4(uint32_t x, uint32_t y, uint32_t z) { return (x & z) | (y & ~z); }$/;"	f	namespace:__anon89::ripemd160
f5	crypto/ripemd160.cpp	/^uint32_t inline f5(uint32_t x, uint32_t y, uint32_t z) { return x ^ (y | ~z); }$/;"	f	namespace:__anon89::ripemd160
fAbortRescan	wallet/wallet.h	/^    std::atomic<bool> fAbortRescan;$/;"	m	class:CWallet
fAcceptDatacarrier	script/standard.cpp	/^bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;$/;"	v
fAddressesInitialized	net.h	/^    bool fAddressesInitialized;$/;"	m	class:CConnman
fAllOk	checkqueue.h	/^    bool fAllOk;$/;"	m	class:CCheckQueue
fAllowOtherInputs	wallet/coincontrol.h	/^    bool fAllowOtherInputs;$/;"	m	class:CCoinControl
fAllowWatchOnly	wallet/coincontrol.h	/^    bool fAllowWatchOnly;$/;"	m	class:CCoinControl
fAnyUnordered	wallet/walletdb.cpp	/^    bool fAnyUnordered;$/;"	m	class:CWalletScanState	file:
fAnyoneCanPay	script/interpreter.cpp	/^    const bool fAnyoneCanPay;  \/\/!< whether the hashtype has the SIGHASH_ANYONECANPAY flag set$/;"	m	class:__anon99::CTransactionSignatureSerializer	file:
fAvailableCreditCached	wallet/wallet.h	/^    mutable bool fAvailableCreditCached;$/;"	m	class:CWalletTx
fAvailableWatchCreditCached	wallet/wallet.h	/^    mutable bool fAvailableWatchCreditCached;$/;"	m	class:CWalletTx
fBad	merkleblock.h	/^    bool fBad;$/;"	m	class:CPartialMerkleTree
fBloomFilter	net.cpp	/^    bool fBloomFilter;$/;"	m	struct:NodeEvictionCandidate	file:
fBroadcastTransactions	wallet/wallet.h	/^    bool fBroadcastTransactions;$/;"	m	class:CWallet
fCapsLock	qt/askpassphrasedialog.h	/^    bool fCapsLock;$/;"	m	class:AskPassphraseDialog
fChangeCached	wallet/wallet.h	/^    mutable bool fChangeCached;$/;"	m	class:CWalletTx
fCheckBlockIndex	validation.cpp	/^bool fCheckBlockIndex = false;$/;"	v
fCheckForPruning	validation.cpp	/^    bool fCheckForPruning = false;$/;"	m	namespace:__anon43	file:
fChecked	primitives/block.h	/^    mutable bool fChecked;$/;"	m	class:CBlock
fCheckpointsEnabled	validation.cpp	/^bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;$/;"	v
fClient	net.h	/^    bool fClient;$/;"	m	class:CNode
fCoinBase	txdb.cpp	/^    bool fCoinBase;$/;"	m	class:__anon77::CCoins	file:
fCoinControlFeatures	qt/optionsmodel.h	/^    bool fCoinControlFeatures;$/;"	m	class:OptionsModel
fCompressed	key.h	/^    bool fCompressed;$/;"	m	class:CKey
fConnected	net.h	/^    bool fConnected;$/;"	m	struct:AddedNodeInfo
fCreateBlank	wificoin-tx.cpp	/^static bool fCreateBlank;$/;"	v	file:
fCreditCached	wallet/wallet.h	/^    mutable bool fCreditCached;$/;"	m	class:CWalletTx
fCurrentlyConnected	net_processing.cpp	/^    bool fCurrentlyConnected;$/;"	m	struct:__anon50::CNodeState	file:
fDbEnvInit	wallet/db.h	/^    bool fDbEnvInit;$/;"	m	class:CDBEnv
fDebitCached	wallet/wallet.h	/^    mutable bool fDebitCached;$/;"	m	class:CWalletTx
fDecryptionThoroughlyChecked	wallet/crypter.h	/^    bool fDecryptionThoroughlyChecked;$/;"	m	class:CCryptoKeyStore
fDefaultConsistencyChecks	chainparams.h	/^    bool fDefaultConsistencyChecks;$/;"	m	class:CChainParams
fDisconnect	net.h	/^    std::atomic_bool fDisconnect;$/;"	m	class:CNode
fDiscover	net.cpp	/^bool fDiscover = true;$/;"	v
fDone	checkqueue.h	/^    bool fDone;$/;"	m	class:CCheckQueueControl
fEnableReplacement	validation.cpp	/^bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;$/;"	v
fFeeEstimatesInitialized	init.cpp	/^bool fFeeEstimatesInitialized = false;$/;"	v
fFeeMinimized	qt/sendcoinsdialog.h	/^    bool fFeeMinimized;$/;"	m	class:SendCoinsDialog
fFeeler	net.h	/^    bool fFeeler; \/\/ If true this node is being used as a short lived feeler.$/;"	m	class:CNode
fFlushOnClose	wallet/db.h	/^    bool fFlushOnClose;$/;"	m	class:CDB
fFlushScheduled	wallet/wallet.h	/^    static std::atomic<bool> fFlushScheduled;$/;"	m	class:CWallet
fForceCheckBalanceChanged	qt/walletmodel.h	/^    bool fForceCheckBalanceChanged;$/;"	m	class:WalletModel
fFromMe	wallet/wallet.h	/^    char fFromMe;$/;"	m	class:CWalletTx
fGetAddr	net.h	/^    bool fGetAddr;$/;"	m	class:CNode
fHashNone	script/interpreter.cpp	/^    const bool fHashNone;      \/\/!< whether the hashtype is SIGHASH_NONE$/;"	m	class:__anon99::CTransactionSignatureSerializer	file:
fHashSingle	script/interpreter.cpp	/^    const bool fHashSingle;    \/\/!< whether the hashtype is SIGHASH_SINGLE$/;"	m	class:__anon99::CTransactionSignatureSerializer	file:
fHaveGenesis	init.cpp	/^static bool fHaveGenesis = false;$/;"	v	file:
fHaveGrant	sync.h	/^    bool fHaveGrant;$/;"	m	class:CSemaphoreGrant
fHavePruned	validation.cpp	/^bool fHavePruned = false;$/;"	v
fHaveWatchOnly	qt/walletmodel.h	/^    bool fHaveWatchOnly;$/;"	m	class:WalletModel
fHaveWitness	net_processing.cpp	/^    bool fHaveWitness;$/;"	m	struct:__anon50::CNodeState	file:
fHelp	rpc/server.h	/^    bool fHelp;$/;"	m	class:JSONRPCRequest
fHideTrayIcon	qt/optionsmodel.h	/^    bool fHideTrayIcon;$/;"	m	class:OptionsModel
fImmatureCreditCached	wallet/wallet.h	/^    mutable bool fImmatureCreditCached;$/;"	m	class:CWalletTx
fImmatureWatchCreditCached	wallet/wallet.h	/^    mutable bool fImmatureWatchCreditCached;$/;"	m	class:CWalletTx
fInTried	addrman.h	/^    bool fInTried;$/;"	m	class:CAddrInfo
fInbound	net.h	/^    bool fInbound;$/;"	m	class:CNodeStats
fInbound	net.h	/^    bool fInbound;$/;"	m	struct:AddedNodeInfo
fInbound	net.h	/^    const bool fInbound;$/;"	m	class:CNode
fIncludeWitness	miner.h	/^    bool fIncludeWitness;$/;"	m	class:BlockAssembler
fInternal	wallet/wallet.h	/^    bool fInternal; \/\/ for change outputs$/;"	m	class:CKeyPool
fInternal	wallet/wallet.h	/^    bool fInternal;$/;"	m	class:CReserveKey
fIsBareMultisigStd	validation.cpp	/^bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;$/;"	v
fIsEncrypted	wallet/walletdb.cpp	/^    bool fIsEncrypted;$/;"	m	class:CWalletScanState	file:
fIsWatchonly	wallet/rpcwallet.cpp	/^    bool fIsWatchonly;$/;"	m	struct:tallyitem	file:
fKeySet	wallet/crypter.h	/^    bool fKeySet;$/;"	m	class:CCrypter
fLargeWorkForkFound	warnings.cpp	/^bool fLargeWorkForkFound = false;$/;"	v
fLargeWorkInvalidChainFound	warnings.cpp	/^bool fLargeWorkInvalidChainFound = false;$/;"	v
fListen	net.cpp	/^bool fListen = true;$/;"	v
fLogIPs	util.cpp	/^bool fLogIPs = DEFAULT_LOGIPS;$/;"	v
fLogTimeMicros	util.cpp	/^bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;$/;"	v
fLogTimestamps	util.cpp	/^bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;$/;"	v
fMax	qt/trafficgraphwidget.h	/^    float fMax;$/;"	m	class:TrafficGraphWidget
fMineBlocksOnDemand	chainparams.h	/^    bool fMineBlocksOnDemand;$/;"	m	class:CChainParams
fMinimizeOnClose	qt/optionsmodel.h	/^    bool fMinimizeOnClose;$/;"	m	class:OptionsModel
fMinimizeToTray	qt/optionsmodel.h	/^    bool fMinimizeToTray;$/;"	m	class:OptionsModel
fMockDb	wallet/db.h	/^    bool fMockDb;$/;"	m	class:CDBEnv
fMsgProcWake	net.h	/^    bool fMsgProcWake;$/;"	m	class:CConnman
fNameLookup	netbase.cpp	/^bool fNameLookup = DEFAULT_NAME_LOOKUP;$/;"	v
fNetworkActive	net.h	/^    std::atomic<bool> fNetworkActive;$/;"	m	class:CConnman
fNewRecipientAllowed	qt/sendcoinsdialog.h	/^    bool fNewRecipientAllowed;$/;"	m	class:SendCoinsDialog
fNodeStateStatsAvailable	qt/peertablemodel.h	/^    bool fNodeStateStatsAvailable;$/;"	m	struct:CNodeCombinedStats
fOneShot	net.h	/^    bool fOneShot;$/;"	m	class:CNode
fOverrideFeeRate	wallet/coincontrol.h	/^    bool fOverrideFeeRate;$/;"	m	class:CCoinControl
fPauseRecv	net.h	/^    std::atomic_bool fPauseRecv;$/;"	m	class:CNode
fPauseSend	net.h	/^    std::atomic_bool fPauseSend;$/;"	m	class:CNode
fPingQueued	net.h	/^    std::atomic<bool> fPingQueued;$/;"	m	class:CNode
fPowAllowMinDifficultyBlocks	consensus/params.h	/^    bool fPowAllowMinDifficultyBlocks;$/;"	m	struct:Consensus::Params
fPowNoRetargeting	consensus/params.h	/^    bool fPowNoRetargeting;$/;"	m	struct:Consensus::Params
fPreferHeaderAndIDs	net_processing.cpp	/^    bool fPreferHeaderAndIDs;$/;"	m	struct:__anon50::CNodeState	file:
fPreferHeaders	net_processing.cpp	/^    bool fPreferHeaders;$/;"	m	struct:__anon50::CNodeState	file:
fPreferredDownload	net_processing.cpp	/^    bool fPreferredDownload;$/;"	m	struct:__anon50::CNodeState	file:
fPrintToConsole	util.cpp	/^bool fPrintToConsole = false;$/;"	v
fPrintToDebugLog	util.cpp	/^bool fPrintToDebugLog = true;$/;"	v
fProcessingQueuedTransactions	qt/transactiontablemodel.h	/^    bool fProcessingQueuedTransactions;$/;"	m	class:TransactionTableModel
fProvidesHeaderAndIDs	net_processing.cpp	/^    bool fProvidesHeaderAndIDs;$/;"	m	struct:__anon50::CNodeState	file:
fPruneMode	validation.cpp	/^bool fPruneMode = false;$/;"	v
fQueueNotifications	qt/transactiontablemodel.cpp	/^static bool fQueueNotifications = false;$/;"	v	file:
fQuit	checkqueue.h	/^    bool fQuit;$/;"	m	class:CCheckQueue
fRPCInWarmup	rpc/server.cpp	/^static bool fRPCInWarmup = true;$/;"	v	file:
fRPCRunning	rpc/server.cpp	/^static bool fRPCRunning = false;$/;"	v	file:
fReadOnly	wallet/db.h	/^    bool fReadOnly;$/;"	m	class:CDB
fReindex	validation.cpp	/^bool fReindex = false;$/;"	v
fRelayTxes	net.cpp	/^    bool fRelayTxes;$/;"	m	struct:NodeEvictionCandidate	file:
fRelayTxes	net.cpp	/^bool fRelayTxes = true;$/;"	v
fRelayTxes	net.h	/^    bool fRelayTxes; \/\/protected by cs_filter$/;"	m	class:CNode
fRelayTxes	net.h	/^    bool fRelayTxes;$/;"	m	class:CNodeStats
fRelevantServices	net.cpp	/^    bool fRelevantServices;$/;"	m	struct:NodeEvictionCandidate	file:
fRequireStandard	chainparams.h	/^    bool fRequireStandard;$/;"	m	class:CChainParams
fRequireStandard	validation.cpp	/^bool fRequireStandard = true;$/;"	v
fSafe	wallet/wallet.h	/^    bool fSafe;$/;"	m	class:COutput
fScanningWallet	wallet/wallet.h	/^    std::atomic<bool> fScanningWallet;$/;"	m	class:CWallet
fSendMempool	net.h	/^    bool fSendMempool;$/;"	m	class:CNode
fSentAddr	net.h	/^    bool fSentAddr;$/;"	m	class:CNode
fShouldBan	net_processing.cpp	/^    bool fShouldBan;$/;"	m	struct:__anon50::CNodeState	file:
fSolvable	wallet/wallet.h	/^    bool fSolvable;$/;"	m	class:COutput
fSpendable	wallet/wallet.h	/^    bool fSpendable;$/;"	m	class:COutput
fSubtractFeeFromAmount	qt/coincontroldialog.cpp	/^bool CoinControlDialog::fSubtractFeeFromAmount = false;$/;"	m	class:CoinControlDialog	file:
fSubtractFeeFromAmount	qt/coincontroldialog.h	/^    static bool fSubtractFeeFromAmount;$/;"	m	class:CoinControlDialog
fSubtractFeeFromAmount	qt/walletmodel.h	/^    bool fSubtractFeeFromAmount; \/\/ memory only$/;"	m	class:SendCoinsRecipient
fSubtractFeeFromAmount	wallet/wallet.h	/^    bool fSubtractFeeFromAmount;$/;"	m	struct:CRecipient
fSuccessfullyConnected	net.h	/^    std::atomic_bool fSuccessfullyConnected;$/;"	m	class:CNode
fSupportsDesiredCmpctVersion	net_processing.cpp	/^    bool fSupportsDesiredCmpctVersion;$/;"	m	struct:__anon50::CNodeState	file:
fSyncStarted	net_processing.cpp	/^    bool fSyncStarted;$/;"	m	struct:__anon50::CNodeState	file:
fTimeReceivedIsTxTime	wallet/wallet.h	/^    unsigned int fTimeReceivedIsTxTime;$/;"	m	class:CWalletTx
fTry	sync.cpp	/^    bool fTry;$/;"	m	struct:CLockLocation	file:
fTxIndex	validation.cpp	/^bool fTxIndex = false;$/;"	v
fUseCrypto	wallet/crypter.h	/^    bool fUseCrypto;$/;"	m	class:CCryptoKeyStore
fValid	key.h	/^    bool fValid;$/;"	m	class:CKey
fValidatedHeaders	net_processing.cpp	/^        bool fValidatedHeaders;                                  \/\/!< Whether this block has validated headers at the time of request.$/;"	m	struct:__anon49::QueuedBlock	file:
fWalletRbf	wallet/wallet.cpp	/^bool fWalletRbf = DEFAULT_WALLET_RBF;$/;"	v
fWantsCmpctWitness	net_processing.cpp	/^    bool fWantsCmpctWitness;$/;"	m	struct:__anon50::CNodeState	file:
fWatchCreditCached	wallet/wallet.h	/^    mutable bool fWatchCreditCached;$/;"	m	class:CWalletTx
fWatchDebitCached	wallet/wallet.h	/^    mutable bool fWatchDebitCached;$/;"	m	class:CWalletTx
fWhitelisted	net.h	/^    bool fWhitelisted; \/\/ This peer can bypass DoS banning.$/;"	m	class:CNode
fWhitelisted	net.h	/^    bool fWhitelisted;$/;"	m	class:CNodeStats
fWitnessesPresentInMostRecentCompactBlock	net_processing.cpp	/^static bool fWitnessesPresentInMostRecentCompactBlock;$/;"	v	file:
f_assert	univalue/test/unitester.cpp	25;"	d	file:
factor	qt/wificoinunits.cpp	/^qint64 WiFicoinUnits::factor(int unit)$/;"	f	class:WiFicoinUnits
fail	policy/fees.h	/^    EstimatorBucket fail;$/;"	m	struct:EstimationResult
fail	tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	s	struct:tinyformat::detail::is_convertible
failAvg	policy/fees.cpp	/^    std::vector<std::vector<double>> failAvg; \/\/ failAvg[Y][X]$/;"	m	class:TxConfirmStats	file:
fails	test/checkqueue_tests.cpp	/^    bool fails;$/;"	m	struct:FailingCheck	file:
fake_allocated_memory	test/checkqueue_tests.cpp	/^    static std::atomic<size_t> fake_allocated_memory;$/;"	m	struct:MemoryCheck	file:
fake_filter_result	leveldb/db/c_test.c	/^static unsigned char fake_filter_result = 1;$/;"	v	file:
fallbackFee	wallet/wallet.cpp	/^CFeeRate CWallet::fallbackFee = CFeeRate(DEFAULT_FALLBACK_FEE);$/;"	m	class:CWallet	file:
fallbackFee	wallet/wallet.h	/^    static CFeeRate fallbackFee;$/;"	m	class:CWallet
fclose	streams.h	/^    void fclose()$/;"	f	class:CAutoFile
fclose	streams.h	/^    void fclose()$/;"	f	class:CBufferedFile
fd	bench/perf.cpp	/^static int fd = -1;$/;"	v	file:
fd_	leveldb/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon11::PosixFileLock	file:
fd_	leveldb/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon11::PosixRandomAccessFile	file:
fd_limit_	leveldb/util/env_posix.cc	/^  Limiter fd_limit_;$/;"	m	class:leveldb::__anon11::PosixEnv	file:
fdatasync	leveldb/port/port_posix.h	65;"	d
fdatasync	leveldb/port/port_posix.h	69;"	d
fdatasync	leveldb/port/port_posix.h	75;"	d
fe_memcmp	secp256k1/src/tests.c	/^int fe_memcmp(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
fe_x	secp256k1/src/bench_internal.c	/^    secp256k1_fe fe_x, fe_y;$/;"	m	struct:__anon66	file:
fe_y	secp256k1/src/bench_internal.c	/^    secp256k1_fe fe_x, fe_y;$/;"	m	struct:__anon66	file:
fee	qt/walletmodeltransaction.h	/^    CAmount fee;$/;"	m	class:WalletModelTransaction
feeDelta	txmempool.h	/^    int64_t feeDelta;          \/\/!< Used for determining the priority of the transaction for mining in a block$/;"	m	class:CTxMemPoolEntry
feeDelta	txmempool.h	/^    int64_t feeDelta;$/;"	m	struct:update_fee_delta
feeEstimator	validation.cpp	/^CBlockPolicyEstimator feeEstimator;$/;"	v
feeEstimator	validation.cpp	/^CTxMemPool mempool(&feeEstimator);$/;"	v
feeRate	txmempool.h	/^    CFeeRate feeRate;$/;"	m	struct:TxMempoolInfo
feeStats	policy/fees.h	/^    TxConfirmStats* feeStats;$/;"	m	class:CBlockPolicyEstimator
feeset	policy/fees.h	/^    std::set<double> feeset;$/;"	m	class:FeeFilterRounder
fetchPaymentACK	qt/paymentserver.cpp	/^void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipient, QByteArray transaction)$/;"	f	class:PaymentServer
fetchRequest	qt/paymentserver.cpp	/^void PaymentServer::fetchRequest(const QUrl& url)$/;"	f	class:PaymentServer
fflush_unlocked	leveldb/port/port_posix.h	59;"	d
file	leveldb/db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile	file:
file	leveldb/table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep	file:
file	leveldb/table/table_builder.cc	/^  WritableFile* file;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
file	streams.h	/^    FILE* file;	$/;"	m	class:CAutoFile
file_	leveldb/db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon16::RandomAccessFileImpl	file:
file_	leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon16::SequentialFileImpl	file:
file_	leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon16::WritableFileImpl	file:
file_	leveldb/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon11::PosixSequentialFile	file:
file_	leveldb/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon11::PosixWritableFile	file:
file_	leveldb/util/posix_logger.h	/^  FILE* file_;$/;"	m	class:leveldb::PosixLogger
file_map_	leveldb/helpers/memenv/memenv.cc	/^  FileSystem file_map_;  \/\/ Protected by mutex_.$/;"	m	class:leveldb::__anon16::InMemoryEnv	file:
file_size	leveldb/db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
file_size	leveldb/db/version_edit.h	/^  uint64_t file_size;         \/\/ File size in bytes$/;"	m	struct:leveldb::FileMetaData
file_to_compact_	leveldb/db/version_set.h	/^  FileMetaData* file_to_compact_;$/;"	m	class:leveldb::Version
file_to_compact_level_	leveldb/db/version_set.h	/^  int file_to_compact_level_;$/;"	m	class:leveldb::Version
filename	qt/csvmodelwriter.h	/^    QString filename;$/;"	m	class:CSVModelWriter
filename_	leveldb/db/fault_injection_test.cc	/^  std::string filename_;$/;"	m	struct:leveldb::__anon21::FileState	file:
filename_	leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon11::PosixMmapReadableFile	file:
filename_	leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon11::PosixRandomAccessFile	file:
filename_	leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon11::PosixSequentialFile	file:
filename_	leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon11::PosixWritableFile	file:
filename_	leveldb/util/env_win.cc	/^    std::string filename_;$/;"	m	class:leveldb::Win32::Win32WritableFile	file:
filenames	univalue/test/unitester.cpp	/^static const char *filenames[] = {$/;"	v	file:
fileout	util.cpp	/^static FILE* fileout = nullptr;$/;"	v	file:
files_	leveldb/db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels];$/;"	m	class:leveldb::Version
files_	leveldb/db/version_set_test.cc	/^  std::vector<FileMetaData*> files_;$/;"	m	class:leveldb::FindFileTest	file:
filesystem_active_	leveldb/db/fault_injection_test.cc	/^  bool filesystem_active_;  \/\/ Record flushes, syncs, writes$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
fill_cache	leveldb/include/leveldb/options.h	/^  bool fill_cache;$/;"	m	struct:leveldb::ReadOptions
filter	leveldb/table/table.cc	/^  FilterBlockReader* filter;$/;"	m	struct:leveldb::Table::Rep	file:
filter	qt/overviewpage.h	/^    std::unique_ptr<TransactionFilterProxy> filter;$/;"	m	class:OverviewPage
filterAcceptsRow	qt/transactionfilterproxy.cpp	/^bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &sourceParent) const$/;"	f	class:TransactionFilterProxy
filterInventoryKnown	net.h	/^    CRollingBloomFilter filterInventoryKnown;$/;"	m	class:CNode
filter_	leveldb/util/bloom_test.cc	/^  std::string filter_;$/;"	m	class:leveldb::BloomTest	file:
filter_block	leveldb/table/table_builder.cc	/^  FilterBlockBuilder* filter_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
filter_data	leveldb/table/table.cc	/^  const char* filter_data;$/;"	m	struct:leveldb::Table::Rep	file:
filter_offsets_	leveldb/table/filter_block.h	/^  std::vector<uint32_t> filter_offsets_;$/;"	m	class:leveldb::FilterBlockBuilder
filter_policy	leveldb/include/leveldb/options.h	/^  const FilterPolicy* filter_policy;$/;"	m	struct:leveldb::Options
filter_policy_	leveldb/db/db_bench.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::Benchmark	file:
filter_policy_	leveldb/db/db_test.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBTest	file:
finalize	univalue/lib/univalue_utffilter.h	/^    bool finalize()$/;"	f	class:JSONUTF8StringFilter
find	indirectmap.h	/^    const_iterator find(const K& key) const         { return m.find(&key); }$/;"	f	class:indirectmap
find	indirectmap.h	/^    iterator find(const K& key)                     { return m.find(&key); }$/;"	f	class:indirectmap
find	limitedmap.h	/^    const_iterator find(const key_type& k) const { return map.find(k); }$/;"	f	class:limitedmap
findKey	univalue/lib/univalue.cpp	/^int UniValue::findKey(const std::string& key) const$/;"	f	class:UniValue
findSighashFlags	wificoin-tx.cpp	/^static bool findSighashFlags(int& flags, const std::string& flagStr)$/;"	f	file:
findStartupItemInList	qt/guiutil.cpp	/^LSSharedFileListItemRef findStartupItemInList(LSSharedFileListRef list, CFURLRef findUrl)$/;"	f	namespace:GUIUtil
find_value	univalue/lib/univalue.cpp	/^const UniValue& find_value(const UniValue& obj, const std::string& name)$/;"	f
finish_	leveldb/db/db_bench.cc	/^  double finish_;$/;"	m	class:leveldb::__anon18::Stats	file:
finished_	leveldb/table/block_builder.h	/^  bool                  finished_;    \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
firstRecordedHeight	policy/fees.h	/^    unsigned int firstRecordedHeight;$/;"	m	class:CBlockPolicyEstimator
fixedPitchFont	qt/guiutil.cpp	/^QFont fixedPitchFont()$/;"	f	namespace:GUIUtil
fixup	qt/wificoinamountfield.cpp	/^    void fixup(QString &input) const$/;"	f	class:AmountSpinBox
flag	threadinterrupt.h	/^    std::atomic<bool> flag;$/;"	m	class:CThreadInterrupt
flag	util.cpp	/^    uint32_t flag;$/;"	m	struct:CLogCategoryDesc	file:
flagInterruptMsgProc	net.h	/^    std::atomic<bool> flagInterruptMsgProc;$/;"	m	class:CConnman
flagStr	wificoin-tx.cpp	/^    const char *flagStr;$/;"	m	struct:__anon45	file:
flags	wificoin-tx.cpp	/^    int flags;$/;"	m	struct:__anon45	file:
flags	coins.h	/^    unsigned char flags;$/;"	m	struct:CCoinsCacheEntry
flags	qt/addresstablemodel.cpp	/^Qt::ItemFlags AddressTableModel::flags(const QModelIndex &index) const$/;"	f	class:AddressTableModel
flags	qt/bantablemodel.cpp	/^Qt::ItemFlags BanTableModel::flags(const QModelIndex &index) const$/;"	f	class:BanTableModel
flags	qt/peertablemodel.cpp	/^Qt::ItemFlags PeerTableModel::flags(const QModelIndex &index) const$/;"	f	class:PeerTableModel
flags	qt/recentrequeststablemodel.cpp	/^Qt::ItemFlags RecentRequestsTableModel::flags(const QModelIndex &index) const$/;"	f	class:RecentRequestsTableModel
flags	test/script_tests.cpp	/^    int flags;$/;"	m	class:__anon80::TestBuilder	file:
flist_	leveldb/db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std	file:
fn	secp256k1/src/util.h	/^    void (*fn)(const char *text, void* data);$/;"	m	struct:__anon64
fname_	leveldb/util/testharness.h	/^  const char* fname_;$/;"	m	class:leveldb::test::Tester
focusInEvent	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::focusInEvent(QFocusEvent *evt)$/;"	f	class:QValidatedLineEdit
focusOutEvent	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::focusOutEvent(QFocusEvent *evt)$/;"	f	class:QValidatedLineEdit
focusTransaction	qt/transactionview.cpp	/^void TransactionView::focusTransaction(const QModelIndex &idx)$/;"	f	class:TransactionView
fontBigger	qt/rpcconsole.cpp	/^void RPCConsole::fontBigger()$/;"	f	class:RPCConsole
fontSizeSettingsKey	qt/rpcconsole.cpp	/^const char fontSizeSettingsKey[] = "consoleFontSize";$/;"	v
fontSmaller	qt/rpcconsole.cpp	/^void RPCConsole::fontSmaller()$/;"	f	class:RPCConsole
fopen	fs.cpp	/^FILE *fopen(const fs::path& p, const char *mode)$/;"	f	namespace:fsbridge
force_error_	leveldb/db/log_test.cc	/^    bool force_error_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
format	qt/wificoinunits.cpp	/^QString WiFicoinUnits::format(int unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators)$/;"	f	class:WiFicoinUnits
format	tinyformat.h	/^        void format(std::ostream& out, const char* fmtBegin,$/;"	f	class:tinyformat::detail::FormatArg
format	tinyformat.h	/^inline std::string format(const char* fmt)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^inline void format(std::ostream& out, const char* fmt)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^std::string format(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^std::string format(const std::string &fmt, const Args&... args)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^void format(std::ostream& out, const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
formatWiFicoinURI	qt/guiutil.cpp	/^QString formatWiFicoinURI(const SendCoinsRecipient &info)$/;"	f	namespace:GUIUtil
formatClientStartupTime	qt/clientmodel.cpp	/^QString ClientModel::formatClientStartupTime() const$/;"	f	class:ClientModel
formatDurationStr	qt/guiutil.cpp	/^QString formatDurationStr(int secs)$/;"	f	namespace:GUIUtil
formatFullVersion	qt/clientmodel.cpp	/^QString ClientModel::formatFullVersion() const$/;"	f	class:ClientModel
formatHtmlWithUnit	qt/wificoinunits.cpp	/^QString WiFicoinUnits::formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)$/;"	f	class:WiFicoinUnits
formatImpl	tinyformat.h	/^        TINYFORMAT_HIDDEN static void formatImpl(std::ostream& out, const char* fmtBegin,$/;"	f	class:tinyformat::detail::FormatArg
formatImpl	tinyformat.h	/^inline void formatImpl(std::ostream& out, const char* fmt,$/;"	f	namespace:tinyformat::detail
formatNiceTimeOffset	qt/guiutil.cpp	/^QString formatNiceTimeOffset(qint64 secs)$/;"	f	namespace:GUIUtil
formatPingTime	qt/guiutil.cpp	/^QString formatPingTime(double dPingTime)$/;"	f	namespace:GUIUtil
formatServicesStr	qt/guiutil.cpp	/^QString formatServicesStr(quint64 mask)$/;"	f	namespace:GUIUtil
formatSubVersion	qt/clientmodel.cpp	/^QString ClientModel::formatSubVersion() const$/;"	f	class:ClientModel
formatTimeOffset	qt/guiutil.cpp	/^QString formatTimeOffset(int64_t nTimeOffset)$/;"	f	namespace:GUIUtil
formatTooltip	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTooltip(const TransactionRecord *rec) const$/;"	f	class:TransactionTableModel
formatTruncated	tinyformat.h	/^inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)$/;"	f	namespace:tinyformat::detail
formatTxAmount	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxAmount(const TransactionRecord *wtx, bool showUnconfirmed, WiFicoinUnits::SeparatorStyle separators) const$/;"	f	class:TransactionTableModel
formatTxDate	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxDate(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatTxStatus	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxStatus(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatTxToAddress	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, bool tooltip) const$/;"	f	class:TransactionTableModel
formatTxType	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatValue	tinyformat.h	/^inline void formatValue(std::ostream& out, const char* \/*fmtBegin*\/,$/;"	f	namespace:tinyformat
formatValueAsType	tinyformat.h	/^struct formatValueAsType$/;"	s	namespace:tinyformat::detail
formatValueAsType	tinyformat.h	/^struct formatValueAsType<T,fmtT,true>$/;"	s	namespace:tinyformat::detail
formatWithUnit	qt/wificoinunits.cpp	/^QString WiFicoinUnits::formatWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)$/;"	f	class:WiFicoinUnits
formatZeroIntegerWorkaround	tinyformat.h	/^struct formatZeroIntegerWorkaround$/;"	s	namespace:tinyformat::detail
formatZeroIntegerWorkaround	tinyformat.h	/^struct formatZeroIntegerWorkaround<T,true>$/;"	s	namespace:tinyformat::detail
format_error	tinyformat.h	/^    format_error(const std::string &what): std::runtime_error(what) {$/;"	f	class:tinyformat::format_error
format_error	tinyformat.h	/^class format_error: public std::runtime_error$/;"	c	namespace:tinyformat
found	rpc/mining.cpp	/^    bool found;$/;"	m	class:submitblock_StateCatcher	file:
fread_unlocked	leveldb/port/port_posix.h	57;"	d
fread_unlocked	leveldb/port/port_win.h	37;"	d
free	support/lockedpool.cpp	/^void Arena::free(void *ptr)$/;"	f	class:Arena
free	support/lockedpool.cpp	/^void LockedPool::free(void *ptr)$/;"	f	class:LockedPool
free	support/lockedpool.h	/^        size_t free;$/;"	m	struct:Arena::Stats
free	support/lockedpool.h	/^        size_t free;$/;"	m	struct:LockedPool::Stats
freopen	fs.cpp	/^FILE *freopen(const fs::path& p, const char *mode, FILE *stream)$/;"	f	namespace:fsbridge
fromPeer	net_processing.cpp	/^    NodeId fromPeer;$/;"	m	struct:COrphanTx	file:
fromPeer	test/DoS_tests.cpp	/^    NodeId fromPeer;$/;"	m	struct:COrphanTx	file:
from_hex	crypto/ctaes/test.c	/^static void from_hex(unsigned char* data, int len, const char* hex) {$/;"	f	file:
front	prevector.h	/^    T& front() {$/;"	f	class:prevector
front	prevector.h	/^    const T& front() const {$/;"	f	class:prevector
fsbridge	fs.cpp	/^namespace fsbridge {$/;"	n	file:
fsbridge	fs.h	/^namespace fsbridge {$/;"	n
func	httpserver.cpp	/^    HTTPRequestHandler func;$/;"	m	class:HTTPWorkItem	file:
func	leveldb/util/testharness.cc	/^  void (*func)();$/;"	m	struct:leveldb::test::__anon15::Test	file:
func	qt/rpcconsole.cpp	/^    std::function<void(void)> func;$/;"	m	class:QtRPCTimerBase	file:
func_append	secp256k1/build-aux/ltmain.sh	/^func_append ()$/;"	f
func_append	secp256k1/config.status	/^func_append ()\\$/;"	f
func_append	secp256k1/configure	/^func_append ()\\$/;"	f
func_append	secp256k1/libtool	/^func_append ()$/;"	f
func_append	univalue/build-aux/ltmain.sh	/^func_append ()$/;"	f
func_append	univalue/config.status	/^func_append ()\\$/;"	f
func_append	univalue/configure	/^func_append ()\\$/;"	f
func_append	univalue/libtool	/^func_append ()$/;"	f
func_append_quoted	secp256k1/build-aux/ltmain.sh	/^func_append_quoted ()$/;"	f
func_append_quoted	secp256k1/config.status	/^func_append_quoted ()\\$/;"	f
func_append_quoted	secp256k1/configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	secp256k1/libtool	/^func_append_quoted ()$/;"	f
func_append_quoted	univalue/build-aux/ltmain.sh	/^func_append_quoted ()$/;"	f
func_append_quoted	univalue/config.status	/^func_append_quoted ()\\$/;"	f
func_append_quoted	univalue/configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	univalue/libtool	/^func_append_quoted ()$/;"	f
func_arith	secp256k1/build-aux/ltmain.sh	/^func_arith ()$/;"	f
func_arith	secp256k1/config.status	/^func_arith ()\\$/;"	f
func_arith	secp256k1/configure	/^func_arith ()\\$/;"	f
func_arith	secp256k1/libtool	/^func_arith ()$/;"	f
func_arith	univalue/build-aux/ltmain.sh	/^func_arith ()$/;"	f
func_arith	univalue/config.status	/^func_arith ()\\$/;"	f
func_arith	univalue/configure	/^func_arith ()\\$/;"	f
func_arith	univalue/libtool	/^func_arith ()$/;"	f
func_basename	secp256k1/build-aux/ltmain.sh	/^func_basename ()$/;"	f
func_basename	secp256k1/config.status	/^func_basename ()\\$/;"	f
func_basename	secp256k1/configure	/^func_basename ()\\$/;"	f
func_basename	secp256k1/libtool	/^func_basename ()$/;"	f
func_basename	univalue/build-aux/ltmain.sh	/^func_basename ()$/;"	f
func_basename	univalue/config.status	/^func_basename ()\\$/;"	f
func_basename	univalue/configure	/^func_basename ()\\$/;"	f
func_basename	univalue/libtool	/^func_basename ()$/;"	f
func_check_version_match	secp256k1/build-aux/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	secp256k1/libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	univalue/build-aux/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	univalue/libtool	/^func_check_version_match ()$/;"	f
func_cl_dashL	secp256k1/build-aux/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	secp256k1/build-aux/compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	secp256k1/build-aux/compile	/^func_cl_wrapper ()$/;"	f
func_config	secp256k1/build-aux/ltmain.sh	/^func_config ()$/;"	f
func_config	secp256k1/libtool	/^func_config ()$/;"	f
func_config	univalue/build-aux/ltmain.sh	/^func_config ()$/;"	f
func_config	univalue/libtool	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	secp256k1/libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	univalue/build-aux/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	univalue/libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	secp256k1/libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	univalue/build-aux/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	univalue/libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	secp256k1/libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	univalue/build-aux/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	univalue/libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	secp256k1/build-aux/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	secp256k1/libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_check	univalue/build-aux/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	univalue/libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	secp256k1/libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	univalue/build-aux/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	univalue/libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	secp256k1/build-aux/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	secp256k1/libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	univalue/build-aux/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	univalue/libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	secp256k1/libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	univalue/build-aux/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	univalue/libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	secp256k1/build-aux/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	secp256k1/libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	univalue/build-aux/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	univalue/libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	secp256k1/libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	univalue/build-aux/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	univalue/libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	secp256k1/build-aux/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	secp256k1/libtool	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	univalue/build-aux/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	univalue/libtool	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	secp256k1/build-aux/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	secp256k1/libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_check	univalue/build-aux/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	univalue/libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	secp256k1/libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	univalue/build-aux/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	univalue/libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	secp256k1/build-aux/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	secp256k1/libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	univalue/build-aux/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	univalue/libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	secp256k1/build-aux/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	secp256k1/libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	univalue/build-aux/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	univalue/libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	secp256k1/libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	univalue/build-aux/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	univalue/libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	secp256k1/build-aux/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	secp256k1/libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	univalue/build-aux/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	univalue/libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	secp256k1/libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	univalue/build-aux/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	univalue/libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	secp256k1/build-aux/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	secp256k1/libtool	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	univalue/build-aux/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	univalue/libtool	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	secp256k1/libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	univalue/build-aux/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	univalue/libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	secp256k1/libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	univalue/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	univalue/libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	secp256k1/libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	univalue/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	univalue/libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	secp256k1/build-aux/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	secp256k1/libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	univalue/build-aux/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	univalue/libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	secp256k1/build-aux/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	secp256k1/libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	univalue/build-aux/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	univalue/libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	secp256k1/build-aux/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	secp256k1/libtool	/^func_cygpath ()$/;"	f
func_cygpath	univalue/build-aux/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	univalue/libtool	/^func_cygpath ()$/;"	f
func_dirname	secp256k1/build-aux/ltmain.sh	/^func_dirname ()$/;"	f
func_dirname	secp256k1/config.status	/^func_dirname ()\\$/;"	f
func_dirname	secp256k1/configure	/^func_dirname ()\\$/;"	f
func_dirname	secp256k1/libtool	/^func_dirname ()$/;"	f
func_dirname	univalue/build-aux/ltmain.sh	/^func_dirname ()$/;"	f
func_dirname	univalue/config.status	/^func_dirname ()\\$/;"	f
func_dirname	univalue/configure	/^func_dirname ()\\$/;"	f
func_dirname	univalue/libtool	/^func_dirname ()$/;"	f
func_dirname_and_basename	secp256k1/build-aux/ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	secp256k1/config.status	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	secp256k1/configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	secp256k1/libtool	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	univalue/build-aux/ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	univalue/config.status	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	univalue/configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	univalue/libtool	/^func_dirname_and_basename ()$/;"	f
func_echo	secp256k1/build-aux/ltmain.sh	/^func_echo ()$/;"	f
func_echo	secp256k1/libtool	/^func_echo ()$/;"	f
func_echo	univalue/build-aux/ltmain.sh	/^func_echo ()$/;"	f
func_echo	univalue/libtool	/^func_echo ()$/;"	f
func_echo_all	secp256k1/build-aux/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	secp256k1/configure	/^func_echo_all ()$/;"	f
func_echo_all	secp256k1/libtool	/^func_echo_all ()$/;"	f
func_echo_all	univalue/build-aux/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	univalue/configure	/^func_echo_all ()$/;"	f
func_echo_all	univalue/libtool	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	secp256k1/build-aux/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	secp256k1/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	univalue/build-aux/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	univalue/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	secp256k1/build-aux/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	secp256k1/libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	univalue/build-aux/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	univalue/libtool	/^func_emit_wrapper ()$/;"	f
func_enable_tag	secp256k1/build-aux/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	secp256k1/libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	univalue/build-aux/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	univalue/libtool	/^func_enable_tag ()$/;"	f
func_error	secp256k1/build-aux/ltmain.sh	/^func_error ()$/;"	f
func_error	secp256k1/libtool	/^func_error ()$/;"	f
func_error	univalue/build-aux/ltmain.sh	/^func_error ()$/;"	f
func_error	univalue/libtool	/^func_error ()$/;"	f
func_exec_program	secp256k1/build-aux/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	secp256k1/libtool	/^func_exec_program ()$/;"	f
func_exec_program	univalue/build-aux/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	univalue/libtool	/^func_exec_program ()$/;"	f
func_exec_program_core	secp256k1/build-aux/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	secp256k1/libtool	/^func_exec_program_core ()$/;"	f
func_exec_program_core	univalue/build-aux/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	univalue/libtool	/^func_exec_program_core ()$/;"	f
func_execute_cmds	secp256k1/build-aux/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	secp256k1/libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	univalue/build-aux/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	univalue/libtool	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	secp256k1/build-aux/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	secp256k1/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	univalue/build-aux/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	univalue/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_archives	secp256k1/build-aux/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	secp256k1/libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	univalue/build-aux/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	univalue/libtool	/^func_extract_archives ()$/;"	f
func_fallback_echo	secp256k1/build-aux/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	secp256k1/config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	secp256k1/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	secp256k1/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	secp256k1/libtool	/^func_fallback_echo ()$/;"	f
func_fallback_echo	univalue/build-aux/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	univalue/config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	univalue/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	univalue/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	univalue/libtool	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	secp256k1/build-aux/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	secp256k1/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	univalue/build-aux/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	univalue/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_error	secp256k1/build-aux/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	secp256k1/libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	univalue/build-aux/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	univalue/libtool	/^func_fatal_error ()$/;"	f
func_fatal_help	secp256k1/build-aux/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	secp256k1/libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	univalue/build-aux/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	univalue/libtool	/^func_fatal_help ()$/;"	f
func_features	secp256k1/build-aux/ltmain.sh	/^func_features ()$/;"	f
func_features	secp256k1/libtool	/^func_features ()$/;"	f
func_features	univalue/build-aux/ltmain.sh	/^func_features ()$/;"	f
func_features	univalue/libtool	/^func_features ()$/;"	f
func_file_conv	secp256k1/build-aux/compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	secp256k1/build-aux/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	secp256k1/libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	univalue/build-aux/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	univalue/libtool	/^func_generate_dlsyms ()$/;"	f
func_grep	secp256k1/build-aux/ltmain.sh	/^func_grep ()$/;"	f
func_grep	secp256k1/libtool	/^func_grep ()$/;"	f
func_grep	univalue/build-aux/ltmain.sh	/^func_grep ()$/;"	f
func_grep	univalue/libtool	/^func_grep ()$/;"	f
func_help	secp256k1/build-aux/ltmain.sh	/^func_help ()$/;"	f
func_help	secp256k1/libtool	/^func_help ()$/;"	f
func_help	univalue/build-aux/ltmain.sh	/^func_help ()$/;"	f
func_help	univalue/libtool	/^func_help ()$/;"	f
func_infer_tag	secp256k1/build-aux/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	secp256k1/libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	univalue/build-aux/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	univalue/libtool	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	secp256k1/build-aux/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	secp256k1/libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	univalue/build-aux/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	univalue/libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	secp256k1/build-aux/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	secp256k1/libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	univalue/build-aux/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	univalue/libtool	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	secp256k1/build-aux/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	secp256k1/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	univalue/build-aux/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	univalue/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_len	secp256k1/build-aux/ltmain.sh	/^func_len ()$/;"	f
func_len	secp256k1/config.status	/^func_len ()\\$/;"	f
func_len	secp256k1/configure	/^func_len ()\\$/;"	f
func_len	secp256k1/libtool	/^func_len ()$/;"	f
func_len	univalue/build-aux/ltmain.sh	/^func_len ()$/;"	f
func_len	univalue/config.status	/^func_len ()\\$/;"	f
func_len	univalue/configure	/^func_len ()\\$/;"	f
func_len	univalue/libtool	/^func_len ()$/;"	f
func_lo2o	secp256k1/build-aux/ltmain.sh	/^func_lo2o ()$/;"	f
func_lo2o	secp256k1/config.status	/^func_lo2o ()\\$/;"	f
func_lo2o	secp256k1/configure	/^func_lo2o ()\\$/;"	f
func_lo2o	secp256k1/libtool	/^func_lo2o ()$/;"	f
func_lo2o	univalue/build-aux/ltmain.sh	/^func_lo2o ()$/;"	f
func_lo2o	univalue/config.status	/^func_lo2o ()\\$/;"	f
func_lo2o	univalue/configure	/^func_lo2o ()\\$/;"	f
func_lo2o	univalue/libtool	/^func_lo2o ()$/;"	f
func_lt_dump_args	secp256k1/build-aux/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	secp256k1/libtool	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	univalue/build-aux/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	univalue/libtool	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	secp256k1/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	univalue/build-aux/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	univalue/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	secp256k1/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	univalue/build-aux/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	univalue/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	secp256k1/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	univalue/build-aux/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	univalue/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	secp256k1/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	univalue/build-aux/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	univalue/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	secp256k1/build-aux/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	secp256k1/libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	univalue/build-aux/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	univalue/libtool	/^func_missing_arg ()$/;"	f
func_mkdir_p	secp256k1/build-aux/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	secp256k1/libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	univalue/build-aux/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	univalue/libtool	/^func_mkdir_p ()$/;"	f
func_mktempdir	secp256k1/build-aux/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	secp256k1/libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	univalue/build-aux/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	univalue/libtool	/^func_mktempdir ()$/;"	f
func_mode_compile	secp256k1/build-aux/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	secp256k1/libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	univalue/build-aux/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	univalue/libtool	/^func_mode_compile ()$/;"	f
func_mode_execute	secp256k1/build-aux/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	secp256k1/libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	univalue/build-aux/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	univalue/libtool	/^func_mode_execute ()$/;"	f
func_mode_finish	secp256k1/build-aux/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	secp256k1/libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	univalue/build-aux/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	univalue/libtool	/^func_mode_finish ()$/;"	f
func_mode_help	secp256k1/build-aux/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	secp256k1/libtool	/^func_mode_help ()$/;"	f
func_mode_help	univalue/build-aux/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	univalue/libtool	/^func_mode_help ()$/;"	f
func_mode_install	secp256k1/build-aux/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	secp256k1/libtool	/^func_mode_install ()$/;"	f
func_mode_install	univalue/build-aux/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	univalue/libtool	/^func_mode_install ()$/;"	f
func_mode_link	secp256k1/build-aux/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	secp256k1/libtool	/^func_mode_link ()$/;"	f
func_mode_link	univalue/build-aux/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	univalue/libtool	/^func_mode_link ()$/;"	f
func_mode_uninstall	secp256k1/build-aux/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	secp256k1/libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	univalue/build-aux/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	univalue/libtool	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	secp256k1/build-aux/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	secp256k1/libtool	/^func_normal_abspath ()$/;"	f
func_normal_abspath	univalue/build-aux/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	univalue/libtool	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	secp256k1/build-aux/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	secp256k1/libtool	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	univalue/build-aux/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	univalue/libtool	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	secp256k1/build-aux/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	secp256k1/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	univalue/build-aux/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	univalue/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	secp256k1/build-aux/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	secp256k1/libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	univalue/build-aux/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	univalue/libtool	/^func_quote_for_expand ()$/;"	f
func_relative_path	secp256k1/build-aux/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	secp256k1/libtool	/^func_relative_path ()$/;"	f
func_relative_path	univalue/build-aux/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	univalue/libtool	/^func_relative_path ()$/;"	f
func_replace_sysroot	secp256k1/build-aux/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	secp256k1/libtool	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	univalue/build-aux/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	univalue/libtool	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	secp256k1/build-aux/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	secp256k1/libtool	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	univalue/build-aux/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	univalue/libtool	/^func_resolve_sysroot ()$/;"	f
func_show_eval	secp256k1/build-aux/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	secp256k1/libtool	/^func_show_eval ()$/;"	f
func_show_eval	univalue/build-aux/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	univalue/libtool	/^func_show_eval ()$/;"	f
func_show_eval_locale	secp256k1/build-aux/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	secp256k1/libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	univalue/build-aux/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	univalue/libtool	/^func_show_eval_locale ()$/;"	f
func_source	secp256k1/build-aux/ltmain.sh	/^func_source ()$/;"	f
func_source	secp256k1/libtool	/^func_source ()$/;"	f
func_source	univalue/build-aux/ltmain.sh	/^func_source ()$/;"	f
func_source	univalue/libtool	/^func_source ()$/;"	f
func_split_long_opt	secp256k1/build-aux/ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_long_opt	secp256k1/config.status	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	secp256k1/configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	secp256k1/libtool	/^func_split_long_opt ()$/;"	f
func_split_long_opt	univalue/build-aux/ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_long_opt	univalue/config.status	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	univalue/configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	univalue/libtool	/^func_split_long_opt ()$/;"	f
func_split_short_opt	secp256k1/build-aux/ltmain.sh	/^func_split_short_opt ()$/;"	f
func_split_short_opt	secp256k1/config.status	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	secp256k1/configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	secp256k1/libtool	/^func_split_short_opt ()$/;"	f
func_split_short_opt	univalue/build-aux/ltmain.sh	/^func_split_short_opt ()$/;"	f
func_split_short_opt	univalue/config.status	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	univalue/configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	univalue/libtool	/^func_split_short_opt ()$/;"	f
func_stripname	secp256k1/build-aux/ltmain.sh	/^func_stripname ()$/;"	f
func_stripname	secp256k1/config.status	/^func_stripname ()\\$/;"	f
func_stripname	secp256k1/configure	/^func_stripname ()\\$/;"	f
func_stripname	secp256k1/libtool	/^func_stripname ()$/;"	f
func_stripname	univalue/build-aux/ltmain.sh	/^func_stripname ()$/;"	f
func_stripname	univalue/config.status	/^func_stripname ()\\$/;"	f
func_stripname	univalue/configure	/^func_stripname ()\\$/;"	f
func_stripname	univalue/libtool	/^func_stripname ()$/;"	f
func_stripname_cnf	univalue/configure	/^func_stripname_cnf ()$/;"	f
func_to_host_file	secp256k1/build-aux/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	secp256k1/libtool	/^func_to_host_file ()$/;"	f
func_to_host_file	univalue/build-aux/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	univalue/libtool	/^func_to_host_file ()$/;"	f
func_to_host_path	secp256k1/build-aux/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	secp256k1/libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	univalue/build-aux/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	univalue/libtool	/^func_to_host_path ()$/;"	f
func_to_tool_file	secp256k1/build-aux/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	secp256k1/libtool	/^func_to_tool_file ()$/;"	f
func_to_tool_file	univalue/build-aux/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	univalue/libtool	/^func_to_tool_file ()$/;"	f
func_tr_sh	secp256k1/build-aux/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	secp256k1/libtool	/^func_tr_sh ()$/;"	f
func_tr_sh	univalue/build-aux/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	univalue/libtool	/^func_tr_sh ()$/;"	f
func_usage	secp256k1/build-aux/ltmain.sh	/^func_usage ()$/;"	f
func_usage	secp256k1/libtool	/^func_usage ()$/;"	f
func_usage	univalue/build-aux/ltmain.sh	/^func_usage ()$/;"	f
func_usage	univalue/libtool	/^func_usage ()$/;"	f
func_verbose	secp256k1/build-aux/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	secp256k1/libtool	/^func_verbose ()$/;"	f
func_verbose	univalue/build-aux/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	univalue/libtool	/^func_verbose ()$/;"	f
func_version	secp256k1/build-aux/ltmain.sh	/^func_version ()$/;"	f
func_version	secp256k1/libtool	/^func_version ()$/;"	f
func_version	univalue/build-aux/ltmain.sh	/^func_version ()$/;"	f
func_version	univalue/libtool	/^func_version ()$/;"	f
func_warning	secp256k1/build-aux/ltmain.sh	/^func_warning ()$/;"	f
func_warning	secp256k1/libtool	/^func_warning ()$/;"	f
func_warning	univalue/build-aux/ltmain.sh	/^func_warning ()$/;"	f
func_warning	univalue/libtool	/^func_warning ()$/;"	f
func_win32_import_lib_p	secp256k1/build-aux/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	secp256k1/libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	univalue/build-aux/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	univalue/libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	secp256k1/build-aux/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	secp256k1/libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	univalue/build-aux/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	univalue/libtool	/^func_win32_libid ()$/;"	f
func_write_libtool_object	secp256k1/build-aux/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	secp256k1/libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	univalue/build-aux/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	univalue/libtool	/^func_write_libtool_object ()$/;"	f
func_xform	secp256k1/build-aux/ltmain.sh	/^func_xform ()$/;"	f
func_xform	secp256k1/config.status	/^func_xform ()\\$/;"	f
func_xform	secp256k1/configure	/^func_xform ()\\$/;"	f
func_xform	secp256k1/libtool	/^func_xform ()$/;"	f
func_xform	univalue/build-aux/ltmain.sh	/^func_xform ()$/;"	f
func_xform	univalue/config.status	/^func_xform ()\\$/;"	f
func_xform	univalue/configure	/^func_xform ()\\$/;"	f
func_xform	univalue/libtool	/^func_xform ()$/;"	f
function	leveldb/include/leveldb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::Cleanup
function	leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon11::PosixEnv::BGItem	file:
fundrawtransaction	wallet/rpcwallet.cpp	/^UniValue fundrawtransaction(const JSONRPCRequest& request)$/;"	f
fwrite_unlocked	leveldb/port/port_posix.h	58;"	d
gArgs	util.cpp	/^ArgsManager gArgs;$/;"	v
gBase	torcontrol.cpp	/^static struct event_base *gBase;$/;"	v	typeref:struct:event_base	file:
gFlags	test/script_tests.cpp	/^static const unsigned int gFlags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;$/;"	v	file:
g_PageSize	leveldb/util/env_win.cc	/^const size_t g_PageSize = GetPageSize();$/;"	m	namespace:leveldb::Win32	file:
g_connman	init.cpp	/^std::unique_ptr<CConnman> g_connman;$/;"	v
g_connman	test/test_wificoin_main.cpp	/^std::unique_ptr<CConnman> g_connman;$/;"	v
g_env	leveldb/db/db_bench.cc	/^leveldb::Env* g_env = NULL;$/;"	m	namespace:leveldb::__anon18	file:
g_failed_blocks	validation.cpp	/^    std::set<CBlockIndex*> g_failed_blocks;$/;"	m	namespace:__anon43	file:
g_internal_prefix	netaddress.cpp	/^static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 };$/;"	v	file:
g_last_tip_update	net_processing.cpp	/^    int64_t g_last_tip_update = 0;$/;"	m	namespace:__anon49	file:
g_outbound_peers_with_protect_from_disconnect	net_processing.cpp	/^    int g_outbound_peers_with_protect_from_disconnect = 0;$/;"	m	namespace:__anon49	file:
g_rpcSignals	rpc/server.cpp	/^} g_rpcSignals;$/;"	v	typeref:struct:CRPCSignals	file:
g_signals	validationinterface.cpp	/^static CMainSignals g_signals;$/;"	v	file:
gbt_force	versionbits.h	/^    bool gbt_force;$/;"	m	struct:VBDeploymentInfo
gbt_vb_name	rpc/mining.cpp	/^std::string gbt_vb_name(const Consensus::DeploymentPos pos) {$/;"	f
ge_equals_ge	secp256k1/src/tests.c	/^void ge_equals_ge(const secp256k1_ge *a, const secp256k1_ge *b) {$/;"	f
ge_equals_ge	secp256k1/src/tests_exhaustive.c	/^void ge_equals_ge(const secp256k1_ge *a, const secp256k1_ge *b) {$/;"	f
ge_equals_gej	secp256k1/src/tests.c	/^void ge_equals_gej(const secp256k1_ge *a, const secp256k1_gej *b) {$/;"	f
ge_equals_gej	secp256k1/src/tests_exhaustive.c	/^void ge_equals_gej(const secp256k1_ge *a, const secp256k1_gej *b) {$/;"	f
ge_x	secp256k1/src/bench_internal.c	/^    secp256k1_ge ge_x, ge_y;$/;"	m	struct:__anon66	file:
ge_y	secp256k1/src/bench_internal.c	/^    secp256k1_ge ge_x, ge_y;$/;"	m	struct:__anon66	file:
gej_x	secp256k1/src/bench_internal.c	/^    secp256k1_gej gej_x, gej_y;$/;"	m	struct:__anon66	file:
gej_xyz_equals_gej	secp256k1/src/tests.c	/^int gej_xyz_equals_gej(const secp256k1_gej *a, const secp256k1_gej *b) {$/;"	f
gej_y	secp256k1/src/bench_internal.c	/^    secp256k1_gej gej_x, gej_y;$/;"	m	struct:__anon66	file:
gen	leveldb/db/skiplist_test.cc	/^  static uint64_t gen(Key key) { return (key >> 8) & 0xffffffffu; }$/;"	f	class:leveldb::ConcurrentTest	file:
gen_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_	leveldb/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_context_BIN	secp256k1/Makefile	/^gen_context_BIN = gen_context$(BUILD_EXEEXT)$/;"	m
gen_context_OBJECTS	secp256k1/Makefile	/^gen_context_OBJECTS = gen_context.o$/;"	m
generate	wallet/rpcwallet.cpp	/^UniValue generate(const JSONRPCRequest& request)$/;"	f
generateBlocks	rpc/mining.cpp	/^UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)$/;"	f
generatetoaddress	rpc/mining.cpp	/^UniValue generatetoaddress(const JSONRPCRequest& request)$/;"	f
generation	leveldb/db/skiplist_test.cc	/^    port::AtomicPointer generation[K];$/;"	m	struct:leveldb::ConcurrentTest::State	file:
genesis	chainparams.h	/^    CBlock genesis;$/;"	m	class:CChainParams
get	txmempool.cpp	/^CTransactionRef CTxMemPool::get(const uint256& hash) const$/;"	f	class:CTxMemPool
getAddress	qt/editaddressdialog.cpp	/^QString EditAddressDialog::getAddress() const$/;"	f	class:EditAddressDialog
getAddressTableModel	qt/walletmodel.cpp	/^AddressTableModel *WalletModel::getAddressTableModel()$/;"	f	class:WalletModel
getAllNetMessageTypes	protocol.cpp	/^const std::vector<std::string> &getAllNetMessageTypes()$/;"	f
getAmountColumnTitle	qt/wificoinunits.cpp	/^QString WiFicoinUnits::getAmountColumnTitle(int unit)$/;"	f	class:WiFicoinUnits
getAmountTitle	qt/recentrequeststablemodel.cpp	/^QString RecentRequestsTableModel::getAmountTitle()$/;"	f	class:RecentRequestsTableModel
getAppIcon	qt/networkstyle.h	/^    const QIcon &getAppIcon() const { return appIcon; }$/;"	f	class:NetworkStyle
getAppName	qt/networkstyle.h	/^    const QString &getAppName() const { return appName; }$/;"	f	class:NetworkStyle
getAvailableWidthForColumn	qt/guiutil.cpp	/^int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
getBalance	qt/walletmodel.cpp	/^CAmount WalletModel::getBalance(const CCoinControl *coinControl) const$/;"	f	class:WalletModel
getBanTableModel	qt/clientmodel.cpp	/^BanTableModel *ClientModel::getBanTableModel()$/;"	f	class:ClientModel
getBlockSource	qt/clientmodel.cpp	/^enum BlockSource ClientModel::getBlockSource() const$/;"	f	class:ClientModel
getBool	univalue/include/univalue.h	/^    bool getBool() const { return isTrue(); }$/;"	f	class:UniValue
getBumpedTxId	wallet/feebumper.h	/^    uint256 getBumpedTxId() const { return bumpedTxid; }$/;"	f	class:CFeeBumper
getCategoryMask	rpc/misc.cpp	/^uint32_t getCategoryMask(UniValue cats) {$/;"	f
getCertStore	qt/paymentserver.cpp	/^X509_STORE* PaymentServer::getCertStore()$/;"	f	class:PaymentServer
getCoinControlFeatures	qt/optionsmodel.h	/^    bool getCoinControlFeatures() { return fCoinControlFeatures; }$/;"	f	class:OptionsModel
getColumnsWidth	qt/guiutil.cpp	/^int TableViewLastColumnResizingFixer::getColumnsWidth()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
getConfTargetForIndex	qt/sendcoinsdialog.cpp	/^int getConfTargetForIndex(int index) {$/;"	f
getContext	secp256k1/src/java/org/wificoin/Secp256k1Context.java	/^  public static long getContext() {$/;"	m	class:Secp256k1Context
getDataDirectory	qt/intro.cpp	/^QString Intro::getDataDirectory()$/;"	f	class:Intro
getDefaultConfirmTarget	qt/walletmodel.cpp	/^int WalletModel::getDefaultConfirmTarget() const$/;"	f	class:WalletModel
getDefaultDataDirectory	qt/intro.cpp	/^QString Intro::getDefaultDataDirectory()$/;"	f	class:Intro
getDefaultWalletRbf	qt/walletmodel.cpp	/^bool WalletModel::getDefaultWalletRbf() const$/;"	f	class:WalletModel
getDetails	qt/paymentrequestplus.h	/^    const payments::PaymentDetails& getDetails() const { return details; }$/;"	f	class:PaymentRequestPlus
getDisplayUnit	qt/optionsmodel.h	/^    int getDisplayUnit() { return nDisplayUnit; }$/;"	f	class:OptionsModel
getEditStatus	qt/addresstablemodel.h	/^    EditStatus getEditStatus() const { return editStatus; }$/;"	f	class:AddressTableModel
getEncryptionStatus	qt/walletmodel.cpp	/^WalletModel::EncryptionStatus WalletModel::getEncryptionStatus() const$/;"	f	class:WalletModel
getEntryData	qt/guiutil.cpp	/^QList<QModelIndex> getEntryData(QAbstractItemView *view, int column)$/;"	f	namespace:GUIUtil
getErrors	wallet/feebumper.h	/^    const std::vector<std::string>& getErrors() const { return vErrors; }$/;"	f	class:CFeeBumper
getGraphRangeMins	qt/trafficgraphwidget.cpp	/^int TrafficGraphWidget::getGraphRangeMins() const$/;"	f	class:TrafficGraphWidget
getHeaderTipHeight	qt/clientmodel.cpp	/^int ClientModel::getHeaderTipHeight() const$/;"	f	class:ClientModel
getHeaderTipTime	qt/clientmodel.cpp	/^int64_t ClientModel::getHeaderTipTime() const$/;"	f	class:ClientModel
getHideTrayIcon	qt/optionsmodel.h	/^    bool getHideTrayIcon() { return fHideTrayIcon; }$/;"	f	class:OptionsModel
getImagesOnButtons	qt/platformstyle.h	/^    bool getImagesOnButtons() const { return imagesOnButtons; }$/;"	f	class:PlatformStyle
getImmatureBalance	qt/walletmodel.cpp	/^CAmount WalletModel::getImmatureBalance() const$/;"	f	class:WalletModel
getIndexForConfTarget	qt/sendcoinsdialog.cpp	/^int getIndexForConfTarget(int target) {$/;"	f
getJsonToken	univalue/lib/univalue_read.cpp	/^enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,$/;"	f
getKeys	univalue/lib/univalue.cpp	/^const std::vector<std::string>& UniValue::getKeys() const$/;"	f	class:UniValue
getLastBlockDate	qt/clientmodel.cpp	/^QDateTime ClientModel::getLastBlockDate() const$/;"	f	class:ClientModel
getMainWinId	qt/wificoin.cpp	/^WId WiFicoinApplication::getMainWinId() const$/;"	f	class:WiFicoinApplication
getMempoolDynamicUsage	qt/clientmodel.cpp	/^size_t ClientModel::getMempoolDynamicUsage() const$/;"	f	class:ClientModel
getMempoolSize	qt/clientmodel.cpp	/^long ClientModel::getMempoolSize() const$/;"	f	class:ClientModel
getMerchant	qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) const$/;"	f	class:PaymentRequestPlus
getMinimizeOnClose	qt/optionsmodel.h	/^    bool getMinimizeOnClose() { return fMinimizeOnClose; }$/;"	f	class:OptionsModel
getMinimizeToTray	qt/optionsmodel.h	/^    bool getMinimizeToTray() { return fMinimizeToTray; }$/;"	f	class:OptionsModel
getName	qt/platformstyle.h	/^    const QString &getName() const { return name; }$/;"	f	class:PlatformStyle
getNetworkActive	qt/clientmodel.cpp	/^bool ClientModel::getNetworkActive() const$/;"	f	class:ClientModel
getNewFee	wallet/feebumper.h	/^    CAmount getNewFee() const { return nNewFee; }$/;"	f	class:CFeeBumper
getNodeStats	qt/peertablemodel.cpp	/^const CNodeCombinedStats *PeerTableModel::getNodeStats(int idx)$/;"	f	class:PeerTableModel
getNumBlocks	qt/clientmodel.cpp	/^int ClientModel::getNumBlocks() const$/;"	f	class:ClientModel
getNumConnections	qt/clientmodel.cpp	/^int ClientModel::getNumConnections(unsigned int flags) const$/;"	f	class:ClientModel
getOldFee	wallet/feebumper.h	/^    CAmount getOldFee() const { return nOldFee; }$/;"	f	class:CFeeBumper
getOpenFileName	qt/guiutil.cpp	/^QString getOpenFileName(QWidget *parent, const QString &caption, const QString &dir,$/;"	f	namespace:GUIUtil
getOptionsModel	qt/clientmodel.cpp	/^OptionsModel *ClientModel::getOptionsModel()$/;"	f	class:ClientModel
getOptionsModel	qt/walletmodel.cpp	/^OptionsModel *WalletModel::getOptionsModel()$/;"	f	class:WalletModel
getOutputIndex	qt/transactionrecord.cpp	/^int TransactionRecord::getOutputIndex() const$/;"	f	class:TransactionRecord
getOutputs	qt/walletmodel.cpp	/^void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)$/;"	f	class:WalletModel
getOverriddenByCommandLine	qt/optionsmodel.h	/^    const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }$/;"	f	class:OptionsModel
getPathToCheck	qt/intro.cpp	/^QString Intro::getPathToCheck()$/;"	f	class:Intro
getPayTo	qt/paymentrequestplus.cpp	/^QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const$/;"	f	class:PaymentRequestPlus
getPeerTableModel	qt/clientmodel.cpp	/^PeerTableModel *ClientModel::getPeerTableModel()$/;"	f	class:ClientModel
getPossibleKeyChange	qt/walletmodeltransaction.cpp	/^CReserveKey *WalletModelTransaction::getPossibleKeyChange()$/;"	f	class:WalletModelTransaction
getPrivKey	qt/walletmodel.cpp	/^bool WalletModel::getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const$/;"	f	class:WalletModel
getProxySettings	qt/optionsmodel.cpp	/^bool OptionsModel::getProxySettings(QNetworkProxy& proxy) const$/;"	f	class:OptionsModel
getPubKey	qt/walletmodel.cpp	/^bool WalletModel::getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const$/;"	f	class:WalletModel
getQueueInfo	scheduler.cpp	/^size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,$/;"	f	class:CScheduler
getRecentRequestsTableModel	qt/walletmodel.cpp	/^RecentRequestsTableModel *WalletModel::getRecentRequestsTableModel()$/;"	f	class:WalletModel
getRecipient	qt/test/paymentservertests.cpp	/^void RecipientCatcher::getRecipient(SendCoinsRecipient r)$/;"	f	class:RecipientCatcher
getRecipients	qt/walletmodeltransaction.cpp	/^QList<SendCoinsRecipient> WalletModelTransaction::getRecipients()$/;"	f	class:WalletModelTransaction
getResult	wallet/feebumper.h	/^    BumpFeeResult getResult() const { return currentResult; }$/;"	f	class:CFeeBumper
getReturnValue	qt/addressbookpage.h	/^    const QString &getReturnValue() const { return returnValue; }$/;"	f	class:AddressBookPage
getReturnValue	qt/wificoin.cpp	/^    int getReturnValue() { return returnValue; }$/;"	f	class:WiFicoinApplication
getRowByNodeId	qt/peertablemodel.cpp	/^int PeerTableModel::getRowByNodeId(NodeId nodeid)$/;"	f	class:PeerTableModel
getSaveFileName	qt/guiutil.cpp	/^QString getSaveFileName(QWidget *parent, const QString &caption, const QString &dir,$/;"	f	namespace:GUIUtil
getStatusBarWarnings	qt/clientmodel.cpp	/^QString ClientModel::getStatusBarWarnings() const$/;"	f	class:ClientModel
getThirdPartyTxUrls	qt/optionsmodel.h	/^    QString getThirdPartyTxUrls() { return strThirdPartyTxUrls; }$/;"	f	class:OptionsModel
getTitleAddText	qt/networkstyle.h	/^    const QString &getTitleAddText() const { return titleAddText; }$/;"	f	class:NetworkStyle
getTotalBytesRecv	qt/clientmodel.cpp	/^quint64 ClientModel::getTotalBytesRecv() const$/;"	f	class:ClientModel
getTotalBytesSent	qt/clientmodel.cpp	/^quint64 ClientModel::getTotalBytesSent() const$/;"	f	class:ClientModel
getTotalTransactionAmount	qt/walletmodeltransaction.cpp	/^CAmount WalletModelTransaction::getTotalTransactionAmount()$/;"	f	class:WalletModelTransaction
getTransaction	qt/walletmodeltransaction.cpp	/^CWalletTx *WalletModelTransaction::getTransaction()$/;"	f	class:WalletModelTransaction
getTransactionFee	qt/walletmodeltransaction.cpp	/^CAmount WalletModelTransaction::getTransactionFee()$/;"	f	class:WalletModelTransaction
getTransactionSize	qt/walletmodeltransaction.cpp	/^unsigned int WalletModelTransaction::getTransactionSize()$/;"	f	class:WalletModelTransaction
getTransactionTableModel	qt/walletmodel.cpp	/^TransactionTableModel *WalletModel::getTransactionTableModel()$/;"	f	class:WalletModel
getTrayAndWindowIcon	qt/networkstyle.h	/^    const QIcon &getTrayAndWindowIcon() const { return trayAndWindowIcon; }$/;"	f	class:NetworkStyle
getTxHex	qt/transactiontablemodel.cpp	/^    QString getTxHex(TransactionRecord *rec)$/;"	f	class:TransactionTablePriv
getTxID	qt/transactionrecord.cpp	/^QString TransactionRecord::getTxID() const$/;"	f	class:TransactionRecord
getType	univalue/include/univalue.h	/^    enum VType getType() const { return typ; }$/;"	f	class:UniValue
getURI	qt/openuridialog.cpp	/^QString OpenURIDialog::getURI()$/;"	f	class:OpenURIDialog
getUnconfirmedBalance	qt/walletmodel.cpp	/^CAmount WalletModel::getUnconfirmedBalance() const$/;"	f	class:WalletModel
getUseExtraSpacing	qt/platformstyle.h	/^    bool getUseExtraSpacing() const { return useExtraSpacing; }$/;"	f	class:PlatformStyle
getValStr	univalue/include/univalue.h	/^    const std::string& getValStr() const { return val; }$/;"	f	class:UniValue
getValue	qt/sendcoinsentry.cpp	/^SendCoinsRecipient SendCoinsEntry::getValue()$/;"	f	class:SendCoinsEntry
getValues	univalue/lib/univalue.cpp	/^const std::vector<UniValue>& UniValue::getValues() const$/;"	f	class:UniValue
getVerificationProgress	qt/clientmodel.cpp	/^double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const$/;"	f	class:ClientModel
getWatchBalance	qt/walletmodel.cpp	/^CAmount WalletModel::getWatchBalance() const$/;"	f	class:WalletModel
getWatchImmatureBalance	qt/walletmodel.cpp	/^CAmount WalletModel::getWatchImmatureBalance() const$/;"	f	class:WalletModel
getWatchUnconfirmedBalance	qt/walletmodel.cpp	/^CAmount WalletModel::getWatchUnconfirmedBalance() const$/;"	f	class:WalletModel
get_array	univalue/lib/univalue.cpp	/^const UniValue& UniValue::get_array() const$/;"	f	class:UniValue
get_bool	univalue/lib/univalue.cpp	/^bool UniValue::get_bool() const$/;"	f	class:UniValue
get_int	univalue/lib/univalue.cpp	/^int UniValue::get_int() const$/;"	f	class:UniValue
get_int64	univalue/lib/univalue.cpp	/^int64_t UniValue::get_int64() const$/;"	f	class:UniValue
get_obj	univalue/lib/univalue.cpp	/^const UniValue& UniValue::get_obj() const$/;"	f	class:UniValue
get_openssl_key	secp256k1/src/tests.c	/^EC_KEY *get_openssl_key(const unsigned char *key32) {$/;"	f
get_real	univalue/lib/univalue.cpp	/^double UniValue::get_real() const$/;"	f	class:UniValue
get_str	univalue/lib/univalue.cpp	/^const std::string& UniValue::get_str() const$/;"	f	class:UniValue
getaccount	wallet/rpcwallet.cpp	/^UniValue getaccount(const JSONRPCRequest& request)$/;"	f
getaccountaddress	wallet/rpcwallet.cpp	/^UniValue getaccountaddress(const JSONRPCRequest& request)$/;"	f
getaddednodeinfo	rpc/net.cpp	/^UniValue getaddednodeinfo(const JSONRPCRequest& request)$/;"	f
getaddressesbyaccount	wallet/rpcwallet.cpp	/^UniValue getaddressesbyaccount(const JSONRPCRequest& request)$/;"	f
getbalance	wallet/rpcwallet.cpp	/^UniValue getbalance(const JSONRPCRequest& request)$/;"	f
getbestblockhash	rpc/blockchain.cpp	/^UniValue getbestblockhash(const JSONRPCRequest& request)$/;"	f
getblock	rpc/blockchain.cpp	/^UniValue getblock(const JSONRPCRequest& request)$/;"	f
getblockchaininfo	rpc/blockchain.cpp	/^UniValue getblockchaininfo(const JSONRPCRequest& request)$/;"	f
getblockcount	rpc/blockchain.cpp	/^UniValue getblockcount(const JSONRPCRequest& request)$/;"	f
getblockhash	rpc/blockchain.cpp	/^UniValue getblockhash(const JSONRPCRequest& request)$/;"	f
getblockheader	rpc/blockchain.cpp	/^UniValue getblockheader(const JSONRPCRequest& request)$/;"	f
getblocktemplate	rpc/mining.cpp	/^UniValue getblocktemplate(const JSONRPCRequest& request)$/;"	f
getchaintips	rpc/blockchain.cpp	/^UniValue getchaintips(const JSONRPCRequest& request)$/;"	f
getchaintxstats	rpc/blockchain.cpp	/^UniValue getchaintxstats(const JSONRPCRequest& request)$/;"	f
getconnectioncount	rpc/net.cpp	/^UniValue getconnectioncount(const JSONRPCRequest& request)$/;"	f
getdifficulty	rpc/blockchain.cpp	/^UniValue getdifficulty(const JSONRPCRequest& request)$/;"	f
getdouble	arith_uint256.cpp	/^double base_uint<BITS>::getdouble() const$/;"	f	class:base_uint
getinfo	rpc/misc.cpp	/^UniValue getinfo(const JSONRPCRequest& request)$/;"	f
getint	script/script.h	/^    int getint() const$/;"	f	class:CScriptNum
getint	test/scriptnum10.h	/^    int getint() const$/;"	f	class:CScriptNum10
getmemoryinfo	rpc/misc.cpp	/^UniValue getmemoryinfo(const JSONRPCRequest& request)$/;"	f
getmempoolancestors	rpc/blockchain.cpp	/^UniValue getmempoolancestors(const JSONRPCRequest& request)$/;"	f
getmempooldescendants	rpc/blockchain.cpp	/^UniValue getmempooldescendants(const JSONRPCRequest& request)$/;"	f
getmempoolentry	rpc/blockchain.cpp	/^UniValue getmempoolentry(const JSONRPCRequest& request)$/;"	f
getmempoolinfo	rpc/blockchain.cpp	/^UniValue getmempoolinfo(const JSONRPCRequest& request)$/;"	f
getmininginfo	rpc/mining.cpp	/^UniValue getmininginfo(const JSONRPCRequest& request)$/;"	f
getnettotals	rpc/net.cpp	/^UniValue getnettotals(const JSONRPCRequest& request)$/;"	f
getnetworkhashps	rpc/mining.cpp	/^UniValue getnetworkhashps(const JSONRPCRequest& request)$/;"	f
getnetworkinfo	rpc/net.cpp	/^UniValue getnetworkinfo(const JSONRPCRequest& request)$/;"	f
getnewaddress	wallet/rpcwallet.cpp	/^UniValue getnewaddress(const JSONRPCRequest& request)$/;"	f
getpeerinfo	rpc/net.cpp	/^UniValue getpeerinfo(const JSONRPCRequest& request)$/;"	f
getrawchangeaddress	wallet/rpcwallet.cpp	/^UniValue getrawchangeaddress(const JSONRPCRequest& request)$/;"	f
getrawmempool	rpc/blockchain.cpp	/^UniValue getrawmempool(const JSONRPCRequest& request)$/;"	f
getrawtransaction	rpc/rawtransaction.cpp	/^UniValue getrawtransaction(const JSONRPCRequest& request)$/;"	f
getreceivedbyaccount	wallet/rpcwallet.cpp	/^UniValue getreceivedbyaccount(const JSONRPCRequest& request)$/;"	f
getreceivedbyaddress	wallet/rpcwallet.cpp	/^UniValue getreceivedbyaddress(const JSONRPCRequest& request)$/;"	f
gettid	leveldb/util/env_posix.cc	/^  static uint64_t gettid() {$/;"	f	class:leveldb::__anon11::PosixEnv
gettid_	leveldb/util/posix_logger.h	/^  uint64_t (*gettid_)();  \/\/ Return the thread id for the current thread$/;"	m	class:leveldb::PosixLogger
gettimedouble	bench/bench.cpp	/^static double gettimedouble(void) {$/;"	f	file:
gettimedouble	crypto/ctaes/bench.c	/^static double gettimedouble(void) {$/;"	f	file:
gettimedouble	secp256k1/src/bench.h	/^static double gettimedouble(void) {$/;"	f
gettransaction	wallet/rpcwallet.cpp	/^UniValue gettransaction(const JSONRPCRequest& request)$/;"	f
gettxout	rpc/blockchain.cpp	/^UniValue gettxout(const JSONRPCRequest& request)$/;"	f
gettxoutproof	rpc/rawtransaction.cpp	/^UniValue gettxoutproof(const JSONRPCRequest& request)$/;"	f
gettxoutsetinfo	rpc/blockchain.cpp	/^UniValue gettxoutsetinfo(const JSONRPCRequest& request)$/;"	f
getunconfirmedbalance	wallet/rpcwallet.cpp	/^UniValue getunconfirmedbalance(const JSONRPCRequest &request)$/;"	f
getvch	script/script.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CScriptNum
getvch	test/scriptnum10.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CScriptNum10
getwalletinfo	wallet/rpcwallet.cpp	/^UniValue getwalletinfo(const JSONRPCRequest& request)$/;"	f
give_advice	secp256k1/build-aux/missing	/^give_advice ()$/;"	f
give_advice	univalue/build-aux/missing	/^give_advice ()$/;"	f
glibc_sanity_test	compat/glibc_sanity.cpp	/^bool glibc_sanity_test()$/;"	f
glibcxx_sanity_test	compat/glibcxx_sanity.cpp	/^bool glibcxx_sanity_test()$/;"	f
globalChainBaseParams	chainparamsbase.cpp	/^static std::unique_ptr<CBaseChainParams> globalChainBaseParams;$/;"	v	file:
globalChainParams	chainparams.cpp	/^static std::unique_ptr<CChainParams> globalChainParams;$/;"	v	file:
globalVerifyHandle	wificoin-tx.cpp	/^    ECCVerifyHandle globalVerifyHandle;$/;"	m	class:Secp256k1Init	file:
globalVerifyHandle	init.cpp	/^static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;$/;"	v	file:
globalVerifyHandle	test/test_wificoin.h	/^    ECCVerifyHandle globalVerifyHandle;$/;"	m	struct:BasicTestingSetup
gotoHistoryPage	qt/wificoingui.cpp	/^void WiFicoinGUI::gotoHistoryPage()$/;"	f	class:WiFicoinGUI
gotoHistoryPage	qt/walletframe.cpp	/^void WalletFrame::gotoHistoryPage()$/;"	f	class:WalletFrame
gotoHistoryPage	qt/walletview.cpp	/^void WalletView::gotoHistoryPage()$/;"	f	class:WalletView
gotoOverviewPage	qt/wificoingui.cpp	/^void WiFicoinGUI::gotoOverviewPage()$/;"	f	class:WiFicoinGUI
gotoOverviewPage	qt/walletframe.cpp	/^void WalletFrame::gotoOverviewPage()$/;"	f	class:WalletFrame
gotoOverviewPage	qt/walletview.cpp	/^void WalletView::gotoOverviewPage()$/;"	f	class:WalletView
gotoReceiveCoinsPage	qt/wificoingui.cpp	/^void WiFicoinGUI::gotoReceiveCoinsPage()$/;"	f	class:WiFicoinGUI
gotoReceiveCoinsPage	qt/walletframe.cpp	/^void WalletFrame::gotoReceiveCoinsPage()$/;"	f	class:WalletFrame
gotoReceiveCoinsPage	qt/walletview.cpp	/^void WalletView::gotoReceiveCoinsPage()$/;"	f	class:WalletView
gotoSendCoinsPage	qt/wificoingui.cpp	/^void WiFicoinGUI::gotoSendCoinsPage(QString addr)$/;"	f	class:WiFicoinGUI
gotoSendCoinsPage	qt/walletframe.cpp	/^void WalletFrame::gotoSendCoinsPage(QString addr)$/;"	f	class:WalletFrame
gotoSendCoinsPage	qt/walletview.cpp	/^void WalletView::gotoSendCoinsPage(QString addr)$/;"	f	class:WalletView
gotoSignMessageTab	qt/wificoingui.cpp	/^void WiFicoinGUI::gotoSignMessageTab(QString addr)$/;"	f	class:WiFicoinGUI
gotoSignMessageTab	qt/walletframe.cpp	/^void WalletFrame::gotoSignMessageTab(QString addr)$/;"	f	class:WalletFrame
gotoSignMessageTab	qt/walletview.cpp	/^void WalletView::gotoSignMessageTab(QString addr)$/;"	f	class:WalletView
gotoVerifyMessageTab	qt/wificoingui.cpp	/^void WiFicoinGUI::gotoVerifyMessageTab(QString addr)$/;"	f	class:WiFicoinGUI
gotoVerifyMessageTab	qt/walletframe.cpp	/^void WalletFrame::gotoVerifyMessageTab(QString addr)$/;"	f	class:WalletFrame
gotoVerifyMessageTab	qt/walletview.cpp	/^void WalletView::gotoVerifyMessageTab(QString addr)$/;"	f	class:WalletView
grandparent_index_	leveldb/db/version_set.h	/^  size_t grandparent_index_;  \/\/ Index in grandparent_starts_$/;"	m	class:leveldb::Compaction
grandparents_	leveldb/db/version_set.h	/^  std::vector<FileMetaData*> grandparents_;$/;"	m	class:leveldb::Compaction
grantOutbound	net.h	/^    CSemaphoreGrant grantOutbound;$/;"	m	class:CNode
gui	qt/walletframe.h	/^    WiFicoinGUI *gui;$/;"	m	class:WalletFrame
hSocket	net.h	/^    SOCKET hSocket;$/;"	m	class:CNode
handle	script/wificoinconsensus.cpp	/^    ECCVerifyHandle handle;$/;"	m	struct:__anon95::ECCryptoClosure	file:
handleOutOfSyncWarningClicks	qt/overviewpage.cpp	/^void OverviewPage::handleOutOfSyncWarningClicks()$/;"	f	class:OverviewPage
handlePaymentACK	qt/paymentserver.cpp	/^void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)$/;"	f	class:PaymentServer
handlePaymentRequest	qt/wificoingui.cpp	/^bool WiFicoinGUI::handlePaymentRequest(const SendCoinsRecipient& recipient)$/;"	f	class:WiFicoinGUI
handlePaymentRequest	qt/sendcoinsdialog.cpp	/^bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)$/;"	f	class:SendCoinsDialog
handlePaymentRequest	qt/walletframe.cpp	/^bool WalletFrame::handlePaymentRequest(const SendCoinsRecipient &recipient)$/;"	f	class:WalletFrame
handlePaymentRequest	qt/walletview.cpp	/^bool WalletView::handlePaymentRequest(const SendCoinsRecipient& recipient)$/;"	f	class:WalletView
handleRequest	qt/test/paymentservertests.cpp	/^static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsigned char>& data)$/;"	f	file:
handleRunawayException	qt/wificoin.cpp	/^void WiFicoinApplication::handleRunawayException(const QString &message)$/;"	f	class:WiFicoinApplication
handleRunawayException	qt/wificoin.cpp	/^void WiFicoinCore::handleRunawayException(const std::exception *e)$/;"	f	class:WiFicoinCore
handleSelectionChanged	qt/qvaluecombobox.cpp	/^void QValueComboBox::handleSelectionChanged(int idx)$/;"	f	class:QValueComboBox
handleTransactionClicked	qt/overviewpage.cpp	/^void OverviewPage::handleTransactionClicked(const QModelIndex &index)$/;"	f	class:OverviewPage
handleURIConnection	qt/paymentserver.cpp	/^void PaymentServer::handleURIConnection()$/;"	f	class:PaymentServer
handleURIOrFile	qt/paymentserver.cpp	/^void PaymentServer::handleURIOrFile(const QString& s)$/;"	f	class:PaymentServer
handler	httpserver.cpp	/^    HTTPRequestHandler handler;$/;"	m	struct:HTTPPathHandler	file:
handler	httpserver.h	/^    std::function<void(void)> handler;$/;"	m	class:HTTPEvent
handler	rest.cpp	/^    bool (*handler)(HTTPRequest* req, const std::string& strReq);$/;"	m	struct:__anon6	file:
hasAlpha	qt/notificator.cpp	/^    bool hasAlpha;$/;"	m	class:FreedesktopImage	file:
has_comparator_	leveldb/db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_imm_	leveldb/db/db_impl.h	/^  port::AtomicPointer has_imm_;  \/\/ So bg thread can detect non-NULL imm_$/;"	m	class:leveldb::DBImpl
has_last_sequence_	leveldb/db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	leveldb/db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	leveldb/db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_prev_log_number_	leveldb/db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
hash	leveldb/db/skiplist_test.cc	/^  static uint64_t hash(Key key) { return key & 0xff; }$/;"	f	class:leveldb::ConcurrentTest	file:
hash	leveldb/util/cache.cc	/^  uint32_t hash;      \/\/ Hash of key(); used for fast sharding and comparisons$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
hash	net_processing.cpp	/^        uint256 hash;$/;"	m	struct:__anon49::QueuedBlock	file:
hash	primitives/transaction.h	/^    const uint256 hash;$/;"	m	class:CTransaction
hash	primitives/transaction.h	/^    uint256 hash;$/;"	m	class:COutPoint
hash	protocol.h	/^    uint256 hash;$/;"	m	class:CInv
hash	qt/transactionrecord.h	/^    uint256 hash;$/;"	m	class:TransactionRecord
hash	qt/transactiontablemodel.cpp	/^    uint256 hash;$/;"	m	struct:TransactionNotification	file:
hash	rpc/blockchain.cpp	/^    uint256 hash;$/;"	m	struct:CUpdatedBlock	file:
hash	rpc/mining.cpp	/^    uint256 hash;$/;"	m	class:submitblock_StateCatcher	file:
hashAssumeValid	validation.cpp	/^uint256 hashAssumeValid;$/;"	v
hashBestBlock_	test/coins_tests.cpp	/^    uint256 hashBestBlock_;$/;"	m	class:__anon79::CCoinsViewTest	file:
hashBlock	coins.h	/^    mutable uint256 hashBlock;$/;"	m	class:CCoinsViewCache
hashBlock	coins.h	/^    uint256 hashBlock;$/;"	m	class:CCoinsViewCursor
hashBlock	net_processing.cpp	/^    uint256 hashBlock;$/;"	m	struct:__anon50::CBlockReject	file:
hashBlock	rpc/blockchain.cpp	/^    uint256 hashBlock;$/;"	m	struct:CCoinsStats	file:
hashBlock	wallet/wallet.h	/^    uint256 hashBlock;$/;"	m	class:CMerkleTx
hashContinue	net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashGenesisBlock	consensus/params.h	/^    uint256 hashGenesisBlock;$/;"	m	struct:Consensus::Params
hashLastUnknownBlock	net_processing.cpp	/^    uint256 hashLastUnknownBlock;$/;"	m	struct:__anon50::CNodeState	file:
hashMerkleRoot	chain.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashMerkleRoot	primitives/block.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockHeader
hashOutputs	script/interpreter.h	/^    uint256 hashPrevouts, hashSequence, hashOutputs;$/;"	m	struct:PrecomputedTransactionData
hashPrev	chain.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashPrevBlock	primitives/block.h	/^    uint256 hashPrevBlock;$/;"	m	class:CBlockHeader
hashPrevouts	script/interpreter.h	/^    uint256 hashPrevouts, hashSequence, hashOutputs;$/;"	m	struct:PrecomputedTransactionData
hashRecentRejectsChainTip	net_processing.cpp	/^    uint256 hashRecentRejectsChainTip;$/;"	m	namespace:__anon49	file:
hashSequence	script/interpreter.h	/^    uint256 hashPrevouts, hashSequence, hashOutputs;$/;"	m	struct:PrecomputedTransactionData
hashSerialized	rpc/blockchain.cpp	/^    uint256 hashSerialized;$/;"	m	struct:CCoinsStats	file:
hashUnset	wallet/wallet.h	/^    bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }$/;"	f	class:CMerkleTx
hash_function	cuckoocache.h	/^    const Hash hash_function;$/;"	m	class:CuckooCache::cache
hasher	net.h	/^    mutable CHash256 hasher;$/;"	m	class:CNetMessage
hatoui	univalue/lib/univalue_read.cpp	/^static const char *hatoui(const char *first, const char *last,$/;"	f	file:
havePush	test/script_tests.cpp	/^    bool havePush;$/;"	m	class:__anon80::TestBuilder	file:
haveWatchOnly	qt/walletmodel.cpp	/^bool WalletModel::haveWatchOnly() const$/;"	f	class:WalletModel
have_flag	secp256k1/src/bench_internal.c	/^int have_flag(int argc, char** argv, char *flag) {$/;"	f
hdChain	wallet/wallet.h	/^    CHDChain hdChain;$/;"	m	class:CWallet
hdEnabled	qt/walletmodel.cpp	/^bool WalletModel::hdEnabled() const$/;"	f	class:WalletModel
hdKeypath	wallet/walletdb.h	/^    std::string hdKeypath; \/\/optional HD\/bip32 keypath$/;"	m	class:CKeyMetadata
hdMasterKeyID	wallet/walletdb.h	/^    CKeyID hdMasterKeyID; \/\/id of the HD masterkey used to derive this key$/;"	m	class:CKeyMetadata
hdr	net.h	/^    CMessageHeader hdr;             \/\/ complete header$/;"	m	class:CNetMessage
hdrbuf	net.h	/^    CDataStream hdrbuf;             \/\/ partially received header$/;"	m	class:CNetMessage
head_	leveldb/db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
header	blockencodings.h	/^    CBlockHeader header;$/;"	m	class:CBlockHeaderAndShortTxIDs
header	blockencodings.h	/^    CBlockHeader header;$/;"	m	class:PartiallyDownloadedBlock
header	merkleblock.h	/^    CBlockHeader header;$/;"	m	class:CMerkleBlock
header	test/blockencodings_tests.cpp	/^    CBlockHeader header;$/;"	m	class:TestHeaderAndShortIDs	file:
headerData	qt/addresstablemodel.cpp	/^QVariant AddressTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:AddressTableModel
headerData	qt/bantablemodel.cpp	/^QVariant BanTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:BanTableModel
headerData	qt/peertablemodel.cpp	/^QVariant PeerTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:PeerTableModel
headerData	qt/recentrequeststablemodel.cpp	/^QVariant RecentRequestsTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:RecentRequestsTableModel
headerData	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:TransactionTableModel
headerSectionClicked	qt/coincontroldialog.cpp	/^void CoinControlDialog::headerSectionClicked(int logicalIndex)$/;"	f	class:CoinControlDialog
heap_allocated	leveldb/table/format.h	/^  bool heap_allocated;  \/\/ True iff caller should delete[] data.data()$/;"	m	struct:leveldb::BlockContents
heap_counter_	leveldb/db/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark	file:
height	qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
height	rpc/blockchain.cpp	/^    int height;$/;"	m	struct:CUpdatedBlock	file:
height	txmempool.h	/^    int height;$/;"	m	struct:LockPoints
help	rpc/server.cpp	/^UniValue help(const JSONRPCRequest& jsonRequest)$/;"	f
help	rpc/server.cpp	/^std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest& helpreq) const$/;"	f	class:CRPCTable
helpMessageDialog	qt/wificoingui.h	/^    HelpMessageDialog *helpMessageDialog;$/;"	m	class:WiFicoinGUI
hideEvent	qt/rpcconsole.cpp	/^void RPCConsole::hideEvent(QHideEvent *event)$/;"	f	class:RPCConsole
hist_	leveldb/db/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::__anon18::Stats	file:
hist_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
hist_	leveldb/doc/bench/db_bench_tree_db.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
historicalBest	policy/fees.h	/^    unsigned int historicalBest;$/;"	m	class:CBlockPolicyEstimator
historicalFirst	policy/fees.h	/^    unsigned int historicalFirst;$/;"	m	class:CBlockPolicyEstimator
history	qt/rpcconsole.h	/^    QStringList history;$/;"	m	class:RPCConsole
historyAction	qt/wificoingui.h	/^    QAction *historyAction;$/;"	m	class:WiFicoinGUI
historyFilter	qt/rpcconsole.cpp	/^const QStringList historyFilter = QStringList()$/;"	m	namespace:__anon111	file:
historyPtr	qt/rpcconsole.h	/^    int historyPtr;$/;"	m	class:RPCConsole
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	chainparams.h	/^    std::string host;$/;"	m	struct:CDNSSeedData
host	secp256k1/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	univalue/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_alias	secp256k1/Makefile	/^host_alias = $/;"	m
host_alias	univalue/Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	secp256k1/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	univalue/Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_os	secp256k1/Makefile	/^host_os = linux-gnu$/;"	m
host_os	univalue/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	secp256k1/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	univalue/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
host_vendor	secp256k1/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	univalue/Makefile	/^host_vendor = unknown$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	secp256k1/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	univalue/Makefile	/^htmldir = ${docdir}$/;"	m
htobe16	compat/endian.h	/^inline uint16_t htobe16(uint16_t host_16bits)$/;"	f
htobe32	compat/endian.h	/^inline uint32_t htobe32(uint32_t host_32bits)$/;"	f
htobe64	compat/endian.h	/^inline uint64_t htobe64(uint64_t host_64bits)$/;"	f
htole16	compat/endian.h	/^inline uint16_t htole16(uint16_t host_16bits)$/;"	f
htole32	compat/endian.h	/^inline uint32_t htole32(uint32_t host_32bits)$/;"	f
htole64	compat/endian.h	/^inline uint64_t htole64(uint64_t host_64bits)$/;"	f
httpRPCTimerInterface	httprpc.cpp	/^static HTTPRPCTimerInterface* httpRPCTimerInterface = 0;$/;"	v	file:
http_error_cb	wificoin-cli.cpp	/^static void http_error_cb(enum evhttp_request_error err, void *ctx)$/;"	f	file:
http_errorstring	wificoin-cli.cpp	/^const char *http_errorstring(int code)$/;"	f
http_reject_request_cb	httpserver.cpp	/^static void http_reject_request_cb(struct evhttp_request* req, void*)$/;"	f	file:
http_request_cb	httpserver.cpp	/^static void http_request_cb(struct evhttp_request* req, void* arg)$/;"	f	file:
http_request_done	wificoin-cli.cpp	/^static void http_request_done(struct evhttp_request *req, void *ctx)$/;"	f	file:
httpevent_callback_fn	httpserver.cpp	/^static void httpevent_callback_fn(evutil_socket_t, short, void* data)$/;"	f	file:
i	wallet/wallet.h	/^    int i;$/;"	m	class:COutput
i64tostr	utilstrencodings.cpp	/^std::string i64tostr(int64_t n)$/;"	f
icmp_	leveldb/db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon26::Repairer	file:
icmp_	leveldb/db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
icmp_	leveldb/db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
iconColorHueShift	qt/networkstyle.cpp	/^    const int iconColorHueShift;$/;"	m	struct:__anon107	file:
iconColorSaturationReduction	qt/networkstyle.cpp	/^    const int iconColorSaturationReduction;$/;"	m	struct:__anon107	file:
id	leveldb/db/db_test.cc	/^  int id;$/;"	m	struct:leveldb::__anon30::MTThread	file:
id	net.cpp	/^    NodeId id;$/;"	m	struct:NodeEvictionCandidate	file:
id	net.h	/^    const NodeId id;$/;"	m	class:CNode
id	qt/recentrequeststablemodel.h	/^    int64_t id;$/;"	m	class:RecentRequestEntry
id	rpc/server.h	/^    UniValue id;$/;"	m	class:JSONRPCRequest
id	test/DoS_tests.cpp	/^static NodeId id = 0;$/;"	v	file:
id	versionbits.cpp	/^    const Consensus::DeploymentPos id;$/;"	m	class:__anon94::VersionBitsConditionChecker	file:
id_mutex_	leveldb/util/cache.cc	/^  port::Mutex id_mutex_;$/;"	m	class:leveldb::__anon13::ShardedLRUCache	file:
idx	qt/transactionrecord.h	/^    int idx;$/;"	m	class:TransactionRecord
ignore	hash.h	/^    void ignore(size_t nSize)$/;"	f	class:CHashVerifier
ignore	streams.h	/^    void ignore(int nSize)$/;"	f	class:CDataStream
ignore	streams.h	/^    void ignore(size_t nSize)$/;"	f	class:CAutoFile
illegal_callback	secp256k1/src/secp256k1.c	/^    secp256k1_callback illegal_callback;$/;"	m	struct:secp256k1_context_struct	file:
image	qt/notificator.cpp	/^    QByteArray image;$/;"	m	class:FreedesktopImage	file:
imagesOnButtons	qt/platformstyle.cpp	/^    const bool imagesOnButtons;$/;"	m	struct:__anon112	file:
imagesOnButtons	qt/platformstyle.h	/^    bool imagesOnButtons;$/;"	m	class:PlatformStyle
imm	leveldb/db/db_impl.cc	/^  MemTable* imm;$/;"	m	struct:leveldb::__anon27::IterState	file:
imm_	leveldb/db/db_impl.h	/^  MemTable* imm_;                \/\/ Memtable being compacted$/;"	m	class:leveldb::DBImpl
importaddress	wallet/rpcdump.cpp	/^UniValue importaddress(const JSONRPCRequest& request)$/;"	f
importmulti	wallet/rpcdump.cpp	/^UniValue importmulti(const JSONRPCRequest& mainRequest)$/;"	f
importprivkey	wallet/rpcdump.cpp	/^UniValue importprivkey(const JSONRPCRequest& request)$/;"	f
importprunedfunds	wallet/rpcdump.cpp	/^UniValue importprunedfunds(const JSONRPCRequest& request)$/;"	f
importpubkey	wallet/rpcdump.cpp	/^UniValue importpubkey(const JSONRPCRequest& request)$/;"	f
importwallet	wallet/rpcdump.cpp	/^UniValue importwallet(const JSONRPCRequest& request)$/;"	f
inBlock	miner.h	/^    CTxMemPool::setEntries inBlock;$/;"	m	class:BlockAssembler
inInitialBlockDownload	qt/clientmodel.cpp	/^bool ClientModel::inInitialBlockDownload() const$/;"	f	class:ClientModel
inMempool	policy/fees.h	/^    double inMempool = 0;$/;"	m	struct:EstimatorBucket
in_avail	streams.h	/^    int in_avail()               { return size(); }$/;"	f	class:CDataStream
in_cache	leveldb/util/cache.cc	/^  bool in_cache;      \/\/ Whether entry is in the cache.$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
in_data	net.h	/^    bool in_data;                   \/\/ parsing header (false) or data (true)$/;"	m	class:CNetMessage
in_use_	leveldb/util/cache.cc	/^  LRUHandle in_use_;$/;"	m	class:leveldb::__anon13::LRUCache	file:
include_HEADERS	Makefile	/^include_HEADERS = script\/wificoinconsensus.h$/;"	m
include_HEADERS	secp256k1/Makefile	/^include_HEADERS = include\/secp256k1.h $(am__append_10) \\$/;"	m
include_HEADERS	univalue/Makefile	/^include_HEADERS = include\/univalue.h$/;"	m
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	secp256k1/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	univalue/Makefile	/^includedir = ${prefix}\/include$/;"	m
incomingTransaction	qt/wificoingui.cpp	/^void WiFicoinGUI::incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label)$/;"	f	class:WiFicoinGUI
incrementalRelayFee	policy/policy.cpp	/^CFeeRate incrementalRelayFee = CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE);$/;"	v
indentStr	univalue/lib/univalue_write.cpp	/^static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)$/;"	f	file:
index	blockencodings.h	/^    uint16_t index;$/;"	m	struct:PrefilledTransaction
index	qt/addresstablemodel.cpp	/^    AddressTableEntry *index(int idx)$/;"	f	class:AddressTablePriv
index	qt/addresstablemodel.cpp	/^QModelIndex AddressTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:AddressTableModel
index	qt/bantablemodel.cpp	/^    CCombinedBan *index(int idx)$/;"	f	class:BanTablePriv
index	qt/bantablemodel.cpp	/^QModelIndex BanTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:BanTableModel
index	qt/peertablemodel.cpp	/^    CNodeCombinedStats *index(int idx)$/;"	f	class:PeerTablePriv
index	qt/peertablemodel.cpp	/^QModelIndex PeerTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:PeerTableModel
index	qt/recentrequeststablemodel.cpp	/^QModelIndex RecentRequestsTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:RecentRequestsTableModel
index	qt/transactiontablemodel.cpp	/^    TransactionRecord *index(int idx)$/;"	f	class:TransactionTablePriv
index	qt/transactiontablemodel.cpp	/^QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
index_	leveldb/db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
index_block	leveldb/table/table.cc	/^  Block* index_block;$/;"	m	struct:leveldb::Table::Rep	file:
index_block	leveldb/table/table_builder.cc	/^  BlockBuilder index_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_block_options	leveldb/table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_handle	leveldb/table/format.h	/^  const BlockHandle& index_handle() const {$/;"	f	class:leveldb::Footer
index_handle_	leveldb/table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	leveldb/table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon39::TwoLevelIterator	file:
indexed_disconnected_transactions	txmempool.h	/^    > indexed_disconnected_transactions;$/;"	t	struct:DisconnectedBlockTransactions
indexed_modified_transaction_set	miner.h	/^> indexed_modified_transaction_set;$/;"	t
indexed_transaction_set	txmempool.h	/^    > indexed_transaction_set;$/;"	t	class:CTxMemPool
indexes	blockencodings.h	/^    std::vector<uint16_t> indexes;$/;"	m	class:BlockTransactionsRequest
indirect	prevector.h	/^            char* indirect;$/;"	m	struct:prevector::direct_or_indirect::__anon75
indirect_ptr	prevector.h	/^    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }$/;"	f	class:prevector
indirect_ptr	prevector.h	/^    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }$/;"	f	class:prevector
indirectmap	indirectmap.h	/^class indirectmap {$/;"	c
infinity	secp256k1/src/group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon70
infinity	secp256k1/src/group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon71
info	qt/receiverequestdialog.h	/^    SendCoinsRecipient info;$/;"	m	class:ReceiveRequestDialog
info	txmempool.cpp	/^TxMempoolInfo CTxMemPool::info(const uint256& hash) const$/;"	f	class:CTxMemPool
infoAll	txmempool.cpp	/^std::vector<TxMempoolInfo> CTxMemPool::infoAll() const$/;"	f	class:CTxMemPool
info_log	leveldb/include/leveldb/options.h	/^  Logger* info_log;$/;"	m	struct:leveldb::Options
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	secp256k1/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	univalue/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
initEscapes	univalue/gen/gen.cpp	/^static bool initEscapes;$/;"	v	file:
initJsonEscape	univalue/gen/gen.cpp	/^static void initJsonEscape()$/;"	f	file:
initNetManager	qt/paymentserver.cpp	/^void PaymentServer::initNetManager()$/;"	f	class:PaymentServer
initTranslations	qt/wificoin.cpp	/^static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTranslator, QTranslator &translatorBase, QTranslator &translator)$/;"	f	file:
init_	leveldb/port/port_win.h	/^    bool init_;$/;"	m	class:leveldb::port::OnceType
init_flag	support/lockedpool.cpp	/^std::once_flag LockedPoolManager::init_flag;$/;"	m	class:LockedPoolManager	file:
init_flag	support/lockedpool.h	/^    static std::once_flag init_flag;$/;"	m	class:LockedPoolManager
initial	secp256k1/src/ecmult_gen.h	/^    secp256k1_gej initial;$/;"	m	struct:__anon54
initial_offset_	leveldb/db/log_reader.h	/^  uint64_t const initial_offset_;$/;"	m	class:leveldb::log::Reader
initial_offset_last_record_offsets_	leveldb/db/log_test.cc	/^  static uint64_t initial_offset_last_record_offsets_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_last_record_offsets_	leveldb/db/log_test.cc	/^uint64_t LogTest::initial_offset_last_record_offsets_[] =$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	leveldb/db/log_test.cc	/^  static size_t initial_offset_record_sizes_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	leveldb/db/log_test.cc	/^size_t LogTest::initial_offset_record_sizes_[] =$/;"	m	class:leveldb::log::LogTest	file:
initialize	qt/wificoin.cpp	/^void WiFicoinCore::initialize()$/;"	f	class:WiFicoinCore
initializeResult	qt/wificoin.cpp	/^void WiFicoinApplication::initializeResult(bool success)$/;"	f	class:WiFicoinApplication
inner	crypto/hmac_sha256.h	/^    CSHA256 inner;$/;"	m	class:CHMAC_SHA256
inner	crypto/hmac_sha512.h	/^    CSHA512 inner;$/;"	m	class:CHMAC_SHA512
inner	secp256k1/src/hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon61
input	crypto/chacha20.h	/^    uint32_t input[16];$/;"	m	class:ChaCha20
input	leveldb/db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input	timedata.h	/^    void input(T value)$/;"	f	class:CMedianFilter
input_version_	leveldb/db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs_	leveldb/db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2];      \/\/ The two sets of inputs$/;"	m	class:leveldb::Compaction
insecure_GetRandHash	test/cuckoocache_tests.cpp	/^void insecure_GetRandHash(uint256& t)$/;"	f
insecure_rand	addrman.h	/^    FastRandomContext insecure_rand;$/;"	m	class:CAddrMan
insecure_rand	policy/fees.h	/^    FastRandomContext insecure_rand;$/;"	m	class:FeeFilterRounder
insecure_rand_seed	test/test_wificoin.cpp	/^uint256 insecure_rand_seed = GetRandHash();$/;"	v
insert	bloom.cpp	/^void CBloomFilter::insert(const COutPoint& outpoint)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CBloomFilter::insert(const uint256& hash)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CRollingBloomFilter
insert	bloom.cpp	/^void CRollingBloomFilter::insert(const uint256& hash)$/;"	f	class:CRollingBloomFilter
insert	cuckoocache.h	/^    inline void insert(Element e)$/;"	f	class:CuckooCache::cache
insert	indirectmap.h	/^    std::pair<iterator, bool> insert(const value_type& value) { return m.insert(value); }$/;"	f	class:indirectmap
insert	limitedmap.h	/^    void insert(const value_type& x)$/;"	f	class:limitedmap
insert	prevector.h	/^    iterator insert(iterator pos, const T& value) {$/;"	f	class:prevector
insert	prevector.h	/^    void insert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:prevector
insert	prevector.h	/^    void insert(iterator pos, size_type count, const T& value) {$/;"	f	class:prevector
insert	streams.h	/^    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }$/;"	f	class:CDataStream
insert	streams.h	/^    void insert(iterator it, const char* first, const char* last)$/;"	f	class:CDataStream
insert	streams.h	/^    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }$/;"	f	class:CDataStream
insert	streams.h	/^    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)$/;"	f	class:CDataStream
insert	test/prevector_tests.cpp	/^    void insert(Size position, Size count, const T& value) {$/;"	f	class:prevector_tester
insert	test/prevector_tests.cpp	/^    void insert(Size position, const T& value) {$/;"	f	class:prevector_tester
insert_range	test/prevector_tests.cpp	/^    void insert_range(Size position, I first, I last) {$/;"	f	class:prevector_tester
insertion_order	txmempool.h	/^struct insertion_order {};$/;"	s
install_sh	Makefile	/^install_sh = ${SHELL} \/opt\/wificoin\/build-aux\/install-sh$/;"	m
install_sh	secp256k1/Makefile	/^install_sh = ${SHELL} \/opt\/wificoin\/src\/secp256k1\/build-aux\/install-sh$/;"	m
install_sh	univalue/Makefile	/^install_sh = ${SHELL} \/opt\/wificoin\/src\/univalue\/build-aux\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	secp256k1/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	univalue/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	secp256k1/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	univalue/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	secp256k1/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	univalue/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance_of_cinit	util.cpp	/^instance_of_cinit;$/;"	v	typeref:class:CInit
instance_of_cmaincleanup	validation.cpp	/^} instance_of_cmaincleanup;$/;"	v	typeref:class:CMainCleanup
instance_of_cnetcleanup	net.cpp	/^instance_of_cnetcleanup;$/;"	v	typeref:class:CNetCleanup
instance_of_cnetprocessingcleanup	net_processing.cpp	/^} instance_of_cnetprocessingcleanup;$/;"	v	typeref:class:CNetProcessingCleanup
instance_of_eccryptoclosure	script/wificoinconsensus.cpp	/^ECCryptoClosure instance_of_eccryptoclosure;$/;"	m	namespace:__anon95	file:
instantiate	qt/networkstyle.cpp	/^const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)$/;"	f	class:NetworkStyle
instantiate	qt/platformstyle.cpp	/^const PlatformStyle *PlatformStyle::instantiate(const QString &platformId)$/;"	f	class:PlatformStyle
int16_t	leveldb/port/win/stdint.h	/^typedef signed short          int16_t;$/;"	t
int32_t	leveldb/port/win/stdint.h	/^typedef signed int            int32_t;$/;"	t
int64_t	leveldb/port/win/stdint.h	/^typedef signed long long      int64_t;$/;"	t
int8_t	leveldb/port/win/stdint.h	/^typedef signed char           int8_t;$/;"	t
interface	qt/notificator.h	/^    QDBusInterface *interface;$/;"	m	class:Notificator
internal_comparator	leveldb/db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestKey	file:
internal_comparator_	leveldb/db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_comparator_	leveldb/table/table_test.cc	/^  InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::MemTableConstructor	file:
internal_filter_policy_	leveldb/db/db_impl.h	/^  const InternalFilterPolicy internal_filter_policy_;$/;"	m	class:leveldb::DBImpl
internal_key	leveldb/db/dbformat.h	/^  Slice internal_key() const { return Slice(kstart_, end_ - kstart_); }$/;"	f	class:leveldb::LookupKey
interruptNet	net.h	/^    CThreadInterrupt interruptNet;$/;"	m	class:CConnman
intro	qt/intro.cpp	/^    Intro *intro;$/;"	m	class:FreespaceChecker	file:
intval	test/serialize_tests.cpp	/^    int intval;$/;"	m	class:CSerializeMethodsTestSingle	file:
invalid	cuckoocache.h	/^    constexpr uint32_t invalid() const$/;"	f	class:CuckooCache::cache
invalidateblock	rpc/blockchain.cpp	/^UniValue invalidateblock(const JSONRPCRequest& request)$/;"	f
invlockorders	sync.cpp	/^    InvLockOrders invlockorders;$/;"	m	struct:LockData	file:
invoke	qt/transactiontablemodel.cpp	/^    void invoke(QObject *ttm)$/;"	f	struct:TransactionNotification
invoke	tinyformat.h	/^    static bool invoke(std::ostream& \/**\/, const T& \/**\/) { return false; }$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	tinyformat.h	/^    static bool invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	tinyformat.h	/^    static int invoke(const T& \/*value*\/)$/;"	f	struct:tinyformat::detail::convertToInt
invoke	tinyformat.h	/^    static int invoke(const T& value) { return static_cast<int>(value); }$/;"	f	struct:tinyformat::detail::convertToInt
invoke	tinyformat.h	/^    static void invoke(std::ostream& \/*out*\/, const T& \/*value*\/) { assert(0); }$/;"	f	struct:tinyformat::detail::formatValueAsType
invoke	tinyformat.h	/^    static void invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatValueAsType
involvesWatchAddress	qt/transactionrecord.h	/^    bool involvesWatchAddress;$/;"	m	class:TransactionRecord
ip	netaddress.h	/^        unsigned char ip[16]; \/\/ in network byte order$/;"	m	class:CNetAddr
ip	test/DoS_tests.cpp	/^CService ip(uint32_t i)$/;"	f
ipcParseCommandLine	qt/paymentserver.cpp	/^void PaymentServer::ipcParseCommandLine(int argc, char* argv[])$/;"	f	class:PaymentServer
ipcSendCommandLine	qt/paymentserver.cpp	/^bool PaymentServer::ipcSendCommandLine()$/;"	f	class:PaymentServer
ipcServerName	qt/paymentserver.cpp	/^static QString ipcServerName()$/;"	f	file:
ipolicy_	leveldb/db/repair.cc	/^  InternalFilterPolicy const ipolicy_;$/;"	m	class:leveldb::__anon26::Repairer	file:
isAbandoned	wallet/wallet.h	/^    bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }$/;"	f	class:CMerkleTx
isArray	univalue/include/univalue.h	/^    bool isArray() const { return (typ == VARR); }$/;"	f	class:UniValue
isBool	univalue/include/univalue.h	/^    bool isBool() const { return (typ == VBOOL); }$/;"	f	class:UniValue
isCanonicalException	test/serialize_tests.cpp	/^static bool isCanonicalException(const std::ios_base::failure& ex)$/;"	f	file:
isClear	qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::isClear()$/;"	f	class:SendCoinsEntry
isDust	qt/guiutil.cpp	/^bool isDust(const QString& address, const CAmount& amount)$/;"	f	namespace:GUIUtil
isEmpty	bloom.h	/^    bool isEmpty;$/;"	m	class:CBloomFilter
isEnable	leveldb/util/env_win.cc	/^BOOL Win32FileLock::isEnable()$/;"	f	class:leveldb::Win32::Win32FileLock
isEnable	leveldb/util/env_win.cc	/^BOOL Win32RandomAccessFile::isEnable()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
isEnable	leveldb/util/env_win.cc	/^BOOL Win32SequentialFile::isEnable()$/;"	f	class:leveldb::Win32::Win32SequentialFile
isEnable	leveldb/util/env_win.cc	/^BOOL Win32WritableFile::isEnable()$/;"	f	class:leveldb::Win32::Win32WritableFile
isEnabled	secp256k1/src/java/org/wificoin/Secp256k1Context.java	/^  public static boolean isEnabled() {$/;"	m	class:Secp256k1Context
isFalse	univalue/include/univalue.h	/^    bool isFalse() const { return (typ == VBOOL) && (val != "1"); }$/;"	f	class:UniValue
isFull	bloom.h	/^    bool isFull;$/;"	m	class:CBloomFilter
isLayerVisible	qt/modaloverlay.h	/^    bool isLayerVisible() { return layerIsVisible; }$/;"	f	class:ModalOverlay
isLockedCoin	qt/walletmodel.cpp	/^bool WalletModel::isLockedCoin(uint256 hash, unsigned int n) const$/;"	f	class:WalletModel
isNull	univalue/include/univalue.h	/^    bool isNull() const { return (typ == VNULL); }$/;"	f	class:UniValue
isNum	univalue/include/univalue.h	/^    bool isNum() const { return (typ == VNUM); }$/;"	f	class:UniValue
isObject	univalue/include/univalue.h	/^    bool isObject() const { return (typ == VOBJ); }$/;"	f	class:UniValue
isObscured	qt/guiutil.cpp	/^bool isObscured(QWidget *w)$/;"	f	namespace:GUIUtil
isReleaseVersion	qt/clientmodel.cpp	/^bool ClientModel::isReleaseVersion() const$/;"	f	class:ClientModel
isRestartRequired	qt/optionsmodel.cpp	/^bool OptionsModel::isRestartRequired()$/;"	f	class:OptionsModel
isSpent	qt/walletmodel.cpp	/^bool WalletModel::isSpent(const COutPoint& outpoint) const$/;"	f	class:WalletModel
isSpent	txmempool.cpp	/^bool CTxMemPool::isSpent(const COutPoint& outpoint)$/;"	f	class:CTxMemPool
isStr	univalue/include/univalue.h	/^    bool isStr() const { return (typ == VSTR); }$/;"	f	class:UniValue
isTrue	univalue/include/univalue.h	/^    bool isTrue() const { return (typ == VBOOL) && (val == "1"); }$/;"	f	class:UniValue
isValid	qt/qvalidatedlineedit.cpp	/^bool QValidatedLineEdit::isValid()$/;"	f	class:QValidatedLineEdit
isValid	qt/walletmodel.h	/^        bool isValid() const { return valid; }$/;"	f	class:WalletModel::UnlockContext
isWalletEnabled	qt/walletmodel.cpp	/^bool WalletModel::isWalletEnabled()$/;"	f	class:WalletModel
is_convertible	tinyformat.h	/^struct is_convertible$/;"	s	namespace:tinyformat::detail
is_default	leveldb/db/c.cc	/^  bool is_default;$/;"	m	struct:leveldb_env_t	file:
is_direct	prevector.h	/^    bool is_direct() const { return _size <= N; }$/;"	f	class:prevector
is_empty_signature	secp256k1/src/tests.c	/^int is_empty_signature(const secp256k1_ecdsa_signature *sig) {$/;"	f
is_null_key	test/dbwrapper_tests.cpp	/^bool is_null_key(const std::vector<unsigned char>& key) {$/;"	f
is_valid	univalue/lib/univalue_utffilter.h	/^    bool is_valid;$/;"	m	class:JSONUTF8StringFilter
is_wchar	tinyformat.h	/^template<> struct is_wchar<const wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<> struct is_wchar<wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<int n> struct is_wchar<const wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<int n> struct is_wchar<wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	s	namespace:tinyformat::detail
isminefilter	script/ismine.h	/^typedef uint8_t isminefilter;$/;"	t
isminetype	script/ismine.h	/^enum isminetype$/;"	g
item_ptr	prevector.h	/^    T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }$/;"	f	class:prevector
item_ptr	prevector.h	/^    const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }$/;"	f	class:prevector
iter	leveldb/table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter	miner.h	/^    CTxMemPool::txiter iter;$/;"	m	struct:CTxMemPoolModifiedEntry
iter	miner.h	/^    CTxMemPool::txiter iter;$/;"	m	struct:update_for_parent_inclusion
iter_	leveldb/db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon20::DBIter	file:
iter_	leveldb/db/db_test.cc	/^    KVMap::const_iterator iter_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
iter_	leveldb/db/memtable.cc	/^  MemTable::Table::Iterator iter_;$/;"	m	class:leveldb::MemTableIterator	file:
iter_	leveldb/table/iterator_wrapper.h	/^  Iterator* iter_;$/;"	m	class:leveldb::IteratorWrapper
iter_	leveldb/table/table_test.cc	/^  Iterator* iter_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
iterator	indirectmap.h	/^    typedef typename base::iterator iterator;$/;"	t	class:indirectmap
iterator	limitedmap.h	/^    typedef typename std::map<K, V>::iterator iterator;$/;"	t	class:limitedmap
iterator	prevector.h	/^        iterator(T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::iterator
iterator	prevector.h	/^    class iterator {$/;"	c	class:prevector
iterator	streams.h	/^    typedef vector_type::iterator         iterator;$/;"	t	class:CDataStream
iterator_category	prevector.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:prevector::const_reverse_iterator
iterator_category	prevector.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:prevector::reverse_iterator
iterator_category	prevector.h	/^        typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:prevector::const_iterator
iterator_category	prevector.h	/^        typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:prevector::iterator
iteroptions	dbwrapper.h	/^    leveldb::ReadOptions iteroptions;$/;"	m	class:CDBWrapper
itostr	utilstrencodings.cpp	/^std::string itostr(int n)$/;"	f
iv	crypto/aes.h	/^    unsigned char iv[AES_BLOCKSIZE];$/;"	m	class:AES128CBCDecrypt
iv	crypto/aes.h	/^    unsigned char iv[AES_BLOCKSIZE];$/;"	m	class:AES128CBCEncrypt
iv	crypto/aes.h	/^    unsigned char iv[AES_BLOCKSIZE];$/;"	m	class:AES256CBCDecrypt
iv	crypto/aes.h	/^    unsigned char iv[AES_BLOCKSIZE];$/;"	m	class:AES256CBCEncrypt
json1	test/univalue_tests.cpp	/^static const char *json1 =$/;"	v	file:
jsonTokenIsValue	univalue/include/univalue.h	/^static inline bool jsonTokenIsValue(enum jtokentype jtt)$/;"	f
json_escape	univalue/lib/univalue_write.cpp	/^static string json_escape(const string& inS)$/;"	f	file:
json_isdigit	univalue/lib/univalue_read.cpp	/^static bool json_isdigit(int ch)$/;"	f	file:
json_isspace	univalue/include/univalue.h	/^static inline bool json_isspace(int ch)$/;"	f
json_tests	test/data/base58_encode_decode.json.h	/^namespace json_tests{$/;"	n
json_tests	test/data/base58_keys_invalid.json.h	/^namespace json_tests{$/;"	n
json_tests	test/data/base58_keys_valid.json.h	/^namespace json_tests{$/;"	n
json_tests	test/data/script_tests.json.h	/^namespace json_tests{$/;"	n
json_tests	test/data/sighash.json.h	/^namespace json_tests{$/;"	n
json_tests	test/data/tx_invalid.json.h	/^namespace json_tests{$/;"	n
json_tests	test/data/tx_valid.json.h	/^namespace json_tests{$/;"	n
jtokentype	univalue/include/univalue.h	/^enum jtokentype {$/;"	g
k	secp256k1/src/hash.h	/^    unsigned char k[32];$/;"	m	struct:__anon62
k0	coins.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedOutpointHasher
k0	txmempool.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedTxidHasher
k1	coins.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedOutpointHasher
k1	crypto/sha1.cpp	/^const uint32_t k1 = 0x5A827999ul;$/;"	m	namespace:__anon90::sha1	file:
k1	txmempool.h	/^    const uint64_t k0, k1;$/;"	m	class:SaltedTxidHasher
k2	crypto/sha1.cpp	/^const uint32_t k2 = 0x6ED9EBA1ul;$/;"	m	namespace:__anon90::sha1	file:
k3	crypto/sha1.cpp	/^const uint32_t k3 = 0x8F1BBCDCul;$/;"	m	namespace:__anon90::sha1	file:
k4	crypto/sha1.cpp	/^const uint32_t k4 = 0xCA62C1D6ul;$/;"	m	namespace:__anon90::sha1	file:
kBadRecord	leveldb/db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon25
kBlockSize	leveldb/db/log_format.h	/^static const int kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	leveldb/helpers/memenv/memenv.cc	/^  enum { kBlockSize = 8 * 1024 };$/;"	e	enum:leveldb::__anon16::FileState::__anon17	file:
kBlockSize	leveldb/util/arena.cc	/^static const int kBlockSize = 4096;$/;"	m	namespace:leveldb	file:
kBlockTrailerSize	leveldb/table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	leveldb/util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram	file:
kBucketLimit	leveldb/util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kCacheSize	leveldb/util/cache_test.cc	/^  static const int kCacheSize = 1000;$/;"	m	class:leveldb::CacheTest	file:
kCompactPointer	leveldb/db/version_edit.cc	/^  kCompactPointer       = 5,$/;"	e	enum:leveldb::Tag	file:
kComparator	leveldb/db/version_edit.cc	/^  kComparator           = 1,$/;"	e	enum:leveldb::Tag	file:
kCorrupt	leveldb/db/version_set.cc	/^  kCorrupt,$/;"	e	enum:leveldb::__anon22::SaverState	file:
kCorruption	leveldb/include/leveldb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCount	leveldb/db/autocompact_test.cc	/^static const int kCount = kTotalSize \/ kValueSize;$/;"	m	namespace:leveldb	file:
kCurrentFile	leveldb/db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	leveldb/db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDefault	leveldb/db/db_test.cc	/^    kDefault,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kDelayMicros	leveldb/util/env_posix_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDelayMicros	leveldb/util/env_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDeleted	leveldb/db/version_set.cc	/^  kDeleted,$/;"	e	enum:leveldb::__anon22::SaverState	file:
kDeletedFile	leveldb/db/version_edit.cc	/^  kDeletedFile          = 6,$/;"	e	enum:leveldb::Tag	file:
kDescriptorFile	leveldb/db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	leveldb/table/format.h	/^    kEncodedLength = 2*BlockHandle::kMaxEncodedLength + 8$/;"	e	enum:leveldb::Footer::__anon38
kEnd	leveldb/db/db_test.cc	/^    kEnd$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kEof	leveldb/db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon25
kFilter	leveldb/db/db_test.cc	/^    kFilter,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kFilterBase	leveldb/table/filter_block.cc	/^static const size_t kFilterBase = 1 << kFilterBaseLg;$/;"	m	namespace:leveldb	file:
kFilterBaseLg	leveldb/table/filter_block.cc	/^static const size_t kFilterBaseLg = 11;$/;"	m	namespace:leveldb	file:
kFirstType	leveldb/db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	leveldb/db/db_iter.cc	/^    kForward,$/;"	e	enum:leveldb::__anon20::DBIter::Direction	file:
kForward	leveldb/table/merger.cc	/^    kForward,$/;"	e	enum:leveldb::__anon36::MergingIterator::Direction	file:
kFound	leveldb/db/version_set.cc	/^  kFound,$/;"	e	enum:leveldb::__anon22::SaverState	file:
kFullType	leveldb/db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kHeader	leveldb/db/write_batch.cc	/^static const size_t kHeader = 12;$/;"	m	namespace:leveldb	file:
kHeaderSize	leveldb/db/log_format.h	/^static const int kHeaderSize = 4 + 2 + 1;$/;"	m	namespace:leveldb::log
kIOError	leveldb/include/leveldb/status.h	/^    kIOError = 5$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	leveldb/db/filename.h	/^  kInfoLogFile  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	leveldb/include/leveldb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kL0_CompactionTrigger	leveldb/db/dbformat.h	/^static const int kL0_CompactionTrigger = 4;$/;"	m	namespace:leveldb::config
kL0_SlowdownWritesTrigger	leveldb/db/dbformat.h	/^static const int kL0_SlowdownWritesTrigger = 8;$/;"	m	namespace:leveldb::config
kL0_StopWritesTrigger	leveldb/db/dbformat.h	/^static const int kL0_StopWritesTrigger = 12;$/;"	m	namespace:leveldb::config
kLastSequence	leveldb/db/version_edit.cc	/^  kLastSequence         = 4,$/;"	e	enum:leveldb::Tag	file:
kLastType	leveldb/db/log_format.h	/^  kLastType = 4$/;"	e	enum:leveldb::log::RecordType
kLittleEndian	leveldb/port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	leveldb/port/port_posix.h	/^static const bool kLittleEndian = PLATFORM_IS_LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLittleEndian	leveldb/port/port_win.h	/^static const bool kLittleEndian = true;$/;"	m	namespace:leveldb::port
kLogFile	leveldb/db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	leveldb/db/version_edit.cc	/^  kLogNumber            = 2,$/;"	e	enum:leveldb::Tag	file:
kMMapLimit	leveldb/util/env_posix_test.cc	/^static const int kMMapLimit = 4;$/;"	m	namespace:leveldb	file:
kMMapLimit	leveldb/util/env_test.cc	/^static const int kMMapLimit = 4;$/;"	m	namespace:leveldb	file:
kMajorVersion	leveldb/include/leveldb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	leveldb/util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	leveldb/table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon37
kMaxHeight	leveldb/db/skiplist.h	/^  enum { kMaxHeight = 12 };$/;"	e	enum:leveldb::SkipList::__anon24
kMaxMemCompactLevel	leveldb/db/dbformat.h	/^static const int kMaxMemCompactLevel = 2;$/;"	m	namespace:leveldb::config
kMaxNumValues	leveldb/db/fault_injection_test.cc	/^static const int kMaxNumValues = 2000;$/;"	m	namespace:leveldb	file:
kMaxRecordType	leveldb/db/log_format.h	/^static const int kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	leveldb/db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber =$/;"	m	namespace:leveldb
kMiddleType	leveldb/db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	leveldb/include/leveldb/db.h	/^static const int kMinorVersion = 20;$/;"	m	namespace:leveldb
kNewFile	leveldb/db/version_edit.cc	/^  kNewFile              = 7,$/;"	e	enum:leveldb::Tag	file:
kNextFileNumber	leveldb/db/version_edit.cc	/^  kNextFileNumber       = 3,$/;"	e	enum:leveldb::Tag	file:
kNoCompression	leveldb/include/leveldb/options.h	/^  kNoCompression     = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	leveldb/db/version_set.cc	/^  kNotFound,$/;"	e	enum:leveldb::__anon22::SaverState	file:
kNotFound	leveldb/include/leveldb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	leveldb/include/leveldb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	leveldb/util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon14
kNumIterations	leveldb/db/fault_injection_test.cc	/^static const size_t kNumIterations = 3;$/;"	m	namespace:leveldb	file:
kNumKeys	leveldb/db/db_test.cc	/^static const int kNumKeys = 1000;$/;"	m	namespace:leveldb::__anon30	file:
kNumKeys	leveldb/issues/issue178_test.cc	/^const int kNumKeys = 1100000;$/;"	m	namespace:__anon32	file:
kNumLevels	leveldb/db/dbformat.h	/^static const int kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumNonTableCacheFiles	leveldb/db/db_impl.cc	/^const int kNumNonTableCacheFiles = 10;$/;"	m	namespace:leveldb	file:
kNumShardBits	leveldb/util/cache.cc	/^static const int kNumShardBits = 4;$/;"	m	namespace:leveldb::__anon13	file:
kNumShards	leveldb/util/cache.cc	/^static const int kNumShards = 1 << kNumShardBits;$/;"	m	namespace:leveldb::__anon13	file:
kNumTestArgs	leveldb/table/table_test.cc	/^static const int kNumTestArgs = sizeof(kTestArgList) \/ sizeof(kTestArgList[0]);$/;"	m	namespace:leveldb	file:
kNumThreads	leveldb/db/db_test.cc	/^static const int kNumThreads = 4;$/;"	m	namespace:leveldb::__anon30	file:
kOk	leveldb/include/leveldb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kPrevLogNumber	leveldb/db/version_edit.cc	/^  kPrevLogNumber        = 9$/;"	e	enum:leveldb::Tag	file:
kReadBytesPeriod	leveldb/db/dbformat.h	/^static const int kReadBytesPeriod = 1048576;$/;"	m	namespace:leveldb::config
kReadOnlyFileLimit	leveldb/util/env_posix_test.cc	/^static const int kReadOnlyFileLimit = 4;$/;"	m	namespace:leveldb	file:
kReadOnlyFileLimit	leveldb/util/env_test.cc	/^static const int kReadOnlyFileLimit = 4;$/;"	m	namespace:leveldb	file:
kReuse	leveldb/db/db_test.cc	/^    kReuse,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kReverse	leveldb/db/db_iter.cc	/^    kReverse$/;"	e	enum:leveldb::__anon20::DBIter::Direction	file:
kReverse	leveldb/table/merger.cc	/^    kReverse$/;"	e	enum:leveldb::__anon36::MergingIterator::Direction	file:
kSnappyCompression	leveldb/include/leveldb/options.h	/^  kSnappyCompression = 0x1$/;"	e	enum:leveldb::CompressionType
kTableFile	leveldb/db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	leveldb/table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTempFile	leveldb/db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTestArgList	leveldb/table/table_test.cc	/^static const TestArgs kTestArgList[] = {$/;"	m	namespace:leveldb	file:
kTestSeconds	leveldb/db/db_test.cc	/^static const int kTestSeconds = 10;$/;"	m	namespace:leveldb::__anon30	file:
kTotalSize	leveldb/db/autocompact_test.cc	/^static const int kTotalSize = 100 * 1024 * 1024;$/;"	m	namespace:leveldb	file:
kTypeDeletion	leveldb/db/dbformat.h	/^  kTypeDeletion = 0x0,$/;"	e	enum:leveldb::ValueType
kTypeValue	leveldb/db/dbformat.h	/^  kTypeValue = 0x1$/;"	e	enum:leveldb::ValueType
kUncompressed	leveldb/db/db_test.cc	/^    kUncompressed,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kValueSize	leveldb/db/autocompact_test.cc	/^static const int kValueSize = 200 * 1024;$/;"	m	namespace:leveldb	file:
kValueSize	leveldb/db/corruption_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueSize	leveldb/db/fault_injection_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueTypeForSeek	leveldb/db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kVerbose	leveldb/util/bloom_test.cc	/^static const int kVerbose = 1;$/;"	m	namespace:leveldb	file:
kZeroType	leveldb/db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
k_	leveldb/util/bloom.cc	/^  size_t k_;$/;"	m	class:leveldb::__anon10::BloomFilterPolicy	file:
key	crypto/ctaes/test.c	/^    const char* key;$/;"	m	struct:__anon82	file:
key	key.h	/^    CKey key;$/;"	m	struct:CExtKey
key	leveldb/db/db_iter.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon20::DBIter
key	leveldb/db/db_test.cc	/^    virtual Slice key() const { return iter_->first; }$/;"	f	class:leveldb::ModelDB::ModelIter
key	leveldb/db/memtable.cc	/^  virtual Slice key() const { return GetLengthPrefixedSlice(iter_.key()); }$/;"	f	class:leveldb::MemTableIterator
key	leveldb/db/skiplist.h	/^  Key const key;$/;"	m	struct:leveldb::SkipList::Node
key	leveldb/db/skiplist.h	/^inline const Key& SkipList<Key,Comparator>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	leveldb/db/skiplist_test.cc	/^  static uint64_t key(Key key) { return (key >> 40); }$/;"	f	class:leveldb::ConcurrentTest	file:
key	leveldb/db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
key	leveldb/table/block.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::Block::Iter
key	leveldb/table/iterator.cc	/^  Slice key() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon42::EmptyIterator
key	leveldb/table/iterator_wrapper.h	/^  Slice key() const         { assert(Valid()); return key_; }$/;"	f	class:leveldb::IteratorWrapper
key	leveldb/table/merger.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon36::MergingIterator
key	leveldb/table/table_test.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::KeyConvertingIterator
key	leveldb/table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
key	leveldb/util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon13::LRUHandle
key	secp256k1/src/bench_sign.c	/^    unsigned char key[32];$/;"	m	struct:__anon65	file:
key	secp256k1/src/bench_verify.c	/^    unsigned char key[32];$/;"	m	struct:__anon55	file:
key	txdb.cpp	/^    char key;$/;"	m	struct:__anon76::CoinEntry	file:
key0	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon80::KeyData	file:
key0C	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon80::KeyData	file:
key1	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon80::KeyData	file:
key1C	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon80::KeyData	file:
key2	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon80::KeyData	file:
key2C	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon80::KeyData	file:
keyChange	qt/walletmodeltransaction.h	/^    CReserveKey *keyChange;$/;"	m	class:WalletModelTransaction
keyPressEvent	qt/coincontroltreewidget.cpp	/^void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)$/;"	f	class:CoinControlTreeWidget
keyPressEvent	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::keyPressEvent(QKeyEvent *event)$/;"	f	class:ReceiveCoinsDialog
keyPressEvent	qt/rpcconsole.cpp	/^void RPCConsole::keyPressEvent(QKeyEvent *event)$/;"	f	class:RPCConsole
keyTmp	txdb.h	/^    std::pair<char, COutPoint> keyTmp;$/;"	m	class:CCoinsViewDBCursor
key_	leveldb/table/block.cc	/^  std::string key_;$/;"	m	class:leveldb::Block::Iter	file:
key_	leveldb/table/iterator_wrapper.h	/^  Slice key_;$/;"	m	class:leveldb::IteratorWrapper
key_data	leveldb/util/cache.cc	/^  char key_data[1];   \/\/ Beginning of key$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
key_length	leveldb/util/cache.cc	/^  size_t key_length;$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
key_match_	leveldb/db/c.cc	/^  unsigned char (*key_match_)($/;"	m	struct:leveldb_filterpolicy_t	file:
key_type	limitedmap.h	/^    typedef K key_type;$/;"	t	class:limitedmap
keydata	key.h	/^    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;$/;"	m	class:CKey
keypoolrefill	wallet/rpcwallet.cpp	/^UniValue keypoolrefill(const JSONRPCRequest& request)$/;"	f
keys	univalue/include/univalue.h	/^    std::vector<std::string> keys;$/;"	m	class:UniValue
keys_	leveldb/table/filter_block.h	/^  std::string keys_;              \/\/ Flattened key contents$/;"	m	class:leveldb::FilterBlockBuilder
keys_	leveldb/util/bloom_test.cc	/^  std::vector<std::string> keys_;$/;"	m	class:leveldb::BloomTest	file:
keysize	crypto/ctaes/test.c	/^    int keysize;$/;"	m	struct:__anon82	file:
keystore	script/sign.h	/^    const CKeyStore* keystore;$/;"	m	class:BaseSignatureCreator
keystore	wallet/wallet.cpp	/^    const CKeyStore &keystore;$/;"	m	class:CAffectedKeysVisitor	file:
kstart_	leveldb/db/dbformat.h	/^  const char* kstart_;$/;"	m	class:leveldb::LookupKey
lNodesAnnouncingHeaderAndIDs	net_processing.cpp	/^    std::list<NodeId> lNodesAnnouncingHeaderAndIDs;$/;"	m	namespace:__anon49	file:
label	qt/addresstablemodel.cpp	/^    QString label;$/;"	m	struct:AddressTableEntry	file:
label	qt/walletmodel.h	/^    QString label;$/;"	m	class:SendCoinsRecipient
labelBlocksIcon	qt/wificoingui.h	/^    QLabel *labelBlocksIcon;$/;"	m	class:WiFicoinGUI
labelForAddress	qt/addresstablemodel.cpp	/^QString AddressTableModel::labelForAddress(const QString &address) const$/;"	f	class:AddressTableModel
labelWalletEncryptionIcon	qt/wificoingui.h	/^    QLabel *labelWalletEncryptionIcon;$/;"	m	class:WiFicoinGUI
labelWalletHDStatusIcon	qt/wificoingui.h	/^    QLabel *labelWalletHDStatusIcon;$/;"	m	class:WiFicoinGUI
laccentries	wallet/wallet.h	/^    std::list<CAccountingEntry> laccentries;$/;"	m	class:CWallet
language	qt/optionsmodel.h	/^    QString language;$/;"	m	class:OptionsModel
largest	leveldb/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
largest	leveldb/db/version_edit.h	/^  InternalKey largest;        \/\/ Largest internal key served by table$/;"	m	struct:leveldb::FileMetaData
lastColumnIndex	qt/guiutil.h	/^            int lastColumnIndex;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
lastColumnMinimumWidth	qt/guiutil.h	/^            int lastColumnMinimumWidth;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
lastCycles	bench/bench.h	/^        uint64_t lastCycles;$/;"	m	class:benchmark::State
lastRollingFeeUpdate	txmempool.h	/^    mutable int64_t lastRollingFeeUpdate;$/;"	m	class:CTxMemPool
lastSentFeeFilter	net.h	/^    CAmount lastSentFeeFilter;$/;"	m	class:CNode
lastTime	bench/bench.h	/^        double lastTime, minTime, maxTime, countMaskInv;$/;"	m	class:benchmark::State
last_id_	leveldb/util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon13::ShardedLRUCache	file:
last_key	leveldb/table/table_builder.cc	/^  std::string last_key;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
last_key_	leveldb/table/block_builder.h	/^  std::string           last_key_;$/;"	m	class:leveldb::BlockBuilder
last_op_finish_	leveldb/db/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::__anon18::Stats	file:
last_op_finish_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_op_finish_	leveldb/doc/bench/db_bench_tree_db.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_options_	leveldb/db/db_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest	file:
last_record_offset_	leveldb/db/log_reader.h	/^  uint64_t last_record_offset_;$/;"	m	class:leveldb::log::Reader
last_sequence_	leveldb/db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	leveldb/db/version_set.h	/^  uint64_t last_sequence_;$/;"	m	class:leveldb::VersionSet
latestblock	rpc/blockchain.cpp	/^static CUpdatedBlock latestblock;$/;"	v	file:
layerIsVisible	qt/modaloverlay.h	/^    bool layerIsVisible;$/;"	m	class:ModalOverlay
le16toh	compat/endian.h	/^inline uint16_t le16toh(uint16_t little_endian_16bits)$/;"	f
le32toh	compat/endian.h	/^inline uint32_t le32toh(uint32_t little_endian_32bits)$/;"	f
le64toh	compat/endian.h	/^inline uint64_t le64toh(uint64_t little_endian_64bits)$/;"	f
left	crypto/sha1.cpp	/^uint32_t inline left(uint32_t x) { return (x << 1) | (x >> 31); }$/;"	f	namespace:__anon90::sha1
left	memusage.h	/^    void* left;$/;"	m	struct:memusage::stl_tree_node
leftMempool	policy/fees.h	/^    double leftMempool = 0;$/;"	m	struct:EstimatorBucket
length_	leveldb/util/cache.cc	/^  uint32_t length_;$/;"	m	class:leveldb::__anon13::HandleTable	file:
length_	leveldb/util/env_posix.cc	/^  size_t length_;$/;"	m	class:leveldb::__anon11::PosixMmapReadableFile	file:
level	leveldb/db/db_impl.h	/^    int level;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
level	leveldb/db/version_set.h	/^  int level() const { return level_; }$/;"	f	class:leveldb::Compaction
level_	leveldb/db/version_set.h	/^  int level_;$/;"	m	class:leveldb::Compaction
level_ptrs_	leveldb/db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	leveldb/db/autocompact_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/builder.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/corruption_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/db_bench.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/db_impl.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/db_iter.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/db_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/dbformat.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/dbformat_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/dumpfile.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/fault_injection_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/filename.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/filename.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/filename_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/leveldbutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/log_reader.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/log_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/log_writer.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/memtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/recovery_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/repair.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/skiplist_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/table_cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/version_edit.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/version_edit_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/version_set.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/version_set_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/write_batch.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/write_batch_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/doc/bench/db_bench_sqlite3.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/doc/bench/db_bench_tree_db.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/helpers/memenv/memenv.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/helpers/memenv/memenv.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/helpers/memenv/memenv_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/include/leveldb/cache.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/db.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/dumpfile.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/env.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/filter_policy.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/options.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/slice.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/status.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/table.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/issues/issue200_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/port/atomic_pointer.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/port/port_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/port/port_posix.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/port/port_posix_sse.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/port/port_win.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/port/port_win.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/block.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/block_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/filter_block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/filter_block.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/filter_block_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/format.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/format.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/merger.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/merger.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/table.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/table_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/table_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/two_level_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/arena.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/arena.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/arena_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/bloom.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/bloom_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/cache_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/coding.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/coding.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/coding_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/comparator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/crc32c.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/crc32c_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/env.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/env_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/env_posix_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/env_posix_test_helper.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/env_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/env_win.cc	/^namespace leveldb$/;"	n	file:
leveldb	leveldb/util/filter_policy.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/hash.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/hash.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/hash_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/histogram.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/logging.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/logging.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/options.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/posix_logger.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/random.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/status.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/testharness.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/testharness.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/testutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/testutil.h	/^namespace leveldb {$/;"	n
leveldb_approximate_sizes	leveldb/db/c.cc	/^void leveldb_approximate_sizes($/;"	f
leveldb_cache_create_lru	leveldb/db/c.cc	/^leveldb_cache_t* leveldb_cache_create_lru(size_t capacity) {$/;"	f
leveldb_cache_destroy	leveldb/db/c.cc	/^void leveldb_cache_destroy(leveldb_cache_t* cache) {$/;"	f
leveldb_cache_t	leveldb/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	s	file:
leveldb_cache_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_cache_t         leveldb_cache_t;$/;"	t	typeref:struct:leveldb_cache_t
leveldb_close	leveldb/db/c.cc	/^void leveldb_close(leveldb_t* db) {$/;"	f
leveldb_compact_range	leveldb/db/c.cc	/^void leveldb_compact_range($/;"	f
leveldb_comparator_create	leveldb/db/c.cc	/^leveldb_comparator_t* leveldb_comparator_create($/;"	f
leveldb_comparator_destroy	leveldb/db/c.cc	/^void leveldb_comparator_destroy(leveldb_comparator_t* cmp) {$/;"	f
leveldb_comparator_t	leveldb/db/c.cc	/^struct leveldb_comparator_t : public Comparator {$/;"	s	file:
leveldb_comparator_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_comparator_t    leveldb_comparator_t;$/;"	t	typeref:struct:leveldb_comparator_t
leveldb_create_default_env	leveldb/db/c.cc	/^leveldb_env_t* leveldb_create_default_env() {$/;"	f
leveldb_create_iterator	leveldb/db/c.cc	/^leveldb_iterator_t* leveldb_create_iterator($/;"	f
leveldb_create_snapshot	leveldb/db/c.cc	/^const leveldb_snapshot_t* leveldb_create_snapshot($/;"	f
leveldb_delete	leveldb/db/c.cc	/^void leveldb_delete($/;"	f
leveldb_destroy_db	leveldb/db/c.cc	/^void leveldb_destroy_db($/;"	f
leveldb_env_destroy	leveldb/db/c.cc	/^void leveldb_env_destroy(leveldb_env_t* env) {$/;"	f
leveldb_env_t	leveldb/db/c.cc	/^struct leveldb_env_t {$/;"	s	file:
leveldb_env_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_env_t           leveldb_env_t;$/;"	t	typeref:struct:leveldb_env_t
leveldb_filelock_t	leveldb/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	s	file:
leveldb_filelock_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_filelock_t      leveldb_filelock_t;$/;"	t	typeref:struct:leveldb_filelock_t
leveldb_filterpolicy_create	leveldb/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create($/;"	f
leveldb_filterpolicy_create_bloom	leveldb/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int bits_per_key) {$/;"	f
leveldb_filterpolicy_destroy	leveldb/db/c.cc	/^void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t* filter) {$/;"	f
leveldb_filterpolicy_t	leveldb/db/c.cc	/^struct leveldb_filterpolicy_t : public FilterPolicy {$/;"	s	file:
leveldb_filterpolicy_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_filterpolicy_t  leveldb_filterpolicy_t;$/;"	t	typeref:struct:leveldb_filterpolicy_t
leveldb_free	leveldb/db/c.cc	/^void leveldb_free(void* ptr) {$/;"	f
leveldb_get	leveldb/db/c.cc	/^char* leveldb_get($/;"	f
leveldb_iter_destroy	leveldb/db/c.cc	/^void leveldb_iter_destroy(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_get_error	leveldb/db/c.cc	/^void leveldb_iter_get_error(const leveldb_iterator_t* iter, char** errptr) {$/;"	f
leveldb_iter_key	leveldb/db/c.cc	/^const char* leveldb_iter_key(const leveldb_iterator_t* iter, size_t* klen) {$/;"	f
leveldb_iter_next	leveldb/db/c.cc	/^void leveldb_iter_next(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_prev	leveldb/db/c.cc	/^void leveldb_iter_prev(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek	leveldb/db/c.cc	/^void leveldb_iter_seek(leveldb_iterator_t* iter, const char* k, size_t klen) {$/;"	f
leveldb_iter_seek_to_first	leveldb/db/c.cc	/^void leveldb_iter_seek_to_first(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek_to_last	leveldb/db/c.cc	/^void leveldb_iter_seek_to_last(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_valid	leveldb/db/c.cc	/^unsigned char leveldb_iter_valid(const leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_value	leveldb/db/c.cc	/^const char* leveldb_iter_value(const leveldb_iterator_t* iter, size_t* vlen) {$/;"	f
leveldb_iterator_t	leveldb/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	s	file:
leveldb_iterator_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_iterator_t      leveldb_iterator_t;$/;"	t	typeref:struct:leveldb_iterator_t
leveldb_libleveldb_a_AR	Makefile	/^leveldb_libleveldb_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libleveldb_a_CPPFLAGS	Makefile	/^leveldb_libleveldb_a_CPPFLAGS = $(AM_CPPFLAGS) $(LEVELDB_CPPFLAGS_INT) $(LEVELDB_CPPFLAGS)$/;"	m
leveldb_libleveldb_a_CXXFLAGS	Makefile	/^leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
leveldb_libleveldb_a_LIBADD	Makefile	/^leveldb_libleveldb_a_LIBADD =$/;"	m
leveldb_libleveldb_a_OBJECTS	Makefile	/^leveldb_libleveldb_a_OBJECTS = $(am_leveldb_libleveldb_a_OBJECTS)$/;"	m
leveldb_libleveldb_a_SOURCES	Makefile	/^leveldb_libleveldb_a_SOURCES =  \\$/;"	m
leveldb_libleveldb_sse42_a_AR	Makefile	/^leveldb_libleveldb_sse42_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libleveldb_sse42_a_CPPFLAGS	Makefile	/^leveldb_libleveldb_sse42_a_CPPFLAGS =  \\$/;"	m
leveldb_libleveldb_sse42_a_CXXFLAGS	Makefile	/^leveldb_libleveldb_sse42_a_CXXFLAGS =  \\$/;"	m
leveldb_libleveldb_sse42_a_LIBADD	Makefile	/^leveldb_libleveldb_sse42_a_LIBADD =$/;"	m
leveldb_libleveldb_sse42_a_OBJECTS	Makefile	/^leveldb_libleveldb_sse42_a_OBJECTS =  \\$/;"	m
leveldb_libleveldb_sse42_a_SOURCES	Makefile	/^leveldb_libleveldb_sse42_a_SOURCES = leveldb\/port\/port_posix_sse.cc$/;"	m
leveldb_libmemenv_a_AR	Makefile	/^leveldb_libmemenv_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libmemenv_a_CPPFLAGS	Makefile	/^leveldb_libmemenv_a_CPPFLAGS = $(leveldb_libleveldb_a_CPPFLAGS)$/;"	m
leveldb_libmemenv_a_CXXFLAGS	Makefile	/^leveldb_libmemenv_a_CXXFLAGS = $(leveldb_libleveldb_a_CXXFLAGS)$/;"	m
leveldb_libmemenv_a_LIBADD	Makefile	/^leveldb_libmemenv_a_LIBADD =$/;"	m
leveldb_libmemenv_a_OBJECTS	Makefile	/^leveldb_libmemenv_a_OBJECTS = $(am_leveldb_libmemenv_a_OBJECTS)$/;"	m
leveldb_libmemenv_a_SOURCES	Makefile	/^leveldb_libmemenv_a_SOURCES =  \\$/;"	m
leveldb_logger_t	leveldb/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	s	file:
leveldb_logger_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_logger_t        leveldb_logger_t;$/;"	t	typeref:struct:leveldb_logger_t
leveldb_major_version	leveldb/db/c.cc	/^int leveldb_major_version() {$/;"	f
leveldb_minor_version	leveldb/db/c.cc	/^int leveldb_minor_version() {$/;"	f
leveldb_no_compression	leveldb/include/leveldb/c.h	/^  leveldb_no_compression = 0,$/;"	e	enum:__anon33
leveldb_open	leveldb/db/c.cc	/^leveldb_t* leveldb_open($/;"	f
leveldb_options_create	leveldb/db/c.cc	/^leveldb_options_t* leveldb_options_create() {$/;"	f
leveldb_options_destroy	leveldb/db/c.cc	/^void leveldb_options_destroy(leveldb_options_t* options) {$/;"	f
leveldb_options_set_block_restart_interval	leveldb/db/c.cc	/^void leveldb_options_set_block_restart_interval(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_block_size	leveldb/db/c.cc	/^void leveldb_options_set_block_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_cache	leveldb/db/c.cc	/^void leveldb_options_set_cache(leveldb_options_t* opt, leveldb_cache_t* c) {$/;"	f
leveldb_options_set_comparator	leveldb/db/c.cc	/^void leveldb_options_set_comparator($/;"	f
leveldb_options_set_compression	leveldb/db/c.cc	/^void leveldb_options_set_compression(leveldb_options_t* opt, int t) {$/;"	f
leveldb_options_set_create_if_missing	leveldb/db/c.cc	/^void leveldb_options_set_create_if_missing($/;"	f
leveldb_options_set_env	leveldb/db/c.cc	/^void leveldb_options_set_env(leveldb_options_t* opt, leveldb_env_t* env) {$/;"	f
leveldb_options_set_error_if_exists	leveldb/db/c.cc	/^void leveldb_options_set_error_if_exists($/;"	f
leveldb_options_set_filter_policy	leveldb/db/c.cc	/^void leveldb_options_set_filter_policy($/;"	f
leveldb_options_set_info_log	leveldb/db/c.cc	/^void leveldb_options_set_info_log(leveldb_options_t* opt, leveldb_logger_t* l) {$/;"	f
leveldb_options_set_max_open_files	leveldb/db/c.cc	/^void leveldb_options_set_max_open_files(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_paranoid_checks	leveldb/db/c.cc	/^void leveldb_options_set_paranoid_checks($/;"	f
leveldb_options_set_write_buffer_size	leveldb/db/c.cc	/^void leveldb_options_set_write_buffer_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_t	leveldb/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	s	file:
leveldb_options_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_options_t       leveldb_options_t;$/;"	t	typeref:struct:leveldb_options_t
leveldb_property_value	leveldb/db/c.cc	/^char* leveldb_property_value($/;"	f
leveldb_put	leveldb/db/c.cc	/^void leveldb_put($/;"	f
leveldb_randomfile_t	leveldb/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	s	file:
leveldb_randomfile_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_randomfile_t    leveldb_randomfile_t;$/;"	t	typeref:struct:leveldb_randomfile_t
leveldb_readoptions_create	leveldb/db/c.cc	/^leveldb_readoptions_t* leveldb_readoptions_create() {$/;"	f
leveldb_readoptions_destroy	leveldb/db/c.cc	/^void leveldb_readoptions_destroy(leveldb_readoptions_t* opt) {$/;"	f
leveldb_readoptions_set_fill_cache	leveldb/db/c.cc	/^void leveldb_readoptions_set_fill_cache($/;"	f
leveldb_readoptions_set_snapshot	leveldb/db/c.cc	/^void leveldb_readoptions_set_snapshot($/;"	f
leveldb_readoptions_set_verify_checksums	leveldb/db/c.cc	/^void leveldb_readoptions_set_verify_checksums($/;"	f
leveldb_readoptions_t	leveldb/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	s	file:
leveldb_readoptions_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_readoptions_t   leveldb_readoptions_t;$/;"	t	typeref:struct:leveldb_readoptions_t
leveldb_release_snapshot	leveldb/db/c.cc	/^void leveldb_release_snapshot($/;"	f
leveldb_repair_db	leveldb/db/c.cc	/^void leveldb_repair_db($/;"	f
leveldb_seqfile_t	leveldb/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	s	file:
leveldb_seqfile_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_seqfile_t       leveldb_seqfile_t;$/;"	t	typeref:struct:leveldb_seqfile_t
leveldb_snappy_compression	leveldb/include/leveldb/c.h	/^  leveldb_snappy_compression = 1$/;"	e	enum:__anon33
leveldb_snapshot_t	leveldb/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	s	file:
leveldb_snapshot_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_snapshot_t      leveldb_snapshot_t;$/;"	t	typeref:struct:leveldb_snapshot_t
leveldb_t	leveldb/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	s	file:
leveldb_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_t               leveldb_t;$/;"	t	typeref:struct:leveldb_t
leveldb_writablefile_t	leveldb/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	s	file:
leveldb_writablefile_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_writablefile_t  leveldb_writablefile_t;$/;"	t	typeref:struct:leveldb_writablefile_t
leveldb_write	leveldb/db/c.cc	/^void leveldb_write($/;"	f
leveldb_writebatch_clear	leveldb/db/c.cc	/^void leveldb_writebatch_clear(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_create	leveldb/db/c.cc	/^leveldb_writebatch_t* leveldb_writebatch_create() {$/;"	f
leveldb_writebatch_delete	leveldb/db/c.cc	/^void leveldb_writebatch_delete($/;"	f
leveldb_writebatch_destroy	leveldb/db/c.cc	/^void leveldb_writebatch_destroy(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_iterate	leveldb/db/c.cc	/^void leveldb_writebatch_iterate($/;"	f
leveldb_writebatch_put	leveldb/db/c.cc	/^void leveldb_writebatch_put($/;"	f
leveldb_writebatch_t	leveldb/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	s	file:
leveldb_writebatch_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_writebatch_t    leveldb_writebatch_t;$/;"	t	typeref:struct:leveldb_writebatch_t
leveldb_writeoptions_create	leveldb/db/c.cc	/^leveldb_writeoptions_t* leveldb_writeoptions_create() {$/;"	f
leveldb_writeoptions_destroy	leveldb/db/c.cc	/^void leveldb_writeoptions_destroy(leveldb_writeoptions_t* opt) {$/;"	f
leveldb_writeoptions_set_sync	leveldb/db/c.cc	/^void leveldb_writeoptions_set_sync($/;"	f
leveldb_writeoptions_t	leveldb/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	s	file:
leveldb_writeoptions_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;$/;"	t	typeref:struct:leveldb_writeoptions_t
levels_	leveldb/db/version_set.cc	/^  LevelState levels_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet::Builder	file:
lf_cb	support/lockedpool.h	/^    LockingFailed_Callback lf_cb;$/;"	m	class:LockedPool
lib_LTLIBRARIES	Makefile	/^lib_LTLIBRARIES = $(LIBWIFICOINCONSENSUS)$/;"	m
lib_LTLIBRARIES	secp256k1/Makefile	/^lib_LTLIBRARIES = libsecp256k1.la$/;"	m
lib_LTLIBRARIES	univalue/Makefile	/^lib_LTLIBRARIES = libunivalue.la$/;"	m
libwificoin_cli_a_AR	Makefile	/^libwificoin_cli_a_AR = $(AR) $(ARFLAGS)$/;"	m
libwificoin_cli_a_CPPFLAGS	Makefile	/^libwificoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES)$/;"	m
libwificoin_cli_a_CXXFLAGS	Makefile	/^libwificoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libwificoin_cli_a_LIBADD	Makefile	/^libwificoin_cli_a_LIBADD =$/;"	m
libwificoin_cli_a_OBJECTS	Makefile	/^libwificoin_cli_a_OBJECTS = $(am_libwificoin_cli_a_OBJECTS)$/;"	m
libwificoin_cli_a_SOURCES	Makefile	/^libwificoin_cli_a_SOURCES = \\$/;"	m
libwificoin_common_a_AR	Makefile	/^libwificoin_common_a_AR = $(AR) $(ARFLAGS)$/;"	m
libwificoin_common_a_CPPFLAGS	Makefile	/^libwificoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES)$/;"	m
libwificoin_common_a_CXXFLAGS	Makefile	/^libwificoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libwificoin_common_a_LIBADD	Makefile	/^libwificoin_common_a_LIBADD =$/;"	m
libwificoin_common_a_OBJECTS	Makefile	/^libwificoin_common_a_OBJECTS = $(am_libwificoin_common_a_OBJECTS)$/;"	m
libwificoin_common_a_SOURCES	Makefile	/^libwificoin_common_a_SOURCES = \\$/;"	m
libwificoin_consensus_a_AR	Makefile	/^libwificoin_consensus_a_AR = $(AR) $(ARFLAGS)$/;"	m
libwificoin_consensus_a_CPPFLAGS	Makefile	/^libwificoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES)$/;"	m
libwificoin_consensus_a_CXXFLAGS	Makefile	/^libwificoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libwificoin_consensus_a_LIBADD	Makefile	/^libwificoin_consensus_a_LIBADD =$/;"	m
libwificoin_consensus_a_OBJECTS	Makefile	/^libwificoin_consensus_a_OBJECTS = $(am_libwificoin_consensus_a_OBJECTS)$/;"	m
libwificoin_consensus_a_SOURCES	Makefile	/^libwificoin_consensus_a_SOURCES = \\$/;"	m
libwificoin_server_a_AR	Makefile	/^libwificoin_server_a_AR = $(AR) $(ARFLAGS)$/;"	m
libwificoin_server_a_CPPFLAGS	Makefile	/^libwificoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)$/;"	m
libwificoin_server_a_CXXFLAGS	Makefile	/^libwificoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libwificoin_server_a_LIBADD	Makefile	/^libwificoin_server_a_LIBADD =$/;"	m
libwificoin_server_a_OBJECTS	Makefile	/^libwificoin_server_a_OBJECTS = $(am_libwificoin_server_a_OBJECTS)$/;"	m
libwificoin_server_a_SOURCES	Makefile	/^libwificoin_server_a_SOURCES = \\$/;"	m
libwificoin_util_a_AR	Makefile	/^libwificoin_util_a_AR = $(AR) $(ARFLAGS)$/;"	m
libwificoin_util_a_CPPFLAGS	Makefile	/^libwificoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES)$/;"	m
libwificoin_util_a_CXXFLAGS	Makefile	/^libwificoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libwificoin_util_a_LIBADD	Makefile	/^libwificoin_util_a_LIBADD =$/;"	m
libwificoin_util_a_OBJECTS	Makefile	/^libwificoin_util_a_OBJECTS = $(am_libwificoin_util_a_OBJECTS) \\$/;"	m
libwificoin_util_a_SOURCES	Makefile	/^libwificoin_util_a_SOURCES = support\/lockedpool.cpp chainparamsbase.cpp \\$/;"	m
libwificoin_wallet_a_AR	Makefile	/^libwificoin_wallet_a_AR = $(AR) $(ARFLAGS)$/;"	m
libwificoin_wallet_a_CPPFLAGS	Makefile	/^libwificoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES)$/;"	m
libwificoin_wallet_a_CXXFLAGS	Makefile	/^libwificoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libwificoin_wallet_a_LIBADD	Makefile	/^libwificoin_wallet_a_LIBADD =$/;"	m
libwificoin_wallet_a_OBJECTS	Makefile	/^libwificoin_wallet_a_OBJECTS = $(am_libwificoin_wallet_a_OBJECTS)$/;"	m
libwificoin_wallet_a_SOURCES	Makefile	/^libwificoin_wallet_a_SOURCES = \\$/;"	m
libwificoin_zmq_a_AR	Makefile	/^libwificoin_zmq_a_AR = $(AR) $(ARFLAGS)$/;"	m
libwificoin_zmq_a_LIBADD	Makefile	/^libwificoin_zmq_a_LIBADD =$/;"	m
libwificoin_zmq_a_OBJECTS	Makefile	/^libwificoin_zmq_a_OBJECTS = $(am_libwificoin_zmq_a_OBJECTS)$/;"	m
libwificoinconsensus_la_CPPFLAGS	Makefile	/^libwificoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)\/obj -I$(srcdir)\/secp256k1\/include -DBUILD_WIFICOIN_INTERNAL$/;"	m
libwificoinconsensus_la_CXXFLAGS	Makefile	/^libwificoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
libwificoinconsensus_la_DEPENDENCIES	Makefile	/^libwificoinconsensus_la_DEPENDENCIES =  \\$/;"	m
libwificoinconsensus_la_LDFLAGS	Makefile	/^libwificoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)$/;"	m
libwificoinconsensus_la_LIBADD	Makefile	/^libwificoinconsensus_la_LIBADD = $(LIBSECP256K1)$/;"	m
libwificoinconsensus_la_LINK	Makefile	/^libwificoinconsensus_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libwificoinconsensus_la_OBJECTS	Makefile	/^libwificoinconsensus_la_OBJECTS = $(am_libwificoinconsensus_la_OBJECTS)$/;"	m
libwificoinconsensus_la_SOURCES	Makefile	/^libwificoinconsensus_la_SOURCES = $(crypto_libwificoin_crypto_a_SOURCES) \\$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	secp256k1/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	univalue/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libevent_log_cb	httpserver.cpp	/^static void libevent_log_cb(int severity, const char *msg)$/;"	f	file:
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	secp256k1/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	univalue/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libsecp256k1_common_la_LIBADD	secp256k1/Makefile	/^libsecp256k1_common_la_LIBADD =$/;"	m
libsecp256k1_common_la_OBJECTS	secp256k1/Makefile	/^libsecp256k1_common_la_OBJECTS = $(am_libsecp256k1_common_la_OBJECTS)$/;"	m
libsecp256k1_jni_la_CPPFLAGS	secp256k1/Makefile	/^libsecp256k1_jni_la_CPPFLAGS = -DSECP256K1_BUILD $(JNI_INCLUDES)$/;"	m
libsecp256k1_jni_la_LIBADD	secp256k1/Makefile	/^libsecp256k1_jni_la_LIBADD =$/;"	m
libsecp256k1_jni_la_OBJECTS	secp256k1/Makefile	/^libsecp256k1_jni_la_OBJECTS = $(am_libsecp256k1_jni_la_OBJECTS)$/;"	m
libsecp256k1_jni_la_SOURCES	secp256k1/Makefile	/^libsecp256k1_jni_la_SOURCES = src\/java\/org_wificoin_NativeSecp256k1.c src\/java\/org_wificoin_Secp256k1Context.c$/;"	m
libsecp256k1_la_CPPFLAGS	secp256k1/Makefile	/^libsecp256k1_la_CPPFLAGS = -DSECP256K1_BUILD -I$(top_srcdir)\/include -I$(top_srcdir)\/src $(SECP_INCLUDES)$/;"	m
libsecp256k1_la_DEPENDENCIES	secp256k1/Makefile	/^libsecp256k1_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
libsecp256k1_la_LIBADD	secp256k1/Makefile	/^libsecp256k1_la_LIBADD = $(JNI_LIB) $(SECP_LIBS) $(COMMON_LIB)$/;"	m
libsecp256k1_la_OBJECTS	secp256k1/Makefile	/^libsecp256k1_la_OBJECTS = $(am_libsecp256k1_la_OBJECTS)$/;"	m
libsecp256k1_la_SOURCES	secp256k1/Makefile	/^libsecp256k1_la_SOURCES = src\/secp256k1.c$/;"	m
libunivalue_la_CXXFLAGS	univalue/Makefile	/^libunivalue_la_CXXFLAGS = -I$(top_srcdir)\/include$/;"	m
libunivalue_la_LDFLAGS	univalue/Makefile	/^libunivalue_la_LDFLAGS = \\$/;"	m
libunivalue_la_LIBADD	univalue/Makefile	/^libunivalue_la_LIBADD =$/;"	m
libunivalue_la_LINK	univalue/Makefile	/^libunivalue_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libunivalue_la_OBJECTS	univalue/Makefile	/^libunivalue_la_OBJECTS = $(am_libunivalue_la_OBJECTS)$/;"	m
libunivalue_la_SOURCES	univalue/Makefile	/^libunivalue_la_SOURCES = \\$/;"	m
limbs	secp256k1/src/num_gmp.h	/^    int limbs;$/;"	m	struct:__anon67
limit	leveldb/include/leveldb/db.h	/^  Slice limit;          \/\/ Not included in the range$/;"	m	struct:leveldb::Range
limitRows	qt/transactionfilterproxy.h	/^    int limitRows;$/;"	m	class:TransactionFilterProxy
limitedmap	limitedmap.h	/^    limitedmap(size_type nMaxSizeIn)$/;"	f	class:limitedmap
limitedmap	limitedmap.h	/^class limitedmap$/;"	c
limiter_	leveldb/util/env_posix.cc	/^  Limiter* limiter_;$/;"	m	class:leveldb::__anon11::PosixMmapReadableFile	file:
limiter_	leveldb/util/env_posix.cc	/^  Limiter* limiter_;$/;"	m	class:leveldb::__anon11::PosixRandomAccessFile	file:
line_	leveldb/util/testharness.h	/^  int line_;$/;"	m	class:leveldb::test::Tester
lines	torcontrol.cpp	/^    std::vector<std::string> lines;$/;"	m	class:TorControlReply	file:
list	qt/recentrequeststablemodel.h	/^    QList<RecentRequestEntry> list;$/;"	m	class:RecentRequestsTableModel
listCoins	qt/walletmodel.cpp	/^void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const$/;"	f	class:WalletModel
listCommands	rpc/server.cpp	/^std::vector<std::string> CRPCTable::listCommands() const$/;"	f	class:CRPCTable
listLockedCoins	qt/walletmodel.cpp	/^void WalletModel::listLockedCoins(std::vector<COutPoint>& vOutpts)$/;"	f	class:WalletModel
list_	leveldb/db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	leveldb/db/skiplist_test.cc	/^  SkipList<Key, Comparator> list_;$/;"	m	class:leveldb::ConcurrentTest	file:
list_	leveldb/db/snapshot.h	/^  SnapshotImpl list_;$/;"	m	class:leveldb::SnapshotList
list_	leveldb/db/snapshot.h	/^  SnapshotList* list_;                 \/\/ just for sanity checks$/;"	m	class:leveldb::SnapshotImpl
list_	leveldb/util/cache.cc	/^  LRUHandle** list_;$/;"	m	class:leveldb::__anon13::HandleTable	file:
listaccounts	wallet/rpcwallet.cpp	/^UniValue listaccounts(const JSONRPCRequest& request)$/;"	f
listaddressgroupings	wallet/rpcwallet.cpp	/^UniValue listaddressgroupings(const JSONRPCRequest& request)$/;"	f
listbanned	rpc/net.cpp	/^UniValue listbanned(const JSONRPCRequest& request)$/;"	f
listlockunspent	wallet/rpcwallet.cpp	/^UniValue listlockunspent(const JSONRPCRequest& request)$/;"	f
listreceivedbyaccount	wallet/rpcwallet.cpp	/^UniValue listreceivedbyaccount(const JSONRPCRequest& request)$/;"	f
listreceivedbyaddress	wallet/rpcwallet.cpp	/^UniValue listreceivedbyaddress(const JSONRPCRequest& request)$/;"	f
listsinceblock	wallet/rpcwallet.cpp	/^UniValue listsinceblock(const JSONRPCRequest& request)$/;"	f
listtransactions	wallet/rpcwallet.cpp	/^UniValue listtransactions(const JSONRPCRequest& request)$/;"	f
listunspent	wallet/rpcwallet.cpp	/^UniValue listunspent(const JSONRPCRequest& request)$/;"	f
listwallets	wallet/rpcwallet.cpp	/^UniValue listwallets(const JSONRPCRequest& request)$/;"	f
loadReceiveRequests	qt/walletmodel.cpp	/^void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)$/;"	f	class:WalletModel
loadRow	qt/editaddressdialog.cpp	/^void EditAddressDialog::loadRow(int row)$/;"	f	class:EditAddressDialog
local_check	test/prevector_tests.cpp	/^    void local_check(bool b) $/;"	f	class:prevector_tester	file:
local_check_equal	test/prevector_tests.cpp	/^        void local_check_equal(A a, B b)$/;"	f	class:prevector_tester	file:
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	secp256k1/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	univalue/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	secp256k1/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	univalue/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	reverselock.h	/^    Lock& lock;$/;"	m	class:reverse_lock
lock	sync.h	/^    boost::unique_lock<Mutex> lock;$/;"	m	class:CMutexLock
lockAction	qt/coincontroldialog.h	/^    QAction *lockAction;$/;"	m	class:CoinControlDialog
lockCoin	qt/coincontroldialog.cpp	/^void CoinControlDialog::lockCoin()$/;"	f	class:CoinControlDialog
lockCoin	qt/walletmodel.cpp	/^void WalletModel::lockCoin(COutPoint& output)$/;"	f	class:WalletModel
lockPoints	txmempool.h	/^    LockPoints lockPoints;     \/\/!< Track the height and time at which tx was final$/;"	m	class:CTxMemPoolEntry
lockdata	sync.cpp	/^} static lockdata;$/;"	v	file:
locked	support/lockedpool.h	/^        size_t locked;$/;"	m	struct:LockedPool::Stats
locked_files_	leveldb/util/env_posix.cc	/^  std::set<std::string> locked_files_;$/;"	m	class:leveldb::__anon11::PosixLockTable	file:
lockedcount	test/allocator_tests.cpp	/^    int lockedcount;$/;"	m	class:TestLockedPageAllocator	file:
lockorders	sync.cpp	/^    LockOrders lockorders;$/;"	m	struct:LockData	file:
locks_	leveldb/util/env_posix.cc	/^  PosixLockTable locks_;$/;"	m	class:leveldb::__anon11::PosixEnv	file:
lockstack	sync.cpp	/^boost::thread_specific_ptr<LockStack> lockstack;$/;"	v
lockunspent	wallet/rpcwallet.cpp	/^UniValue lockunspent(const JSONRPCRequest& request)$/;"	f
log	leveldb/db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	leveldb/db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	leveldb/db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	leveldb/db/log_test.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	leveldb/db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	leveldb/db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	leveldb/db/version_set.h	/^namespace log { class Writer; }$/;"	n	namespace:leveldb
log_	leveldb/db/db_impl.h	/^  log::Writer* log_;$/;"	m	class:leveldb::DBImpl
log_number_	leveldb/db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	leveldb/db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
logfile_	leveldb/db/db_impl.h	/^  WritableFile* logfile_;$/;"	m	class:leveldb::DBImpl
logfile_number_	leveldb/db/db_impl.h	/^  uint64_t logfile_number_;$/;"	m	class:leveldb::DBImpl
logging	rpc/misc.cpp	/^UniValue logging(const JSONRPCRequest& request)$/;"	f
logs_	leveldb/db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon26::Repairer	file:
longStats	policy/fees.h	/^    TxConfirmStats* longStats;$/;"	m	class:CBlockPolicyEstimator
lookupAddress	qt/addresstablemodel.cpp	/^int AddressTableModel::lookupAddress(const QString &address) const$/;"	f	class:AddressTableModel
lookupAddress	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::lookupAddress(const std::string &address, bool tooltip) const$/;"	f	class:TransactionTableModel
lower_bound	indirectmap.h	/^    const_iterator lower_bound(const K& key) const  { return m.lower_bound(&key); }$/;"	f	class:indirectmap
lower_bound	indirectmap.h	/^    iterator lower_bound(const K& key)              { return m.lower_bound(&key); }$/;"	f	class:indirectmap
lp	test/test_wificoin.h	/^    LockPoints lp;$/;"	m	struct:TestMemPoolEntryHelper
lp	txmempool.h	/^    const LockPoints& lp;$/;"	m	struct:update_lock_points
lru_	leveldb/util/cache.cc	/^  LRUHandle lru_;$/;"	m	class:leveldb::__anon13::LRUCache	file:
m	indirectmap.h	/^    base m;$/;"	m	class:indirectmap
m	test/checkqueue_tests.cpp	/^    static std::mutex m;$/;"	m	struct:FrozenCleanupCheck	file:
m	test/checkqueue_tests.cpp	/^    static std::mutex m;$/;"	m	struct:UniqueCheck	file:
m	test/checkqueue_tests.cpp	/^std::mutex UniqueCheck::m;$/;"	m	class:UniqueCheck	file:
mWFC	qt/wificoinunits.h	/^        mWFC,$/;"	e	enum:WiFicoinUnits::Unit
m_N	tinyformat.h	/^        int m_N;$/;"	m	class:tinyformat::FormatList
m_are_callbacks_running	scheduler.h	/^    bool m_are_callbacks_running = false;$/;"	m	class:SingleThreadedSchedulerClient
m_callbacks_pending	scheduler.h	/^    std::list<std::function<void (void)>> m_callbacks_pending;$/;"	m	class:SingleThreadedSchedulerClient
m_chain_sync	net_processing.cpp	/^    ChainSyncTimeoutState m_chain_sync;$/;"	m	struct:__anon50::CNodeState	file:
m_confirm_target	wallet/coincontrol.h	/^    boost::optional<unsigned int> m_confirm_target;$/;"	m	class:CCoinControl
m_cs_callbacks_pending	scheduler.h	/^    CCriticalSection m_cs_callbacks_pending;$/;"	m	class:SingleThreadedSchedulerClient
m_data	script/wificoinconsensus.cpp	/^    const unsigned char* m_data;$/;"	m	class:__anon95::TxInputStream	file:
m_dbw	wallet/walletdb.h	/^    CWalletDBWrapper& m_dbw;$/;"	m	class:CWalletDB
m_discard_rate	wallet/wallet.cpp	/^CFeeRate CWallet::m_discard_rate = CFeeRate(DEFAULT_DISCARD_FEE);$/;"	m	class:CWallet	file:
m_discard_rate	wallet/wallet.h	/^    static CFeeRate m_discard_rate;$/;"	m	class:CWallet
m_dockMenu	qt/macdockiconhandler.h	/^    QMenu *m_dockMenu;$/;"	m	class:MacDockIconHandler
m_dummyWidget	qt/macdockiconhandler.h	/^    QWidget *m_dummyWidget;$/;"	m	class:MacDockIconHandler
m_fee_mode	wallet/coincontrol.h	/^    FeeEstimateMode m_fee_mode;$/;"	m	class:CCoinControl
m_feerate	wallet/coincontrol.h	/^    boost::optional<CFeeRate> m_feerate;$/;"	m	class:CCoinControl
m_formatImpl	tinyformat.h	/^        void (*m_formatImpl)(std::ostream& out, const char* fmtBegin,$/;"	m	class:tinyformat::detail::FormatArg
m_formatterStore	tinyformat.h	/^        FormatArg m_formatterStore[N];$/;"	m	class:tinyformat::detail::FormatListN
m_formatters	tinyformat.h	/^        const detail::FormatArg* m_formatters;$/;"	m	class:tinyformat::FormatList
m_internals	validationinterface.h	/^    std::unique_ptr<MainSignalsInstance> m_internals;$/;"	m	class:CMainSignals
m_last_block_announcement	net_processing.cpp	/^    int64_t m_last_block_announcement;$/;"	m	struct:__anon50::CNodeState	file:
m_manual_connection	net.h	/^    bool m_manual_connection;$/;"	m	class:CNode
m_manual_connection	net.h	/^    bool m_manual_connection;$/;"	m	class:CNodeStats
m_max_keypool_index	wallet/wallet.h	/^    int64_t m_max_keypool_index;$/;"	m	class:CWallet
m_msgproc	net.h	/^        NetEventsInterface* m_msgproc = nullptr;$/;"	m	struct:CConnman::Options
m_msgproc	net.h	/^    NetEventsInterface* m_msgproc;$/;"	m	class:CConnman
m_pool_key_to_index	wallet/wallet.h	/^    std::map<CKeyID, int64_t> m_pool_key_to_index;$/;"	m	class:CWallet
m_protect	net_processing.cpp	/^        bool m_protect;$/;"	m	struct:__anon50::CNodeState::ChainSyncTimeoutState	file:
m_pscheduler	scheduler.h	/^    CScheduler *m_pscheduler;$/;"	m	class:SingleThreadedSchedulerClient
m_remaining	script/wificoinconsensus.cpp	/^    size_t m_remaining;$/;"	m	class:__anon95::TxInputStream	file:
m_schedulerClient	validationinterface.cpp	/^    SingleThreadedSchedulerClient m_schedulerClient;$/;"	m	struct:MainSignalsInstance	file:
m_sent_getheaders	net_processing.cpp	/^        bool m_sent_getheaders;$/;"	m	struct:__anon50::CNodeState::ChainSyncTimeoutState	file:
m_stale_tip_check_time	net_processing.h	/^    int64_t m_stale_tip_check_time; \/\/! Next time to check for stale tip$/;"	m	class:PeerLogicValidation
m_timeout	net_processing.cpp	/^        int64_t m_timeout;$/;"	m	struct:__anon50::CNodeState::ChainSyncTimeoutState	file:
m_toIntImpl	tinyformat.h	/^        int (*m_toIntImpl)(const void* value);$/;"	m	class:tinyformat::detail::FormatArg
m_try_another_outbound_peer	net.h	/^    std::atomic_bool m_try_another_outbound_peer;$/;"	m	class:CConnman
m_type	script/wificoinconsensus.cpp	/^    const int m_type;$/;"	m	class:__anon95::TxInputStream	file:
m_value	script/script.h	/^    int64_t m_value;$/;"	m	class:CScriptNum
m_value	test/scriptnum10.h	/^    int64_t m_value;$/;"	m	class:CScriptNum10
m_value	tinyformat.h	/^        const void* m_value;$/;"	m	class:tinyformat::detail::FormatArg
m_version	script/wificoinconsensus.cpp	/^    const int m_version;$/;"	m	class:__anon95::TxInputStream	file:
m_work_header	net_processing.cpp	/^        const CBlockIndex * m_work_header;$/;"	m	struct:__anon50::CNodeState::ChainSyncTimeoutState	file:
m_x	reverse_iterator.h	/^    T &m_x;$/;"	m	class:reverse_range
magnitude	secp256k1/src/field_10x26.h	/^    int magnitude;$/;"	m	struct:__anon73
magnitude	secp256k1/src/field_5x52.h	/^    int magnitude;$/;"	m	struct:__anon56
main	bench/bench_wificoin.cpp	/^main(int argc, char** argv)$/;"	f
main	wificoin-cli.cpp	/^int main(int argc, char* argv[])$/;"	f
main	wificoin-tx.cpp	/^int main(int argc, char* argv[])$/;"	f
main	wificoind.cpp	/^int main(int argc, char* argv[])$/;"	f
main	crypto/ctaes/bench.c	/^int main(void) {$/;"	f
main	crypto/ctaes/test.c	/^int main(void) {$/;"	f
main	leveldb/db/autocompact_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/c_test.c	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/corruption_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/db_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/dbformat_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/fault_injection_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/filename_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/leveldbutil.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/recovery_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/skiplist_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/version_edit_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/version_set_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/write_batch_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/doc/bench/db_bench_sqlite3.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/doc/bench/db_bench_tree_db.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/helpers/memenv/memenv_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/issues/issue178_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/issues/issue200_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/table/filter_block_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/table/table_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/arena_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/bloom_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/cache_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/coding_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/crc32c_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/env_posix_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/env_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/hash_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	qt/wificoin.cpp	/^int main(int argc, char *argv[])$/;"	f
main	qt/test/test_main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	secp256k1/build-aux/config.guess	/^		main()$/;"	f
main	secp256k1/build-aux/config.guess	/^	main ()$/;"	f
main	secp256k1/build-aux/config.guess	/^main ()$/;"	f
main	secp256k1/src/bench_ecdh.c	/^int main(void) {$/;"	f
main	secp256k1/src/bench_internal.c	/^int main(int argc, char **argv) {$/;"	f
main	secp256k1/src/bench_recover.c	/^int main(void) {$/;"	f
main	secp256k1/src/bench_sign.c	/^int main(void) {$/;"	f
main	secp256k1/src/bench_verify.c	/^int main(void) {$/;"	f
main	secp256k1/src/gen_context.c	/^int main(int argc, char **argv) {$/;"	f
main	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void main(String[] args) throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
main	secp256k1/src/tests.c	/^int main(int argc, char **argv) {$/;"	f
main	secp256k1/src/tests_exhaustive.c	/^int main(void) {$/;"	f
main	test/test_wificoin_fuzzy.cpp	/^int main(int argc, char **argv)$/;"	f
main	univalue/build-aux/config.guess	/^		main()$/;"	f
main	univalue/build-aux/config.guess	/^	main ()$/;"	f
main	univalue/build-aux/config.guess	/^main ()$/;"	f
main	univalue/gen/gen.cpp	/^int main (int argc, char *argv[])$/;"	f
main	univalue/test/unitester.cpp	/^int main (int argc, char *argv[])$/;"	f
mainWindow	qt/macdockiconhandler.h	/^    QMainWindow *mainWindow;$/;"	m	class:MacDockIconHandler
makeCallback	qt/callback.h	/^FunctionCallback<F>* makeCallback(F f)$/;"	f
makeFormatList	tinyformat.h	/^detail::FormatListN<sizeof...(Args)> makeFormatList(const Args&... args)$/;"	f	namespace:tinyformat
make_dummy_depfile	secp256k1/build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
make_dummy_depfile	univalue/build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	secp256k1/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	univalue/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
manifest_file_number_	leveldb/db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifest_sync_error_	leveldb/db/db_test.cc	/^  port::AtomicPointer manifest_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifest_write_error_	leveldb/db/db_test.cc	/^  port::AtomicPointer manifest_write_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifests_	leveldb/db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon26::Repairer	file:
manual_compaction_	leveldb/db/db_impl.h	/^  ManualCompaction* manual_compaction_;$/;"	m	class:leveldb::DBImpl
map	limitedmap.h	/^    std::map<K, V> map;$/;"	m	class:limitedmap
map	test/coins_tests.cpp	/^    CCoinsMap& map() { return cacheCoins; }$/;"	f	class:__anon79::CCoinsViewCacheTest
mapAddr	addrman.h	/^    std::map<CNetAddr, int> mapAddr;$/;"	m	class:CAddrMan
mapAddressBook	wallet/wallet.h	/^    std::map<CTxDestination, CAddressBookData> mapAddressBook;$/;"	m	class:CWallet
mapArgs	util.h	/^    std::map<std::string, std::string> mapArgs;$/;"	m	class:ArgsManager
mapAskFor	net.h	/^    std::multimap<int64_t, CInv> mapAskFor;$/;"	m	class:CNode
mapBlockIndex	validation.cpp	/^BlockMap mapBlockIndex;$/;"	v
mapBlockSource	net_processing.cpp	/^    std::map<uint256, std::pair<NodeId, bool>> mapBlockSource;$/;"	m	namespace:__anon49	file:
mapBlocksInFlight	net_processing.cpp	/^    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight;$/;"	m	namespace:__anon49	file:
mapBlocksUnlinked	validation.cpp	/^    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;$/;"	m	namespace:__anon43	file:
mapCheckpoints	chainparams.h	/^    MapCheckpoints mapCheckpoints;$/;"	m	struct:CCheckpointData
mapCommands	rpc/server.h	/^    std::map<std::string, const CRPCCommand*> mapCommands;$/;"	m	class:CRPCTable
mapCryptedKeys	wallet/crypter.h	/^    CryptedKeyMap mapCryptedKeys;$/;"	m	class:CCryptoKeyStore
mapDb	wallet/db.h	/^    std::map<std::string, Db*> mapDb;$/;"	m	class:CDBEnv
mapDeltas	txmempool.h	/^    std::map<uint256, CAmount> mapDeltas;$/;"	m	class:CTxMemPool
mapFileUseCount	wallet/db.h	/^    std::map<std::string, int> mapFileUseCount;$/;"	m	class:CDBEnv
mapFlagNames	test/transaction_tests.cpp	/^static std::map<std::string, unsigned int> mapFlagNames = {$/;"	v	file:
mapInfo	addrman.h	/^    std::map<int, CAddrInfo> mapInfo;$/;"	m	class:CAddrMan
mapKeyMetadata	wallet/wallet.h	/^    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;$/;"	m	class:CWallet
mapKeys	keystore.h	/^    KeyMap mapKeys;$/;"	m	class:CBasicKeyStore
mapLinks	txmempool.h	/^    txlinksMap mapLinks;$/;"	m	class:CTxMemPool
mapLocalHost	net.cpp	/^std::map<CNetAddr, LocalServiceInfo> mapLocalHost;$/;"	v
mapMasterKeys	wallet/wallet.h	/^    MasterKeyMap mapMasterKeys;$/;"	m	class:CWallet
mapMemPoolTxs	policy/fees.h	/^    std::map<uint256, TxStatsInfo> mapMemPoolTxs;$/;"	m	class:CBlockPolicyEstimator
mapMsgCmdSize	net.h	/^typedef std::map<std::string, uint64_t> mapMsgCmdSize; \/\/command, total bytes$/;"	t
mapMultiArgs	util.h	/^    std::map<std::string, std::vector<std::string> > mapMultiArgs;$/;"	m	class:ArgsManager
mapNextTx	txmempool.h	/^    indirectmap<COutPoint, const CTransaction*> mapNextTx;$/;"	m	class:CTxMemPool
mapNodeRows	qt/peertablemodel.cpp	/^    std::map<NodeId, int> mapNodeRows;$/;"	m	class:PeerTablePriv	file:
mapNodeState	net_processing.cpp	/^std::map<NodeId, CNodeState> mapNodeState;$/;"	m	namespace:__anon50	file:
mapPublishNotifiers	zmq/zmqpublishnotifier.cpp	/^static std::multimap<std::string, CZMQAbstractPublishNotifier*> mapPublishNotifiers;$/;"	v	file:
mapRecvBytesPerMsgCmd	net.h	/^    mapMsgCmdSize mapRecvBytesPerMsgCmd;$/;"	m	class:CNode
mapRecvBytesPerMsgCmd	net.h	/^    mapMsgCmdSize mapRecvBytesPerMsgCmd;$/;"	m	class:CNodeStats
mapRelay	net_processing.cpp	/^    MapRelay mapRelay;$/;"	m	namespace:__anon49	file:
mapRequestCount	wallet/wallet.h	/^    std::map<uint256, int> mapRequestCount;$/;"	m	class:CWallet
mapScripts	keystore.h	/^    ScriptMap mapScripts;$/;"	m	class:CBasicKeyStore
mapSendBytesPerMsgCmd	net.h	/^    mapMsgCmdSize mapSendBytesPerMsgCmd;$/;"	m	class:CNode
mapSendBytesPerMsgCmd	net.h	/^    mapMsgCmdSize mapSendBytesPerMsgCmd;$/;"	m	class:CNodeStats
mapSigHashTypes	core_write.cpp	/^const std::map<unsigned char, std::string> mapSigHashTypes = {$/;"	v
mapTx	txmempool.h	/^    indexed_transaction_set mapTx;$/;"	m	class:CTxMemPool
mapTxSpends	wallet/wallet.h	/^    TxSpends mapTxSpends;$/;"	m	class:CWallet
mapValue	wallet/wallet.h	/^    mapValue_t mapValue;$/;"	m	class:CAccountingEntry
mapValue	wallet/wallet.h	/^    mapValue_t mapValue;$/;"	m	class:CWalletTx
mapValue_t	wallet/wallet.h	/^typedef std::map<std::string, std::string> mapValue_t;$/;"	t
mapWallet	wallet/wallet.h	/^    std::map<uint256, CWalletTx> mapWallet;$/;"	m	class:CWallet
mapWalletViews	qt/walletframe.h	/^    QMap<QString, WalletView*> mapWalletViews;$/;"	m	class:WalletFrame
mapWatchKeys	keystore.h	/^    WatchKeyMap mapWatchKeys;$/;"	m	class:CBasicKeyStore
map_	leveldb/db/db_test.cc	/^    KVMap map_;$/;"	m	class:leveldb::ModelDB::ModelSnapshot	file:
map_	leveldb/db/db_test.cc	/^    const KVMap* const map_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
map_	leveldb/db/db_test.cc	/^  KVMap map_;$/;"	m	class:leveldb::ModelDB	file:
map_	test/coins_tests.cpp	/^    std::map<COutPoint, Coin> map_;$/;"	m	class:__anon79::CCoinsViewTest	file:
map_type	script/sigcache.cpp	/^    typedef CuckooCache::cache<uint256, SignatureCacheHasher> map_type;$/;"	t	class:__anon96::CSignatureCache	file:
mapped_type	limitedmap.h	/^    typedef V mapped_type;$/;"	t	class:limitedmap
mapper	qt/editaddressdialog.h	/^    QDataWidgetMapper *mapper;$/;"	m	class:EditAddressDialog
mapper	qt/optionsdialog.h	/^    QDataWidgetMapper *mapper;$/;"	m	class:OptionsDialog
mapperThirdPartyTxUrls	qt/transactionview.h	/^    QSignalMapper *mapperThirdPartyTxUrls;$/;"	m	class:TransactionView
markValid	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::markValid()$/;"	f	class:QValidatedLineEdit
masterKeyID	wallet/walletdb.h	/^    CKeyID masterKeyID; \/\/!< master key hash160$/;"	m	class:CHDChain
matures_in	qt/transactionrecord.h	/^    int matures_in;$/;"	m	class:TransactionStatus
max	leveldb/util/env_win.cc	26;"	d	file:
maxCycles	bench/bench.h	/^        uint64_t maxCycles;$/;"	m	class:benchmark::State
maxDepth	httpserver.cpp	/^    size_t maxDepth;$/;"	m	class:WorkQueue	file:
maxElapsed	bench/bench.h	/^        double maxElapsed;$/;"	m	class:benchmark::State
maxInputBlock	txmempool.h	/^    CBlockIndex* maxInputBlock;$/;"	m	struct:LockPoints
maxMoney	qt/wificoinunits.cpp	/^CAmount WiFicoinUnits::maxMoney()$/;"	f	class:WiFicoinUnits
maxTime	bench/bench.h	/^        double lastTime, minTime, maxTime, countMaskInv;$/;"	m	class:benchmark::State
maxTxFee	validation.cpp	/^CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;$/;"	v
max_	leveldb/util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_file_size	leveldb/include/leveldb/options.h	/^  size_t max_file_size;$/;"	m	struct:leveldb::Options
max_height_	leveldb/db/skiplist.h	/^  port::AtomicPointer max_height_;   \/\/ Height of the entire list$/;"	m	class:leveldb::SkipList
max_open_files	leveldb/include/leveldb/options.h	/^  int max_open_files;$/;"	m	struct:leveldb::Options
max_output_file_size_	leveldb/db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_sequence	leveldb/db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon26::Repairer::TableInfo	file:
max_size	indirectmap.h	/^    size_type max_size() const      { return m.max_size(); }$/;"	f	class:indirectmap
max_size	limitedmap.h	/^    size_type max_size() const { return nMaxSize; }$/;"	f	class:limitedmap
max_size	limitedmap.h	/^    size_type max_size(size_type s)$/;"	f	class:limitedmap
median	timedata.h	/^    T median() const$/;"	f	class:CMedianFilter
mem	cuckoocache.h	/^    std::unique_ptr<std::atomic<uint8_t>[]> mem;$/;"	m	class:CuckooCache::bit_packed_atomic_flags
mem	leveldb/db/db_impl.cc	/^  MemTable* mem;$/;"	m	struct:leveldb::__anon27::IterState	file:
mem_	leveldb/db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
mem_	leveldb/db/write_batch.cc	/^  MemTable* mem_;$/;"	m	class:leveldb::__anon28::MemTableInserter	file:
members	rpc/client.cpp	/^    std::set<std::pair<std::string, int>> members;$/;"	m	class:CRPCConvertTable	file:
membersByName	rpc/client.cpp	/^    std::set<std::pair<std::string, std::string>> membersByName;$/;"	m	class:CRPCConvertTable	file:
memcpy	compat/glibc_compat.cpp	/^extern "C" void* memcpy(void* a, const void* b, size_t c)$/;"	f
memcpy_int	compat/glibc_sanity.cpp	/^void* memcpy_int(void* a, const void* b, size_t c)$/;"	f
memory_cleanse	support/cleanse.cpp	/^void memory_cleanse(void *ptr, size_t len)$/;"	f
memory_usage_	leveldb/util/arena.h	/^  port::AtomicPointer memory_usage_;$/;"	m	class:leveldb::Arena
mempool	txmempool.h	/^    const CTxMemPool& mempool;$/;"	m	class:CCoinsViewMemPool
mempoolInfoToJSON	rpc/blockchain.cpp	/^UniValue mempoolInfoToJSON()$/;"	f
mempoolToJSON	rpc/blockchain.cpp	/^UniValue mempoolToJSON(bool fVerbose)$/;"	f
mempool_count	blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
mempoolentry_txid	txmempool.h	/^struct mempoolentry_txid$/;"	s
memtable_	leveldb/table/table_test.cc	/^  MemTable* memtable_;$/;"	m	class:leveldb::MemTableConstructor	file:
memtable_key	leveldb/db/dbformat.h	/^  Slice memtable_key() const { return Slice(start_, end_ - start_); }$/;"	f	class:leveldb::LookupKey
memusage	memusage.h	/^namespace memusage$/;"	n
menu	qt/wificoingui.h	/^    QMenu* menu;$/;"	m	class:UnitDisplayStatusBarControl
message	qt/wificoingui.cpp	/^void WiFicoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)$/;"	f	class:WiFicoinGUI
message	qt/rpcconsole.cpp	/^void RPCConsole::message(int category, const QString &message, bool html)$/;"	f	class:RPCConsole
message	qt/walletmodel.h	/^    QString message;$/;"	m	class:SendCoinsRecipient
message	torcontrol.cpp	/^    TorControlReply message;$/;"	m	class:TorControlConnection	file:
message_	leveldb/db/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::__anon18::Stats	file:
message_	leveldb/db/log_test.cc	/^    std::string message_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
message_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
message_	leveldb/doc/bench/db_bench_tree_db.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
meta	leveldb/db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon26::Repairer::TableInfo	file:
metaType	qt/notificator.cpp	/^int FreedesktopImage::metaType()$/;"	f	class:FreedesktopImage
metaindex_handle	leveldb/table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	leveldb/table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep	file:
metaindex_handle_	leveldb/table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
method	leveldb/db/db_bench.cc	/^    void (Benchmark::*method)(ThreadState*);$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
methodName	rpc/client.cpp	/^    std::string methodName; \/\/!< method whose params want conversion$/;"	m	class:CRPCConvertParam	file:
microTask	test/scheduler_tests.cpp	/^static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delta, boost::chrono::system_clock::time_point rescheduleTime)$/;"	f	file:
micros	leveldb/db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
minAmount	qt/transactionfilterproxy.h	/^    CAmount minAmount;$/;"	m	class:TransactionFilterProxy
minCycles	bench/bench.h	/^        uint64_t minCycles;$/;"	m	class:benchmark::State
minFeeFilter	net.h	/^    CAmount minFeeFilter;$/;"	m	class:CNode
minRelayTxFee	validation.cpp	/^CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);$/;"	v
minTime	bench/bench.h	/^        double lastTime, minTime, maxTime, countMaskInv;$/;"	m	class:benchmark::State
minTxFee	wallet/wallet.cpp	/^CFeeRate CWallet::minTxFee = CFeeRate(DEFAULT_TRANSACTION_MINFEE);$/;"	m	class:CWallet	file:
minTxFee	wallet/wallet.h	/^    static CFeeRate minTxFee;$/;"	m	class:CWallet
min_	leveldb/util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
minerPolicyEstimator	txmempool.h	/^    CBlockPolicyEstimator* minerPolicyEstimator;$/;"	m	class:CTxMemPool
minimizeFeeSection	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::minimizeFeeSection(bool fMinimize)$/;"	f	class:SendCoinsDialog
minimumSizeHint	qt/wificoinamountfield.cpp	/^    QSize minimumSizeHint() const$/;"	f	class:AmountSpinBox
mining_score	txmempool.h	/^struct mining_score {};$/;"	s
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	secp256k1/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	univalue/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	secp256k1/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	univalue/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mmap_limit	leveldb/util/env_posix.cc	/^static int mmap_limit = -1;$/;"	m	namespace:leveldb::__anon11	file:
mmap_limit_	leveldb/util/env_posix.cc	/^  Limiter mmap_limit_;$/;"	m	class:leveldb::__anon11::PosixEnv	file:
mmapped_region_	leveldb/util/env_posix.cc	/^  void* mmapped_region_;$/;"	m	class:leveldb::__anon11::PosixMmapReadableFile	file:
modalOverlay	qt/wificoingui.h	/^    ModalOverlay *modalOverlay;$/;"	m	class:WiFicoinGUI
mode	consensus/validation.h	/^    } mode;$/;"	m	class:CValidationState	typeref:enum:CValidationState::mode_state
mode	qt/addressbookpage.h	/^    Mode mode;$/;"	m	class:AddressBookPage
mode	qt/askpassphrasedialog.h	/^    Mode mode;$/;"	m	class:AskPassphraseDialog
mode	qt/editaddressdialog.h	/^    Mode mode;$/;"	m	class:EditAddressDialog
mode	qt/notificator.h	/^    Mode mode;$/;"	m	class:Notificator
mode_state	consensus/validation.h	/^    enum mode_state {$/;"	g	class:CValidationState
model	qt/addressbookpage.h	/^    AddressTableModel *model;$/;"	m	class:AddressBookPage
model	qt/askpassphrasedialog.h	/^    WalletModel *model;$/;"	m	class:AskPassphraseDialog
model	qt/coincontroldialog.h	/^    WalletModel *model;$/;"	m	class:CoinControlDialog
model	qt/csvmodelwriter.h	/^    const QAbstractItemModel *model;$/;"	m	class:CSVModelWriter
model	qt/editaddressdialog.h	/^    AddressTableModel *model;$/;"	m	class:EditAddressDialog
model	qt/optionsdialog.h	/^    OptionsModel *model;$/;"	m	class:OptionsDialog
model	qt/receivecoinsdialog.h	/^    WalletModel *model;$/;"	m	class:ReceiveCoinsDialog
model	qt/receiverequestdialog.h	/^    OptionsModel *model;$/;"	m	class:ReceiveRequestDialog
model	qt/sendcoinsdialog.h	/^    WalletModel *model;$/;"	m	class:SendCoinsDialog
model	qt/sendcoinsentry.h	/^    WalletModel *model;$/;"	m	class:SendCoinsEntry
model	qt/signverifymessagedialog.h	/^    WalletModel *model;$/;"	m	class:SignVerifyMessageDialog
model	qt/transactionview.h	/^    WalletModel *model;$/;"	m	class:TransactionView
modifiedentry_iter	miner.h	/^struct modifiedentry_iter {$/;"	s
modifyCount	txmempool.h	/^        int64_t modifyCount;$/;"	m	struct:update_ancestor_state
modifyCount	txmempool.h	/^        int64_t modifyCount;$/;"	m	struct:update_descendant_state
modifyFee	txmempool.h	/^        CAmount modifyFee;$/;"	m	struct:update_ancestor_state
modifyFee	txmempool.h	/^        CAmount modifyFee;$/;"	m	struct:update_descendant_state
modifySigOpsCost	txmempool.h	/^        int64_t modifySigOpsCost;$/;"	m	struct:update_ancestor_state
modifySize	txmempool.h	/^        int64_t modifySize;$/;"	m	struct:update_ancestor_state
modifySize	txmempool.h	/^        int64_t modifySize;$/;"	m	struct:update_descendant_state
modtxiter	miner.h	/^typedef indexed_modified_transaction_set::nth_index<0>::type::iterator modtxiter;$/;"	t
modtxscoreiter	miner.h	/^typedef indexed_modified_transaction_set::index<ancestor_score>::type::iterator modtxscoreiter;$/;"	t
most_recent_block	net_processing.cpp	/^static std::shared_ptr<const CBlock> most_recent_block;$/;"	v	file:
most_recent_block_hash	net_processing.cpp	/^static uint256 most_recent_block_hash;$/;"	v	file:
most_recent_compact_block	net_processing.cpp	/^static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block;$/;"	v	file:
mousePressEvent	qt/wificoingui.cpp	/^void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)$/;"	f	class:UnitDisplayStatusBarControl
mousePressEvent	qt/receiverequestdialog.cpp	/^void QRImageWidget::mousePressEvent(QMouseEvent *event)$/;"	f	class:QRImageWidget
mouseReleaseEvent	qt/guiutil.cpp	/^void ClickableLabel::mouseReleaseEvent(QMouseEvent *event)$/;"	f	class:GUIUtil::ClickableLabel
mouseReleaseEvent	qt/guiutil.cpp	/^void ClickableProgressBar::mouseReleaseEvent(QMouseEvent *event)$/;"	f	class:GUIUtil::ClickableProgressBar
move	test/prevector_tests.cpp	/^    void move() {$/;"	f	class:prevector_tester
movecmd	wallet/rpcwallet.cpp	/^UniValue movecmd(const JSONRPCRequest& request)$/;"	f
mp	net_processing.cpp	/^    CTxMemPool *mp;$/;"	m	class:CompareInvMempoolOrder	file:
msg	net.h	/^    CSerializedNetMsg(const CSerializedNetMsg& msg) = delete;$/;"	m	struct:CSerializedNetMsg
msg	secp256k1/src/bench_recover.c	/^    unsigned char msg[32];$/;"	m	struct:__anon63	file:
msg	secp256k1/src/bench_sign.c	/^    unsigned char msg[32];$/;"	m	struct:__anon65	file:
msg	secp256k1/src/bench_verify.c	/^    unsigned char msg[32];$/;"	m	struct:__anon55	file:
msgIndent	util.cpp	/^static const int msgIndent = 7;$/;"	v	file:
mtx	wallet/feebumper.h	/^    CMutableTransaction mtx;$/;"	m	class:CFeeBumper
mu	leveldb/db/db_bench.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::__anon18::SharedState	file:
mu	leveldb/db/db_impl.cc	/^  port::Mutex* mu;$/;"	m	struct:leveldb::__anon27::IterState	file:
mu	leveldb/util/env_test.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::State	file:
mu_	leveldb/db/db_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon29::AtomicCounter	file:
mu_	leveldb/db/skiplist_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::TestState	file:
mu_	leveldb/port/port_posix.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	leveldb/port/port_posix.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	leveldb/port/port_win.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	leveldb/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon11::Limiter	file:
mu_	leveldb/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon11::PosixLockTable	file:
mu_	leveldb/util/env_posix.cc	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::__anon11::PosixEnv	file:
mu_	leveldb/util/env_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::EnvTest	file:
mu_	leveldb/util/mutexlock.h	/^  port::Mutex *const mu_;$/;"	m	class:leveldb::MutexLock::port
muladd	secp256k1/src/scalar_4x64_impl.h	187;"	d
muladd	secp256k1/src/scalar_4x64_impl.h	885;"	d
muladd	secp256k1/src/scalar_8x32_impl.h	266;"	d
muladd	secp256k1/src/scalar_8x32_impl.h	641;"	d
muladd2	secp256k1/src/scalar_4x64_impl.h	216;"	d
muladd2	secp256k1/src/scalar_4x64_impl.h	887;"	d
muladd2	secp256k1/src/scalar_8x32_impl.h	295;"	d
muladd2	secp256k1/src/scalar_8x32_impl.h	643;"	d
muladd_fast	secp256k1/src/scalar_4x64_impl.h	202;"	d
muladd_fast	secp256k1/src/scalar_4x64_impl.h	886;"	d
muladd_fast	secp256k1/src/scalar_8x32_impl.h	281;"	d
muladd_fast	secp256k1/src/scalar_8x32_impl.h	642;"	d
multiUserAuthorized	httprpc.cpp	/^static bool multiUserAuthorized(std::string strUserPass)$/;"	f	file:
mut	threadinterrupt.h	/^    std::mutex mut;$/;"	m	class:CThreadInterrupt
mutex	checkqueue.h	/^    boost::mutex mutex;$/;"	m	class:CCheckQueue
mutex	qt/intro.h	/^    QMutex mutex;$/;"	m	class:Intro
mutex	support/lockedpool.h	/^    mutable std::mutex mutex;$/;"	m	class:LockedPool
mutex	sync.h	/^    boost::mutex mutex;$/;"	m	class:CSemaphore
mutexDebugLog	util.cpp	/^static boost::mutex* mutexDebugLog = nullptr;$/;"	v	file:
mutexMsgProc	net.h	/^    std::mutex mutexMsgProc;$/;"	m	class:CConnman
mutexName	sync.cpp	/^    std::string mutexName;$/;"	m	struct:CLockLocation	file:
mutex_	leveldb/db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	leveldb/db/fault_injection_test.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
mutex_	leveldb/helpers/memenv/memenv.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon16::InMemoryEnv	file:
mutex_	leveldb/port/port_win.h	/^    Mutex mutex_;$/;"	m	class:leveldb::port::OnceType
mutex_	leveldb/util/cache.cc	/^  mutable port::Mutex mutex_;$/;"	m	class:leveldb::__anon13::LRUCache	file:
n	primitives/transaction.h	/^    uint32_t n;$/;"	m	class:COutPoint
n	secp256k1/src/field_10x26.h	/^    uint32_t n[10];$/;"	m	struct:__anon73
n	secp256k1/src/field_10x26.h	/^    uint32_t n[8];$/;"	m	struct:__anon74
n	secp256k1/src/field_5x52.h	/^    uint64_t n[4];$/;"	m	struct:__anon57
n	secp256k1/src/field_5x52.h	/^    uint64_t n[5];$/;"	m	struct:__anon56
n	serialize.h	/^    I &n;$/;"	m	class:CVarInt
n	serialize.h	/^    uint64_t &n;$/;"	m	class:CCompactSize
nAccountingEntryNumber	wallet/wallet.h	/^    uint64_t nAccountingEntryNumber;$/;"	m	class:CWallet
nAmount	wallet/rpcwallet.cpp	/^    CAmount nAmount;$/;"	m	struct:tallyitem	file:
nAmount	wallet/wallet.h	/^    CAmount nAmount;$/;"	m	struct:CRecipient
nAttempts	addrman.h	/^    int nAttempts;$/;"	m	class:CAddrInfo
nAvailableCreditCached	wallet/wallet.h	/^    mutable CAmount nAvailableCreditCached;$/;"	m	class:CWalletTx
nAvailableWatchCreditCached	wallet/wallet.h	/^    mutable CAmount nAvailableWatchCreditCached;$/;"	m	class:CWalletTx
nBanUntil	addrdb.h	/^    int64_t nBanUntil;$/;"	m	class:CBanEntry
nBatchSize	checkqueue.h	/^    unsigned int nBatchSize;$/;"	m	class:CCheckQueue
nBestHeight	net.h	/^        int nBestHeight = 0;$/;"	m	struct:CConnman::Options
nBestHeight	net.h	/^    std::atomic<int> nBestHeight;$/;"	m	class:CConnman
nBestSeenHeight	policy/fees.h	/^    unsigned int nBestSeenHeight;$/;"	m	class:CBlockPolicyEstimator
nBits	chain.h	/^    unsigned int nBits;$/;"	m	class:CBlockIndex
nBits	primitives/block.h	/^    uint32_t nBits;$/;"	m	class:CBlockHeader
nBlockMaxSize	miner.h	/^        size_t nBlockMaxSize;$/;"	m	struct:BlockAssembler::Options
nBlockMaxWeight	miner.h	/^        size_t nBlockMaxWeight;$/;"	m	struct:BlockAssembler::Options
nBlockMaxWeight	miner.h	/^    unsigned int nBlockMaxWeight;$/;"	m	class:BlockAssembler
nBlockReverseSequenceId	validation.cpp	/^    int32_t nBlockReverseSequenceId = -1;$/;"	m	namespace:__anon43	file:
nBlockSequenceId	validation.cpp	/^    int32_t nBlockSequenceId = 1;$/;"	m	namespace:__anon43	file:
nBlockSigOpsCost	miner.h	/^    uint64_t nBlockSigOpsCost;$/;"	m	class:BlockAssembler
nBlockTx	miner.h	/^    uint64_t nBlockTx;$/;"	m	class:BlockAssembler
nBlockWeight	miner.h	/^    uint64_t nBlockWeight;$/;"	m	class:BlockAssembler
nBlocks	chain.h	/^    unsigned int nBlocks;      \/\/!< number of blocks stored in file$/;"	m	class:CBlockFileInfo
nBlocksInFlight	net_processing.cpp	/^    int nBlocksInFlight;$/;"	m	struct:__anon50::CNodeState	file:
nBlocksInFlightValidHeaders	net_processing.cpp	/^    int nBlocksInFlightValidHeaders;$/;"	m	struct:__anon50::CNodeState	file:
nBogoSize	rpc/blockchain.cpp	/^    uint64_t nBogoSize;$/;"	m	struct:CCoinsStats	file:
nBytesPerSigOp	policy/policy.cpp	/^unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;$/;"	v
nCKeys	wallet/walletdb.cpp	/^    unsigned int nCKeys;$/;"	m	class:CWalletScanState	file:
nChainTx	chain.h	/^    unsigned int nChainTx;$/;"	m	class:CBlockIndex
nChainWork	chain.h	/^    arith_uint256 nChainWork;$/;"	m	class:CBlockIndex
nChangeCached	wallet/wallet.h	/^    mutable CAmount nChangeCached;$/;"	m	class:CWalletTx
nCheckFrequency	txmempool.h	/^    uint32_t nCheckFrequency; \/\/!< Value n means that n times in 2^32 we check.$/;"	m	class:CTxMemPool
nChild	key.h	/^    unsigned int nChild;$/;"	m	struct:CExtKey
nChild	pubkey.h	/^    unsigned int nChild;$/;"	m	struct:CExtPubKey
nChild	test/bip32_tests.cpp	/^    unsigned int nChild;$/;"	m	struct:TestDerivation	file:
nCoinCacheUsage	validation.cpp	/^size_t nCoinCacheUsage = 5000 * 300;$/;"	v
nCommonHeight	net_processing.h	/^    int nCommonHeight;$/;"	m	struct:CNodeStateStats
nConf	wallet/rpcwallet.cpp	/^    int nConf;$/;"	m	struct:tallyitem	file:
nConnectTimeout	netbase.cpp	/^int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;$/;"	v
nCountWithAncestors	txmempool.h	/^    uint64_t nCountWithAncestors;$/;"	m	class:CTxMemPoolEntry
nCountWithDescendants	txmempool.h	/^    uint64_t nCountWithDescendants;  \/\/!< number of descendant transactions$/;"	m	class:CTxMemPoolEntry
nCreateTime	addrdb.h	/^    int64_t nCreateTime;$/;"	m	class:CBanEntry
nCreateTime	wallet/walletdb.h	/^    int64_t nCreateTime; \/\/ 0 means unknown$/;"	m	class:CKeyMetadata
nCreditCached	wallet/wallet.h	/^    mutable CAmount nCreditCached;$/;"	m	class:CWalletTx
nCreditDebit	wallet/wallet.h	/^    CAmount nCreditDebit;$/;"	m	class:CAccountingEntry
nDataPos	chain.h	/^    unsigned int nDataPos;$/;"	m	class:CBlockIndex
nDataPos	net.h	/^    unsigned int nDataPos;$/;"	m	class:CNetMessage
nDebitCached	wallet/wallet.h	/^    mutable CAmount nDebitCached;$/;"	m	class:CWalletTx
nDefaultDbBatchSize	txdb.h	/^static const int64_t nDefaultDbBatchSize = 16 << 20;$/;"	v
nDefaultDbCache	txdb.h	/^static const int64_t nDefaultDbCache = 450;$/;"	v
nDefaultMaxNumSize	script/script.h	/^    static const size_t nDefaultMaxNumSize = 4;$/;"	m	class:CScriptNum
nDefaultMaxNumSize	test/scriptnum10.h	/^    static const size_t nDefaultMaxNumSize = 4;$/;"	m	class:CScriptNum10
nDefaultPort	chainparams.h	/^    int nDefaultPort;$/;"	m	class:CChainParams
nDepth	key.h	/^    unsigned char nDepth;$/;"	m	struct:CExtKey
nDepth	pubkey.h	/^    unsigned char nDepth;$/;"	m	struct:CExtPubKey
nDepth	wallet/wallet.h	/^    int nDepth;$/;"	m	class:COutput
nDerivationMethod	wallet/crypter.h	/^    unsigned int nDerivationMethod;$/;"	m	class:CMasterKey
nDeriveIterations	wallet/crypter.h	/^    unsigned int nDeriveIterations;$/;"	m	class:CMasterKey
nDiskSize	rpc/blockchain.cpp	/^    uint64_t nDiskSize;$/;"	m	struct:CCoinsStats	file:
nDisplayUnit	qt/optionsmodel.h	/^    int nDisplayUnit;$/;"	m	class:OptionsModel
nDoS	consensus/validation.h	/^    int nDoS;$/;"	m	class:CValidationState
nDownloadingSince	net_processing.cpp	/^    int64_t nDownloadingSince;$/;"	m	struct:__anon50::CNodeState	file:
nEntriesPerGeneration	bloom.h	/^    int nEntriesPerGeneration;$/;"	m	class:CRollingBloomFilter
nEntriesThisGeneration	bloom.h	/^    int nEntriesThisGeneration;$/;"	m	class:CRollingBloomFilter
nEntryNo	wallet/wallet.h	/^    uint64_t nEntryNo;$/;"	m	class:CAccountingEntry
nExternalChainCounter	wallet/walletdb.h	/^    uint32_t nExternalChainCounter;$/;"	m	class:CHDChain
nFD	init.cpp	/^int nFD;$/;"	m	namespace:__anon2	file:
nFee	test/test_wificoin.h	/^    CAmount nFee;$/;"	m	struct:TestMemPoolEntryHelper
nFee	txmempool.h	/^    CAmount nFee;              \/\/!< Cached to avoid expensive parent-transaction lookups$/;"	m	class:CTxMemPoolEntry
nFeeDelta	txmempool.h	/^    int64_t nFeeDelta;$/;"	m	struct:TxMempoolInfo
nFees	miner.h	/^    CAmount nFees;$/;"	m	class:BlockAssembler
nFile	chain.h	/^    int nFile;$/;"	m	class:CBlockIndex
nFile	chain.h	/^    int nFile;$/;"	m	struct:CDiskBlockPos
nFileVersion	wallet/walletdb.cpp	/^    int nFileVersion;$/;"	m	class:CWalletScanState	file:
nFlags	bloom.h	/^    unsigned char nFlags;$/;"	m	class:CBloomFilter
nFlags	validation.h	/^    unsigned int nFlags;$/;"	m	class:CScriptCheck
nFrozen	test/checkqueue_tests.cpp	/^    static std::atomic<uint64_t> nFrozen;$/;"	m	struct:FrozenCleanupCheck	file:
nGeneration	bloom.h	/^    int nGeneration;$/;"	m	class:CRollingBloomFilter
nHashFuncs	bloom.h	/^    int nHashFuncs;$/;"	m	class:CRollingBloomFilter
nHashFuncs	bloom.h	/^    unsigned int nHashFuncs;$/;"	m	class:CBloomFilter
nHashType	script/sign.h	/^    int nHashType;$/;"	m	class:TransactionSignatureCreator
nHdrPos	net.h	/^    unsigned int nHdrPos;$/;"	m	class:CNetMessage
nHeadersSyncTimeout	net_processing.cpp	/^    int64_t nHeadersSyncTimeout;$/;"	m	struct:__anon50::CNodeState	file:
nHeight	chain.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nHeight	miner.h	/^    int nHeight;$/;"	m	class:BlockAssembler
nHeight	rest.cpp	/^    uint32_t nHeight;$/;"	m	struct:CCoin	file:
nHeight	rpc/blockchain.cpp	/^    int nHeight;$/;"	m	struct:CCoinsStats	file:
nHeight	test/test_wificoin.h	/^    unsigned int nHeight;$/;"	m	struct:TestMemPoolEntryHelper
nHeight	txdb.cpp	/^    int nHeight;$/;"	m	class:__anon77::CCoins	file:
nHeightFirst	chain.h	/^    unsigned int nHeightFirst; \/\/!< lowest height of block in file$/;"	m	class:CBlockFileInfo
nHeightLast	chain.h	/^    unsigned int nHeightLast;  \/\/!< highest height of block in file$/;"	m	class:CBlockFileInfo
nIdCount	addrman.h	/^    int nIdCount;$/;"	m	class:CAddrMan
nIdle	checkqueue.h	/^    int nIdle;$/;"	m	class:CCheckQueue
nImmatureCreditCached	wallet/wallet.h	/^    mutable CAmount nImmatureCreditCached;$/;"	m	class:CWalletTx
nImmatureWatchCreditCached	wallet/wallet.h	/^    mutable CAmount nImmatureWatchCreditCached;$/;"	m	class:CWalletTx
nIn	script/interpreter.cpp	/^    const unsigned int nIn;    \/\/!< input index of txTo being signed$/;"	m	class:__anon99::CTransactionSignatureSerializer	file:
nIn	script/interpreter.h	/^    unsigned int nIn;$/;"	m	class:TransactionSignatureChecker
nIn	script/sign.h	/^    unsigned int nIn;$/;"	m	class:TransactionSignatureCreator
nIn	validation.h	/^    unsigned int nIn;$/;"	m	class:CScriptCheck
nIndex	wallet/wallet.h	/^    int nIndex;$/;"	m	class:CMerkleTx
nIndex	wallet/wallet.h	/^    int64_t nIndex;$/;"	m	class:CReserveKey
nInternalChainCounter	wallet/walletdb.h	/^    uint32_t nInternalChainCounter;$/;"	m	class:CHDChain
nKey	addrman.h	/^    uint256 nKey;$/;"	m	class:CAddrMan
nKeyMeta	wallet/walletdb.cpp	/^    unsigned int nKeyMeta;$/;"	m	class:CWalletScanState	file:
nKeyedNetGroup	net.cpp	/^    uint64_t nKeyedNetGroup;$/;"	m	struct:NodeEvictionCandidate	file:
nKeyedNetGroup	net.h	/^    const uint64_t nKeyedNetGroup;$/;"	m	class:CNode
nKeys	wallet/walletdb.cpp	/^    unsigned int nKeys;$/;"	m	class:CWalletScanState	file:
nLastBlockFile	validation.cpp	/^    int nLastBlockFile = 0;$/;"	m	namespace:__anon43	file:
nLastBlockTime	net.cpp	/^    int64_t nLastBlockTime;$/;"	m	struct:NodeEvictionCandidate	file:
nLastBlockTime	net.h	/^    std::atomic<int64_t> nLastBlockTime;$/;"	m	class:CNode
nLastBlockTipUpdateNotification	qt/clientmodel.cpp	/^static int64_t nLastBlockTipUpdateNotification = 0;$/;"	v	file:
nLastBlockTx	miner.cpp	/^uint64_t nLastBlockTx = 0;$/;"	v
nLastBlockWeight	miner.cpp	/^uint64_t nLastBlockWeight = 0;$/;"	v
nLastBytesIn	qt/trafficgraphwidget.h	/^    quint64 nLastBytesIn;$/;"	m	class:TrafficGraphWidget
nLastBytesOut	qt/trafficgraphwidget.h	/^    quint64 nLastBytesOut;$/;"	m	class:TrafficGraphWidget
nLastCountAttempt	addrman.h	/^    int64_t nLastCountAttempt;$/;"	m	class:CAddrInfo
nLastFlushed	wallet/db.h	/^    unsigned int nLastFlushed;$/;"	m	class:CWalletDBWrapper
nLastGood	addrman.h	/^    int64_t nLastGood;$/;"	m	class:CAddrMan
nLastHeaderTipUpdateNotification	qt/clientmodel.cpp	/^static int64_t nLastHeaderTipUpdateNotification = 0;$/;"	v	file:
nLastNodeId	net.h	/^    std::atomic<NodeId> nLastNodeId;$/;"	m	class:CConnman
nLastPreciousChainwork	validation.cpp	/^    arith_uint256 nLastPreciousChainwork = 0;$/;"	m	namespace:__anon43	file:
nLastRecv	net.h	/^    int64_t nLastRecv;$/;"	m	class:CNodeStats
nLastRecv	net.h	/^    std::atomic<int64_t> nLastRecv;$/;"	m	class:CNode
nLastResend	wallet/wallet.h	/^    int64_t nLastResend;$/;"	m	class:CWallet
nLastSeen	wallet/db.h	/^    unsigned int nLastSeen;$/;"	m	class:CWalletDBWrapper
nLastSend	net.h	/^    int64_t nLastSend;$/;"	m	class:CNodeStats
nLastSend	net.h	/^    std::atomic<int64_t> nLastSend;$/;"	m	class:CNode
nLastSuccess	addrman.h	/^    int64_t nLastSuccess;$/;"	m	class:CAddrInfo
nLastTXTime	net.cpp	/^    int64_t nLastTXTime;$/;"	m	struct:NodeEvictionCandidate	file:
nLastTXTime	net.h	/^    std::atomic<int64_t> nLastTXTime;$/;"	m	class:CNode
nLastTry	addrman.h	/^    int64_t nLastTry;$/;"	m	class:CAddrInfo
nLastWalletUpdate	wallet/db.h	/^    int64_t nLastWalletUpdate;$/;"	m	class:CWalletDBWrapper
nLocalHostNonce	net.h	/^    const uint64_t nLocalHostNonce;$/;"	m	class:CNode
nLocalServices	init.cpp	/^ServiceFlags nLocalServices = NODE_NETWORK;$/;"	m	namespace:__anon2	file:
nLocalServices	net.h	/^        ServiceFlags nLocalServices = NODE_NONE;$/;"	m	struct:CConnman::Options
nLocalServices	net.h	/^    ServiceFlags nLocalServices;$/;"	m	class:CConnman
nLocalServices	net.h	/^    const ServiceFlags nLocalServices;$/;"	m	class:CNode
nLockTime	primitives/transaction.h	/^    const uint32_t nLockTime;$/;"	m	class:CTransaction
nLockTime	primitives/transaction.h	/^    uint32_t nLockTime;$/;"	m	struct:CMutableTransaction
nLockTimeCutoff	miner.h	/^    int64_t nLockTimeCutoff;$/;"	m	class:BlockAssembler
nMasterKeyMaxID	wallet/wallet.h	/^    unsigned int nMasterKeyMaxID;$/;"	m	class:CWallet
nMaxAddnode	net.h	/^        int nMaxAddnode = 0;$/;"	m	struct:CConnman::Options
nMaxAddnode	net.h	/^    int nMaxAddnode;$/;"	m	class:CConnman
nMaxBlockDBAndTxIndexCache	txdb.h	/^static const int64_t nMaxBlockDBAndTxIndexCache = 1024;$/;"	v
nMaxBlockDBCache	txdb.h	/^static const int64_t nMaxBlockDBCache = 2;$/;"	v
nMaxCoinsDBCache	txdb.h	/^static const int64_t nMaxCoinsDBCache = 8;$/;"	v
nMaxConnections	init.cpp	/^int nMaxConnections;$/;"	m	namespace:__anon2	file:
nMaxConnections	net.h	/^        int nMaxConnections = 0;$/;"	m	struct:CConnman::Options
nMaxConnections	net.h	/^    int nMaxConnections;$/;"	m	class:CConnman
nMaxDatacarrierBytes	script/standard.cpp	/^unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;$/;"	v
nMaxDbCache	txdb.h	/^static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;$/;"	v
nMaxFeeler	net.h	/^        int nMaxFeeler = 0;$/;"	m	struct:CConnman::Options
nMaxFeeler	net.h	/^    int nMaxFeeler;$/;"	m	class:CConnman
nMaxOutbound	net.h	/^        int nMaxOutbound = 0;$/;"	m	struct:CConnman::Options
nMaxOutbound	net.h	/^    int nMaxOutbound;$/;"	m	class:CConnman
nMaxOutboundCycleStartTime	net.h	/^    uint64_t nMaxOutboundCycleStartTime;$/;"	m	class:CConnman
nMaxOutboundLimit	net.h	/^        uint64_t nMaxOutboundLimit = 0;$/;"	m	struct:CConnman::Options
nMaxOutboundLimit	net.h	/^    uint64_t nMaxOutboundLimit;$/;"	m	class:CConnman
nMaxOutboundTimeframe	net.h	/^        uint64_t nMaxOutboundTimeframe = 0;$/;"	m	struct:CConnman::Options
nMaxOutboundTimeframe	net.h	/^    uint64_t nMaxOutboundTimeframe;$/;"	m	class:CConnman
nMaxOutboundTotalBytesSentInCycle	net.h	/^    uint64_t nMaxOutboundTotalBytesSentInCycle;$/;"	m	class:CConnman
nMaxSize	limitedmap.h	/^    size_type nMaxSize;$/;"	m	class:limitedmap
nMaxTipAge	validation.cpp	/^int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;$/;"	v
nMedianTimeSpan	chain.h	/^    enum { nMedianTimeSpan=11 };$/;"	e	enum:CBlockIndex::__anon8
nMessageSize	protocol.h	/^    uint32_t nMessageSize;$/;"	m	class:CMessageHeader
nMinDbCache	txdb.h	/^static const int64_t nMinDbCache = 4;$/;"	v
nMinDiskSpace	validation.h	/^static const uint64_t nMinDiskSpace = 52428800;$/;"	v
nMinPingUsecTime	net.cpp	/^    int64_t nMinPingUsecTime;$/;"	m	struct:NodeEvictionCandidate	file:
nMinPingUsecTime	net.h	/^    std::atomic<int64_t> nMinPingUsecTime;$/;"	m	class:CNode
nMinerConfirmationWindow	consensus/params.h	/^    uint32_t nMinerConfirmationWindow;$/;"	m	struct:Consensus::Params
nMinimumChainWork	consensus/params.h	/^    uint256 nMinimumChainWork;$/;"	m	struct:Consensus::Params
nMinimumChainWork	validation.cpp	/^arith_uint256 nMinimumChainWork;$/;"	v
nMins	qt/trafficgraphwidget.h	/^    int nMins;$/;"	m	class:TrafficGraphWidget
nMisbehavior	net_processing.cpp	/^    int nMisbehavior;$/;"	m	struct:__anon50::CNodeState	file:
nMisbehavior	net_processing.h	/^    int nMisbehavior;$/;"	m	struct:CNodeStateStats
nModFeesWithAncestors	miner.h	/^    CAmount nModFeesWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nModFeesWithAncestors	txmempool.h	/^    CAmount nModFeesWithAncestors;$/;"	m	class:CTxMemPoolEntry
nModFeesWithDescendants	txmempool.h	/^    CAmount nModFeesWithDescendants; \/\/!< ... and total fees (all including us)$/;"	m	class:CTxMemPoolEntry
nMyStartingHeight	net.h	/^    const int nMyStartingHeight;$/;"	m	class:CNode
nNew	addrman.h	/^    int nNew;$/;"	m	class:CAddrMan
nNewFee	wallet/feebumper.h	/^    CAmount nNewFee;$/;"	m	class:CFeeBumper
nNextAddrSend	net.h	/^    int64_t nNextAddrSend;$/;"	m	class:CNode
nNextInvSend	net.h	/^    int64_t nNextInvSend;$/;"	m	class:CNode
nNextLocalAddrSend	net.h	/^    int64_t nNextLocalAddrSend;$/;"	m	class:CNode
nNextResend	wallet/wallet.h	/^    int64_t nNextResend;$/;"	m	class:CWallet
nNonce	chain.h	/^    unsigned int nNonce;$/;"	m	class:CBlockIndex
nNonce	primitives/block.h	/^    uint32_t nNonce;$/;"	m	class:CBlockHeader
nOldFee	wallet/feebumper.h	/^    CAmount nOldFee;$/;"	m	class:CFeeBumper
nOrderPos	wallet/wallet.h	/^    int64_t nOrderPos; \/\/!< position in ordered transaction list$/;"	m	class:CAccountingEntry
nOrderPos	wallet/wallet.h	/^    int64_t nOrderPos; \/\/!< position in ordered transaction list$/;"	m	class:CWalletTx
nOrderPosNext	wallet/wallet.h	/^    int64_t nOrderPosNext;$/;"	m	class:CWallet
nPeersWithValidatedDownloads	net_processing.cpp	/^    int nPeersWithValidatedDownloads = 0;$/;"	m	namespace:__anon49	file:
nPingNonceSent	net.h	/^    std::atomic<uint64_t> nPingNonceSent;$/;"	m	class:CNode
nPingUsecStart	net.h	/^    std::atomic<int64_t> nPingUsecStart;$/;"	m	class:CNode
nPingUsecTime	net.h	/^    std::atomic<int64_t> nPingUsecTime;$/;"	m	class:CNode
nPort	net.h	/^    int nPort;$/;"	m	struct:LocalServiceInfo
nPos	chain.h	/^    unsigned int nPos;$/;"	m	struct:CDiskBlockPos
nPos	streams.h	/^    size_t nPos;$/;"	m	class:CVectorWriter
nPowTargetSpacing	consensus/params.h	/^    int64_t nPowTargetSpacing;$/;"	m	struct:Consensus::Params
nPowTargetTimespan	consensus/params.h	/^    int64_t nPowTargetTimespan;$/;"	m	struct:Consensus::Params
nPreferredDownload	net_processing.cpp	/^    int nPreferredDownload = 0;$/;"	m	namespace:__anon49	file:
nProcessQueueSize	net.h	/^    size_t nProcessQueueSize;$/;"	m	class:CNode
nPruneAfterHeight	chainparams.h	/^    uint64_t nPruneAfterHeight;$/;"	m	class:CChainParams
nPruneTarget	validation.cpp	/^uint64_t nPruneTarget = 0;$/;"	v
nRPCPort	chainparamsbase.h	/^    int nRPCPort;$/;"	m	class:CBaseChainParams
nRandomPos	addrman.h	/^    int nRandomPos;$/;"	m	class:CAddrInfo
nReadLimit	streams.h	/^    uint64_t nReadLimit;  \/\/ up to which position we're allowed to read$/;"	m	class:CBufferedFile
nReadPos	streams.h	/^    uint64_t nReadPos;    \/\/ how many bytes have been read from this$/;"	m	class:CBufferedFile
nReadPos	streams.h	/^    unsigned int nReadPos;$/;"	m	class:CDataStream
nReceiveFloodSize	net.h	/^        unsigned int nReceiveFloodSize = 0;$/;"	m	struct:CConnman::Options
nReceiveFloodSize	net.h	/^    unsigned int nReceiveFloodSize;$/;"	m	class:CConnman
nReceiveRequestsMaxId	qt/recentrequeststablemodel.h	/^    int64_t nReceiveRequestsMaxId;$/;"	m	class:RecentRequestsTableModel
nRecvBytes	net.h	/^    uint64_t nRecvBytes;$/;"	m	class:CNode
nRecvBytes	net.h	/^    uint64_t nRecvBytes;$/;"	m	class:CNodeStats
nRecvVersion	net.h	/^    std::atomic<int> nRecvVersion;$/;"	m	class:CNode
nRefCount	addrman.h	/^    int nRefCount;$/;"	m	class:CAddrInfo
nRefCount	net.h	/^    std::atomic<int> nRefCount;$/;"	m	class:CNode
nRelevantServices	init.cpp	/^ServiceFlags nRelevantServices = NODE_NETWORK;$/;"	m	namespace:__anon2	file:
nRelevantServices	net.h	/^        ServiceFlags nRelevantServices = NODE_NONE;$/;"	m	struct:CConnman::Options
nRelevantServices	net.h	/^    ServiceFlags nRelevantServices;$/;"	m	class:CConnman
nRelockTime	wallet/wallet.h	/^    int64_t nRelockTime;$/;"	m	class:CWallet
nRewind	streams.h	/^    uint64_t nRewind;     \/\/ how many bytes we guarantee to rewind$/;"	m	class:CBufferedFile
nRuleChangeActivationThreshold	consensus/params.h	/^    uint32_t nRuleChangeActivationThreshold;$/;"	m	struct:Consensus::Params
nSatoshisPerK	policy/feerate.h	/^    CAmount nSatoshisPerK; \/\/ unit is satoshis-per-1,000-bytes$/;"	m	class:CFeeRate
nScore	net.h	/^    int nScore;$/;"	m	struct:LocalServiceInfo
nScriptCheckThreads	validation.cpp	/^int nScriptCheckThreads = 0;$/;"	v
nSeed0	net.h	/^    const uint64_t nSeed0, nSeed1;$/;"	m	class:CConnman
nSeed1	net.h	/^    const uint64_t nSeed0, nSeed1;$/;"	m	class:CConnman
nSendBufferMaxSize	net.h	/^        unsigned int nSendBufferMaxSize = 0;$/;"	m	struct:CConnman::Options
nSendBufferMaxSize	net.h	/^    unsigned int nSendBufferMaxSize;$/;"	m	class:CConnman
nSendBytes	net.h	/^    uint64_t nSendBytes;$/;"	m	class:CNode
nSendBytes	net.h	/^    uint64_t nSendBytes;$/;"	m	class:CNodeStats
nSendOffset	net.h	/^    size_t nSendOffset; \/\/ offset inside the first vSendMsg already sent$/;"	m	class:CNode
nSendSize	net.h	/^    size_t nSendSize; \/\/ total size of all vSendMsg entries$/;"	m	class:CNode
nSendVersion	net.h	/^    int nSendVersion;$/;"	m	class:CNode
nSequence	primitives/transaction.h	/^    uint32_t nSequence;$/;"	m	class:CTxIn
nSequence	zmq/zmqpublishnotifier.h	/^    uint32_t nSequence; \/\/!< upcounting per message sequence number$/;"	m	class:CZMQAbstractPublishNotifier
nSequenceId	chain.h	/^    int32_t nSequenceId;$/;"	m	class:CBlockIndex
nServices	net.h	/^    ServiceFlags nServices;$/;"	m	class:CNodeStats
nServices	net.h	/^    std::atomic<ServiceFlags> nServices;$/;"	m	class:CNode
nServices	protocol.h	/^    ServiceFlags nServices;$/;"	m	class:CAddress
nServicesExpected	net.h	/^    ServiceFlags nServicesExpected;$/;"	m	class:CNode
nSigOpCostWithAncestors	miner.h	/^    int64_t nSigOpCostWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nSigOpCostWithAncestors	txmempool.h	/^    int64_t nSigOpCostWithAncestors;$/;"	m	class:CTxMemPoolEntry
nSize	chain.h	/^    unsigned int nSize;        \/\/!< number of used bytes of block file$/;"	m	class:CBlockFileInfo
nSize	serialize.h	/^    size_t nSize;$/;"	m	class:CSizeComputer
nSize	timedata.h	/^    unsigned int nSize;$/;"	m	class:CMedianFilter
nSizeWithAncestors	miner.h	/^    uint64_t nSizeWithAncestors;$/;"	m	struct:CTxMemPoolModifiedEntry
nSizeWithAncestors	txmempool.h	/^    uint64_t nSizeWithAncestors;$/;"	m	class:CTxMemPoolEntry
nSizeWithDescendants	txmempool.h	/^    uint64_t nSizeWithDescendants;   \/\/!< ... and size$/;"	m	class:CTxMemPoolEntry
nSpecialScripts	compressor.h	/^    static const unsigned int nSpecialScripts = 6;$/;"	m	class:CScriptCompressor
nSrcPos	streams.h	/^    uint64_t nSrcPos;     \/\/ how many bytes have been read from source$/;"	m	class:CBufferedFile
nStallingSince	net_processing.cpp	/^    int64_t nStallingSince;$/;"	m	struct:__anon50::CNodeState	file:
nStartTime	consensus/params.h	/^    int64_t nStartTime;$/;"	m	struct:Consensus::BIP9Deployment
nStartingHeight	net.h	/^    int nStartingHeight;$/;"	m	class:CNodeStats
nStartingHeight	net.h	/^    std::atomic<int> nStartingHeight;$/;"	m	class:CNode
nStartupTime	util.cpp	/^const int64_t nStartupTime = GetTime();$/;"	v
nStatus	chain.h	/^    unsigned int nStatus;$/;"	m	class:CBlockIndex
nSubsidyHalvingInterval	consensus/params.h	/^    int nSubsidyHalvingInterval;$/;"	m	struct:Consensus::Params
nSyncHeight	net_processing.h	/^    int nSyncHeight;$/;"	m	struct:CNodeStateStats
nSyncStarted	net_processing.cpp	/^    int nSyncStarted = 0;$/;"	m	namespace:__anon49	file:
nThreadsServicingQueue	scheduler.h	/^    int nThreadsServicingQueue;$/;"	m	class:CScheduler
nTime	chain.h	/^    unsigned int nTime;$/;"	m	class:CBlockIndex
nTime	chainparams.h	/^    int64_t nTime;$/;"	m	struct:ChainTxData
nTime	net.h	/^    int64_t nTime;                  \/\/ time (in microseconds) of message receipt.$/;"	m	class:CNetMessage
nTime	primitives/block.h	/^    uint32_t nTime;$/;"	m	class:CBlockHeader
nTime	protocol.h	/^    unsigned int nTime;$/;"	m	class:CAddress
nTime	test/test_wificoin.h	/^    int64_t nTime;$/;"	m	struct:TestMemPoolEntryHelper
nTime	txmempool.h	/^    int64_t nTime;             \/\/!< Local time when entering the mempool$/;"	m	class:CTxMemPoolEntry
nTime	txmempool.h	/^    int64_t nTime;$/;"	m	struct:TxMempoolInfo
nTime	wallet/wallet.h	/^    int64_t nTime;$/;"	m	class:CAccountingEntry
nTime	wallet/wallet.h	/^    int64_t nTime;$/;"	m	class:CKeyPool
nTimeCallbacks	validation.cpp	/^static int64_t nTimeCallbacks = 0;$/;"	v	file:
nTimeChainState	validation.cpp	/^static int64_t nTimeChainState = 0;$/;"	v	file:
nTimeCheck	validation.cpp	/^static int64_t nTimeCheck = 0;$/;"	v	file:
nTimeConnect	validation.cpp	/^static int64_t nTimeConnect = 0;$/;"	v	file:
nTimeConnectTotal	validation.cpp	/^static int64_t nTimeConnectTotal = 0;$/;"	v	file:
nTimeConnected	net.cpp	/^    int64_t nTimeConnected;$/;"	m	struct:NodeEvictionCandidate	file:
nTimeConnected	net.h	/^    const int64_t nTimeConnected;$/;"	m	class:CNode
nTimeConnected	net.h	/^    int64_t nTimeConnected;$/;"	m	class:CNodeStats
nTimeCreated	wallet/wallet.h	/^    int64_t nTimeCreated;$/;"	m	class:CWalletKey
nTimeExpire	net_processing.cpp	/^    int64_t nTimeExpire;$/;"	m	struct:COrphanTx	file:
nTimeExpire	test/DoS_tests.cpp	/^    int64_t nTimeExpire;$/;"	m	struct:COrphanTx	file:
nTimeExpires	wallet/wallet.h	/^    int64_t nTimeExpires;$/;"	m	class:CWalletKey
nTimeFirst	chain.h	/^    uint64_t nTimeFirst;       \/\/!< earliest time of block in file$/;"	m	class:CBlockFileInfo
nTimeFirstKey	wallet/wallet.h	/^    int64_t nTimeFirstKey;$/;"	m	class:CWallet
nTimeFlush	validation.cpp	/^static int64_t nTimeFlush = 0;$/;"	v	file:
nTimeForks	validation.cpp	/^static int64_t nTimeForks = 0;$/;"	v	file:
nTimeIndex	validation.cpp	/^static int64_t nTimeIndex = 0;$/;"	v	file:
nTimeLast	chain.h	/^    uint64_t nTimeLast;        \/\/!< latest time of block in file$/;"	m	class:CBlockFileInfo
nTimeMax	chain.h	/^    unsigned int nTimeMax;$/;"	m	class:CBlockIndex
nTimeOffset	net.h	/^    int64_t nTimeOffset;$/;"	m	class:CNodeStats
nTimeOffset	net.h	/^    std::atomic<int64_t> nTimeOffset;$/;"	m	class:CNode
nTimeOffset	timedata.cpp	/^static int64_t nTimeOffset = 0;$/;"	v	file:
nTimePostConnect	validation.cpp	/^static int64_t nTimePostConnect = 0;$/;"	v	file:
nTimeReadFromDisk	validation.cpp	/^static int64_t nTimeReadFromDisk = 0;$/;"	v	file:
nTimeReceived	wallet/wallet.h	/^    unsigned int nTimeReceived; \/\/!< time received by this node$/;"	m	class:CWalletTx
nTimeSmart	wallet/wallet.h	/^    unsigned int nTimeSmart;$/;"	m	class:CWalletTx
nTimeTotal	validation.cpp	/^static int64_t nTimeTotal = 0;$/;"	v	file:
nTimeVerify	validation.cpp	/^static int64_t nTimeVerify = 0;$/;"	v	file:
nTimeout	consensus/params.h	/^    int64_t nTimeout;$/;"	m	struct:Consensus::BIP9Deployment
nTodo	checkqueue.h	/^    unsigned int nTodo;$/;"	m	class:CCheckQueue
nTotal	checkqueue.h	/^    int nTotal;$/;"	m	class:CCheckQueue
nTotalAmount	rpc/blockchain.cpp	/^    CAmount nTotalAmount;$/;"	m	struct:CCoinsStats	file:
nTotalBytesRecv	net.h	/^    uint64_t nTotalBytesRecv;$/;"	m	class:CConnman
nTotalBytesSent	net.h	/^    uint64_t nTotalBytesSent;$/;"	m	class:CConnman
nTransactionOutputs	rpc/blockchain.cpp	/^    uint64_t nTransactionOutputs;$/;"	m	struct:CCoinsStats	file:
nTransactions	merkleblock.h	/^    unsigned int nTransactions;$/;"	m	class:CPartialMerkleTree
nTransactions	rpc/blockchain.cpp	/^    uint64_t nTransactions;$/;"	m	struct:CCoinsStats	file:
nTransactionsUpdated	txmempool.h	/^    unsigned int nTransactionsUpdated; \/\/!< Used by getblocktemplate to trigger CreateNewBlock() invocation$/;"	m	class:CTxMemPool
nTried	addrman.h	/^    int nTried;$/;"	m	class:CAddrMan
nTweak	bloom.h	/^    unsigned int nTweak;$/;"	m	class:CBloomFilter
nTweak	bloom.h	/^    unsigned int nTweak;$/;"	m	class:CRollingBloomFilter
nTx	chain.h	/^    unsigned int nTx;$/;"	m	class:CBlockIndex
nTxConfirmTarget	wallet/wallet.cpp	/^unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;$/;"	v
nTxCount	chainparams.h	/^    int64_t nTxCount;$/;"	m	struct:ChainTxData
nTxOffset	txdb.h	/^    unsigned int nTxOffset; \/\/ after header$/;"	m	struct:CDiskTxPos
nTxWeight	txmempool.h	/^    size_t nTxWeight;          \/\/!< ... and avoid recomputing tx weight (also used for GetTxSize())$/;"	m	class:CTxMemPoolEntry
nType	hash.h	/^    const int nType;$/;"	m	class:CHashWriter
nType	serialize.h	/^    const int nType;$/;"	m	class:CSizeComputer
nType	streams.h	/^    const int nType;$/;"	m	class:CAutoFile
nType	streams.h	/^    const int nType;$/;"	m	class:CBufferedFile
nType	streams.h	/^    const int nType;$/;"	m	class:CVectorWriter
nType	streams.h	/^    const int nType;$/;"	m	class:OverrideStream
nType	streams.h	/^    int nType;$/;"	m	class:CDataStream
nUnconnectingHeaders	net_processing.cpp	/^    int nUnconnectingHeaders;$/;"	m	struct:__anon50::CNodeState	file:
nUndoPos	chain.h	/^    unsigned int nUndoPos;$/;"	m	class:CBlockIndex
nUndoSize	chain.h	/^    unsigned int nUndoSize;    \/\/!< number of used bytes in the undo file$/;"	m	class:CBlockFileInfo
nUpdateCounter	wallet/db.h	/^    std::atomic<unsigned int> nUpdateCounter;$/;"	m	class:CWalletDBWrapper
nUsageSize	txmempool.h	/^    size_t nUsageSize;         \/\/!< ... and total memory usage$/;"	m	class:CTxMemPoolEntry
nUserMaxConnections	init.cpp	/^int nUserMaxConnections;$/;"	m	namespace:__anon2	file:
nValue	primitives/transaction.h	/^    CAmount nValue;$/;"	m	class:CTxOut
nValue	test/script_tests.cpp	/^    CAmount nValue;$/;"	m	class:__anon80::TestBuilder	file:
nVersion	addrdb.h	/^    int nVersion;$/;"	m	class:CBanEntry
nVersion	chain.h	/^    int nVersion;$/;"	m	class:CBlockIndex
nVersion	hash.h	/^    const int nVersion;$/;"	m	class:CHashWriter
nVersion	net.h	/^    int nVersion;$/;"	m	class:CNodeStats
nVersion	net.h	/^    std::atomic<int> nVersion;$/;"	m	class:CNode
nVersion	netmessagemaker.h	/^    const int nVersion;$/;"	m	class:CNetMsgMaker
nVersion	primitives/block.h	/^    int32_t nVersion;$/;"	m	class:CBlockHeader
nVersion	primitives/transaction.h	/^    const int32_t nVersion;$/;"	m	class:CTransaction
nVersion	primitives/transaction.h	/^    int32_t nVersion;$/;"	m	struct:CMutableTransaction
nVersion	qt/recentrequeststablemodel.h	/^    int nVersion;$/;"	m	class:RecentRequestEntry
nVersion	qt/walletmodel.h	/^    int nVersion;$/;"	m	class:SendCoinsRecipient
nVersion	serialize.h	/^    const int nVersion;$/;"	m	class:CSizeComputer
nVersion	streams.h	/^    const int nVersion;$/;"	m	class:CAutoFile
nVersion	streams.h	/^    const int nVersion;$/;"	m	class:CBufferedFile
nVersion	streams.h	/^    const int nVersion;$/;"	m	class:CVectorWriter
nVersion	streams.h	/^    const int nVersion;$/;"	m	class:OverrideStream
nVersion	streams.h	/^    int nVersion;$/;"	m	class:CDataStream
nVersion	wallet/walletdb.h	/^    int nVersion;$/;"	m	class:CHDChain
nVersion	wallet/walletdb.h	/^    int nVersion;$/;"	m	class:CKeyMetadata
nWalletMaxVersion	wallet/wallet.h	/^    int nWalletMaxVersion;$/;"	m	class:CWallet
nWalletVersion	wallet/wallet.h	/^    int nWalletVersion;$/;"	m	class:CWallet
nWatchCreditCached	wallet/wallet.h	/^    mutable CAmount nWatchCreditCached;$/;"	m	class:CWalletTx
nWatchDebitCached	wallet/wallet.h	/^    mutable CAmount nWatchDebitCached;$/;"	m	class:CWalletTx
nWatchKeys	wallet/walletdb.cpp	/^    unsigned int nWatchKeys;$/;"	m	class:CWalletScanState	file:
n_	leveldb/table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon36::MergingIterator	file:
n_calls	test/checkqueue_tests.cpp	/^    static std::atomic<size_t> n_calls;$/;"	m	struct:FakeCheckCheckCompletion	file:
name	bench/bench.h	/^        std::string name;$/;"	m	class:benchmark::State
name	leveldb/util/testharness.cc	/^  const char* name;$/;"	m	struct:leveldb::test::__anon15::Test	file:
name	net_processing.cpp	/^    const std::string name;$/;"	m	struct:__anon50::CNodeState	file:
name	qt/wificoinunits.cpp	/^QString WiFicoinUnits::name(int unit)$/;"	f	class:WiFicoinUnits
name	qt/platformstyle.h	/^    QString name;$/;"	m	class:PlatformStyle
name	rest.cpp	/^    const char* name;$/;"	m	struct:__anon5	file:
name	rpc/server.h	/^    std::string name;$/;"	m	class:CRPCCommand
name	test/script_tests.cpp	/^    const char *name;$/;"	m	struct:ScriptErrorDesc	file:
name	versionbits.h	/^    const char *name;$/;"	m	struct:VBDeploymentInfo
name	wallet/wallet.h	/^    std::string name;$/;"	m	class:CAddressBookData
nameProxy	netbase.cpp	/^static proxyType nameProxy;$/;"	v	file:
name_	leveldb/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
name_	leveldb/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
name_	leveldb/util/env_posix.cc	/^  std::string name_;$/;"	m	class:leveldb::__anon11::PosixFileLock	file:
nativeECDSABuffer	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static ThreadLocal<ByteBuffer> nativeECDSABuffer = new ThreadLocal<ByteBuffer>();$/;"	f	class:NativeSecp256k1	file:
nativeEventFilter	qt/winshutdownmonitor.cpp	/^bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pMessage, long *pnResult)$/;"	f	class:WinShutdownMonitor
needsUpdate	qt/transactionrecord.h	/^    bool needsUpdate;$/;"	m	class:TransactionStatus
neg	secp256k1/src/num_gmp.h	/^    int neg;$/;"	m	struct:__anon67
netManager	qt/paymentserver.h	/^    QNetworkAccessManager* netManager;  \/\/ Used to fetch payment requests$/;"	m	class:PaymentServer
netRequestFinished	qt/paymentserver.cpp	/^void PaymentServer::netRequestFinished(QNetworkReply* reply)$/;"	f	class:PaymentServer
netmask	netaddress.h	/^        uint8_t netmask[16];$/;"	m	class:CSubNet
network	netaddress.h	/^        CNetAddr network;$/;"	m	class:CSubNet
networkId	qt/networkstyle.cpp	/^    const char *networkId;$/;"	m	struct:__anon107	file:
network_styles	qt/networkstyle.cpp	/^} network_styles[] = {$/;"	v	typeref:struct:__anon107	file:
network_styles_count	qt/networkstyle.cpp	/^static const unsigned network_styles_count = sizeof(network_styles)\/sizeof(*network_styles);$/;"	v	file:
newAddressToSelect	qt/addressbookpage.h	/^    QString newAddressToSelect;$/;"	m	class:AddressBookPage
newPossibleKeyChange	qt/walletmodeltransaction.cpp	/^void WalletModelTransaction::newPossibleKeyChange(CWallet *wallet)$/;"	f	class:WalletModelTransaction
newTaskMutex	scheduler.h	/^    mutable boost::mutex newTaskMutex;$/;"	m	class:CScheduler
newTaskScheduled	scheduler.h	/^    boost::condition_variable newTaskScheduled;$/;"	m	class:CScheduler
new_arena	support/lockedpool.cpp	/^bool LockedPool::new_arena(size_t size, size_t align)$/;"	f	class:LockedPool
new_files_	leveldb/db/version_edit.h	/^  std::vector< std::pair<int, FileMetaData> > new_files_;$/;"	m	class:leveldb::VersionEdit
new_files_since_last_dir_sync_	leveldb/db/fault_injection_test.cc	/^  std::set<std::string> new_files_since_last_dir_sync_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
new_handler_terminate	init.cpp	/^[[noreturn]] static void new_handler_terminate()$/;"	f	file:
newest	leveldb/db/snapshot.h	/^  SnapshotImpl* newest() const { assert(!empty()); return list_.prev_; }$/;"	f	class:leveldb::SnapshotList
next	leveldb/include/leveldb/iterator.h	/^    Cleanup* next;$/;"	m	struct:leveldb::Iterator::Cleanup
next	leveldb/util/cache.cc	/^  LRUHandle* next;$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
nextSendTimeFeeFilter	net.h	/^    int64_t nextSendTimeFeeFilter;$/;"	m	class:CNode
next_	leveldb/db/skiplist.h	/^  port::AtomicPointer next_[1];$/;"	m	struct:leveldb::SkipList::Node
next_	leveldb/db/snapshot.h	/^  SnapshotImpl* next_;$/;"	m	class:leveldb::SnapshotImpl
next_	leveldb/db/version_set.h	/^  Version* next_;               \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_file_number_	leveldb/db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon26::Repairer	file:
next_file_number_	leveldb/db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	leveldb/db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_hash	leveldb/util/cache.cc	/^  LRUHandle* next_hash;$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
next_report_	leveldb/db/db_bench.cc	/^  int next_report_;$/;"	m	class:leveldb::__anon18::Stats	file:
next_report_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
next_report_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
no_space_	leveldb/db/db_test.cc	/^  port::AtomicPointer no_space_;$/;"	m	class:leveldb::SpecialEnv	file:
nodeStateStats	qt/peertablemodel.h	/^    CNodeStateStats nodeStateStats;$/;"	m	struct:CNodeCombinedStats
nodeStats	qt/peertablemodel.h	/^    CNodeStats nodeStats;$/;"	m	struct:CNodeCombinedStats
node_	leveldb/db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
nodeid	net.h	/^    NodeId nodeid;$/;"	m	class:CNodeStats
nodist_bench_bench_wificoin_OBJECTS	Makefile	/^nodist_bench_bench_wificoin_OBJECTS =  \\$/;"	m
nodist_bench_bench_wificoin_SOURCES	Makefile	/^nodist_bench_bench_wificoin_SOURCES = $(GENERATED_TEST_FILES)$/;"	m
nodist_libwificoin_util_a_OBJECTS	Makefile	/^nodist_libwificoin_util_a_OBJECTS =$/;"	m
nodist_libwificoin_util_a_SOURCES	Makefile	/^nodist_libwificoin_util_a_SOURCES = $(srcdir)\/obj\/build.h$/;"	m
nodist_test_test_wificoin_OBJECTS	Makefile	/^nodist_test_test_wificoin_OBJECTS =  \\$/;"	m
nodist_test_test_wificoin_SOURCES	Makefile	/^nodist_test_test_wificoin_SOURCES = $(GENERATED_TEST_FILES)$/;"	m
noinst_HEADERS	secp256k1/Makefile	/^noinst_HEADERS = src\/scalar.h src\/scalar_4x64.h src\/scalar_8x32.h \\$/;"	m
noinst_HEADERS	univalue/Makefile	/^noinst_HEADERS = lib\/univalue_escapes.h lib\/univalue_utffilter.h$/;"	m
noinst_PROGRAMS	Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_7)$/;"	m
noinst_PROGRAMS	secp256k1/Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \\$/;"	m
noinst_PROGRAMS	univalue/Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_1)$/;"	m
non_writable_	leveldb/db/db_test.cc	/^  port::AtomicPointer non_writable_;$/;"	m	class:leveldb::SpecialEnv	file:
nonce	blockencodings.h	/^    uint64_t nonce;$/;"	m	class:CBlockHeaderAndShortTxIDs
nonce	script/sigcache.cpp	/^    uint256 nonce;$/;"	m	class:__anon96::CSignatureCache	file:
nonce	test/blockencodings_tests.cpp	/^    uint64_t nonce;$/;"	m	class:TestHeaderAndShortIDs	file:
nonce	test/miner_tests.cpp	/^    unsigned int nonce;$/;"	m	struct:__anon81	file:
nonce_function_rfc6979	secp256k1/src/secp256k1.c	/^static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
nonce_function_test_fail	secp256k1/src/tests.c	/^static int nonce_function_test_fail(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
nonce_function_test_retry	secp256k1/src/tests.c	/^static int nonce_function_test_retry(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
normalize_hit_rate	test/cuckoocache_tests.cpp	/^double normalize_hit_rate(double hits, double load)$/;"	f
normalized	secp256k1/src/field_10x26.h	/^    int normalized;$/;"	m	struct:__anon73
normalized	secp256k1/src/field_5x52.h	/^    int normalized;$/;"	m	struct:__anon56
notificator	qt/wificoingui.h	/^    Notificator *notificator;$/;"	m	class:WiFicoinGUI
notifiers	zmq/zmqnotificationinterface.h	/^    std::list<CZMQAbstractNotifier*> notifiers;$/;"	m	class:CZMQNotificationInterface
notify	qt/notificator.cpp	/^void Notificator::notify(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
notifyDBus	qt/notificator.cpp	/^void Notificator::notifyDBus(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
notifyGrowl	qt/notificator.cpp	/^void Notificator::notifyGrowl(Class cls, const QString &title, const QString &text, const QIcon &icon)$/;"	f	class:Notificator
notifyMacUserNotificationCenter	qt/notificator.cpp	/^void Notificator::notifyMacUserNotificationCenter(Class cls, const QString &title, const QString &text, const QIcon &icon) {$/;"	f	class:Notificator
notifySystray	qt/notificator.cpp	/^void Notificator::notifySystray(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
noui_InitMessage	noui.cpp	/^static void noui_InitMessage(const std::string& message)$/;"	f	file:
noui_ThreadSafeMessageBox	noui.cpp	/^static bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)$/;"	f	file:
noui_ThreadSafeQuestion	noui.cpp	/^static bool noui_ThreadSafeQuestion(const std::string& \/* ignored interactive message *\/, const std::string& message, const std::string& caption, unsigned int style)$/;"	f	file:
noui_connect	noui.cpp	/^void noui_connect()$/;"	f
num	test/versionbits_tests.cpp	/^    int num;$/;"	m	class:VersionBitsTester	file:
numThreads	httpserver.cpp	/^    int numThreads;$/;"	m	class:WorkQueue	file:
num_	leveldb/db/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	leveldb/table/filter_block.h	/^  size_t num_;          \/\/ Number of entries in offset array$/;"	m	class:leveldb::FilterBlockReader
num_	leveldb/util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_done	leveldb/db/db_bench.cc	/^  int num_done;$/;"	m	struct:leveldb::__anon18::SharedState	file:
num_entries	leveldb/table/table_builder.cc	/^  int64_t num_entries;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
num_initial_offset_records_	leveldb/db/log_test.cc	/^  static int num_initial_offset_records_;$/;"	m	class:leveldb::log::LogTest	file:
num_initial_offset_records_	leveldb/db/log_test.cc	/^int LogTest::num_initial_offset_records_ =$/;"	m	class:leveldb::log::LogTest	file:
num_initialized	leveldb/db/db_bench.cc	/^  int num_initialized;$/;"	m	struct:leveldb::__anon18::SharedState	file:
num_input_files	leveldb/db/version_set.h	/^  int num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_restarts_	leveldb/table/block.cc	/^  uint32_t const num_restarts_; \/\/ Number of uint32_t entries in restart array$/;"	m	class:leveldb::Block::Iter	file:
num_running	leveldb/util/env_test.cc	/^  int num_running;$/;"	m	struct:leveldb::State	file:
num_writable_file_errors_	leveldb/util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	leveldb/db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
number	leveldb/db/version_edit.h	/^  uint64_t number;$/;"	m	struct:leveldb::FileMetaData
number_	leveldb/db/snapshot.h	/^  SequenceNumber number_;  \/\/ const after creation$/;"	m	class:leveldb::SnapshotImpl
obfuscate_key	dbwrapper.h	/^    std::vector<unsigned char> obfuscate_key;$/;"	m	class:CDBWrapper
obtain_event	support/events.h	/^inline raii_event obtain_event(struct event_base* base, evutil_socket_t s, short events, event_callback_fn cb, void* arg) {$/;"	f
obtain_event_base	support/events.h	/^inline raii_event_base obtain_event_base() {$/;"	f
obtain_evhttp	support/events.h	/^inline raii_evhttp obtain_evhttp(struct event_base* base) {$/;"	f
obtain_evhttp_connection_base	support/events.h	/^inline raii_evhttp_connection obtain_evhttp_connection_base(struct event_base* base, std::string host, uint16_t port) {$/;"	f
obtain_evhttp_request	support/events.h	/^inline raii_evhttp_request obtain_evhttp_request(void(*cb)(struct evhttp_request *, void *), void *arg) {$/;"	f
offset	leveldb/table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	leveldb/table/table_builder.cc	/^  uint64_t offset;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
offset_	leveldb/table/filter_block.h	/^  const char* offset_;  \/\/ Pointer to beginning of offset array (at block-end)$/;"	m	class:leveldb::FilterBlockReader
offset_	leveldb/table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
offsets	test/scriptnum_tests.cpp	/^static const int64_t offsets[] = { 1, 0x79, 0x80, 0x81, 0xFF, 0x7FFF, 0x8000, 0xFFFF, 0x10000};$/;"	v	file:
ok	leveldb/include/leveldb/status.h	/^  bool ok() const { return (state_ == NULL); }$/;"	f	class:leveldb::Status
ok	leveldb/include/leveldb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
okSafeMode	rpc/server.h	/^    bool okSafeMode;$/;"	m	class:CRPCCommand
ok_	leveldb/util/testharness.h	/^  bool ok_;$/;"	m	class:leveldb::test::Tester
oldUnconfTxs	policy/fees.cpp	/^    std::vector<int> oldUnconfTxs;$/;"	m	class:TxConfirmStats	file:
oldest	leveldb/db/snapshot.h	/^  SnapshotImpl* oldest() const { assert(!empty()); return list_.next_; }$/;"	f	class:leveldb::SnapshotList
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	secp256k1/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	univalue/Makefile	/^oldincludedir = \/usr\/include$/;"	m
onCopyLabelAction	qt/addressbookpage.cpp	/^void AddressBookPage::onCopyLabelAction()$/;"	f	class:AddressBookPage
onDisplayUnitsClicked	qt/wificoingui.cpp	/^void UnitDisplayStatusBarControl::onDisplayUnitsClicked(const QPoint& point)$/;"	f	class:UnitDisplayStatusBarControl
onEditAction	qt/addressbookpage.cpp	/^void AddressBookPage::onEditAction()$/;"	f	class:AddressBookPage
onMenuSelection	qt/wificoingui.cpp	/^void UnitDisplayStatusBarControl::onMenuSelection(QAction* action)$/;"	f	class:UnitDisplayStatusBarControl
on_addressBookButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_addressBookButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_addressBookButton_VM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_addressBookButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_addressBookButton_clicked	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_addressBookButton_clicked()$/;"	f	class:SendCoinsEntry
on_btnCopyAddress_clicked	qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::on_btnCopyAddress_clicked()$/;"	f	class:ReceiveRequestDialog
on_btnCopyURI_clicked	qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::on_btnCopyURI_clicked()$/;"	f	class:ReceiveRequestDialog
on_buttonChooseFee_clicked	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_buttonChooseFee_clicked()$/;"	f	class:SendCoinsDialog
on_buttonMinimizeFee_clicked	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_buttonMinimizeFee_clicked()$/;"	f	class:SendCoinsDialog
on_cancelButton_clicked	qt/optionsdialog.cpp	/^void OptionsDialog::on_cancelButton_clicked()$/;"	f	class:OptionsDialog
on_clearButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_clearButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_clearButton_VM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_clearButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_copyAddress_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_copyAddress_clicked()$/;"	f	class:AddressBookPage
on_copySignatureButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_dataDirCustom_clicked	qt/intro.cpp	/^void Intro::on_dataDirCustom_clicked()$/;"	f	class:Intro
on_dataDirDefault_clicked	qt/intro.cpp	/^void Intro::on_dataDirDefault_clicked()$/;"	f	class:Intro
on_dataDirectory_textChanged	qt/intro.cpp	/^void Intro::on_dataDirectory_textChanged(const QString &dataDirStr)$/;"	f	class:Intro
on_deleteAddress_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_deleteAddress_clicked()$/;"	f	class:AddressBookPage
on_ellipsisButton_clicked	qt/intro.cpp	/^void Intro::on_ellipsisButton_clicked()$/;"	f	class:Intro
on_exportButton_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_exportButton_clicked()$/;"	f	class:AddressBookPage
on_geometriesChanged	qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::on_geometriesChanged()$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
on_hideTrayIcon_stateChanged	qt/optionsdialog.cpp	/^void OptionsDialog::on_hideTrayIcon_stateChanged(int fState)$/;"	f	class:OptionsDialog
on_lineEdit_returnPressed	qt/rpcconsole.cpp	/^void RPCConsole::on_lineEdit_returnPressed()$/;"	f	class:RPCConsole
on_newAddress_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_newAddress_clicked()$/;"	f	class:AddressBookPage
on_okButton_accepted	qt/utilitydialog.cpp	/^void HelpMessageDialog::on_okButton_accepted()$/;"	f	class:HelpMessageDialog
on_okButton_clicked	qt/optionsdialog.cpp	/^void OptionsDialog::on_okButton_clicked()$/;"	f	class:OptionsDialog
on_openWiFicoinConfButton_clicked	qt/optionsdialog.cpp	/^void OptionsDialog::on_openWiFicoinConfButton_clicked()$/;"	f	class:OptionsDialog
on_openDebugLogfileButton_clicked	qt/rpcconsole.cpp	/^void RPCConsole::on_openDebugLogfileButton_clicked()$/;"	f	class:RPCConsole
on_pasteButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_pasteButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_pasteButton_clicked	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_pasteButton_clicked()$/;"	f	class:SendCoinsEntry
on_payTo_textChanged	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_payTo_textChanged(const QString &address)$/;"	f	class:SendCoinsEntry
on_receiveButton_clicked	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_receiveButton_clicked()$/;"	f	class:ReceiveCoinsDialog
on_recentRequestsView_doubleClicked	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_recentRequestsView_doubleClicked(const QModelIndex &index)$/;"	f	class:ReceiveCoinsDialog
on_removeRequestButton_clicked	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_removeRequestButton_clicked()$/;"	f	class:ReceiveCoinsDialog
on_resetButton_clicked	qt/optionsdialog.cpp	/^void OptionsDialog::on_resetButton_clicked()$/;"	f	class:OptionsDialog
on_sectionResized	qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int oldSize, int newSize)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
on_selectFileButton_clicked	qt/openuridialog.cpp	/^void OpenURIDialog::on_selectFileButton_clicked()$/;"	f	class:OpenURIDialog
on_sendButton_clicked	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_sendButton_clicked()$/;"	f	class:SendCoinsDialog
on_showRequestButton_clicked	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::on_showRequestButton_clicked()$/;"	f	class:ReceiveCoinsDialog
on_signMessageButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_sldGraphRange_valueChanged	qt/rpcconsole.cpp	/^void RPCConsole::on_sldGraphRange_valueChanged(int value)$/;"	f	class:RPCConsole
on_tabWidget_currentChanged	qt/rpcconsole.cpp	/^void RPCConsole::on_tabWidget_currentChanged(int index)$/;"	f	class:RPCConsole
on_verifyMessageButton_VM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
once	leveldb/util/comparator.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	leveldb/util/env_posix.cc	/^static pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	leveldb/util/env_win.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
onlyUnconfirmed	miner.cpp	/^void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)$/;"	f	class:BlockAssembler
opcodetype	script/script.h	/^enum opcodetype$/;"	g
openAction	qt/wificoingui.h	/^    QAction *openAction;$/;"	m	class:WiFicoinGUI
openWiFicoinConf	qt/guiutil.cpp	/^bool openWiFicoinConf()$/;"	f	namespace:GUIUtil
openClicked	qt/wificoingui.cpp	/^void WiFicoinGUI::openClicked()$/;"	f	class:WiFicoinGUI
openDebugLogfile	qt/guiutil.cpp	/^void openDebugLogfile()$/;"	f	namespace:GUIUtil
openRPCConsoleAction	qt/wificoingui.h	/^    QAction *openRPCConsoleAction;$/;"	m	class:WiFicoinGUI
openThirdPartyTxUrl	qt/transactionview.cpp	/^void TransactionView::openThirdPartyTxUrl(QString url)$/;"	f	class:TransactionView
open_for	qt/transactionrecord.h	/^    qint64 open_for; \/**< Timestamp if status==OpenUntilDate, otherwise number$/;"	m	class:TransactionStatus
open_read_only_file_limit	leveldb/util/env_posix.cc	/^static int open_read_only_file_limit = -1;$/;"	m	namespace:leveldb::__anon11	file:
operator !	arith_uint256.h	/^    bool operator!() const$/;"	f	class:base_uint
operator !=	arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }$/;"	f	class:base_uint
operator !=	arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }$/;"	f	class:base_uint
operator !=	chain.h	/^    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {$/;"	f	struct:CDiskBlockPos
operator !=	leveldb/include/leveldb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator !=	netaddress.cpp	/^bool operator!=(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator !=	netaddress.cpp	/^bool operator!=(const CService& a, const CService& b)$/;"	f
operator !=	netaddress.cpp	/^bool operator!=(const CSubNet& a, const CSubNet& b)$/;"	f
operator !=	policy/feerate.h	/^    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator !=	prevector.h	/^        bool operator!=(const_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::const_iterator
operator !=	prevector.h	/^        bool operator!=(const_reverse_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator !=	prevector.h	/^        bool operator!=(iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::iterator
operator !=	prevector.h	/^        bool operator!=(reverse_iterator x) const { return ptr != x.ptr; }$/;"	f	class:prevector::reverse_iterator
operator !=	prevector.h	/^    bool operator!=(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator !=	primitives/transaction.h	/^    friend bool operator!=(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator !=	primitives/transaction.h	/^    friend bool operator!=(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator !=	primitives/transaction.h	/^    friend bool operator!=(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator !=	primitives/transaction.h	/^    friend bool operator!=(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator !=	pubkey.h	/^    friend bool operator!=(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator !=	script/script.h	/^    inline bool operator!=(const CScriptNum& rhs) const { return operator!=(rhs.m_value); }$/;"	f	class:CScriptNum
operator !=	script/script.h	/^    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }$/;"	f	class:CScriptNum
operator !=	test/scriptnum10.h	/^    inline bool operator!=(const CScriptNum10& rhs) const { return operator!=(rhs.m_value); }$/;"	f	class:CScriptNum10
operator !=	test/scriptnum10.h	/^    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }$/;"	f	class:CScriptNum10
operator !=	uint256.h	/^    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return a.Compare(b) != 0; }$/;"	f	class:base_blob
operator !=	wallet/wallet.h	/^    bool operator!=(const CInputCoin& rhs) const {$/;"	f	class:CInputCoin
operator &	arith_uint256.h	/^    friend inline const base_uint operator&(const base_uint& a, const base_uint& b) { return base_uint(a) &= b; }$/;"	f	class:base_uint
operator &	script/script.h	/^    inline CScriptNum operator&(   const CScriptNum& rhs) const { return operator&(rhs.m_value);   }$/;"	f	class:CScriptNum
operator &	script/script.h	/^    inline CScriptNum operator&(   const int64_t& rhs)    const { return CScriptNum(m_value & rhs);}$/;"	f	class:CScriptNum
operator &=	arith_uint256.h	/^    base_uint& operator&=(const base_uint& b)$/;"	f	class:base_uint
operator &=	script/script.h	/^    inline CScriptNum& operator&=( const CScriptNum& rhs)       { return operator&=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator &=	script/script.h	/^    inline CScriptNum& operator&=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator ()	base58.cpp	/^    bool operator()(const CKeyID& id) const { return addr->Set(id); }$/;"	f	class:__anon46::CWiFicoinAddressVisitor
operator ()	base58.cpp	/^    bool operator()(const CNoDestination& no) const { return false; }$/;"	f	class:__anon46::CWiFicoinAddressVisitor
operator ()	base58.cpp	/^    bool operator()(const CScriptID& id) const { return addr->Set(id); }$/;"	f	class:__anon46::CWiFicoinAddressVisitor
operator ()	coins.h	/^    size_t operator()(const COutPoint& id) const {$/;"	f	class:SaltedOutpointHasher
operator ()	indirectmap.h	/^struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };$/;"	f	struct:DereferencingComparator
operator ()	leveldb/db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	leveldb/db/skiplist_test.cc	/^  int operator()(const Key& a, const Key& b) const {$/;"	f	struct:leveldb::Comparator
operator ()	leveldb/db/version_set.cc	/^    bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestKey
operator ()	leveldb/table/table_test.cc	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	struct:leveldb::__anon41::STLLessThan
operator ()	miner.h	/^    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b)$/;"	f	struct:CompareTxIterByAncestorCount
operator ()	miner.h	/^    bool operator()(const CTxMemPool::txiter& a, const CTxMemPool::txiter& b) const$/;"	f	struct:CompareCTxMemPoolIter
operator ()	miner.h	/^    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b)$/;"	f	struct:CompareModifiedEntry
operator ()	miner.h	/^    result_type operator() (const CTxMemPoolModifiedEntry &entry) const$/;"	f	struct:modifiedentry_iter
operator ()	miner.h	/^    void operator() (CTxMemPoolModifiedEntry &e)$/;"	f	struct:update_for_parent_inclusion
operator ()	net.h	/^    bool operator()(I first, I last) const$/;"	f	struct:CombinerAll
operator ()	net_processing.cpp	/^    bool operator()(const I& a, const I& b)$/;"	f	struct:IteratorComparator
operator ()	net_processing.cpp	/^    bool operator()(std::set<uint256>::iterator a, std::set<uint256>::iterator b)$/;"	f	class:CompareInvMempoolOrder
operator ()	qt/addresstablemodel.cpp	/^    bool operator()(const AddressTableEntry &a, const AddressTableEntry &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	qt/addresstablemodel.cpp	/^    bool operator()(const AddressTableEntry &a, const QString &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	qt/addresstablemodel.cpp	/^    bool operator()(const QString &a, const AddressTableEntry &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	qt/bantablemodel.cpp	/^bool BannedNodeLessThan::operator()(const CCombinedBan& left, const CCombinedBan& right) const$/;"	f	class:BannedNodeLessThan
operator ()	qt/paymentserver.cpp	/^      void operator()(X509* b) { X509_free(b); }$/;"	f	struct:X509Deleter
operator ()	qt/paymentserver.cpp	/^      void operator()(X509_STORE* b) {$/;"	f	struct:X509StoreDeleter
operator ()	qt/peertablemodel.cpp	/^bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombinedStats &right) const$/;"	f	class:NodeLessThan
operator ()	qt/recentrequeststablemodel.cpp	/^bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const$/;"	f	class:RecentRequestEntryLessThan
operator ()	qt/transactiontablemodel.cpp	/^    bool operator()(const TransactionRecord &a, const TransactionRecord &b) const$/;"	f	struct:TxLessThan
operator ()	qt/transactiontablemodel.cpp	/^    bool operator()(const TransactionRecord &a, const uint256 &b) const$/;"	f	struct:TxLessThan
operator ()	qt/transactiontablemodel.cpp	/^    bool operator()(const uint256 &a, const TransactionRecord &b) const$/;"	f	struct:TxLessThan
operator ()	rpc/blockchain.cpp	/^    bool operator()(const CBlockIndex* a, const CBlockIndex* b) const$/;"	f	struct:CompareBlocksByHeight
operator ()	rpc/misc.cpp	/^    UniValue operator()(const CKeyID &keyID) const {$/;"	f	class:DescribeAddressVisitor
operator ()	rpc/misc.cpp	/^    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }$/;"	f	class:DescribeAddressVisitor
operator ()	rpc/misc.cpp	/^    UniValue operator()(const CScriptID &scriptID) const {$/;"	f	class:DescribeAddressVisitor
operator ()	script/sigcache.h	/^    uint32_t operator()(const uint256& key) const$/;"	f	class:SignatureCacheHasher
operator ()	script/standard.cpp	/^    bool operator()(const CKeyID &keyID) const {$/;"	f	class:__anon104::CScriptVisitor
operator ()	script/standard.cpp	/^    bool operator()(const CNoDestination &dest) const {$/;"	f	class:__anon104::CScriptVisitor
operator ()	script/standard.cpp	/^    bool operator()(const CScriptID &scriptID) const {$/;"	f	class:__anon104::CScriptVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CKeyID &id) const$/;"	f	class:TestAddrTypeVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CKeyID &id) const$/;"	f	class:TestPayloadVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CNoDestination &no) const$/;"	f	class:TestAddrTypeVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CNoDestination &no) const$/;"	f	class:TestPayloadVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CScriptID &id) const$/;"	f	class:TestAddrTypeVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CScriptID &id) const$/;"	f	class:TestPayloadVisitor
operator ()	test/bip32_tests.cpp	/^    TestVector& operator()(std::string pub, std::string prv, unsigned int nChild) {$/;"	f	struct:TestVector
operator ()	test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FailingCheck
operator ()	test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FakeCheck
operator ()	test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FakeCheckCheckCompletion
operator ()	test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:FrozenCleanupCheck
operator ()	test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:MemoryCheck
operator ()	test/checkqueue_tests.cpp	/^    bool operator()()$/;"	f	struct:UniqueCheck
operator ()	threadinterrupt.cpp	/^void CThreadInterrupt::operator()()$/;"	f	class:CThreadInterrupt
operator ()	txmempool.cpp	/^    bool operator()(const CTxMemPool::indexed_transaction_set::const_iterator& a, const CTxMemPool::indexed_transaction_set::const_iterator& b)$/;"	f	class:__anon105::DepthAndScoreComparator
operator ()	txmempool.h	/^        bool operator()(const txiter &a, const txiter &b) const {$/;"	f	struct:CTxMemPool::CompareIteratorByHash
operator ()	txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)$/;"	f	class:CompareTxMemPoolEntryByAncestorFee
operator ()	txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)$/;"	f	class:CompareTxMemPoolEntryByDescendantScore
operator ()	txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)$/;"	f	class:CompareTxMemPoolEntryByEntryTime
operator ()	txmempool.h	/^    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)$/;"	f	class:CompareTxMemPoolEntryByScore
operator ()	txmempool.h	/^    result_type operator() (const CTransactionRef& tx) const$/;"	f	struct:mempoolentry_txid
operator ()	txmempool.h	/^    result_type operator() (const CTxMemPoolEntry &entry) const$/;"	f	struct:mempoolentry_txid
operator ()	txmempool.h	/^    size_t operator()(const uint256& txid) const {$/;"	f	class:SaltedTxidHasher
operator ()	txmempool.h	/^    void operator() (CTxMemPoolEntry &e) { e.UpdateFeeDelta(feeDelta); }$/;"	f	struct:update_fee_delta
operator ()	txmempool.h	/^    void operator() (CTxMemPoolEntry &e) { e.UpdateLockPoints(lp); }$/;"	f	struct:update_lock_points
operator ()	txmempool.h	/^    void operator() (CTxMemPoolEntry &e)$/;"	f	struct:update_ancestor_state
operator ()	txmempool.h	/^    void operator() (CTxMemPoolEntry &e)$/;"	f	struct:update_descendant_state
operator ()	validation.cpp	/^        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {$/;"	f	struct:__anon43::CBlockIndexWorkComparator
operator ()	validation.cpp	/^bool CScriptCheck::operator()() {$/;"	f	class:CScriptCheck
operator ()	validation.h	/^    size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }$/;"	f	struct:BlockHasher
operator ()	wallet/rpcwallet.cpp	/^    bool operator()(const CKeyID &keyID) {$/;"	f	class:Witnessifier
operator ()	wallet/rpcwallet.cpp	/^    bool operator()(const CNoDestination &dest) const { return false; }$/;"	f	class:Witnessifier
operator ()	wallet/rpcwallet.cpp	/^    bool operator()(const CScriptID &scriptID) {$/;"	f	class:Witnessifier
operator ()	wallet/wallet.cpp	/^    bool operator()(const CInputCoin& t1,$/;"	f	struct:CompareValueOnly
operator ()	wallet/wallet.cpp	/^    void operator()(const CKeyID &keyId) {$/;"	f	class:CAffectedKeysVisitor
operator ()	wallet/wallet.cpp	/^    void operator()(const CNoDestination &none) {}$/;"	f	class:CAffectedKeysVisitor
operator ()	wallet/wallet.cpp	/^    void operator()(const CScriptID &scriptId) {$/;"	f	class:CAffectedKeysVisitor
operator *	arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, const base_uint& b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	prevector.h	/^        T& operator*() const { return *ptr; }$/;"	f	class:prevector::iterator
operator *	prevector.h	/^        T& operator*() { return *ptr; }$/;"	f	class:prevector::reverse_iterator
operator *	prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::const_iterator
operator *	prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator *	prevector.h	/^        const T& operator*() const { return *ptr; }$/;"	f	class:prevector::reverse_iterator
operator *=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)$/;"	f	class:base_uint
operator *=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)$/;"	f	class:base_uint
operator +	arith_uint256.h	/^    friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }$/;"	f	class:base_uint
operator +	prevector.h	/^        const_iterator operator+(size_type n) { return const_iterator(ptr + n); }$/;"	f	class:prevector::const_iterator
operator +	prevector.h	/^        iterator operator+(size_type n) { return iterator(ptr + n); }$/;"	f	class:prevector::iterator
operator +	script/script.h	/^    friend CScript operator+(const CScript& a, const CScript& b)$/;"	f	class:CScript
operator +	script/script.h	/^    inline CScriptNum operator+(   const CScriptNum& rhs) const { return operator+(rhs.m_value);   }$/;"	f	class:CScriptNum
operator +	script/script.h	/^    inline CScriptNum operator+(   const int64_t& rhs)    const { return CScriptNum(m_value + rhs);}$/;"	f	class:CScriptNum
operator +	streams.h	/^    friend CDataStream operator+(const CDataStream& a, const CDataStream& b)$/;"	f	class:CDataStream
operator +	test/scriptnum10.h	/^    inline CScriptNum10 operator+(   const CScriptNum10& rhs) const { return operator+(rhs.m_value);   }$/;"	f	class:CScriptNum10
operator +	test/scriptnum10.h	/^    inline CScriptNum10 operator+(   const int64_t& rhs)    const { return CScriptNum10(m_value + rhs);}$/;"	f	class:CScriptNum10
operator ++	arith_uint256.h	/^    base_uint& operator++()$/;"	f	class:base_uint
operator ++	arith_uint256.h	/^    const base_uint operator++(int)$/;"	f	class:base_uint
operator ++	prevector.h	/^        const_iterator operator++(int) { const_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::const_iterator
operator ++	prevector.h	/^        const_iterator& operator++() { ptr++; return *this; }$/;"	f	class:prevector::const_iterator
operator ++	prevector.h	/^        const_reverse_iterator operator++(int) { const_reverse_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::const_reverse_iterator
operator ++	prevector.h	/^        const_reverse_iterator& operator++() { ptr--; return *this; }$/;"	f	class:prevector::const_reverse_iterator
operator ++	prevector.h	/^        iterator operator++(int) { iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::iterator
operator ++	prevector.h	/^        iterator& operator++() { ptr++; return *this; }$/;"	f	class:prevector::iterator
operator ++	prevector.h	/^        reverse_iterator operator++(int) { reverse_iterator copy(*this); ++(*this); return copy; }$/;"	f	class:prevector::reverse_iterator
operator ++	prevector.h	/^        reverse_iterator& operator++() { ptr--; return *this; }$/;"	f	class:prevector::reverse_iterator
operator +=	arith_uint256.h	/^    base_uint& operator+=(const base_uint& b)$/;"	f	class:base_uint
operator +=	arith_uint256.h	/^    base_uint& operator+=(uint64_t b64)$/;"	f	class:base_uint
operator +=	policy/feerate.h	/^    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }$/;"	f	class:CFeeRate
operator +=	prevector.h	/^        const_iterator& operator+=(size_type n) { ptr += n; return *this; }$/;"	f	class:prevector::const_iterator
operator +=	prevector.h	/^        iterator& operator+=(size_type n) { ptr += n; return *this; }$/;"	f	class:prevector::iterator
operator +=	script/script.h	/^    CScript& operator+=(const CScript& b)$/;"	f	class:CScript
operator +=	script/script.h	/^    inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator +=	script/script.h	/^    inline CScriptNum& operator+=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator +=	streams.h	/^    CDataStream& operator+=(const CDataStream& b)$/;"	f	class:CDataStream
operator +=	test/dbwrapper_tests.cpp	/^    StringContentsSerializer& operator+=(const StringContentsSerializer& s) { return *this += s.str; }$/;"	f	struct:StringContentsSerializer
operator +=	test/dbwrapper_tests.cpp	/^    StringContentsSerializer& operator+=(const std::string& s) {$/;"	f	struct:StringContentsSerializer
operator +=	test/scriptnum10.h	/^    inline CScriptNum10& operator+=( const CScriptNum10& rhs)       { return operator+=(rhs.m_value);  }$/;"	f	class:CScriptNum10
operator +=	test/scriptnum10.h	/^    inline CScriptNum10& operator+=( const int64_t& rhs)$/;"	f	class:CScriptNum10
operator -	arith_uint256.h	/^    const base_uint operator-() const$/;"	f	class:base_uint
operator -	arith_uint256.h	/^    friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }$/;"	f	class:base_uint
operator -	prevector.h	/^        const_iterator operator-(size_type n) { return const_iterator(ptr - n); }$/;"	f	class:prevector::const_iterator
operator -	prevector.h	/^        difference_type friend operator-(const_iterator a, const_iterator b) { return (&(*a) - &(*b)); }$/;"	f	class:prevector::const_iterator
operator -	prevector.h	/^        difference_type friend operator-(iterator a, iterator b) { return (&(*a) - &(*b)); }$/;"	f	class:prevector::iterator
operator -	prevector.h	/^        iterator operator-(size_type n) { return iterator(ptr - n); }$/;"	f	class:prevector::iterator
operator -	script/script.h	/^    inline CScriptNum operator-(   const CScriptNum& rhs) const { return operator-(rhs.m_value);   }$/;"	f	class:CScriptNum
operator -	script/script.h	/^    inline CScriptNum operator-(   const int64_t& rhs)    const { return CScriptNum(m_value - rhs);}$/;"	f	class:CScriptNum
operator -	script/script.h	/^    inline CScriptNum operator-()                         const$/;"	f	class:CScriptNum
operator -	test/scriptnum10.h	/^    inline CScriptNum10 operator-(   const CScriptNum10& rhs) const { return operator-(rhs.m_value);   }$/;"	f	class:CScriptNum10
operator -	test/scriptnum10.h	/^    inline CScriptNum10 operator-(   const int64_t& rhs)    const { return CScriptNum10(m_value - rhs);}$/;"	f	class:CScriptNum10
operator -	test/scriptnum10.h	/^    inline CScriptNum10 operator-()                         const$/;"	f	class:CScriptNum10
operator --	arith_uint256.h	/^    base_uint& operator--()$/;"	f	class:base_uint
operator --	arith_uint256.h	/^    const base_uint operator--(int)$/;"	f	class:base_uint
operator --	prevector.h	/^        const_iterator operator--(int) { const_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::const_iterator
operator --	prevector.h	/^        const_iterator& operator--() { ptr--; return *this; }$/;"	f	class:prevector::const_iterator
operator --	prevector.h	/^        const_reverse_iterator operator--(int) { const_reverse_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::const_reverse_iterator
operator --	prevector.h	/^        const_reverse_iterator& operator--() { ptr++; return *this; }$/;"	f	class:prevector::const_reverse_iterator
operator --	prevector.h	/^        iterator operator--(int) { iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::iterator
operator --	prevector.h	/^        iterator& operator--() { ptr--; return *this; }$/;"	f	class:prevector::iterator
operator --	prevector.h	/^        reverse_iterator operator--(int) { reverse_iterator copy(*this); --(*this); return copy; }$/;"	f	class:prevector::reverse_iterator
operator --	prevector.h	/^        reverse_iterator& operator--() { ptr++; return *this; }$/;"	f	class:prevector::reverse_iterator
operator -=	arith_uint256.h	/^    base_uint& operator-=(const base_uint& b)$/;"	f	class:base_uint
operator -=	arith_uint256.h	/^    base_uint& operator-=(uint64_t b64)$/;"	f	class:base_uint
operator -=	prevector.h	/^        const_iterator& operator-=(size_type n) { ptr -= n; return *this; }$/;"	f	class:prevector::const_iterator
operator -=	prevector.h	/^        iterator& operator-=(size_type n) { ptr -= n; return *this; }$/;"	f	class:prevector::iterator
operator -=	script/script.h	/^    inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator -=	script/script.h	/^    inline CScriptNum& operator-=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator -=	test/scriptnum10.h	/^    inline CScriptNum10& operator-=( const CScriptNum10& rhs)       { return operator-=(rhs.m_value);  }$/;"	f	class:CScriptNum10
operator -=	test/scriptnum10.h	/^    inline CScriptNum10& operator-=( const int64_t& rhs)$/;"	f	class:CScriptNum10
operator ->	prevector.h	/^        T* operator->() const { return ptr; }$/;"	f	class:prevector::iterator
operator ->	prevector.h	/^        T* operator->() { return ptr; }$/;"	f	class:prevector::reverse_iterator
operator ->	prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::const_iterator
operator ->	prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator ->	prevector.h	/^        const T* operator->() const { return ptr; }$/;"	f	class:prevector::reverse_iterator
operator /	arith_uint256.h	/^    friend inline const base_uint operator\/(const base_uint& a, const base_uint& b) { return base_uint(a) \/= b; }$/;"	f	class:base_uint
operator /=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator\/=(const base_uint& b)$/;"	f	class:base_uint
operator <	arith_uint256.h	/^    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }$/;"	f	class:base_uint
operator <	base58.h	/^    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }$/;"	f	class:CBase58Data
operator <	netaddress.cpp	/^bool operator<(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator <	netaddress.cpp	/^bool operator<(const CService& a, const CService& b)$/;"	f
operator <	netaddress.cpp	/^bool operator<(const CSubNet& a, const CSubNet& b)$/;"	f
operator <	policy/feerate.h	/^    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <	prevector.h	/^        bool operator<(const_iterator x) const { return ptr < x.ptr; }$/;"	f	class:prevector::const_iterator
operator <	prevector.h	/^        bool operator<(iterator x) const { return ptr < x.ptr; }$/;"	f	class:prevector::iterator
operator <	prevector.h	/^    bool operator<(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator <	primitives/transaction.h	/^    friend bool operator<(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator <	protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	pubkey.h	/^    friend bool operator<(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator <	qt/coincontroldialog.cpp	/^bool CCoinControlWidgetItem::operator<(const QTreeWidgetItem &other) const {$/;"	f	class:CCoinControlWidgetItem
operator <	script/script.h	/^    inline bool operator< (const CScriptNum& rhs) const { return operator< (rhs.m_value); }$/;"	f	class:CScriptNum
operator <	script/script.h	/^    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }$/;"	f	class:CScriptNum
operator <	script/standard.h	/^    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator <	test/scriptnum10.h	/^    inline bool operator< (const CScriptNum10& rhs) const { return operator< (rhs.m_value); }$/;"	f	class:CScriptNum10
operator <	test/scriptnum10.h	/^    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }$/;"	f	class:CScriptNum10
operator <	uint256.h	/^    friend inline bool operator<(const base_blob& a, const base_blob& b) { return a.Compare(b) < 0; }$/;"	f	class:base_blob
operator <	wallet/wallet.h	/^    bool operator<(const CInputCoin& rhs) const {$/;"	f	class:CInputCoin
operator <<	arith_uint256.h	/^    friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }$/;"	f	class:base_uint
operator <<	hash.h	/^    CHashWriter& operator<<(const T& obj) {$/;"	f	class:CHashWriter
operator <<	leveldb/util/testharness.h	/^  Tester& operator<<(const V& value) {$/;"	f	class:leveldb::test::Tester
operator <<	qt/notificator.cpp	/^QDBusArgument &operator<<(QDBusArgument &a, const FreedesktopImage &i)$/;"	f
operator <<	script/script.h	/^    CScript& operator<<(const CScript& b)$/;"	f	class:CScript
operator <<	script/script.h	/^    CScript& operator<<(const CScriptNum& b)$/;"	f	class:CScript
operator <<	script/script.h	/^    CScript& operator<<(const std::vector<unsigned char>& b)$/;"	f	class:CScript
operator <<	script/script.h	/^    CScript& operator<<(int64_t b) { return push_int64(b); }$/;"	f	class:CScript
operator <<	script/script.h	/^    CScript& operator<<(opcodetype opcode)$/;"	f	class:CScript
operator <<	serialize.h	/^    CSizeComputer& operator<<(const T& obj)$/;"	f	class:CSizeComputer
operator <<	streams.h	/^    CAutoFile& operator<<(const T& obj)$/;"	f	class:CAutoFile
operator <<	streams.h	/^    CDataStream& operator<<(const T& obj)$/;"	f	class:CDataStream
operator <<	streams.h	/^    CVectorWriter& operator<<(const T& obj)$/;"	f	class:CVectorWriter
operator <<	streams.h	/^    OverrideStream<Stream>& operator<<(const T& obj)$/;"	f	class:OverrideStream
operator <<=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)$/;"	f	class:base_uint
operator <=	arith_uint256.h	/^    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }$/;"	f	class:base_uint
operator <=	base58.h	/^    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }$/;"	f	class:CBase58Data
operator <=	policy/feerate.h	/^    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <=	prevector.h	/^        bool operator<=(const_iterator x) const { return ptr <= x.ptr; }$/;"	f	class:prevector::const_iterator
operator <=	prevector.h	/^        bool operator<=(iterator x) const { return ptr <= x.ptr; }$/;"	f	class:prevector::iterator
operator <=	script/script.h	/^    inline bool operator<=(const CScriptNum& rhs) const { return operator<=(rhs.m_value); }$/;"	f	class:CScriptNum
operator <=	script/script.h	/^    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }$/;"	f	class:CScriptNum
operator <=	test/scriptnum10.h	/^    inline bool operator<=(const CScriptNum10& rhs) const { return operator<=(rhs.m_value); }$/;"	f	class:CScriptNum10
operator <=	test/scriptnum10.h	/^    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }$/;"	f	class:CScriptNum10
operator =	arith_uint256.h	/^    base_uint& operator=(const base_uint& b)$/;"	f	class:base_uint
operator =	arith_uint256.h	/^    base_uint& operator=(uint64_t b)$/;"	f	class:base_uint
operator =	leveldb/include/leveldb/status.h	/^inline void Status::operator=(const Status& s) {$/;"	f	class:leveldb::Status
operator =	prevector.h	/^    prevector& operator=(const prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
operator =	prevector.h	/^    prevector& operator=(prevector<N, T, Size, Diff>&& other) {$/;"	f	class:prevector
operator =	qt/walletmodel.h	/^        UnlockContext& operator=(const UnlockContext& rhs) { CopyFrom(rhs); return *this; }$/;"	f	class:WalletModel::UnlockContext
operator =	script/script.h	/^    inline CScriptNum& operator=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator =	test/scriptnum10.h	/^    inline CScriptNum10& operator=( const int64_t& rhs)$/;"	f	class:CScriptNum10
operator ==	arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }$/;"	f	class:base_uint
operator ==	arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }$/;"	f	class:base_uint
operator ==	base58.h	/^    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }$/;"	f	class:CBase58Data
operator ==	chain.h	/^    friend bool operator==(const CChain &a, const CChain &b) {$/;"	f	class:CChain
operator ==	chain.h	/^    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {$/;"	f	struct:CDiskBlockPos
operator ==	key.h	/^    friend bool operator==(const CExtKey& a, const CExtKey& b)$/;"	f	struct:CExtKey
operator ==	key.h	/^    friend bool operator==(const CKey& a, const CKey& b)$/;"	f	class:CKey
operator ==	leveldb/include/leveldb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator ==	netaddress.cpp	/^bool operator==(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator ==	netaddress.cpp	/^bool operator==(const CService& a, const CService& b)$/;"	f
operator ==	netaddress.cpp	/^bool operator==(const CSubNet& a, const CSubNet& b)$/;"	f
operator ==	policy/feerate.h	/^    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator ==	prevector.h	/^        bool operator==(const_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::const_iterator
operator ==	prevector.h	/^        bool operator==(const_reverse_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::const_reverse_iterator
operator ==	prevector.h	/^        bool operator==(iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::iterator
operator ==	prevector.h	/^        bool operator==(reverse_iterator x) const { return ptr == x.ptr; }$/;"	f	class:prevector::reverse_iterator
operator ==	prevector.h	/^    bool operator==(const prevector<N, T, Size, Diff>& other) const {$/;"	f	class:prevector
operator ==	primitives/transaction.h	/^    friend bool operator==(const CMutableTransaction& a, const CMutableTransaction& b)$/;"	f	struct:CMutableTransaction
operator ==	primitives/transaction.h	/^    friend bool operator==(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator ==	primitives/transaction.h	/^    friend bool operator==(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator ==	primitives/transaction.h	/^    friend bool operator==(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator ==	primitives/transaction.h	/^    friend bool operator==(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator ==	pubkey.h	/^    friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)$/;"	f	struct:CExtPubKey
operator ==	pubkey.h	/^    friend bool operator==(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator ==	script/script.h	/^    inline bool operator==(const CScriptNum& rhs) const { return operator==(rhs.m_value); }$/;"	f	class:CScriptNum
operator ==	script/script.h	/^    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }$/;"	f	class:CScriptNum
operator ==	script/standard.h	/^    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator ==	test/coins_tests.cpp	/^bool operator==(const Coin &a, const Coin &b) {$/;"	f	namespace:__anon79
operator ==	test/scriptnum10.h	/^    inline bool operator==(const CScriptNum10& rhs) const { return operator==(rhs.m_value); }$/;"	f	class:CScriptNum10
operator ==	test/scriptnum10.h	/^    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }$/;"	f	class:CScriptNum10
operator ==	test/serialize_tests.cpp	/^    bool operator==(const CSerializeMethodsTestSingle& rhs)$/;"	f	class:CSerializeMethodsTestSingle
operator ==	uint256.h	/^    friend inline bool operator==(const base_blob& a, const base_blob& b) { return a.Compare(b) == 0; }$/;"	f	class:base_blob
operator ==	wallet/wallet.h	/^    bool operator==(const CInputCoin& rhs) const {$/;"	f	class:CInputCoin
operator >	arith_uint256.h	/^    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }$/;"	f	class:base_uint
operator >	base58.h	/^    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }$/;"	f	class:CBase58Data
operator >	policy/feerate.h	/^    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >	prevector.h	/^        bool operator>(const_iterator x) const { return ptr > x.ptr; }$/;"	f	class:prevector::const_iterator
operator >	prevector.h	/^        bool operator>(iterator x) const { return ptr > x.ptr; }$/;"	f	class:prevector::iterator
operator >	script/script.h	/^    inline bool operator> (const CScriptNum& rhs) const { return operator> (rhs.m_value); }$/;"	f	class:CScriptNum
operator >	script/script.h	/^    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }$/;"	f	class:CScriptNum
operator >	test/scriptnum10.h	/^    inline bool operator> (const CScriptNum10& rhs) const { return operator> (rhs.m_value); }$/;"	f	class:CScriptNum10
operator >	test/scriptnum10.h	/^    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }$/;"	f	class:CScriptNum10
operator >=	arith_uint256.h	/^    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }$/;"	f	class:base_uint
operator >=	base58.h	/^    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }$/;"	f	class:CBase58Data
operator >=	policy/feerate.h	/^    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >=	prevector.h	/^        bool operator>=(const_iterator x) const { return ptr >= x.ptr; }$/;"	f	class:prevector::const_iterator
operator >=	prevector.h	/^        bool operator>=(iterator x) const { return ptr >= x.ptr; }$/;"	f	class:prevector::iterator
operator >=	script/script.h	/^    inline bool operator>=(const CScriptNum& rhs) const { return operator>=(rhs.m_value); }$/;"	f	class:CScriptNum
operator >=	script/script.h	/^    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }$/;"	f	class:CScriptNum
operator >=	test/scriptnum10.h	/^    inline bool operator>=(const CScriptNum10& rhs) const { return operator>=(rhs.m_value); }$/;"	f	class:CScriptNum10
operator >=	test/scriptnum10.h	/^    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }$/;"	f	class:CScriptNum10
operator >>	arith_uint256.h	/^    friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }$/;"	f	class:base_uint
operator >>	hash.h	/^    CHashVerifier<Source>& operator>>(T& obj)$/;"	f	class:CHashVerifier
operator >>	qt/notificator.cpp	/^const QDBusArgument &operator>>(const QDBusArgument &a, FreedesktopImage &i)$/;"	f
operator >>	script/wificoinconsensus.cpp	/^    TxInputStream& operator>>(T& obj)$/;"	f	class:__anon95::TxInputStream
operator >>	streams.h	/^    CAutoFile& operator>>(T& obj)$/;"	f	class:CAutoFile
operator >>	streams.h	/^    CBufferedFile& operator>>(T& obj) {$/;"	f	class:CBufferedFile
operator >>	streams.h	/^    CDataStream& operator>>(T& obj)$/;"	f	class:CDataStream
operator >>	streams.h	/^    OverrideStream<Stream>& operator>>(T& obj)$/;"	f	class:OverrideStream
operator >>=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)$/;"	f	class:base_uint
operator []	chain.h	/^    CBlockIndex *operator[](int nHeight) const {$/;"	f	class:CChain
operator []	leveldb/include/leveldb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
operator []	prevector.h	/^        T& operator[](size_type pos) { return ptr[pos]; }$/;"	f	class:prevector::iterator
operator []	prevector.h	/^        const T& operator[](size_type pos) const { return ptr[pos]; }$/;"	f	class:prevector::const_iterator
operator []	prevector.h	/^        const T& operator[](size_type pos) const { return ptr[pos]; }$/;"	f	class:prevector::iterator
operator []	prevector.h	/^    T& operator[](size_type pos) {$/;"	f	class:prevector
operator []	prevector.h	/^    const T& operator[](size_type pos) const {$/;"	f	class:prevector
operator []	pubkey.h	/^    const unsigned char& operator[](unsigned int pos) const { return vch[pos]; }$/;"	f	class:CPubKey
operator []	rpc/server.cpp	/^const CRPCCommand *CRPCTable::operator[](const std::string &name) const$/;"	f	class:CRPCTable
operator []	streams.h	/^    const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	streams.h	/^    reference operator[](size_type pos)              { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	univalue/lib/univalue.cpp	/^const UniValue& UniValue::operator[](const std::string& key) const$/;"	f	class:UniValue
operator []	univalue/lib/univalue.cpp	/^const UniValue& UniValue::operator[](unsigned int index) const$/;"	f	class:UniValue
operator ^	arith_uint256.h	/^    friend inline const base_uint operator^(const base_uint& a, const base_uint& b) { return base_uint(a) ^= b; }$/;"	f	class:base_uint
operator ^=	arith_uint256.h	/^    base_uint& operator^=(const base_uint& b)$/;"	f	class:base_uint
operator ^=	arith_uint256.h	/^    base_uint& operator^=(uint64_t b)$/;"	f	class:base_uint
operator bool	sync.h	/^    operator bool()$/;"	f	class:CMutexLock
operator bool	sync.h	/^    operator bool()$/;"	f	class:CSemaphoreGrant
operator bool	threadinterrupt.cpp	/^CThreadInterrupt::operator bool() const$/;"	f	class:CThreadInterrupt
operator const CTransaction&	wallet/wallet.h	/^    operator const CTransaction&() const { return *tx; }$/;"	f	class:CMerkleTx
operator |	arith_uint256.h	/^    friend inline const base_uint operator|(const base_uint& a, const base_uint& b) { return base_uint(a) |= b; }$/;"	f	class:base_uint
operator |=	arith_uint256.h	/^    base_uint& operator|=(const base_uint& b)$/;"	f	class:base_uint
operator |=	arith_uint256.h	/^    base_uint& operator|=(uint64_t b)$/;"	f	class:base_uint
operator ~	arith_uint256.h	/^    const base_uint operator~() const$/;"	f	class:base_uint
optIndent	util.cpp	/^static const int optIndent = 2;$/;"	v	file:
option_config_	leveldb/db/db_test.cc	/^  int option_config_;$/;"	m	class:leveldb::DBTest	file:
options	dbwrapper.h	/^    leveldb::Options options;$/;"	m	class:CDBWrapper
options	leveldb/table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep	file:
options	leveldb/table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
optionsAction	qt/wificoingui.h	/^    QAction *optionsAction;$/;"	m	class:WiFicoinGUI
optionsClicked	qt/wificoingui.cpp	/^void WiFicoinGUI::optionsClicked()$/;"	f	class:WiFicoinGUI
optionsModel	qt/wificoin.cpp	/^    OptionsModel *optionsModel;$/;"	m	class:WiFicoinApplication	file:
optionsModel	qt/wificoingui.h	/^    OptionsModel *optionsModel;$/;"	m	class:UnitDisplayStatusBarControl
optionsModel	qt/clientmodel.h	/^    OptionsModel *optionsModel;$/;"	m	class:ClientModel
optionsModel	qt/paymentserver.h	/^    OptionsModel *optionsModel;$/;"	m	class:PaymentServer
optionsModel	qt/walletmodel.h	/^    OptionsModel *optionsModel;$/;"	m	class:WalletModel
options_	leveldb/db/autocompact_test.cc	/^  Options options_;$/;"	m	class:leveldb::AutoCompactTest	file:
options_	leveldb/db/corruption_test.cc	/^  Options options_;$/;"	m	class:leveldb::CorruptionTest	file:
options_	leveldb/db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	leveldb/db/db_test.cc	/^  const Options options_;$/;"	m	class:leveldb::ModelDB	file:
options_	leveldb/db/fault_injection_test.cc	/^  Options options_;$/;"	m	class:leveldb::FaultInjectionTest	file:
options_	leveldb/db/repair.cc	/^  Options const options_;$/;"	m	class:leveldb::__anon26::Repairer	file:
options_	leveldb/db/table_cache.h	/^  const Options* options_;$/;"	m	class:leveldb::TableCache
options_	leveldb/db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	leveldb/table/block_builder.h	/^  const Options*        options_;$/;"	m	class:leveldb::BlockBuilder
options_	leveldb/table/table_test.cc	/^  Options options_;$/;"	m	class:leveldb::Harness	file:
options_	leveldb/table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon39::TwoLevelIterator	file:
order	qt/bantablemodel.h	/^    Qt::SortOrder order;$/;"	m	class:BannedNodeLessThan
order	qt/peertablemodel.h	/^    Qt::SortOrder order;$/;"	m	class:NodeLessThan
order	qt/recentrequeststablemodel.h	/^    Qt::SortOrder order;$/;"	m	class:RecentRequestEntryLessThan
orders	test/raii_event_tests.cpp	/^static std::map<void*, uint16_t> orders;$/;"	v	file:
org.wificoin	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^package org.wificoin;$/;"	p
org.wificoin	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^package org.wificoin;$/;"	p
org.wificoin	secp256k1/src/java/org/wificoin/NativeSecp256k1Util.java	/^package org.wificoin;$/;"	p
org.wificoin	secp256k1/src/java/org/wificoin/Secp256k1Context.java	/^package org.wificoin;$/;"	p
other	support/allocators/secure.h	/^        typedef secure_allocator<_Other> other;$/;"	t	struct:secure_allocator::rebind
other	support/allocators/zeroafterfree.h	/^        typedef zero_after_free_allocator<_Other> other;$/;"	t	struct:zero_after_free_allocator::rebind
other	support/lockedpool.h	/^    Arena(const Arena& other) = delete; \/\/ non construction-copyable$/;"	m	class:Arena
other	support/lockedpool.h	/^    LockedPool(const LockedPool& other) = delete; \/\/ non construction-copyable$/;"	m	class:LockedPool
out	coins.h	/^    CTxOut out;$/;"	m	class:Coin
out	rest.cpp	/^    CTxOut out;$/;"	m	struct:CCoin	file:
outOfSyncWarningClicked	qt/walletframe.cpp	/^void WalletFrame::outOfSyncWarningClicked()$/;"	f	class:WalletFrame
outer	crypto/hmac_sha256.h	/^    CSHA256 outer;$/;"	m	class:CHMAC_SHA256
outer	crypto/hmac_sha512.h	/^    CSHA512 outer;$/;"	m	class:CHMAC_SHA512
outer	secp256k1/src/hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon61
outfile	leveldb/db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
outpoint	txdb.cpp	/^    COutPoint* outpoint;$/;"	m	struct:__anon76::CoinEntry	file:
outpoint	wallet/wallet.h	/^    COutPoint outpoint;$/;"	m	class:CInputCoin
outputEscape	univalue/gen/gen.cpp	/^static void outputEscape()$/;"	f	file:
outputs	leveldb/db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
overlapped_bytes_	leveldb/db/version_set.h	/^  int64_t overlapped_bytes_;  \/\/ Bytes of overlap between current output$/;"	m	class:leveldb::Compaction
override	coins.h	/^    CCoinsViewCursor *Cursor() const override;$/;"	m	class:CCoinsViewBacked
override	coins.h	/^    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;$/;"	m	class:CCoinsViewBacked
override	coins.h	/^    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;$/;"	m	class:CCoinsViewCache
override	coins.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewBacked
override	coins.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewCache
override	coins.h	/^    bool HaveCoin(const COutPoint &outpoint) const override;$/;"	m	class:CCoinsViewBacked
override	coins.h	/^    bool HaveCoin(const COutPoint &outpoint) const override;$/;"	m	class:CCoinsViewCache
override	coins.h	/^    size_t EstimateSize() const override;$/;"	m	class:CCoinsViewBacked
override	coins.h	/^    std::vector<uint256> GetHeadBlocks() const override;$/;"	m	class:CCoinsViewBacked
override	coins.h	/^    uint256 GetBestBlock() const override;$/;"	m	class:CCoinsViewBacked
override	coins.h	/^    uint256 GetBestBlock() const override;$/;"	m	class:CCoinsViewCache
override	keystore.h	/^    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;$/;"	m	class:CBasicKeyStore
override	keystore.h	/^    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;$/;"	m	class:CBasicKeyStore
override	keystore.h	/^    virtual bool AddCScript(const CScript& redeemScript) override;$/;"	m	class:CBasicKeyStore
override	keystore.h	/^    virtual bool AddWatchOnly(const CScript &dest) override;$/;"	m	class:CBasicKeyStore
override	keystore.h	/^    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;$/;"	m	class:CBasicKeyStore
override	keystore.h	/^    virtual bool HaveCScript(const CScriptID &hash) const override;$/;"	m	class:CBasicKeyStore
override	keystore.h	/^    virtual bool HaveWatchOnly() const override;$/;"	m	class:CBasicKeyStore
override	keystore.h	/^    virtual bool HaveWatchOnly(const CScript &dest) const override;$/;"	m	class:CBasicKeyStore
override	keystore.h	/^    virtual bool RemoveWatchOnly(const CScript &dest) override;$/;"	m	class:CBasicKeyStore
override	net_processing.h	/^    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;$/;"	m	class:PeerLogicValidation
override	net_processing.h	/^    bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;$/;"	m	class:PeerLogicValidation
override	net_processing.h	/^    void BlockChecked(const CBlock& block, const CValidationState& state) override;$/;"	m	class:PeerLogicValidation
override	net_processing.h	/^    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;$/;"	m	class:PeerLogicValidation
override	net_processing.h	/^    void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;$/;"	m	class:PeerLogicValidation
override	net_processing.h	/^    void InitializeNode(CNode* pnode) override;$/;"	m	class:PeerLogicValidation
override	net_processing.h	/^    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;$/;"	m	class:PeerLogicValidation
override	net_processing.h	/^    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;$/;"	m	class:PeerLogicValidation
override	script/interpreter.h	/^    bool CheckLockTime(const CScriptNum& nLockTime) const override;$/;"	m	class:TransactionSignatureChecker
override	script/interpreter.h	/^    bool CheckSequence(const CScriptNum& nSequence) const override;$/;"	m	class:TransactionSignatureChecker
override	script/interpreter.h	/^    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;$/;"	m	class:TransactionSignatureChecker
override	script/sigcache.h	/^    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const override;$/;"	m	class:CachingTransactionSignatureChecker
override	script/sign.h	/^    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;$/;"	m	class:DummySignatureCreator
override	script/sign.h	/^    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;$/;"	m	class:TransactionSignatureCreator
override	script/sign.h	/^    const BaseSignatureChecker& Checker() const override;$/;"	m	class:DummySignatureCreator
override	support/lockedpool.cpp	/^    size_t GetLimit() override;$/;"	m	class:PosixLockedPageAllocator	file:
override	support/lockedpool.cpp	/^    size_t GetLimit() override;$/;"	m	class:Win32LockedPageAllocator	file:
override	support/lockedpool.cpp	/^    void FreeLocked(void* addr, size_t len) override;$/;"	m	class:PosixLockedPageAllocator	file:
override	support/lockedpool.cpp	/^    void FreeLocked(void* addr, size_t len) override;$/;"	m	class:Win32LockedPageAllocator	file:
override	support/lockedpool.cpp	/^    void* AllocateLocked(size_t len, bool *lockingSuccess) override;$/;"	m	class:PosixLockedPageAllocator	file:
override	support/lockedpool.cpp	/^    void* AllocateLocked(size_t len, bool *lockingSuccess) override;$/;"	m	class:Win32LockedPageAllocator	file:
override	txdb.h	/^    CCoinsViewCursor *Cursor() const override;$/;"	m	class:CCoinsViewDB
override	txdb.h	/^    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;$/;"	m	class:CCoinsViewDB
override	txdb.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewDB
override	txdb.h	/^    bool GetKey(COutPoint &key) const override;$/;"	m	class:CCoinsViewDBCursor
override	txdb.h	/^    bool GetValue(Coin &coin) const override;$/;"	m	class:CCoinsViewDBCursor
override	txdb.h	/^    bool HaveCoin(const COutPoint &outpoint) const override;$/;"	m	class:CCoinsViewDB
override	txdb.h	/^    bool Valid() const override;$/;"	m	class:CCoinsViewDBCursor
override	txdb.h	/^    size_t EstimateSize() const override;$/;"	m	class:CCoinsViewDB
override	txdb.h	/^    std::vector<uint256> GetHeadBlocks() const override;$/;"	m	class:CCoinsViewDB
override	txdb.h	/^    uint256 GetBestBlock() const override;$/;"	m	class:CCoinsViewDB
override	txdb.h	/^    unsigned int GetValueSize() const override;$/;"	m	class:CCoinsViewDBCursor
override	txdb.h	/^    void Next() override;$/;"	m	class:CCoinsViewDBCursor
override	txmempool.h	/^    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;$/;"	m	class:CCoinsViewMemPool
override	wallet/crypter.h	/^    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;$/;"	m	class:CCryptoKeyStore
override	wallet/crypter.h	/^    bool GetKey(const CKeyID &address, CKey& keyOut) const override;$/;"	m	class:CCryptoKeyStore
override	wallet/crypter.h	/^    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;$/;"	m	class:CCryptoKeyStore
override	wallet/wallet.h	/^    bool AddCScript(const CScript& redeemScript) override;$/;"	m	class:CWallet
override	wallet/wallet.h	/^    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;$/;"	m	class:CWallet
override	wallet/wallet.h	/^    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;$/;"	m	class:CWallet
override	wallet/wallet.h	/^    bool AddWatchOnly(const CScript& dest) override;$/;"	m	class:CWallet
override	wallet/wallet.h	/^    bool RemoveWatchOnly(const CScript &dest) override;$/;"	m	class:CWallet
override	wallet/wallet.h	/^    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;$/;"	m	class:CWallet
override	wallet/wallet.h	/^    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;$/;"	m	class:CWallet
override	wallet/wallet.h	/^    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;$/;"	m	class:CWallet
override	wallet/wallet.h	/^    void SetBestChain(const CBlockLocator& loc) override;$/;"	m	class:CWallet
override	wallet/wallet.h	/^    void TransactionAddedToMempool(const CTransactionRef& tx) override;$/;"	m	class:CWallet
override	zmq/zmqnotificationinterface.h	/^    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;$/;"	m	class:CZMQNotificationInterface
override	zmq/zmqnotificationinterface.h	/^    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;$/;"	m	class:CZMQNotificationInterface
override	zmq/zmqnotificationinterface.h	/^    void TransactionAddedToMempool(const CTransactionRef& tx) override;$/;"	m	class:CZMQNotificationInterface
override	zmq/zmqnotificationinterface.h	/^    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;$/;"	m	class:CZMQNotificationInterface
override	zmq/zmqpublishnotifier.h	/^    bool Initialize(void *pcontext) override;$/;"	m	class:CZMQAbstractPublishNotifier
override	zmq/zmqpublishnotifier.h	/^    bool NotifyBlock(const CBlockIndex *pindex) override;$/;"	m	class:CZMQPublishHashBlockNotifier
override	zmq/zmqpublishnotifier.h	/^    bool NotifyBlock(const CBlockIndex *pindex) override;$/;"	m	class:CZMQPublishRawBlockNotifier
override	zmq/zmqpublishnotifier.h	/^    bool NotifyTransaction(const CTransaction &transaction) override;$/;"	m	class:CZMQPublishHashTransactionNotifier
override	zmq/zmqpublishnotifier.h	/^    bool NotifyTransaction(const CTransaction &transaction) override;$/;"	m	class:CZMQPublishRawTransactionNotifier
override	zmq/zmqpublishnotifier.h	/^    void Shutdown() override;$/;"	m	class:CZMQAbstractPublishNotifier
overviewAction	qt/wificoingui.h	/^    QAction *overviewAction;$/;"	m	class:WiFicoinGUI
overviewPage	qt/walletview.h	/^    OverviewPage *overviewPage;$/;"	m	class:WalletView
owned_	leveldb/db/db_test.cc	/^    const bool owned_;  \/\/ Do we own map_$/;"	m	class:leveldb::ModelDB::ModelIter	file:
owned_	leveldb/table/block.h	/^  bool owned_;                  \/\/ Block owns data_[]$/;"	m	class:leveldb::Block
owns_cache_	leveldb/db/db_impl.h	/^  bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_cache_	leveldb/db/repair.cc	/^  bool owns_cache_;$/;"	m	class:leveldb::__anon26::Repairer	file:
owns_info_log_	leveldb/db/db_impl.h	/^  bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	leveldb/db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon26::Repairer	file:
pContent	leveldb/util/env_win.cc	/^    void* pContent;$/;"	m	struct:leveldb::Win32::WorkItemWrapper	file:
p_util_hexdigit	utilstrencodings.cpp	/^const signed char p_util_hexdigit[256] =$/;"	v
pad	crypto/aes.h	/^    const bool pad;$/;"	m	class:AES128CBCDecrypt
pad	crypto/aes.h	/^    const bool pad;$/;"	m	class:AES128CBCEncrypt
pad	crypto/aes.h	/^    const bool pad;$/;"	m	class:AES256CBCDecrypt
pad	crypto/aes.h	/^    const bool pad;$/;"	m	class:AES256CBCEncrypt
page_size	support/lockedpool.cpp	/^    size_t page_size;$/;"	m	class:PosixLockedPageAllocator	file:
page_size	support/lockedpool.cpp	/^    size_t page_size;$/;"	m	class:Win32LockedPageAllocator	file:
paint	qt/overviewpage.cpp	/^    inline void paint(QPainter *painter, const QStyleOptionViewItem &option,$/;"	f	class:TxViewDelegate
paintEvent	qt/splashscreen.cpp	/^void SplashScreen::paintEvent(QPaintEvent *event)$/;"	f	class:SplashScreen
paintEvent	qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::paintEvent(QPaintEvent *)$/;"	f	class:TrafficGraphWidget
paintPath	qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::paintPath(QPainterPath &path, QQueue<float> &samples)$/;"	f	class:TrafficGraphWidget
paramIdx	rpc/client.cpp	/^    int paramIdx;           \/\/!< 0-based idx of param to convert$/;"	m	class:CRPCConvertParam	file:
paramName	rpc/client.cpp	/^    std::string paramName;  \/\/!< parameter name$/;"	m	class:CRPCConvertParam	file:
parameterSetup	qt/wificoin.cpp	/^void WiFicoinApplication::parameterSetup()$/;"	f	class:WiFicoinApplication
params	rpc/server.h	/^    UniValue params;$/;"	m	class:JSONRPCRequest
paramsDummy	test/versionbits_tests.cpp	/^static const Consensus::Params paramsDummy = Consensus::Params();$/;"	v	file:
paranoid_checks	leveldb/include/leveldb/options.h	/^  bool paranoid_checks;$/;"	m	struct:leveldb::Options
parent	dbwrapper.h	/^    const CDBWrapper &parent;$/;"	m	class:CDBBatch
parent	dbwrapper.h	/^    const CDBWrapper &parent;$/;"	m	class:CDBIterator
parent	memusage.h	/^    void* parent;$/;"	m	struct:memusage::stl_tree_node
parent	qt/addresstablemodel.cpp	/^    AddressTableModel *parent;$/;"	m	class:AddressTablePriv	file:
parent	qt/notificator.h	/^    QWidget *parent;$/;"	m	class:Notificator
parent	qt/transactiontablemodel.cpp	/^    TransactionTableModel *parent;$/;"	m	class:TransactionTablePriv	file:
parents	txmempool.h	/^        setEntries parents;$/;"	m	struct:CTxMemPool::TxLinks
parse	qt/wificoinamountfield.cpp	/^    CAmount parse(const QString &text, bool *valid_out=0) const$/;"	f	class:AmountSpinBox	file:
parse	qt/wificoinunits.cpp	/^bool WiFicoinUnits::parse(int unit, const QString &value, CAmount *val_out)$/;"	f	class:WiFicoinUnits
parse	qt/paymentrequestplus.cpp	/^bool PaymentRequestPlus::parse(const QByteArray& data)$/;"	f	class:PaymentRequestPlus
parse	rpc/server.cpp	/^void JSONRPCRequest::parse(const UniValue& valRequest)$/;"	f	class:JSONRPCRequest
parseWiFicoinURI	qt/guiutil.cpp	/^bool parseWiFicoinURI(QString uri, SendCoinsRecipient *out)$/;"	f	namespace:GUIUtil
parseWiFicoinURI	qt/guiutil.cpp	/^bool parseWiFicoinURI(const QUrl &uri, SendCoinsRecipient *out)$/;"	f	namespace:GUIUtil
parseIntAndAdvance	tinyformat.h	/^inline int parseIntAndAdvance(const char*& c)$/;"	f	namespace:tinyformat::detail
parse_b64der_cert	qt/test/paymentservertests.cpp	/^X509 *parse_b64der_cert(const char* cert_data)$/;"	f
partialBlock	net_processing.cpp	/^        std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  \/\/!< Optional, used for CMPCTBLOCK downloads$/;"	m	struct:__anon49::QueuedBlock	file:
pass	policy/fees.h	/^    EstimatorBucket pass;$/;"	m	struct:EstimationResult
passed	test/prevector_tests.cpp	/^    bool passed = true;$/;"	m	class:prevector_tester	file:
password	netbase.cpp	/^    std::string password;$/;"	m	struct:ProxyCredentials	file:
pasteEntry	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::pasteEntry(const SendCoinsRecipient &rv)$/;"	f	class:SendCoinsDialog
path	httpserver.cpp	/^    std::string path;$/;"	m	class:HTTPWorkItem	file:
pathAddr	addrdb.h	/^    fs::path pathAddr;$/;"	m	class:CAddrDB
pathBanlist	addrdb.h	/^    fs::path pathBanlist;$/;"	m	class:CBanDB
pathCached	util.cpp	/^static fs::path pathCached;$/;"	v	file:
pathCachedNetSpecific	util.cpp	/^static fs::path pathCachedNetSpecific;$/;"	v	file:
pathHandlers	httpserver.cpp	/^std::vector<HTTPPathHandler> pathHandlers;$/;"	v
pathTemp	test/test_wificoin.h	/^    fs::path pathTemp;$/;"	m	struct:TestingSetup
pathToCheck	qt/intro.h	/^    QString pathToCheck;$/;"	m	class:Intro
payAmounts	qt/coincontroldialog.cpp	/^QList<CAmount> CoinControlDialog::payAmounts;$/;"	m	class:CoinControlDialog	file:
payAmounts	qt/coincontroldialog.h	/^    static QList<CAmount> payAmounts;$/;"	m	class:CoinControlDialog
paymentRequest	qt/paymentrequestplus.h	/^    payments::PaymentRequest paymentRequest;$/;"	m	class:PaymentRequestPlus
paymentRequest	qt/walletmodel.h	/^    PaymentRequestPlus paymentRequest;$/;"	m	class:SendCoinsRecipient
paymentServer	qt/wificoin.cpp	/^    PaymentServer* paymentServer;$/;"	m	class:WiFicoinApplication	file:
paymentServerTests	qt/test/paymentservertests.cpp	/^void PaymentServerTests::paymentServerTests()$/;"	f	class:PaymentServerTests
paymentrequest1_cert1_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest1_cert1_BASE64 =$/;"	v
paymentrequest1_cert2_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest1_cert2_BASE64 =$/;"	v
paymentrequest2_cert1_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest2_cert1_BASE64 =$/;"	v
paymentrequest2_cert2_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest2_cert2_BASE64 =$/;"	v
paymentrequest3_cert1_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest3_cert1_BASE64 =$/;"	v
paymentrequest3_cert2_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest3_cert2_BASE64 =$/;"	v
paymentrequest4_cert1_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest4_cert1_BASE64 =$/;"	v
paymentrequest4_cert2_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest4_cert2_BASE64 =$/;"	v
paymentrequest5_cert1_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest5_cert1_BASE64 =$/;"	v
paymentrequest5_cert2_BASE64	qt/test/paymentrequestdata.h	/^const char* paymentrequest5_cert2_BASE64 =$/;"	v
pbegin	serialize.h	/^    char* pbegin;$/;"	m	class:CFlatData
pblock	miner.h	/^    CBlock* pblock;$/;"	m	class:BlockAssembler
pblock	validation.cpp	/^    std::shared_ptr<const CBlock> pblock;$/;"	m	struct:PerBlockConnectTrace	file:
pblocktemplate	miner.h	/^    std::unique_ptr<CBlockTemplate> pblocktemplate;$/;"	m	class:BlockAssembler
pblocktree	validation.cpp	/^CBlockTreeDB *pblocktree = nullptr;$/;"	v
pchChecksum	protocol.h	/^    uint8_t pchChecksum[CHECKSUM_SIZE];$/;"	m	class:CMessageHeader
pchCommand	protocol.h	/^    char pchCommand[COMMAND_SIZE];$/;"	m	class:CMessageHeader
pchIPv4	netaddress.cpp	/^static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };$/;"	v	file:
pchMessageStart	chainparams.h	/^    CMessageHeader::MessageStartChars pchMessageStart;$/;"	m	class:CChainParams
pchMessageStart	protocol.h	/^    char pchMessageStart[MESSAGE_START_SIZE];$/;"	m	class:CMessageHeader
pchOnionCat	netaddress.cpp	/^static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};$/;"	v	file:
pcoinsTip	validation.cpp	/^CCoinsViewCache *pcoinsTip = nullptr;$/;"	v
pcoinscatcher	init.cpp	/^static CCoinsViewErrorCatcher *pcoinscatcher = nullptr;$/;"	v	file:
pcoinsdbview	qt/test/rpcnestedtests.h	/^    CCoinsViewDB *pcoinsdbview;$/;"	m	class:RPCNestedTests
pcoinsdbview	test/test_wificoin.h	/^    CCoinsViewDB *pcoinsdbview;$/;"	m	struct:TestingSetup
pcoinsdbview	validation.cpp	/^CCoinsViewDB *pcoinsdbview = nullptr;$/;"	v
pcontext	zmq/zmqnotificationinterface.h	/^    void *pcontext;$/;"	m	class:CZMQNotificationInterface
pcursor	txdb.h	/^    std::unique_ptr<CDBIterator> pcursor;$/;"	m	class:CCoinsViewDBCursor
pdb	dbwrapper.h	/^    leveldb::DB* pdb;$/;"	m	class:CDBWrapper
pdb	wallet/db.h	/^    Db* pdb;$/;"	m	class:CDB
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	secp256k1/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	univalue/Makefile	/^pdfdir = ${docdir}$/;"	m
peerLayoutAboutToChange	qt/rpcconsole.cpp	/^void RPCConsole::peerLayoutAboutToChange()$/;"	f	class:RPCConsole
peerLayoutChanged	qt/rpcconsole.cpp	/^void RPCConsole::peerLayoutChanged()$/;"	f	class:RPCConsole
peerLogic	init.cpp	/^std::unique_ptr<PeerLogicValidation> peerLogic;$/;"	v
peerLogic	test/test_wificoin.h	/^    std::unique_ptr<PeerLogicValidation> peerLogic;$/;"	m	struct:TestingSetup
peerSelected	qt/rpcconsole.cpp	/^void RPCConsole::peerSelected(const QItemSelection &selected, const QItemSelection &deselected)$/;"	f	class:RPCConsole
peerTableModel	qt/clientmodel.h	/^    PeerTableModel *peerTableModel;$/;"	m	class:ClientModel
peersTableContextMenu	qt/rpcconsole.h	/^    QMenu *peersTableContextMenu;$/;"	m	class:RPCConsole
pend	serialize.h	/^    char* pend;$/;"	m	class:CFlatData
pending_handle	leveldb/table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_index_entry	leveldb/table/table_builder.cc	/^  bool pending_index_entry;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_outputs_	leveldb/db/db_impl.h	/^  std::set<uint64_t> pending_outputs_;$/;"	m	class:leveldb::DBImpl
penv	dbwrapper.h	/^    leveldb::Env* penv;$/;"	m	class:CDBWrapper
perf_cpucycles	bench/perf.cpp	/^uint64_t perf_cpucycles(void) { return 0; }$/;"	f
perf_cpucycles	bench/perf.cpp	/^uint64_t perf_cpucycles(void)$/;"	f
perf_cpucycles	bench/perf.h	/^static inline uint64_t perf_cpucycles(void)$/;"	f
perf_fini	bench/perf.cpp	/^void perf_fini(void) { }$/;"	f
perf_fini	bench/perf.cpp	/^void perf_fini(void)$/;"	f
perf_init	bench/perf.cpp	/^void perf_init(void) { }$/;"	f
perf_init	bench/perf.cpp	/^void perf_init(void)$/;"	f
period	versionbits.h	/^    int period;$/;"	m	struct:BIP9Stats
pfilter	net.h	/^    CBloomFilter* pfilter;$/;"	m	class:CNode
phase	leveldb/db/c_test.c	/^const char* phase = "";$/;"	v
phashBlock	chain.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
pickDataDirectory	qt/intro.cpp	/^bool Intro::pickDataDirectory()$/;"	f	class:Intro
pindex	net_processing.cpp	/^        const CBlockIndex* pindex;                               \/\/!< Optional.$/;"	m	struct:__anon49::QueuedBlock	file:
pindex	validation.cpp	/^    CBlockIndex* pindex = nullptr;$/;"	m	struct:PerBlockConnectTrace	file:
pindexBestForkBase	validation.cpp	/^CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;$/;"	v
pindexBestForkTip	validation.cpp	/^CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;$/;"	v
pindexBestHeader	validation.cpp	/^CBlockIndex *pindexBestHeader = nullptr;$/;"	v
pindexBestHeaderSent	net_processing.cpp	/^    const CBlockIndex *pindexBestHeaderSent;$/;"	m	struct:__anon50::CNodeState	file:
pindexBestInvalid	validation.cpp	/^    CBlockIndex *pindexBestInvalid;$/;"	m	namespace:__anon43	file:
pindexBestKnownBlock	net_processing.cpp	/^    const CBlockIndex *pindexBestKnownBlock;$/;"	m	struct:__anon50::CNodeState	file:
pindexLastCommonBlock	net_processing.cpp	/^    const CBlockIndex *pindexLastCommonBlock;$/;"	m	struct:__anon50::CNodeState	file:
ping	rpc/net.cpp	/^UniValue ping(const JSONRPCRequest& request)$/;"	f
piter	dbwrapper.h	/^    leveldb::Iterator *piter;$/;"	m	class:CDBIterator
pixmap	qt/splashscreen.h	/^    QPixmap pixmap;$/;"	m	class:SplashScreen
pkgconfig_DATA	secp256k1/Makefile	/^pkgconfig_DATA = libsecp256k1.pc$/;"	m
pkgconfig_DATA	univalue/Makefile	/^pkgconfig_DATA = pc\/libunivalue.pc$/;"	m
pkgconfigdir	secp256k1/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgconfigdir	univalue/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/wificoin$/;"	m
pkgdatadir	secp256k1/Makefile	/^pkgdatadir = $(datadir)\/libsecp256k1$/;"	m
pkgdatadir	univalue/Makefile	/^pkgdatadir = $(datadir)\/univalue$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/wificoin$/;"	m
pkgincludedir	secp256k1/Makefile	/^pkgincludedir = $(includedir)\/libsecp256k1$/;"	m
pkgincludedir	univalue/Makefile	/^pkgincludedir = $(includedir)\/univalue$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/wificoin$/;"	m
pkglibdir	secp256k1/Makefile	/^pkglibdir = $(libdir)\/libsecp256k1$/;"	m
pkglibdir	univalue/Makefile	/^pkglibdir = $(libdir)\/univalue$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/wificoin$/;"	m
pkglibexecdir	secp256k1/Makefile	/^pkglibexecdir = $(libexecdir)\/libsecp256k1$/;"	m
pkglibexecdir	univalue/Makefile	/^pkglibexecdir = $(libexecdir)\/univalue$/;"	m
plain	crypto/ctaes/test.c	/^    const char* plain;$/;"	m	struct:__anon82	file:
platformId	qt/platformstyle.cpp	/^    const char *platformId;$/;"	m	struct:__anon112	file:
platformStyle	qt/wificoin.cpp	/^    const PlatformStyle *platformStyle;$/;"	m	class:WiFicoinApplication	file:
platformStyle	qt/wificoingui.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:WiFicoinGUI
platformStyle	qt/coincontroldialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:CoinControlDialog
platformStyle	qt/overviewpage.cpp	/^    const PlatformStyle *platformStyle;$/;"	m	class:TxViewDelegate	file:
platformStyle	qt/receivecoinsdialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:ReceiveCoinsDialog
platformStyle	qt/rpcconsole.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:RPCConsole
platformStyle	qt/sendcoinsdialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:SendCoinsDialog
platformStyle	qt/sendcoinsentry.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:SendCoinsEntry
platformStyle	qt/signverifymessagedialog.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:SignVerifyMessageDialog
platformStyle	qt/transactiontablemodel.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:TransactionTableModel
platformStyle	qt/walletframe.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:WalletFrame
platformStyle	qt/walletview.h	/^    const PlatformStyle *platformStyle;$/;"	m	class:WalletView
platform_styles	qt/platformstyle.cpp	/^} platform_styles[] = {$/;"	v	typeref:struct:__anon112	file:
platform_styles_count	qt/platformstyle.cpp	/^static const unsigned platform_styles_count = sizeof(platform_styles)\/sizeof(*platform_styles);$/;"	v	file:
please_keep	cuckoocache.h	/^    inline void please_keep(uint32_t n) const$/;"	f	class:CuckooCache::cache
pn	arith_uint256.h	/^    uint32_t pn[WIDTH];$/;"	m	class:base_uint
pnSeed6_main	chainparamsseeds.h	/^static SeedSpec6 pnSeed6_main[] = {$/;"	v
pnSeed6_test	chainparamsseeds.h	/^static SeedSpec6 pnSeed6_test[] = {$/;"	v
point	secp256k1/src/bench_ecdh.c	/^    secp256k1_pubkey point;$/;"	m	struct:__anon59	file:
pointer	prevector.h	/^        typedef T* pointer;$/;"	t	class:prevector::iterator
pointer	prevector.h	/^        typedef T* pointer;$/;"	t	class:prevector::reverse_iterator
pointer	prevector.h	/^        typedef const T* pointer;$/;"	t	class:prevector::const_iterator
pointer	prevector.h	/^        typedef const T* pointer;$/;"	t	class:prevector::const_reverse_iterator
pointer	prevector.h	/^    typedef value_type* pointer;$/;"	t	class:prevector
pointer	support/allocators/secure.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:secure_allocator
pointer	support/allocators/zeroafterfree.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:zero_after_free_allocator
policy_	leveldb/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockBuilder
policy_	leveldb/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockReader
policy_	leveldb/table/filter_block_test.cc	/^  TestHashFilter policy_;$/;"	m	class:leveldb::FilterBlockTest	file:
policy_	leveldb/util/bloom_test.cc	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::BloomTest	file:
pollBalanceChanged	qt/walletmodel.cpp	/^void WalletModel::pollBalanceChanged()$/;"	f	class:WalletModel
pollShutdownTimer	qt/wificoin.cpp	/^    QTimer *pollShutdownTimer;$/;"	m	class:WiFicoinApplication	file:
pollTimer	qt/clientmodel.h	/^    QTimer *pollTimer;$/;"	m	class:ClientModel
pollTimer	qt/walletmodel.h	/^    QTimer *pollTimer;$/;"	m	class:WalletModel
pool	blockencodings.h	/^    CTxMemPool* pool;$/;"	m	class:PartiallyDownloadedBlock
pool	validation.cpp	/^    CTxMemPool &pool;$/;"	m	class:ConnectTrace	file:
pop_back	prevector.h	/^    void pop_back() {$/;"	f	class:prevector
pop_back	test/prevector_tests.cpp	/^    void pop_back() {$/;"	f	class:prevector_tester
pop_lock	sync.cpp	/^static void pop_lock()$/;"	f	file:
popstack	script/interpreter.cpp	/^static inline void popstack(std::vector<valtype>& stack)$/;"	f	file:
port	chainparams.h	/^    uint16_t port;$/;"	m	struct:SeedSpec6
port	leveldb/port/atomic_pointer.h	/^namespace port {$/;"	n	namespace:leveldb
port	leveldb/port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	leveldb/port/port_posix.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	leveldb/port/port_posix.h	/^namespace port {$/;"	n	namespace:leveldb
port	leveldb/port/port_posix_sse.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	leveldb/port/port_win.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	leveldb/port/port_win.h	/^namespace port {$/;"	n	namespace:leveldb
port	netaddress.h	/^        unsigned short port; \/\/ host order$/;"	m	class:CService
pos_	leveldb/db/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon18::RandomGenerator	file:
pos_	leveldb/db/fault_injection_test.cc	/^  ssize_t pos_;$/;"	m	struct:leveldb::__anon21::FileState	file:
pos_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int pos_;$/;"	m	class:leveldb::__anon35::RandomGenerator	file:
pos_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int pos_;$/;"	m	class:leveldb::__anon34::RandomGenerator	file:
pos_	leveldb/helpers/memenv/memenv.cc	/^  uint64_t pos_;$/;"	m	class:leveldb::__anon16::SequentialFileImpl	file:
pos_at_last_flush_	leveldb/db/fault_injection_test.cc	/^  ssize_t pos_at_last_flush_;$/;"	m	struct:leveldb::__anon21::FileState	file:
pos_at_last_sync_	leveldb/db/fault_injection_test.cc	/^  ssize_t pos_at_last_sync_;$/;"	m	struct:leveldb::__anon21::FileState	file:
possible	versionbits.h	/^    bool possible;$/;"	m	struct:BIP9Stats
post	sync.h	/^    void post()$/;"	f	class:CSemaphore
postInitProcess	wallet/wallet.cpp	/^void CWallet::postInitProcess(CScheduler& scheduler)$/;"	f	class:CWallet
potential_deadlock_detected	sync.cpp	/^static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)$/;"	f	file:
powLimit	consensus/params.h	/^    uint256 powLimit;$/;"	m	struct:Consensus::Params
ppmutexOpenSSL	util.cpp	/^static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;$/;"	v	file:
pprev	chain.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
pqueue	checkqueue.h	/^    CCheckQueue<T> * const pqueue;$/;"	m	class:CCheckQueueControl
pre_g	secp256k1/src/ecmult.h	/^    secp256k1_ge_storage (*pre_g)[];    \/* odd multiples of the generator *\/$/;"	m	struct:__anon58
pre_g_128	secp256k1/src/ecmult.h	/^    secp256k1_ge_storage (*pre_g_128)[]; \/* odd multiples of 2^128*generator *\/$/;"	m	struct:__anon58
pre_vector	test/prevector_tests.cpp	/^    pretype pre_vector;$/;"	m	class:prevector_tester	file:
pre_vector_alt	test/prevector_tests.cpp	/^    pretype pre_vector_alt;$/;"	m	class:prevector_tester	file:
prec	secp256k1/src/ecmult_gen.h	/^    secp256k1_ge_storage (*prec)[64][16]; \/* prec[j][i] = 16^j * i * G + U_i *\/$/;"	m	struct:__anon54
preciousblock	rpc/blockchain.cpp	/^UniValue preciousblock(const JSONRPCRequest& request)$/;"	f
precomputed_nonce_function	secp256k1/src/tests.c	/^static int precomputed_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
preconditionChecks	wallet/feebumper.cpp	/^bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx) {$/;"	f	class:CFeeBumper
prefilled_count	blockencodings.h	/^    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
prefilledtxn	blockencodings.h	/^    std::vector<PrefilledTransaction> prefilledtxn;$/;"	m	class:CBlockHeaderAndShortTxIDs
prefilledtxn	test/blockencodings_tests.cpp	/^    std::vector<PrefilledTransaction> prefilledtxn;$/;"	m	class:TestHeaderAndShortIDs	file:
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix	httpserver.cpp	/^    std::string prefix;$/;"	m	struct:HTTPPathHandler	file:
prefix	rest.cpp	/^    const char* prefix;$/;"	m	struct:__anon6	file:
prefix	secp256k1/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	univalue/Makefile	/^prefix = \/usr\/local$/;"	m
prepareTransaction	qt/walletmodel.cpp	/^WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl)$/;"	f	class:WalletModel
pretype	test/prevector_tests.cpp	/^    typedef prevector<N, T> pretype;$/;"	t	class:prevector_tester	file:
prev	leveldb/util/cache.cc	/^  LRUHandle* prev;$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
prevBlocks	qt/wificoingui.h	/^    int prevBlocks;$/;"	m	class:WiFicoinGUI
prev_	leveldb/db/snapshot.h	/^  SnapshotImpl* prev_;$/;"	m	class:leveldb::SnapshotImpl
prev_	leveldb/db/version_set.h	/^  Version* prev_;               \/\/ Previous version in linked list$/;"	m	class:leveldb::Version
prev_log_number_	leveldb/db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	leveldb/db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
prevector	prevector.h	/^    explicit prevector(size_type n) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^    explicit prevector(size_type n, const T& val = T()) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^    prevector() : _size(0), _union{{}} {}$/;"	f	class:prevector
prevector	prevector.h	/^    prevector(InputIterator first, InputIterator last) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^    prevector(const prevector<N, T, Size, Diff>& other) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^    prevector(prevector<N, T, Size, Diff>&& other) : _size(0) {$/;"	f	class:prevector
prevector	prevector.h	/^class prevector {$/;"	c
prevector_tester	test/prevector_tests.cpp	/^    prevector_tester() {$/;"	f	class:prevector_tester
prevector_tester	test/prevector_tests.cpp	/^class prevector_tester {$/;"	c	file:
prevout	primitives/transaction.h	/^    COutPoint prevout;$/;"	m	class:CTxIn
printFormatStringLiteral	tinyformat.h	/^inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)$/;"	f	namespace:tinyformat::detail
printToConsole	qt/utilitydialog.cpp	/^void HelpMessageDialog::printToConsole()$/;"	f	class:HelpMessageDialog
print_number	crypto/ctaes/bench.c	/^static void print_number(double x) {$/;"	f	file:
print_number	secp256k1/src/bench.h	/^void print_number(double x) {$/;"	f
print_usage	secp256k1/build-aux/test-driver	/^print_usage ()$/;"	f
print_usage	univalue/build-aux/test-driver	/^print_usage ()$/;"	f
printchunk	support/lockedpool.cpp	/^void printchunk(char* base, size_t sz, bool used) {$/;"	f
printf	tinyformat.h	/^inline void printf(const char* fmt)$/;"	f	namespace:tinyformat
printf	tinyformat.h	/^void printf(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
printfln	tinyformat.h	/^inline void printfln(const char* fmt)$/;"	f	namespace:tinyformat
printfln	tinyformat.h	/^void printfln(const char* fmt, const Args&... args)$/;"	f	namespace:tinyformat
prioritisetransaction	rpc/mining.cpp	/^UniValue prioritisetransaction(const JSONRPCRequest& request)$/;"	f
priv	qt/addresstablemodel.h	/^    AddressTablePriv *priv;$/;"	m	class:AddressTableModel
priv	qt/bantablemodel.h	/^    std::unique_ptr<BanTablePriv> priv;$/;"	m	class:BanTableModel
priv	qt/peertablemodel.h	/^    std::unique_ptr<PeerTablePriv> priv;$/;"	m	class:PeerTableModel
priv	qt/transactiontablemodel.h	/^    TransactionTablePriv *priv;$/;"	m	class:TransactionTableModel
privKeyTweakAdd	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static byte[] privKeyTweakAdd(byte[] privkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
privKeyTweakMul	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static byte[] privKeyTweakMul(byte[] privkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
private_key	torcontrol.cpp	/^    std::string private_key;$/;"	m	class:TorController	file:
proc	leveldb/util/env_win.cc	/^    ScheduleProc proc;$/;"	m	struct:leveldb::Win32::WorkItemWrapper	file:
processBlock	policy/fees.cpp	/^void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,$/;"	f	class:CBlockPolicyEstimator
processBlockTx	policy/fees.cpp	/^bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)$/;"	f	class:CBlockPolicyEstimator
processNewTransaction	qt/walletview.cpp	/^void WalletView::processNewTransaction(const QModelIndex& parent, int start, int \/*end*\/)$/;"	f	class:WalletView
processPaymentRequest	qt/paymentserver.cpp	/^bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient)$/;"	f	class:PaymentServer
processSendCoinsReturn	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg)$/;"	f	class:SendCoinsDialog
processTransaction	policy/fees.cpp	/^void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)$/;"	f	class:CBlockPolicyEstimator
processingQueuedTransactions	qt/transactiontablemodel.h	/^    bool processingQueuedTransactions() { return fProcessingQueuedTransactions; }$/;"	f	class:TransactionTableModel
programName	qt/notificator.h	/^    QString programName;$/;"	m	class:Notificator
program_details	secp256k1/build-aux/missing	/^program_details ()$/;"	f
program_details	univalue/build-aux/missing	/^program_details ()$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	secp256k1/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	univalue/Makefile	/^program_transform_name = s,x,x,$/;"	m
progressBar	qt/wificoingui.h	/^    QProgressBar *progressBar;$/;"	m	class:WiFicoinGUI
progressBarLabel	qt/wificoingui.h	/^    QLabel *progressBarLabel;$/;"	m	class:WiFicoinGUI
progressDialog	qt/wificoingui.h	/^    QProgressDialog *progressDialog;$/;"	m	class:WiFicoinGUI
progressDialog	qt/walletview.h	/^    QProgressDialog *progressDialog;$/;"	m	class:WalletView
protocolinfo_cb	torcontrol.cpp	/^void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorControlReply& reply)$/;"	f	class:TorController
prototypes	secp256k1/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prototypes	univalue/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
proxy	netbase.h	/^    CService proxy;$/;"	m	class:proxyType
proxyInfo	netbase.cpp	/^static proxyType proxyInfo[NET_MAX];$/;"	v	file:
proxyModel	qt/addressbookpage.h	/^    QSortFilterProxyModel *proxyModel;$/;"	m	class:AddressBookPage
proxyType	netbase.h	/^    proxyType(): randomize_credentials(false) {}$/;"	f	class:proxyType
proxyType	netbase.h	/^    proxyType(const CService &_proxy, bool _randomize_credentials=false): proxy(_proxy), randomize_credentials(_randomize_credentials) {}$/;"	f	class:proxyType
proxyType	netbase.h	/^class proxyType$/;"	c
pruneblockchain	rpc/blockchain.cpp	/^UniValue pruneblockchain(const JSONRPCRequest& request)$/;"	f
prv	test/bip32_tests.cpp	/^    std::string prv;$/;"	m	struct:TestDerivation	file:
psdir	Makefile	/^psdir = ${docdir}$/;"	m
psdir	secp256k1/Makefile	/^psdir = ${docdir}$/;"	m
psdir	univalue/Makefile	/^psdir = ${docdir}$/;"	m
pskip	chain.h	/^    CBlockIndex* pskip;$/;"	m	class:CBlockIndex
psocket	zmq/zmqabstractnotifier.h	/^    void *psocket;$/;"	m	class:CZMQAbstractNotifier
pszBase58	base58.cpp	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v	file:
ptr	memusage.h	/^    void* ptr;$/;"	m	struct:memusage::unordered_node
ptr	prevector.h	/^        T* ptr;$/;"	m	class:prevector::iterator
ptr	prevector.h	/^        T* ptr;$/;"	m	class:prevector::reverse_iterator
ptr	prevector.h	/^        const T* ptr;$/;"	m	class:prevector::const_iterator
ptr	prevector.h	/^        const T* ptr;$/;"	m	class:prevector::const_reverse_iterator
ptxTo	validation.h	/^    const CTransaction *ptxTo;$/;"	m	class:CScriptCheck
pub	test/bip32_tests.cpp	/^    std::string pub;$/;"	m	struct:TestDerivation	file:
pubKeyTweakAdd	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static byte[] pubKeyTweakAdd(byte[] pubkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
pubKeyTweakMul	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static byte[] pubKeyTweakMul(byte[] pubkey, byte[] tweak) throws AssertFailException{$/;"	m	class:NativeSecp256k1
pubkey	pubkey.h	/^    CPubKey pubkey;$/;"	m	struct:CExtPubKey
pubkey	secp256k1/src/bench_verify.c	/^    unsigned char pubkey[33];$/;"	m	struct:__anon55	file:
pubkey0	test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon80::KeyData	file:
pubkey0C	test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon80::KeyData	file:
pubkey0H	test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon80::KeyData	file:
pubkey1	test/script_tests.cpp	/^    CPubKey pubkey1, pubkey1C;$/;"	m	struct:__anon80::KeyData	file:
pubkey1C	test/script_tests.cpp	/^    CPubKey pubkey1, pubkey1C;$/;"	m	struct:__anon80::KeyData	file:
pubkey2	test/script_tests.cpp	/^    CPubKey pubkey2, pubkey2C;$/;"	m	struct:__anon80::KeyData	file:
pubkey2C	test/script_tests.cpp	/^    CPubKey pubkey2, pubkey2C;$/;"	m	struct:__anon80::KeyData	file:
pubkeylen	secp256k1/src/bench_verify.c	/^    size_t pubkeylen;$/;"	m	struct:__anon55	file:
purpose	wallet/wallet.h	/^    std::string purpose;$/;"	m	class:CAddressBookData
push	test/script_tests.cpp	/^    std::vector<unsigned char> push;$/;"	m	class:__anon80::TestBuilder	file:
pushKV	univalue/include/univalue.h	/^    bool pushKV(const std::string& key, const char *val_) {$/;"	f	class:UniValue
pushKV	univalue/include/univalue.h	/^    bool pushKV(const std::string& key, const std::string& val_) {$/;"	f	class:UniValue
pushKV	univalue/include/univalue.h	/^    bool pushKV(const std::string& key, double val_) {$/;"	f	class:UniValue
pushKV	univalue/include/univalue.h	/^    bool pushKV(const std::string& key, int val_) {$/;"	f	class:UniValue
pushKV	univalue/include/univalue.h	/^    bool pushKV(const std::string& key, int64_t val_) {$/;"	f	class:UniValue
pushKV	univalue/include/univalue.h	/^    bool pushKV(const std::string& key, uint64_t val_) {$/;"	f	class:UniValue
pushKV	univalue/lib/univalue.cpp	/^bool UniValue::pushKV(const std::string& key, const UniValue& val_)$/;"	f	class:UniValue
pushKVs	univalue/lib/univalue.cpp	/^bool UniValue::pushKVs(const UniValue& obj)$/;"	f	class:UniValue
push_back	prevector.h	/^    void push_back(const T& value) {$/;"	f	class:prevector
push_back	test/prevector_tests.cpp	/^    void push_back(const T& value) {$/;"	f	class:prevector_tester
push_back	univalue/include/univalue.h	/^    bool push_back(const char *val_) {$/;"	f	class:UniValue
push_back	univalue/include/univalue.h	/^    bool push_back(const std::string& val_) {$/;"	f	class:UniValue
push_back	univalue/include/univalue.h	/^    bool push_back(std::pair<std::string,UniValue> pear) {$/;"	f	class:UniValue
push_back	univalue/lib/univalue.cpp	/^bool UniValue::push_back(const UniValue& val_)$/;"	f	class:UniValue
push_back	univalue/lib/univalue_utffilter.h	/^    void push_back(unsigned char ch)$/;"	f	class:JSONUTF8StringFilter
push_backV	univalue/lib/univalue.cpp	/^bool UniValue::push_backV(const std::vector<UniValue>& vec)$/;"	f	class:UniValue
push_back_u	univalue/lib/univalue_utffilter.h	/^    void push_back_u(unsigned int codepoint)$/;"	f	class:JSONUTF8StringFilter
push_int64	script/script.h	/^    CScript& push_int64(int64_t n)$/;"	f	class:CScript
push_lock	sync.cpp	/^static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)$/;"	f	file:
pwallet	rpc/misc.cpp	/^    CWallet * const pwallet;$/;"	m	class:DescribeAddressVisitor	file:
pwallet	wallet/rpcwallet.cpp	/^    CWallet * const pwallet;$/;"	m	class:Witnessifier	file:
pwallet	wallet/wallet.h	/^    CWallet* pwallet;$/;"	m	class:CReserveKey
pwallet	wallet/wallet.h	/^    const CWallet* pwallet;$/;"	m	class:CWalletTx
pwalletMain	wallet/test/wallet_test_fixture.cpp	/^CWallet *pwalletMain;$/;"	v
pwalletdbEncryption	wallet/wallet.h	/^    CWalletDB *pwalletdbEncryption;$/;"	m	class:CWallet
pzmqNotificationInterface	init.cpp	/^static CZMQNotificationInterface* pzmqNotificationInterface = nullptr;$/;"	v	file:
qstringToBoostPath	qt/guiutil.cpp	/^fs::path qstringToBoostPath(const QString &path)$/;"	f	namespace:GUIUtil
qt_wificoin_qt_LINK	Makefile	/^qt_wificoin_qt_LINK = $(LIBTOOL) $(AM_V_lt) \\$/;"	m
qt_wificoin_qt_OBJECTS	Makefile	/^qt_wificoin_qt_OBJECTS = $(am_qt_wificoin_qt_OBJECTS)$/;"	m
qt_libwificoinqt_a_AR	Makefile	/^qt_libwificoinqt_a_AR = $(AR) $(ARFLAGS)$/;"	m
qt_libwificoinqt_a_LIBADD	Makefile	/^qt_libwificoinqt_a_LIBADD =$/;"	m
qt_libwificoinqt_a_OBJECTS	Makefile	/^qt_libwificoinqt_a_OBJECTS = $(am_qt_libwificoinqt_a_OBJECTS) \\$/;"	m
qt_test_test_wificoin_qt_LINK	Makefile	/^qt_test_test_wificoin_qt_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
qt_test_test_wificoin_qt_OBJECTS	Makefile	/^qt_test_test_wificoin_qt_OBJECTS =  \\$/;"	m
queryHashes	txmempool.cpp	/^void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)$/;"	f	class:CTxMemPool
queue	checkqueue.h	/^    std::vector<T> queue;$/;"	m	class:CCheckQueue
queue	httpserver.cpp	/^    std::deque<std::unique_ptr<WorkItem>> queue;$/;"	m	class:WorkQueue	file:
queue_	leveldb/util/env_posix.cc	/^  BGQueue queue_;$/;"	m	class:leveldb::__anon11::PosixEnv	file:
queuedTx	txmempool.h	/^    indexed_disconnected_transactions queuedTx;$/;"	m	struct:DisconnectedBlockTransactions
quitAction	qt/wificoingui.h	/^    QAction *quitAction;$/;"	m	class:WiFicoinGUI
quit_flag_	leveldb/db/skiplist_test.cc	/^  port::AtomicPointer quit_flag_;$/;"	m	class:leveldb::TestState	file:
r	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static final Lock r = rwl.readLock();$/;"	f	class:NativeSecp256k1	file:
r_from_k	secp256k1/src/tests_exhaustive.c	/^void r_from_k(secp256k1_scalar *r, const secp256k1_ge *group, int k) {$/;"	f
radioListMode	qt/coincontroldialog.cpp	/^void CoinControlDialog::radioListMode(bool checked)$/;"	f	class:CoinControlDialog
radioTreeMode	qt/coincontroldialog.cpp	/^void CoinControlDialog::radioTreeMode(bool checked)$/;"	f	class:CoinControlDialog
rand	leveldb/db/db_bench.cc	/^  Random rand;         \/\/ Has different seeds for different threads$/;"	m	struct:leveldb::__anon18::ThreadState	file:
rand256	random.cpp	/^uint256 FastRandomContext::rand256()$/;"	f	class:FastRandomContext
rand32	random.h	/^    uint32_t rand32() { return randbits(32); }$/;"	f	class:FastRandomContext
rand64	random.h	/^    uint64_t rand64()$/;"	f	class:FastRandomContext
rand_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_	leveldb/doc/bench/db_bench_tree_db.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_cache	test/prevector_tests.cpp	/^    FastRandomContext rand_cache;$/;"	m	class:prevector_tester	file:
rand_seed	test/prevector_tests.cpp	/^    uint256 rand_seed;$/;"	m	class:prevector_tester	file:
randbits	random.h	/^    uint64_t randbits(int bits) {$/;"	f	class:FastRandomContext
randbool	random.h	/^    bool randbool() { return randbits(1); }$/;"	f	class:FastRandomContext
randbytes	random.cpp	/^std::vector<unsigned char> FastRandomContext::randbytes(size_t len)$/;"	f	class:FastRandomContext
random_ber_signature	secp256k1/src/tests.c	/^static void random_ber_signature(unsigned char *sig, size_t *len, int* certainly_der, int* certainly_not_der) {$/;"	f	file:
random_fe	secp256k1/src/tests.c	/^void random_fe(secp256k1_fe *x) {$/;"	f
random_fe	secp256k1/src/tests_exhaustive.c	/^void random_fe(secp256k1_fe *x) {$/;"	f
random_fe_non_square	secp256k1/src/tests.c	/^void random_fe_non_square(secp256k1_fe *ns) {$/;"	f
random_fe_non_zero	secp256k1/src/tests.c	/^void random_fe_non_zero(secp256k1_fe *nz) {$/;"	f
random_fe_test	secp256k1/src/tests.c	/^void random_fe_test(secp256k1_fe *x) {$/;"	f
random_field_element_magnitude	secp256k1/src/tests.c	/^void random_field_element_magnitude(secp256k1_fe *fe) {$/;"	f
random_field_element_test	secp256k1/src/tests.c	/^void random_field_element_test(secp256k1_fe *fe) {$/;"	f
random_group_element_jacobian_test	secp256k1/src/tests.c	/^void random_group_element_jacobian_test(secp256k1_gej *gej, const secp256k1_ge *ge) {$/;"	f
random_group_element_test	secp256k1/src/tests.c	/^void random_group_element_test(secp256k1_ge *ge) {$/;"	f
random_num_negate	secp256k1/src/tests.c	/^void random_num_negate(secp256k1_num *num) {$/;"	f
random_num_order	secp256k1/src/tests.c	/^void random_num_order(secp256k1_num *num) {$/;"	f
random_num_order_test	secp256k1/src/tests.c	/^void random_num_order_test(secp256k1_num *num) {$/;"	f
random_read_counter_	leveldb/db/db_test.cc	/^  AtomicCounter random_read_counter_;$/;"	m	class:leveldb::SpecialEnv	file:
random_scalar_order	secp256k1/src/tests.c	/^void random_scalar_order(secp256k1_scalar *num) {$/;"	f
random_scalar_order_test	secp256k1/src/tests.c	/^void random_scalar_order_test(secp256k1_scalar *num) {$/;"	f
random_sign	secp256k1/src/tests.c	/^void random_sign(secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *key, const secp256k1_scalar *msg, int *recid) {$/;"	f
randomize	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static synchronized boolean randomize(byte[] seed) throws AssertFailException{$/;"	m	class:NativeSecp256k1
randomize_credentials	netbase.h	/^    bool randomize_credentials;$/;"	m	class:proxyType
randrange	random.h	/^    uint64_t randrange(uint64_t range)$/;"	f	class:FastRandomContext
rbegin	prevector.h	/^    const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }$/;"	f	class:prevector
rbegin	prevector.h	/^    reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }$/;"	f	class:prevector
rdbuf	streams.h	/^    CDataStream* rdbuf()         { return this; }$/;"	f	class:CDataStream
rdrand_supported	random.cpp	/^static bool rdrand_supported = false;$/;"	v	file:
read	hash.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CHashVerifier
read	script/wificoinconsensus.cpp	/^    void read(char* pch, size_t nSize)$/;"	f	class:__anon95::TxInputStream
read	streams.h	/^    void read(char *pch, size_t nSize) {$/;"	f	class:CBufferedFile
read	streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CAutoFile
read	streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:CDataStream
read	streams.h	/^    void read(char* pch, size_t nSize)$/;"	f	class:OverrideStream
read	univalue/include/univalue.h	/^    bool read(const std::string& rawStr) {$/;"	f	class:UniValue
read	univalue/lib/univalue_read.cpp	/^bool UniValue::read(const char *raw)$/;"	f	class:UniValue
readData	net.cpp	/^int CNetMessage::readData(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
readHeader	net.cpp	/^int CNetMessage::readHeader(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
readPaymentRequestFromFile	qt/paymentserver.cpp	/^bool PaymentServer::readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request)$/;"	f	class:PaymentServer
readStdin	wificoin-tx.cpp	/^static std::string readStdin()$/;"	f	file:
read_json	test/script_tests.cpp	/^read_json(const std::string& jsondata)$/;"	f
read_stdin	test/test_wificoin_fuzzy.cpp	/^bool read_stdin(std::vector<char> &data) {$/;"	f
readcb	torcontrol.cpp	/^void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)$/;"	f	class:TorControlConnection
reader_	leveldb/db/log_test.cc	/^  Reader* reader_;$/;"	m	class:leveldb::log::LogTest	file:
reading_	leveldb/db/log_test.cc	/^  bool reading_;$/;"	m	class:leveldb::log::LogTest	file:
readoptions	dbwrapper.h	/^    leveldb::ReadOptions readoptions;$/;"	m	class:CDBWrapper
reads_	leveldb/db/db_bench.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
real_vector	test/prevector_tests.cpp	/^    realtype real_vector;$/;"	m	class:prevector_tester	file:
real_vector_alt	test/prevector_tests.cpp	/^    realtype real_vector_alt;$/;"	m	class:prevector_tester	file:
realtype	test/prevector_tests.cpp	/^    typedef std::vector<T> realtype;$/;"	t	class:prevector_tester	file:
reason	policy/fees.h	/^    FeeReason reason = FeeReason::NONE;$/;"	m	struct:FeeCalculation
reasonCommitFailed	qt/walletmodel.h	/^        QString reasonCommitFailed;$/;"	m	struct:WalletModel::SendCoinsReturn
reassignAmounts	qt/walletmodeltransaction.cpp	/^void WalletModelTransaction::reassignAmounts(int nChangePosRet)$/;"	f	class:WalletModelTransaction
rebind	support/allocators/secure.h	/^    struct rebind {$/;"	s	struct:secure_allocator
rebind	support/allocators/zeroafterfree.h	/^    struct rebind {$/;"	s	struct:zero_after_free_allocator
receiveCoinsAction	qt/wificoingui.h	/^    QAction *receiveCoinsAction;$/;"	m	class:WiFicoinGUI
receiveCoinsMenuAction	qt/wificoingui.h	/^    QAction *receiveCoinsMenuAction;$/;"	m	class:WiFicoinGUI
receiveCoinsPage	qt/walletview.h	/^    ReceiveCoinsDialog *receiveCoinsPage;$/;"	m	class:WalletView
recentRejects	net_processing.cpp	/^    std::unique_ptr<CRollingBloomFilter> recentRejects;$/;"	m	namespace:__anon49	file:
recentRequestsTableModel	qt/walletmodel.h	/^    RecentRequestsTableModel *recentRequestsTableModel;$/;"	m	class:WalletModel
recentRequestsView_selectionChanged	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::recentRequestsView_selectionChanged(const QItemSelection &selected, const QItemSelection &deselected)$/;"	f	class:ReceiveCoinsDialog
recipient	qt/recentrequeststablemodel.h	/^    SendCoinsRecipient recipient;$/;"	m	class:RecentRequestEntry
recipient	qt/sendcoinsentry.h	/^    SendCoinsRecipient recipient;$/;"	m	class:SendCoinsEntry
recipient	qt/test/paymentservertests.h	/^    SendCoinsRecipient recipient;$/;"	m	class:RecipientCatcher
recipients	qt/walletmodeltransaction.h	/^    QList<SendCoinsRecipient> recipients;$/;"	m	class:WalletModelTransaction
reconnect	torcontrol.cpp	/^    bool reconnect;$/;"	m	class:TorController	file:
reconnect_cb	torcontrol.cpp	/^void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)$/;"	f	class:TorController
reconnect_ev	torcontrol.cpp	/^    struct event *reconnect_ev;$/;"	m	class:TorController	typeref:struct:TorController::event	file:
reconnect_timeout	torcontrol.cpp	/^    float reconnect_timeout;$/;"	m	class:TorController	file:
reconsiderblock	rpc/blockchain.cpp	/^UniValue reconsiderblock(const JSONRPCRequest& request)$/;"	f
recoverFunc_type	wallet/db.h	/^    typedef bool (*recoverFunc_type)(const std::string& strFile, std::string& out_backup_filename);$/;"	t	class:CDBEnv
recovery_test_nonce_function	secp256k1/src/modules/recovery/tests_impl.h	/^static int recovery_test_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f
redeemscript	test/script_tests.cpp	/^    CScript redeemscript;$/;"	m	class:__anon80::TestBuilder	file:
refcount	pubkey.cpp	/^\/* static *\/ int ECCVerifyHandle::refcount = 0;$/;"	m	class:ECCVerifyHandle	file:
refcount	pubkey.h	/^    static int refcount;$/;"	m	class:ECCVerifyHandle
reference	prevector.h	/^        typedef T& reference;$/;"	t	class:prevector::iterator
reference	prevector.h	/^        typedef T& reference;$/;"	t	class:prevector::reverse_iterator
reference	prevector.h	/^        typedef const T& reference;$/;"	t	class:prevector::const_iterator
reference	prevector.h	/^        typedef const T& reference;$/;"	t	class:prevector::const_reverse_iterator
reference	prevector.h	/^    typedef value_type& reference;$/;"	t	class:prevector
reference	streams.h	/^    typedef vector_type::reference        reference;$/;"	t	class:CDataStream
reference	support/allocators/secure.h	/^    typedef typename base::reference reference;$/;"	t	struct:secure_allocator
reference	support/allocators/zeroafterfree.h	/^    typedef typename base::reference reference;$/;"	t	struct:zero_after_free_allocator
refresh	qt/bantablemodel.cpp	/^void BanTableModel::refresh()$/;"	f	class:BanTableModel
refresh	qt/peertablemodel.cpp	/^void PeerTableModel::refresh()$/;"	f	class:PeerTableModel
refreshAddressTable	qt/addresstablemodel.cpp	/^    void refreshAddressTable()$/;"	f	class:AddressTablePriv
refreshBanlist	qt/bantablemodel.cpp	/^    void refreshBanlist()$/;"	f	class:BanTablePriv
refreshPeers	qt/peertablemodel.cpp	/^    void refreshPeers()$/;"	f	class:PeerTablePriv
refreshWallet	qt/transactiontablemodel.cpp	/^    void refreshWallet()$/;"	f	class:TransactionTablePriv
refs	leveldb/db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::FileMetaData
refs	leveldb/util/cache.cc	/^  uint32_t refs;      \/\/ References, including cache reference, if present.$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
refs_	leveldb/db/memtable.h	/^  int refs_;$/;"	m	class:leveldb::MemTable
refs_	leveldb/db/version_set.h	/^  int refs_;                    \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
refs_	leveldb/helpers/memenv/memenv.cc	/^  int refs_;  \/\/ Protected by refs_mutex_;$/;"	m	class:leveldb::__anon16::FileState	file:
refs_mutex_	leveldb/helpers/memenv/memenv.cc	/^  port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon16::FileState	file:
registerShutdownBlockReason	qt/winshutdownmonitor.cpp	/^void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)$/;"	f	class:WinShutdownMonitor
registerSignalHandler	init.cpp	/^static void registerSignalHandler(int signal, void(*handler)(int))$/;"	f	file:
registers	wificoin-tx.cpp	/^static std::map<std::string,UniValue> registers;$/;"	v	file:
reject	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::reject()$/;"	f	class:ReceiveCoinsDialog
reject	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::reject()$/;"	f	class:SendCoinsDialog
rejects	net_processing.cpp	/^    std::vector<CBlockReject> rejects;$/;"	m	struct:__anon50::CNodeState	file:
release	streams.h	/^    FILE* release()             { FILE* ret = file; file = nullptr; return ret; }$/;"	f	class:CAutoFile
relock	qt/walletmodel.h	/^        mutable bool relock; \/\/ mutable, as it can be set to false by copying$/;"	m	class:WalletModel::UnlockContext
removeAllWallets	qt/wificoingui.cpp	/^void WiFicoinGUI::removeAllWallets()$/;"	f	class:WiFicoinGUI
removeAllWallets	qt/walletframe.cpp	/^void WalletFrame::removeAllWallets()$/;"	f	class:WalletFrame
removeConflicts	txmempool.cpp	/^void CTxMemPool::removeConflicts(const CTransaction &tx)$/;"	f	class:CTxMemPool
removeEntry	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::removeEntry(SendCoinsEntry* entry)$/;"	f	class:SendCoinsDialog
removeEntry	txmempool.h	/^    void removeEntry(indexed_disconnected_transactions::index<insertion_order>::type::iterator entry)$/;"	f	struct:DisconnectedBlockTransactions
removeForBlock	txmempool.cpp	/^void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight)$/;"	f	class:CTxMemPool
removeForBlock	txmempool.h	/^    void removeForBlock(const std::vector<CTransactionRef>& vtx)$/;"	f	struct:DisconnectedBlockTransactions
removeForReorg	txmempool.cpp	/^void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)$/;"	f	class:CTxMemPool
removeRecursive	txmempool.cpp	/^void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)$/;"	f	class:CTxMemPool
removeRows	qt/addresstablemodel.cpp	/^bool AddressTableModel::removeRows(int row, int count, const QModelIndex &parent)$/;"	f	class:AddressTableModel
removeRows	qt/recentrequeststablemodel.cpp	/^bool RecentRequestsTableModel::removeRows(int row, int count, const QModelIndex &parent)$/;"	f	class:RecentRequestsTableModel
removeSpaces	qt/wificoinunits.h	/^    static QString removeSpaces(QString text)$/;"	f	class:WiFicoinUnits
removeTx	policy/fees.cpp	/^bool CBlockPolicyEstimator::removeTx(uint256 hash, bool inBlock)$/;"	f	class:CBlockPolicyEstimator
removeTx	policy/fees.cpp	/^void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex, bool inBlock)$/;"	f	class:TxConfirmStats
removeUnchecked	txmempool.cpp	/^void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)$/;"	f	class:CTxMemPool
removeWallet	qt/walletframe.cpp	/^bool WalletFrame::removeWallet(const QString &name)$/;"	f	class:WalletFrame
remove_prefix	leveldb/include/leveldb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
removeprunedfunds	wallet/rpcdump.cpp	/^UniValue removeprunedfunds(const JSONRPCRequest& request)$/;"	f
rend	prevector.h	/^    const_reverse_iterator rend() const { return const_reverse_iterator(item_ptr(-1)); }$/;"	f	class:prevector
rend	prevector.h	/^    reverse_iterator rend() { return reverse_iterator(item_ptr(-1)); }$/;"	f	class:prevector
rep	leveldb/db/c.cc	/^  Env* rep;$/;"	m	struct:leveldb_env_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	m	struct:leveldb_cache_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	m	struct:leveldb_filelock_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	m	struct:leveldb_iterator_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	m	struct:leveldb_logger_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	m	struct:leveldb_options_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	m	struct:leveldb_randomfile_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	m	struct:leveldb_readoptions_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	m	struct:leveldb_seqfile_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	m	struct:leveldb_snapshot_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	m	struct:leveldb_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	m	struct:leveldb_writablefile_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	m	struct:leveldb_writebatch_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	m	struct:leveldb_writeoptions_t	file:
rep_	leveldb/db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	leveldb/include/leveldb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	leveldb/include/leveldb/table.h	/^  Rep* rep_;$/;"	m	class:leveldb::Table
rep_	leveldb/include/leveldb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	leveldb/include/leveldb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
rep_	leveldb/port/atomic_pointer.h	/^  std::atomic<void*> rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	leveldb/port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	leveldb/port/port_win.h	/^  void * rep_;$/;"	m	class:leveldb::port::AtomicPointer
replySent	httpserver.h	/^    bool replySent;$/;"	m	class:HTTPRequest
reply_handlers	torcontrol.cpp	/^    std::deque<ReplyHandlerCB> reply_handlers;$/;"	m	class:TorControlConnection	file:
reportSslErrors	qt/paymentserver.cpp	/^void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError> &errs)$/;"	f	class:PaymentServer
report_	leveldb/db/log_test.cc	/^  ReportCollector report_;$/;"	m	class:leveldb::log::LogTest	file:
reporter_	leveldb/db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
req	httpserver.cpp	/^    std::unique_ptr<HTTPRequest> req;$/;"	m	class:HTTPWorkItem	file:
req	httpserver.h	/^    struct evhttp_request* req;$/;"	m	class:HTTPRequest	typeref:struct:HTTPRequest::evhttp_request
request	qt/rpcconsole.cpp	/^void RPCExecutor::request(const QString &command)$/;"	f	class:RPCExecutor
requestInitialize	qt/wificoin.cpp	/^void WiFicoinApplication::requestInitialize()$/;"	f	class:WiFicoinApplication
requestShutdown	qt/wificoin.cpp	/^void WiFicoinApplication::requestShutdown()$/;"	f	class:WiFicoinApplication
requestUnlock	qt/walletmodel.cpp	/^WalletModel::UnlockContext WalletModel::requestUnlock()$/;"	f	class:WalletModel
requestedSyncWarningInfo	qt/walletview.cpp	/^void WalletView::requestedSyncWarningInfo()$/;"	f	class:WalletView
requiredSpace	qt/intro.cpp	/^static uint64_t requiredSpace;$/;"	v	file:
requires_seed	random.h	/^    bool requires_seed;$/;"	m	class:FastRandomContext
resendwallettransactions	wallet/rpcwallet.cpp	/^UniValue resendwallettransactions(const JSONRPCRequest& request)$/;"	f
reserve	prevector.h	/^    void reserve(size_type new_capacity) {$/;"	f	class:prevector
reserve	streams.h	/^    void reserve(size_type n)                        { vch.reserve(n + nReadPos); }$/;"	f	class:CDataStream
reserve	test/prevector_tests.cpp	/^    void reserve(Size s) {$/;"	f	class:prevector_tester
reserveScript	script/script.h	/^    CScript reserveScript;$/;"	m	class:CReserveScript
reset	bloom.cpp	/^void CBloomFilter::reset(const unsigned int nNewTweak)$/;"	f	class:CBloomFilter
reset	bloom.cpp	/^void CRollingBloomFilter::reset()$/;"	f	class:CRollingBloomFilter
reset	threadinterrupt.cpp	/^void CThreadInterrupt::reset()$/;"	f	class:CThreadInterrupt
resetBlock	miner.cpp	/^void BlockAssembler::resetBlock()$/;"	f	class:BlockAssembler
resize	prevector.h	/^    void resize(size_type new_size) {$/;"	f	class:prevector
resize	streams.h	/^    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }$/;"	f	class:CDataStream
resize	test/prevector_tests.cpp	/^    void resize(Size s) {$/;"	f	class:prevector_tester
resizeColumn	qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::resizeColumn(int nColumnIndex, int width)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
resizeEvent	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::resizeEvent(QResizeEvent *event)$/;"	f	class:ReceiveCoinsDialog
resizeEvent	qt/rpcconsole.cpp	/^void RPCConsole::resizeEvent(QResizeEvent *event)$/;"	f	class:RPCConsole
resizeEvent	qt/transactionview.cpp	/^void TransactionView::resizeEvent(QResizeEvent* event)$/;"	f	class:TransactionView
resizeInMemoryCounters	policy/fees.cpp	/^void TxConfirmStats::resizeInMemoryCounters(size_t newbuckets) {$/;"	f	class:TxConfirmStats
resolvedAddress	net.h	/^    CService resolvedAddress;$/;"	m	struct:AddedNodeInfo
rest_block	rest.cpp	/^static bool rest_block(HTTPRequest* req,$/;"	f	file:
rest_block_extended	rest.cpp	/^static bool rest_block_extended(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_block_notxdetails	rest.cpp	/^static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_chaininfo	rest.cpp	/^static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_getutxos	rest.cpp	/^static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_headers	rest.cpp	/^static bool rest_headers(HTTPRequest* req,$/;"	f	file:
rest_mempool_contents	rest.cpp	/^static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_mempool_info	rest.cpp	/^static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
rest_tx	rest.cpp	/^static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)$/;"	f	file:
restart_index_	leveldb/table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter	file:
restart_interval	leveldb/table/table_test.cc	/^  int restart_interval;$/;"	m	struct:leveldb::TestArgs	file:
restart_offset_	leveldb/table/block.h	/^  uint32_t restart_offset_;     \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	leveldb/table/block.cc	/^  uint32_t const restarts_;     \/\/ Offset of restart array (list of fixed32)$/;"	m	class:leveldb::Block::Iter	file:
restarts_	leveldb/table/block_builder.h	/^  std::vector<uint32_t> restarts_;    \/\/ Restart points$/;"	m	class:leveldb::BlockBuilder
result	wallet/rpcwallet.cpp	/^    CScriptID result;$/;"	m	class:Witnessifier	file:
result_	leveldb/table/filter_block.h	/^  std::string result_;            \/\/ Filter data computed so far$/;"	m	class:leveldb::FilterBlockBuilder
result_type	miner.h	/^    typedef CTxMemPool::txiter result_type;$/;"	t	struct:modifiedentry_iter
result_type	net.h	/^    typedef bool result_type;$/;"	t	struct:CombinerAll
result_type	txmempool.h	/^    typedef uint256 result_type;$/;"	t	struct:mempoolentry_txid
results	test/checkqueue_tests.cpp	/^    static std::unordered_multiset<size_t> results;$/;"	m	struct:UniqueCheck	file:
results	test/checkqueue_tests.cpp	/^std::unordered_multiset<size_t> UniqueCheck::results;$/;"	m	class:UniqueCheck	file:
resyncing_	leveldb/db/log_reader.h	/^  bool resyncing_;$/;"	m	class:leveldb::log::Reader
retry	secp256k1/src/hash.h	/^    int retry;$/;"	m	struct:__anon62
returnValue	qt/addressbookpage.h	/^    QString returnValue;$/;"	m	class:AddressBookPage
returnValue	qt/wificoin.cpp	/^    int returnValue;$/;"	m	class:WiFicoinApplication	file:
returnedTarget	policy/fees.h	/^    int returnedTarget = 0;$/;"	m	struct:FeeCalculation
returned_partial_	leveldb/db/log_test.cc	/^    bool returned_partial_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
reuse_logs	leveldb/include/leveldb/options.h	/^  bool reuse_logs;$/;"	m	struct:leveldb::Options
reverse_compare	leveldb/table/table_test.cc	/^  bool reverse_compare;$/;"	m	struct:leveldb::TestArgs	file:
reverse_iterate	reverse_iterator.h	/^reverse_range<T> reverse_iterate(T &x)$/;"	f
reverse_iterator	prevector.h	/^        reverse_iterator(T* ptr_) : ptr(ptr_) {}$/;"	f	class:prevector::reverse_iterator
reverse_iterator	prevector.h	/^    class reverse_iterator {$/;"	c	class:prevector
reverse_iterator	streams.h	/^    typedef vector_type::reverse_iterator reverse_iterator;$/;"	t	class:CDataStream
reverse_key_comparator	leveldb/table/table_test.cc	/^static ReverseKeyComparator reverse_key_comparator;$/;"	m	namespace:leveldb	file:
reverse_lock	reverselock.h	/^    explicit reverse_lock(Lock& _lock) : lock(_lock) {$/;"	f	class:reverse_lock
reverse_lock	reverselock.h	/^class reverse_lock$/;"	c
reverse_range	reverse_iterator.h	/^    reverse_range(T &x) : m_x(x) {}$/;"	f	class:reverse_range
reverse_range	reverse_iterator.h	/^class reverse_range$/;"	c
rf	rest.cpp	/^    enum RetFormat rf;$/;"	m	struct:__anon5	typeref:enum:__anon5::RetFormat	file:
rf_names	rest.cpp	/^} rf_names[] = {$/;"	v	typeref:struct:__anon5	file:
right	memusage.h	/^    void* right;$/;"	m	struct:memusage::stl_tree_node
ripemd160	crypto/ripemd160.cpp	/^namespace ripemd160$/;"	n	namespace:__anon89	file:
rk	crypto/ctaes/ctaes.h	/^    AES_state rk[11];$/;"	m	struct:__anon84
rk	crypto/ctaes/ctaes.h	/^    AES_state rk[13];$/;"	m	struct:__anon85
rk	crypto/ctaes/ctaes.h	/^    AES_state rk[15];$/;"	m	struct:__anon86
rmap	limitedmap.h	/^    std::multimap<V, iterator> rmap;$/;"	m	class:limitedmap
rmap_iterator	limitedmap.h	/^    typedef typename std::multimap<V, iterator>::iterator rmap_iterator;$/;"	t	class:limitedmap
rnd_	leveldb/db/db_iter.cc	/^  Random rnd_;$/;"	m	class:leveldb::__anon20::DBIter	file:
rnd_	leveldb/db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
rng	random.h	/^    ChaCha20 rng;$/;"	m	class:FastRandomContext
rng_counter	random.cpp	/^static uint64_t rng_counter = 0;$/;"	v	file:
rng_state	random.cpp	/^static unsigned char rng_state[32] = {0};$/;"	v	file:
rol	crypto/ripemd160.cpp	/^uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32 - i)); }$/;"	f	namespace:__anon89::ripemd160
role	qt/csvmodelwriter.h	/^        int role;$/;"	m	struct:CSVModelWriter::Column
role	qt/qvaluecombobox.h	/^    int role;$/;"	m	class:QValueComboBox
rollingMinimumFeeRate	txmempool.h	/^    mutable double rollingMinimumFeeRate; \/\/!< minimum fee to get into the pool, decreases exponentially$/;"	m	class:CTxMemPool
root	test/coins_tests.cpp	/^    CCoinsView root;$/;"	m	class:SingleEntryCacheTest	file:
rotl32	crypto/chacha20.cpp	/^constexpr static inline uint32_t rotl32(uint32_t v, int c) { return (v << c) | (v >> (32 - c)); }$/;"	f	file:
round	policy/fees.cpp	/^CAmount FeeFilterRounder::round(CAmount currentMinFee)$/;"	f	class:FeeFilterRounder
rowCount	qt/addresstablemodel.cpp	/^int AddressTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:AddressTableModel
rowCount	qt/bantablemodel.cpp	/^int BanTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:BanTableModel
rowCount	qt/wificoinunits.cpp	/^int WiFicoinUnits::rowCount(const QModelIndex &parent) const$/;"	f	class:WiFicoinUnits
rowCount	qt/optionsmodel.cpp	/^int OptionsModel::rowCount(const QModelIndex & parent) const$/;"	f	class:OptionsModel
rowCount	qt/peertablemodel.cpp	/^int PeerTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:PeerTableModel
rowCount	qt/recentrequeststablemodel.cpp	/^int RecentRequestsTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:RecentRequestsTableModel
rowCount	qt/transactionfilterproxy.cpp	/^int TransactionFilterProxy::rowCount(const QModelIndex &parent) const$/;"	f	class:TransactionFilterProxy
rowCount	qt/transactiontablemodel.cpp	/^int TransactionTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
rpcConsole	qt/wificoingui.h	/^    RPCConsole *rpcConsole;$/;"	m	class:WiFicoinGUI
rpcCvtTable	rpc/client.cpp	/^static CRPCConvertTable rpcCvtTable;$/;"	v	file:
rpcNestedTest_rpc	qt/test/rpcnestedtests.cpp	/^static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)$/;"	f	file:
rpcNestedTests	qt/test/rpcnestedtests.cpp	/^void RPCNestedTests::rpcNestedTests()$/;"	f	class:RPCNestedTests
rpcTimerInterface	qt/rpcconsole.h	/^    RPCTimerInterface *rpcTimerInterface;$/;"	m	class:RPCConsole
rpc_allow_subnets	httpserver.cpp	/^static std::vector<CSubNet> rpc_allow_subnets;$/;"	v	file:
rpcfn_type	rpc/server.h	/^typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);$/;"	t
rtrim	univalue/test/unitester.cpp	/^static std::string rtrim(std::string s)$/;"	f	file:
runCommand	util.cpp	/^void runCommand(const std::string& strCommand)$/;"	f
run_benchmark	crypto/ctaes/bench.c	/^static void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {$/;"	f	file:
run_benchmark	secp256k1/src/bench.h	/^void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {$/;"	f
run_context_tests	secp256k1/src/tests.c	/^void run_context_tests(void) {$/;"	f
run_ec_combine	secp256k1/src/tests.c	/^void run_ec_combine(void) {$/;"	f
run_ec_pubkey_parse_test	secp256k1/src/tests.c	/^void run_ec_pubkey_parse_test(void) {$/;"	f
run_ecdh_tests	secp256k1/src/modules/ecdh/tests_impl.h	/^void run_ecdh_tests(void) {$/;"	f
run_ecdsa_der_parse	secp256k1/src/tests.c	/^void run_ecdsa_der_parse(void) {$/;"	f
run_ecdsa_edge_cases	secp256k1/src/tests.c	/^void run_ecdsa_edge_cases(void) {$/;"	f
run_ecdsa_end_to_end	secp256k1/src/tests.c	/^void run_ecdsa_end_to_end(void) {$/;"	f
run_ecdsa_openssl	secp256k1/src/tests.c	/^void run_ecdsa_openssl(void) {$/;"	f
run_ecdsa_sign_verify	secp256k1/src/tests.c	/^void run_ecdsa_sign_verify(void) {$/;"	f
run_eckey_edge_case_test	secp256k1/src/tests.c	/^void run_eckey_edge_case_test(void) {$/;"	f
run_ecmult_chain	secp256k1/src/tests.c	/^void run_ecmult_chain(void) {$/;"	f
run_ecmult_const_tests	secp256k1/src/tests.c	/^void run_ecmult_const_tests(void) {$/;"	f
run_ecmult_constants	secp256k1/src/tests.c	/^void run_ecmult_constants(void) {$/;"	f
run_ecmult_gen_blind	secp256k1/src/tests.c	/^void run_ecmult_gen_blind(void) {$/;"	f
run_endomorphism_tests	secp256k1/src/tests.c	/^void run_endomorphism_tests(void) {$/;"	f
run_field_convert	secp256k1/src/tests.c	/^void run_field_convert(void) {$/;"	f
run_field_inv	secp256k1/src/tests.c	/^void run_field_inv(void) {$/;"	f
run_field_inv_all_var	secp256k1/src/tests.c	/^void run_field_inv_all_var(void) {$/;"	f
run_field_inv_var	secp256k1/src/tests.c	/^void run_field_inv_var(void) {$/;"	f
run_field_misc	secp256k1/src/tests.c	/^void run_field_misc(void) {$/;"	f
run_ge	secp256k1/src/tests.c	/^void run_ge(void) {$/;"	f
run_group_decompress	secp256k1/src/tests.c	/^void run_group_decompress(void) {$/;"	f
run_hmac_sha256_tests	secp256k1/src/tests.c	/^void run_hmac_sha256_tests(void) {$/;"	f
run_num_smalltests	secp256k1/src/tests.c	/^void run_num_smalltests(void) {$/;"	f
run_point_times_order	secp256k1/src/tests.c	/^void run_point_times_order(void) {$/;"	f
run_rand_bits	secp256k1/src/tests.c	/^void run_rand_bits(void) {$/;"	f
run_rand_int	secp256k1/src/tests.c	/^void run_rand_int(void) {$/;"	f
run_random_pubkeys	secp256k1/src/tests.c	/^void run_random_pubkeys(void) {$/;"	f
run_recovery_tests	secp256k1/src/modules/recovery/tests_impl.h	/^void run_recovery_tests(void) {$/;"	f
run_rfc6979_hmac_sha256_tests	secp256k1/src/tests.c	/^void run_rfc6979_hmac_sha256_tests(void) {$/;"	f
run_scalar_tests	secp256k1/src/tests.c	/^void run_scalar_tests(void) {$/;"	f
run_sha256_tests	secp256k1/src/tests.c	/^void run_sha256_tests(void) {$/;"	f
run_sqr	secp256k1/src/tests.c	/^void run_sqr(void) {$/;"	f
run_sqrt	secp256k1/src/tests.c	/^void run_sqrt(void) {$/;"	f
run_wnaf	secp256k1/src/tests.c	/^void run_wnaf(void) {$/;"	f
running	httpserver.cpp	/^    bool running;$/;"	m	class:WorkQueue	file:
runtest	univalue/test/unitester.cpp	/^static void runtest(string filename, const string& jdata)$/;"	f	file:
runtest_file	univalue/test/unitester.cpp	/^static void runtest_file(const char *filename_)$/;"	f	file:
rwl	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();$/;"	f	class:NativeSecp256k1	file:
s	crypto/ripemd160.h	/^    uint32_t s[5];$/;"	m	class:CRIPEMD160
s	crypto/sha1.h	/^    uint32_t s[5];$/;"	m	class:CSHA1
s	crypto/sha256.h	/^    uint32_t s[8];$/;"	m	class:CSHA256
s	crypto/sha512.h	/^    uint64_t s[8];$/;"	m	class:CSHA512
s	secp256k1/src/hash.h	/^    uint32_t s[8];$/;"	m	struct:__anon60
sanity_test_fdelt	compat/glibc_sanity.cpp	/^bool sanity_test_fdelt()$/;"	f	namespace:__anon4
sanity_test_list	compat/glibcxx_sanity.cpp	/^bool sanity_test_list(unsigned int size)$/;"	f	namespace:__anon3
sanity_test_memcpy	compat/glibc_sanity.cpp	/^bool sanity_test_memcpy()$/;"	f	namespace:__anon4
sanity_test_range_fmt	compat/glibcxx_sanity.cpp	/^bool sanity_test_range_fmt()$/;"	f
sanity_test_widen	compat/glibcxx_sanity.cpp	/^bool sanity_test_widen(char testchar)$/;"	f	namespace:__anon3
saveCurrentRow	qt/editaddressdialog.cpp	/^bool EditAddressDialog::saveCurrentRow()$/;"	f	class:EditAddressDialog
saveImage	qt/receiverequestdialog.cpp	/^void QRImageWidget::saveImage()$/;"	f	class:QRImageWidget
saveReceiveRequest	qt/walletmodel.cpp	/^bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest)$/;"	f	class:WalletModel
saveURIs	qt/paymentserver.h	/^    bool saveURIs;                      \/\/ true during startup$/;"	m	class:PaymentServer
savedPaymentRequests	qt/paymentserver.cpp	/^static QList<QString> savedPaymentRequests;$/;"	v	file:
saved_key_	leveldb/db/db_iter.cc	/^  std::string saved_key_;     \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon20::DBIter	file:
saved_value_	leveldb/db/db_iter.cc	/^  std::string saved_value_;   \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon20::DBIter	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	secp256k1/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	univalue/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scalar	secp256k1/src/bench_ecdh.c	/^    unsigned char scalar[32];$/;"	m	struct:__anon59	file:
scalar_test	secp256k1/src/tests.c	/^void scalar_test(void) {$/;"	f
scalar_x	secp256k1/src/bench_internal.c	/^    secp256k1_scalar scalar_x, scalar_y;$/;"	m	struct:__anon66	file:
scalar_y	secp256k1/src/bench_internal.c	/^    secp256k1_scalar scalar_x, scalar_y;$/;"	m	struct:__anon66	file:
scale	policy/fees.cpp	/^    unsigned int scale;$/;"	m	class:TxConfirmStats	file:
scale	policy/fees.h	/^    unsigned int scale = 0;$/;"	m	struct:EstimationResult
schedule	scheduler.cpp	/^void CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)$/;"	f	class:CScheduler
scheduleEvery	scheduler.cpp	/^void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaMilliSeconds)$/;"	f	class:CScheduler
scheduleFromNow	scheduler.cpp	/^void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaMilliSeconds)$/;"	f	class:CScheduler
scheduler	qt/wificoin.cpp	/^    CScheduler scheduler;$/;"	m	class:WiFicoinCore	file:
scheduler	test/test_wificoin.h	/^    CScheduler scheduler;$/;"	m	struct:TestingSetup
scopeId	netaddress.h	/^        uint32_t scopeId; \/\/ for scoped\/link-local ipv6 addresses$/;"	m	class:CNetAddr
screenWidth	util.cpp	/^static const int screenWidth = 79;$/;"	v	file:
script	compressor.h	/^    CScript &script;$/;"	m	class:CScriptCompressor
script	script/sign.cpp	/^    std::vector<valtype> script;$/;"	m	struct:__anon102::Stacks	file:
script	script/standard.cpp	/^    CScript *script;$/;"	m	class:__anon104::CScriptVisitor	file:
script	test/script_tests.cpp	/^    CScript script;$/;"	m	class:__anon80::TestBuilder	file:
scriptCode	script/interpreter.cpp	/^    const CScript& scriptCode; \/\/!< output script being consumed$/;"	m	class:__anon99::CTransactionSignatureSerializer	file:
scriptError	test/script_tests.cpp	/^    int scriptError;$/;"	m	class:__anon80::TestBuilder	file:
scriptExecutionCache	validation.cpp	/^static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache;$/;"	v	file:
scriptPubKey	primitives/transaction.h	/^    CScript scriptPubKey;$/;"	m	class:CTxOut
scriptPubKey	validation.h	/^    CScript scriptPubKey;$/;"	m	class:CScriptCheck
scriptPubKey	wallet/wallet.h	/^    CScript scriptPubKey;$/;"	m	struct:CRecipient
scriptSig	primitives/transaction.h	/^    CScript scriptSig;$/;"	m	class:CTxIn
scriptSig	script/sign.h	/^    CScript scriptSig;$/;"	m	struct:SignatureData
scriptWitness	primitives/transaction.h	/^    CScriptWitness scriptWitness; \/\/! Only serialized through CTransaction$/;"	m	class:CTxIn
scriptWitness	script/sign.h	/^    CScriptWitness scriptWitness;$/;"	m	struct:SignatureData
scriptWitness	test/script_tests.cpp	/^    CScriptWitness scriptWitness;$/;"	m	class:__anon80::TestBuilder	file:
script_errors	test/script_tests.cpp	/^static ScriptErrorDesc script_errors[]={$/;"	v	file:
script_tests	test/data/script_tests.json.h	/^static unsigned const char script_tests[] = {$/;"	m	namespace:json_tests
scriptnum10_error	test/scriptnum10.h	/^    explicit scriptnum10_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:scriptnum10_error
scriptnum10_error	test/scriptnum10.h	/^class scriptnum10_error : public std::runtime_error$/;"	c
scriptnum_error	script/script.h	/^    explicit scriptnum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:scriptnum_error
scriptnum_error	script/script.h	/^class scriptnum_error : public std::runtime_error$/;"	c
scrollToEnd	qt/rpcconsole.cpp	/^void RPCConsole::scrollToEnd()$/;"	f	class:RPCConsole
secDelay	qt/sendcoinsdialog.h	/^    int secDelay;$/;"	m	class:SendConfirmationDialog
secKeyVerify	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static boolean secKeyVerify(byte[] seckey) {$/;"	m	class:NativeSecp256k1
secondToLastColumnIndex	qt/guiutil.h	/^            int secondToLastColumnIndex;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
seconds_	leveldb/db/db_bench.cc	/^  double seconds_;$/;"	m	class:leveldb::__anon18::Stats	file:
secp256k1_callback	secp256k1/src/util.h	/^} secp256k1_callback;$/;"	t	typeref:struct:__anon64
secp256k1_callback_call	secp256k1/src/util.h	/^static SECP256K1_INLINE void secp256k1_callback_call(const secp256k1_callback * const cb, const char * const text) {$/;"	f
secp256k1_context	secp256k1/include/secp256k1.h	/^typedef struct secp256k1_context_struct secp256k1_context;$/;"	t	typeref:struct:secp256k1_context_struct
secp256k1_context_clone	secp256k1/src/secp256k1.c	/^secp256k1_context* secp256k1_context_clone(const secp256k1_context* ctx) {$/;"	f
secp256k1_context_create	secp256k1/src/secp256k1.c	/^secp256k1_context* secp256k1_context_create(unsigned int flags) {$/;"	f
secp256k1_context_destroy	secp256k1/src/secp256k1.c	/^void secp256k1_context_destroy(secp256k1_context* ctx) {$/;"	f
secp256k1_context_randomize	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native int secp256k1_context_randomize(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_context_randomize	secp256k1/src/secp256k1.c	/^int secp256k1_context_randomize(secp256k1_context* ctx, const unsigned char *seed32) {$/;"	f
secp256k1_context_set_error_callback	secp256k1/src/secp256k1.c	/^void secp256k1_context_set_error_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {$/;"	f
secp256k1_context_set_illegal_callback	secp256k1/src/secp256k1.c	/^void secp256k1_context_set_illegal_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {$/;"	f
secp256k1_context_sign	key.cpp	/^static secp256k1_context* secp256k1_context_sign = nullptr;$/;"	v	file:
secp256k1_context_struct	secp256k1/src/secp256k1.c	/^struct secp256k1_context_struct {$/;"	s	file:
secp256k1_context_verify	pubkey.cpp	/^secp256k1_context* secp256k1_context_verify = nullptr;$/;"	m	namespace:__anon92	file:
secp256k1_ctx_clone	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native long secp256k1_ctx_clone(long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_der_parse_integer	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_der_parse_integer(secp256k1_scalar *r, const unsigned char **sig, const unsigned char *sigend) {$/;"	f
secp256k1_der_read_len	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned char *sigend) {$/;"	f
secp256k1_destroy_context	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native void secp256k1_destroy_context(long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_privkey_negate	secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_negate(const secp256k1_context* ctx, unsigned char *seckey) {$/;"	f
secp256k1_ec_privkey_tweak_add	secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_tweak_add(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_privkey_tweak_mul	secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_tweak_mul(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_combine	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *pubnonce, const secp256k1_pubkey * const *pubnonces, size_t n) {$/;"	f
secp256k1_ec_pubkey_create	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ec_pubkey_create(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_pubkey_create	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_create(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *seckey) {$/;"	f
secp256k1_ec_pubkey_negate	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_negate(const secp256k1_context* ctx, secp256k1_pubkey *pubkey) {$/;"	f
secp256k1_ec_pubkey_parse	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ec_pubkey_parse(ByteBuffer byteBuff, long context, int inputLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_pubkey_parse	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_parse(const secp256k1_context* ctx, secp256k1_pubkey* pubkey, const unsigned char *input, size_t inputlen) {$/;"	f
secp256k1_ec_pubkey_serialize	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_serialize(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_pubkey* pubkey, unsigned int flags) {$/;"	f
secp256k1_ec_pubkey_tweak_add	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_tweak_add(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_tweak_mul	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_tweak_mul(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_seckey_verify	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native int secp256k1_ec_seckey_verify(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ec_seckey_verify	secp256k1/src/secp256k1.c	/^int secp256k1_ec_seckey_verify(const secp256k1_context* ctx, const unsigned char *seckey) {$/;"	f
secp256k1_ecdh	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ecdh(ByteBuffer byteBuff, long context, int inputLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdh	secp256k1/src/modules/ecdh/main_impl.h	/^int secp256k1_ecdh(const secp256k1_context* ctx, unsigned char *result, const secp256k1_pubkey *point, const unsigned char *scalar) {$/;"	f
secp256k1_ecdsa_const_order_as_fe	secp256k1/src/ecdsa_impl.h	/^static const secp256k1_fe secp256k1_ecdsa_const_order_as_fe = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_const_p_minus_order	secp256k1/src/ecdsa_impl.h	/^static const secp256k1_fe secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_recover	secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32) {$/;"	f
secp256k1_ecdsa_recoverable_signature	secp256k1/include/secp256k1_recovery.h	/^} secp256k1_ecdsa_recoverable_signature;$/;"	t	typeref:struct:__anon53
secp256k1_ecdsa_recoverable_signature_convert	secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recoverable_signature_convert(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const secp256k1_ecdsa_recoverable_signature* sigin) {$/;"	f
secp256k1_ecdsa_recoverable_signature_load	secp256k1/src/modules/recovery/main_impl.h	/^static void secp256k1_ecdsa_recoverable_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, int* recid, const secp256k1_ecdsa_recoverable_signature* sig) {$/;"	f
secp256k1_ecdsa_recoverable_signature_parse_compact	secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recoverable_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature* sig, const unsigned char *input64, int recid) {$/;"	f
secp256k1_ecdsa_recoverable_signature_save	secp256k1/src/modules/recovery/main_impl.h	/^static void secp256k1_ecdsa_recoverable_signature_save(secp256k1_ecdsa_recoverable_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s, int recid) {$/;"	f
secp256k1_ecdsa_recoverable_signature_serialize_compact	secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_recoverable_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, int *recid, const secp256k1_ecdsa_recoverable_signature* sig) {$/;"	f
secp256k1_ecdsa_sig_parse	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_parse(secp256k1_scalar *rr, secp256k1_scalar *rs, const unsigned char *sig, size_t size) {$/;"	f
secp256k1_ecdsa_sig_recover	secp256k1/src/modules/recovery/main_impl.h	/^static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar* sigs, secp256k1_ge *pubkey, const secp256k1_scalar *message, int recid) {$/;"	f
secp256k1_ecdsa_sig_serialize	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const secp256k1_scalar* ar, const secp256k1_scalar* as) {$/;"	f
secp256k1_ecdsa_sig_sign	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid) {$/;"	f
secp256k1_ecdsa_sig_verify	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar *sigs, const secp256k1_ge *pubkey, const secp256k1_scalar *message) {$/;"	f
secp256k1_ecdsa_sign	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_ecdsa_sign(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdsa_sign	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {$/;"	f
secp256k1_ecdsa_sign_recoverable	secp256k1/src/modules/recovery/main_impl.h	/^int secp256k1_ecdsa_sign_recoverable(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {$/;"	f
secp256k1_ecdsa_signature	secp256k1/include/secp256k1.h	/^} secp256k1_ecdsa_signature;$/;"	t	typeref:struct:__anon52
secp256k1_ecdsa_signature_load	secp256k1/src/secp256k1.c	/^static void secp256k1_ecdsa_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_ecdsa_signature* sig) {$/;"	f	file:
secp256k1_ecdsa_signature_normalize	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_normalize(const secp256k1_context* ctx, secp256k1_ecdsa_signature *sigout, const secp256k1_ecdsa_signature *sigin) {$/;"	f
secp256k1_ecdsa_signature_parse_compact	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input64) {$/;"	f
secp256k1_ecdsa_signature_parse_der	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_parse_der(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f
secp256k1_ecdsa_signature_save	secp256k1/src/secp256k1.c	/^static void secp256k1_ecdsa_signature_save(secp256k1_ecdsa_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s) {$/;"	f	file:
secp256k1_ecdsa_signature_serialize_compact	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, const secp256k1_ecdsa_signature* sig) {$/;"	f
secp256k1_ecdsa_signature_serialize_der	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_signature_serialize_der(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_ecdsa_signature* sig) {$/;"	f
secp256k1_ecdsa_verify	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native int secp256k1_ecdsa_verify(ByteBuffer byteBuff, long context, int sigLen, int pubLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdsa_verify	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_verify(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *msg32, const secp256k1_pubkey *pubkey) {$/;"	f
secp256k1_eckey_privkey_tweak_add	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_privkey_tweak_mul	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_pubkey_parse	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {$/;"	f
secp256k1_eckey_pubkey_serialize	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *pub, size_t *size, int compressed) {$/;"	f
secp256k1_eckey_pubkey_tweak_add	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_pubkey_tweak_mul	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_ecmult	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {$/;"	f
secp256k1_ecmult_const	secp256k1/src/ecmult_const_impl.h	/^static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *scalar) {$/;"	f
secp256k1_ecmult_context	secp256k1/src/ecmult.h	/^} secp256k1_ecmult_context;$/;"	t	typeref:struct:__anon58
secp256k1_ecmult_context_build	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {$/;"	f
secp256k1_ecmult_context_clear	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_context_clone	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,$/;"	f
secp256k1_ecmult_context_init	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_context_is_built	secp256k1/src/ecmult_impl.h	/^static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_gen	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {$/;"	f
secp256k1_ecmult_gen_blind	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32) {$/;"	f
secp256k1_ecmult_gen_context	secp256k1/src/ecmult_gen.h	/^} secp256k1_ecmult_gen_context;$/;"	t	typeref:struct:__anon54
secp256k1_ecmult_gen_context_build	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context *ctx, const secp256k1_callback* cb) {$/;"	f
secp256k1_ecmult_gen_context_clear	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {$/;"	f
secp256k1_ecmult_gen_context_clone	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context *dst,$/;"	f
secp256k1_ecmult_gen_context_init	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context *ctx) {$/;"	f
secp256k1_ecmult_gen_context_is_built	secp256k1/src/ecmult_gen_impl.h	/^static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context* ctx) {$/;"	f
secp256k1_ecmult_odd_multiples_table	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a) {$/;"	f
secp256k1_ecmult_odd_multiples_table_globalz_windowa	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {$/;"	f
secp256k1_ecmult_odd_multiples_table_storage_var	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table_storage_var(int n, secp256k1_ge_storage *pre, const secp256k1_gej *a, const secp256k1_callback *cb) {$/;"	f
secp256k1_ecmult_static_context	secp256k1/src/ecmult_static_context.h	/^static const secp256k1_ge_storage secp256k1_ecmult_static_context[64][16] = {$/;"	v
secp256k1_ecmult_wnaf	secp256k1/src/ecmult_impl.h	/^static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {$/;"	f
secp256k1_fe	secp256k1/src/field_10x26.h	/^} secp256k1_fe;$/;"	t	typeref:struct:__anon73
secp256k1_fe	secp256k1/src/field_5x52.h	/^} secp256k1_fe;$/;"	t	typeref:struct:__anon56
secp256k1_fe_add	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_add	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_clear	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {$/;"	f
secp256k1_fe_clear	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {$/;"	f
secp256k1_fe_cmov	secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {$/;"	f
secp256k1_fe_cmov	secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {$/;"	f
secp256k1_fe_cmp_var	secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_cmp_var	secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_equal	secp256k1/src/field_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_equal_var	secp256k1/src/field_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_from_storage	secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {$/;"	f
secp256k1_fe_from_storage	secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {$/;"	f
secp256k1_fe_get_b32	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_get_b32	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_inv	secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_inv_all_var	secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv_all_var(secp256k1_fe *r, const secp256k1_fe *a, size_t len) {$/;"	f
secp256k1_fe_inv_var	secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_odd	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_odd	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_quad_var	secp256k1/src/field_impl.h	/^static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_zero	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_zero	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_mul	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	secp256k1/src/asm/field_10x26_arm.s	/^secp256k1_fe_mul_inner:$/;"	l
secp256k1_fe_mul_inner	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t *a, const uint32_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	secp256k1/src/field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	secp256k1/src/field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_int	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_mul_int	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_negate	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {$/;"	f
secp256k1_fe_negate	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {$/;"	f
secp256k1_fe_normalize	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_var	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_var	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_weak	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_weak	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_set_b32	secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_b32	secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_int	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_set_int	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_sqr	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_sqr	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_sqr_inner	secp256k1/src/asm/field_10x26_arm.s	/^secp256k1_fe_sqr_inner:$/;"	l
secp256k1_fe_sqr_inner	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t *a) {$/;"	f
secp256k1_fe_sqr_inner	secp256k1/src/field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqr_inner	secp256k1/src/field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqrt	secp256k1/src/field_impl.h	/^static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_storage	secp256k1/src/field_10x26.h	/^} secp256k1_fe_storage;$/;"	t	typeref:struct:__anon74
secp256k1_fe_storage	secp256k1/src/field_5x52.h	/^} secp256k1_fe_storage;$/;"	t	typeref:struct:__anon57
secp256k1_fe_storage_cmov	secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {$/;"	f
secp256k1_fe_storage_cmov	secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {$/;"	f
secp256k1_fe_to_storage	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_to_storage	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_verify	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_verify	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe *a) {$/;"	f
secp256k1_ge	secp256k1/src/group.h	/^} secp256k1_ge;$/;"	t	typeref:struct:__anon70
secp256k1_ge_clear	secp256k1/src/group_impl.h	/^static void secp256k1_ge_clear(secp256k1_ge *r) {$/;"	f
secp256k1_ge_const_g	secp256k1/src/group_impl.h	/^const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST($/;"	v
secp256k1_ge_const_g	secp256k1/src/group_impl.h	/^static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST($/;"	v
secp256k1_ge_from_storage	secp256k1/src/group_impl.h	/^static void secp256k1_ge_from_storage(secp256k1_ge *r, const secp256k1_ge_storage *a) {$/;"	f
secp256k1_ge_globalz_set_table_gej	secp256k1/src/group_impl.h	/^static void secp256k1_ge_globalz_set_table_gej(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr) {$/;"	f
secp256k1_ge_is_infinity	secp256k1/src/group_impl.h	/^static int secp256k1_ge_is_infinity(const secp256k1_ge *a) {$/;"	f
secp256k1_ge_is_valid_var	secp256k1/src/group_impl.h	/^static int secp256k1_ge_is_valid_var(const secp256k1_ge *a) {$/;"	f
secp256k1_ge_mul_lambda	secp256k1/src/group_impl.h	/^static void secp256k1_ge_mul_lambda(secp256k1_ge *r, const secp256k1_ge *a) {$/;"	f
secp256k1_ge_neg	secp256k1/src/group_impl.h	/^static void secp256k1_ge_neg(secp256k1_ge *r, const secp256k1_ge *a) {$/;"	f
secp256k1_ge_set_all_gej_var	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_all_gej_var(secp256k1_ge *r, const secp256k1_gej *a, size_t len, const secp256k1_callback *cb) {$/;"	f
secp256k1_ge_set_gej	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a) {$/;"	f
secp256k1_ge_set_gej_var	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {$/;"	f
secp256k1_ge_set_gej_zinv	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej_zinv(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zi) {$/;"	f
secp256k1_ge_set_table_gej_var	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_table_gej_var(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr, size_t len) {$/;"	f
secp256k1_ge_set_xo_var	secp256k1/src/group_impl.h	/^static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {$/;"	f
secp256k1_ge_set_xquad	secp256k1/src/group_impl.h	/^static int secp256k1_ge_set_xquad(secp256k1_ge *r, const secp256k1_fe *x) {$/;"	f
secp256k1_ge_set_xy	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y) {$/;"	f
secp256k1_ge_storage	secp256k1/src/group.h	/^} secp256k1_ge_storage;$/;"	t	typeref:struct:__anon72
secp256k1_ge_storage_cmov	secp256k1/src/group_impl.h	/^static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag) {$/;"	f
secp256k1_ge_to_storage	secp256k1/src/group_impl.h	/^static void secp256k1_ge_to_storage(secp256k1_ge_storage *r, const secp256k1_ge *a) {$/;"	f
secp256k1_gej	secp256k1/src/group.h	/^} secp256k1_gej;$/;"	t	typeref:struct:__anon71
secp256k1_gej_add_ge	secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b) {$/;"	f
secp256k1_gej_add_ge_var	secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_ge_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_add_var	secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_add_zinv_var	secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_zinv_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv) {$/;"	f
secp256k1_gej_clear	secp256k1/src/group_impl.h	/^static void secp256k1_gej_clear(secp256k1_gej *r) {$/;"	f
secp256k1_gej_double_nonzero	secp256k1/src/group_impl.h	/^static SECP256K1_INLINE void secp256k1_gej_double_nonzero(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_double_var	secp256k1/src/group_impl.h	/^static void secp256k1_gej_double_var(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_eq_x_var	secp256k1/src/group_impl.h	/^static int secp256k1_gej_eq_x_var(const secp256k1_fe *x, const secp256k1_gej *a) {$/;"	f
secp256k1_gej_has_quad_y_var	secp256k1/src/group_impl.h	/^static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_is_infinity	secp256k1/src/group_impl.h	/^static int secp256k1_gej_is_infinity(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_is_valid_var	secp256k1/src/group_impl.h	/^static int secp256k1_gej_is_valid_var(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_neg	secp256k1/src/group_impl.h	/^static void secp256k1_gej_neg(secp256k1_gej *r, const secp256k1_gej *a) {$/;"	f
secp256k1_gej_rescale	secp256k1/src/group_impl.h	/^static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *s) {$/;"	f
secp256k1_gej_set_ge	secp256k1/src/group_impl.h	/^static void secp256k1_gej_set_ge(secp256k1_gej *r, const secp256k1_ge *a) {$/;"	f
secp256k1_gej_set_infinity	secp256k1/src/group_impl.h	/^static void secp256k1_gej_set_infinity(secp256k1_gej *r) {$/;"	f
secp256k1_hmac_sha256_finalize	secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_hmac_sha256_initialize	secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {$/;"	f
secp256k1_hmac_sha256_t	secp256k1/src/hash.h	/^} secp256k1_hmac_sha256_t;$/;"	t	typeref:struct:__anon61
secp256k1_hmac_sha256_write	secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {$/;"	f
secp256k1_init_context	secp256k1/src/java/org/wificoin/Secp256k1Context.java	/^  private static native long secp256k1_init_context();$/;"	m	class:Secp256k1Context	file:
secp256k1_nonce_function	secp256k1/include/secp256k1.h	/^typedef int (*secp256k1_nonce_function)($/;"	t
secp256k1_nonce_function_default	secp256k1/src/secp256k1.c	/^const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;$/;"	v
secp256k1_nonce_function_rfc6979	secp256k1/src/secp256k1.c	/^const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;$/;"	v
secp256k1_nonce_function_smallint	secp256k1/src/tests_exhaustive.c	/^int secp256k1_nonce_function_smallint(unsigned char *nonce32, const unsigned char *msg32,$/;"	f
secp256k1_num	secp256k1/src/num_gmp.h	/^} secp256k1_num;$/;"	t	typeref:struct:__anon67
secp256k1_num_add	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_add(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_add_abs	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_add_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_cmp	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_cmp(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_copy	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_copy(secp256k1_num *r, const secp256k1_num *a) {$/;"	f
secp256k1_num_eq	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_eq(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_get_bin	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num *a) {$/;"	f
secp256k1_num_is_neg	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_neg(const secp256k1_num *a) {$/;"	f
secp256k1_num_is_one	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_one(const secp256k1_num *a) {$/;"	f
secp256k1_num_is_zero	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_zero(const secp256k1_num *a) {$/;"	f
secp256k1_num_jacobi	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_jacobi(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_mod	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mod(secp256k1_num *r, const secp256k1_num *m) {$/;"	f
secp256k1_num_mod_inverse	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mod_inverse(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *m) {$/;"	f
secp256k1_num_mul	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mul(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_negate	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_negate(secp256k1_num *r) {$/;"	f
secp256k1_num_sanity	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sanity(const secp256k1_num *a) {$/;"	f
secp256k1_num_sanity	secp256k1/src/num_gmp_impl.h	22;"	d
secp256k1_num_set_bin	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_set_bin(secp256k1_num *r, const unsigned char *a, unsigned int alen) {$/;"	f
secp256k1_num_shift	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_shift(secp256k1_num *r, int bits) {$/;"	f
secp256k1_num_sub	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sub(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_sub_abs	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sub_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_subadd	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_subadd(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b, int bneg) {$/;"	f
secp256k1_privkey_tweak_add	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_privkey_tweak_add(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_privkey_tweak_mul	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_privkey_tweak_mul(ByteBuffer byteBuff, long context);$/;"	m	class:NativeSecp256k1	file:
secp256k1_pubkey	secp256k1/include/secp256k1.h	/^} secp256k1_pubkey;$/;"	t	typeref:struct:__anon51
secp256k1_pubkey_load	secp256k1/src/secp256k1.c	/^static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge, const secp256k1_pubkey* pubkey) {$/;"	f	file:
secp256k1_pubkey_save	secp256k1/src/secp256k1.c	/^static void secp256k1_pubkey_save(secp256k1_pubkey* pubkey, secp256k1_ge* ge) {$/;"	f	file:
secp256k1_pubkey_tweak_add	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_pubkey_tweak_add(ByteBuffer byteBuff, long context, int pubLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_pubkey_tweak_mul	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static native byte[][] secp256k1_pubkey_tweak_mul(ByteBuffer byteBuff, long context, int pubLen);$/;"	m	class:NativeSecp256k1	file:
secp256k1_rand256	secp256k1/src/testrand_impl.h	/^static void secp256k1_rand256(unsigned char *b32) {$/;"	f
secp256k1_rand256_test	secp256k1/src/testrand_impl.h	/^static void secp256k1_rand256_test(unsigned char *b32) {$/;"	f
secp256k1_rand32	secp256k1/src/testrand_impl.h	/^SECP256K1_INLINE static uint32_t secp256k1_rand32(void) {$/;"	f
secp256k1_rand_bits	secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_rand_bits(int bits) {$/;"	f
secp256k1_rand_bytes_test	secp256k1/src/testrand_impl.h	/^static void secp256k1_rand_bytes_test(unsigned char *bytes, size_t len) {$/;"	f
secp256k1_rand_int	secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_rand_int(uint32_t range) {$/;"	f
secp256k1_rand_seed	secp256k1/src/testrand_impl.h	/^SECP256K1_INLINE static void secp256k1_rand_seed(const unsigned char *seed16) {$/;"	f
secp256k1_rfc6979_hmac_sha256_finalize	secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {$/;"	f
secp256k1_rfc6979_hmac_sha256_generate	secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_initialize	secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_t	secp256k1/src/hash.h	/^} secp256k1_rfc6979_hmac_sha256_t;$/;"	t	typeref:struct:__anon62
secp256k1_scalar	secp256k1/src/scalar_4x64.h	/^} secp256k1_scalar;$/;"	t	typeref:struct:__anon68
secp256k1_scalar	secp256k1/src/scalar_8x32.h	/^} secp256k1_scalar;$/;"	t	typeref:struct:__anon69
secp256k1_scalar	secp256k1/src/scalar_low.h	/^typedef uint32_t secp256k1_scalar;$/;"	t
secp256k1_scalar_add	secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_add	secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_add	secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_cadd_bit	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_cadd_bit	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_cadd_bit	secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_check_overflow	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_check_overflow	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_check_overflow	secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) { return *a >= EXHAUSTIVE_TEST_ORDER; }$/;"	f
secp256k1_scalar_clear	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {$/;"	f
secp256k1_scalar_clear	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {$/;"	f
secp256k1_scalar_clear	secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) { *r = 0; }$/;"	f
secp256k1_scalar_cond_negate	secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_cond_negate	secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_cond_negate	secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_eq	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_eq	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_eq	secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_get_b32	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_b32	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_b32	secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_bits	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits	secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_num	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_get_num(secp256k1_num *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_inverse	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {$/;"	f
secp256k1_scalar_inverse_var	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_scalar *x) {$/;"	f
secp256k1_scalar_is_even	secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_even(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_mul	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul	secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_512	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_512	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_shift_var	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {$/;"	f
secp256k1_scalar_mul_shift_var	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {$/;"	f
secp256k1_scalar_negate	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_negate	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_negate	secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_order_get_num	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_order_get_num(secp256k1_num *r) {$/;"	f
secp256k1_scalar_reduce	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {$/;"	f
secp256k1_scalar_reduce	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, uint32_t overflow) {$/;"	f
secp256k1_scalar_reduce_512	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l) {$/;"	f
secp256k1_scalar_reduce_512	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint32_t *l) {$/;"	f
secp256k1_scalar_set_b32	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_b32	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_b32	secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_int	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {$/;"	f
secp256k1_scalar_set_int	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {$/;"	f
secp256k1_scalar_set_int	secp256k1/src/scalar_low_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) { *r = v; }$/;"	f
secp256k1_scalar_shr_int	secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_shr_int	secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_shr_int	secp256k1/src/scalar_low_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_split_128	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_128	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_128	secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_lambda	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	secp256k1/src/scalar_low_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr_512	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr_512	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar *a) {$/;"	f
secp256k1_sha256_finalize	secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_sha256_initialize	secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {$/;"	f
secp256k1_sha256_t	secp256k1/src/hash.h	/^} secp256k1_sha256_t;$/;"	t	typeref:struct:__anon60
secp256k1_sha256_transform	secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_transform(uint32_t* s, const uint32_t* chunk) {$/;"	f
secp256k1_sha256_write	secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {$/;"	f
secp256k1_test_rng	secp256k1/src/testrand_impl.h	/^static secp256k1_rfc6979_hmac_sha256_t secp256k1_test_rng;$/;"	v
secp256k1_test_rng_integer	secp256k1/src/testrand_impl.h	/^static uint64_t secp256k1_test_rng_integer;$/;"	v
secp256k1_test_rng_integer_bits_left	secp256k1/src/testrand_impl.h	/^static int secp256k1_test_rng_integer_bits_left = 0;$/;"	v
secp256k1_test_rng_precomputed	secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_test_rng_precomputed[8];$/;"	v
secp256k1_test_rng_precomputed_used	secp256k1/src/testrand_impl.h	/^static int secp256k1_test_rng_precomputed_used = 8;$/;"	v
secp256k1_wnaf_const	secp256k1/src/ecmult_const_impl.h	/^static int secp256k1_wnaf_const(int *wnaf, secp256k1_scalar s, int w) {$/;"	f
secureClearPassFields	qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::secureClearPassFields()$/;"	f	class:AskPassphraseDialog
secure_allocator	support/allocators/secure.h	/^    secure_allocator() throw() {}$/;"	f	struct:secure_allocator
secure_allocator	support/allocators/secure.h	/^    secure_allocator(const secure_allocator& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	support/allocators/secure.h	/^    secure_allocator(const secure_allocator<U>& a) throw() : base(a)$/;"	f	struct:secure_allocator
secure_allocator	support/allocators/secure.h	/^struct secure_allocator : public std::allocator<T> {$/;"	s
seed_	leveldb/db/db_impl.h	/^  uint32_t seed_;                \/\/ For sampling.$/;"	m	class:leveldb::DBImpl
seed_	leveldb/db/skiplist_test.cc	/^  int seed_;$/;"	m	class:leveldb::TestState	file:
seed_	leveldb/util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seek	serialize.h	/^    void seek(size_t _nSize)$/;"	f	class:CSizeComputer
seek	streams.h	/^    void seek(size_t nSize)$/;"	f	class:CVectorWriter
seek_file	leveldb/db/version_set.h	/^    FileMetaData* seek_file;$/;"	m	struct:leveldb::Version::GetStats
seek_file_level	leveldb/db/version_set.h	/^    int seek_file_level;$/;"	m	struct:leveldb::Version::GetStats
seen_key_	leveldb/db/version_set.h	/^  bool seen_key_;             \/\/ Some output key has been seen$/;"	m	class:leveldb::Compaction
selectNewAddress	qt/addressbookpage.cpp	/^void AddressBookPage::selectNewAddress(const QModelIndex &parent, int begin, int \/*end*\/)$/;"	f	class:AddressBookPage
selectedRow	qt/receivecoinsdialog.cpp	/^QModelIndex ReceiveCoinsDialog::selectedRow()$/;"	f	class:ReceiveCoinsDialog
selectionChanged	qt/addressbookpage.cpp	/^void AddressBookPage::selectionChanged()$/;"	f	class:AddressBookPage
sem	sync.h	/^    CSemaphore* sem;$/;"	m	class:CSemaphoreGrant
sem1_	leveldb/port/port_win.h	/^  void * sem1_;$/;"	m	class:leveldb::port::CondVar
sem2_	leveldb/port/port_win.h	/^  void * sem2_;$/;"	m	class:leveldb::port::CondVar
semAddnode	net.h	/^    CSemaphore *semAddnode;$/;"	m	class:CConnman
semOutbound	net.h	/^    CSemaphore *semOutbound;$/;"	m	class:CConnman
sendCoins	qt/walletmodel.cpp	/^WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &transaction)$/;"	f	class:WalletModel
sendCoinsAction	qt/wificoingui.h	/^    QAction *sendCoinsAction;$/;"	m	class:WiFicoinGUI
sendCoinsMenuAction	qt/wificoingui.h	/^    QAction *sendCoinsMenuAction;$/;"	m	class:WiFicoinGUI
sendCoinsPage	qt/walletview.h	/^    SendCoinsDialog *sendCoinsPage;$/;"	m	class:WalletView
sendfrom	wallet/rpcwallet.cpp	/^UniValue sendfrom(const JSONRPCRequest& request)$/;"	f
sendmany	wallet/rpcwallet.cpp	/^UniValue sendmany(const JSONRPCRequest& request)$/;"	f
sendrawtransaction	rpc/rawtransaction.cpp	/^UniValue sendrawtransaction(const JSONRPCRequest& request)$/;"	f
sendtoaddress	wallet/rpcwallet.cpp	/^UniValue sendtoaddress(const JSONRPCRequest& request)$/;"	f
separatorAlways	qt/wificoinunits.h	/^        separatorAlways$/;"	e	enum:WiFicoinUnits::SeparatorStyle
separatorNever	qt/wificoinunits.h	/^        separatorNever,$/;"	e	enum:WiFicoinUnits::SeparatorStyle
separatorStandard	qt/wificoinunits.h	/^        separatorStandard,$/;"	e	enum:WiFicoinUnits::SeparatorStyle
sequence	leveldb/db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	leveldb/db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon20::DBIter	file:
sequence_	leveldb/db/write_batch.cc	/^  SequenceNumber sequence_;$/;"	m	class:leveldb::__anon28::MemTableInserter	file:
ser_double_to_uint64	serialize.h	/^inline uint64_t ser_double_to_uint64(double x)$/;"	f
ser_float_to_uint32	serialize.h	/^inline uint32_t ser_float_to_uint32(float x)$/;"	f
ser_readdata16	serialize.h	/^template<typename Stream> inline uint16_t ser_readdata16(Stream &s)$/;"	f
ser_readdata32	serialize.h	/^template<typename Stream> inline uint32_t ser_readdata32(Stream &s)$/;"	f
ser_readdata64	serialize.h	/^template<typename Stream> inline uint64_t ser_readdata64(Stream &s)$/;"	f
ser_readdata8	serialize.h	/^template<typename Stream> inline uint8_t ser_readdata8(Stream &s)$/;"	f
ser_uint32_to_float	serialize.h	/^inline float ser_uint32_to_float(uint32_t y)$/;"	f
ser_uint64_to_double	serialize.h	/^inline double ser_uint64_to_double(uint64_t y)$/;"	f
ser_writedata16	serialize.h	/^template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)$/;"	f
ser_writedata32	serialize.h	/^template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)$/;"	f
ser_writedata64	serialize.h	/^template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)$/;"	f
ser_writedata8	serialize.h	/^template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)$/;"	f
serialize	script/script.h	/^    static std::vector<unsigned char> serialize(const int64_t& value)$/;"	f	class:CScriptNum
serialize	test/scriptnum10.h	/^    static std::vector<unsigned char> serialize(const int64_t& value)$/;"	f	class:CScriptNum10
service	torcontrol.cpp	/^    CService service;$/;"	m	class:TorController	file:
serviceQueue	scheduler.cpp	/^void CScheduler::serviceQueue()$/;"	f	class:CScheduler
service_id	torcontrol.cpp	/^    std::string service_id;$/;"	m	class:TorController	file:
setAbandoned	wallet/wallet.h	/^    void setAbandoned() { hashBlock = ABANDON_HASH; }$/;"	f	class:CMerkleTx
setAddress	qt/editaddressdialog.cpp	/^void EditAddressDialog::setAddress(const QString &_address)$/;"	f	class:EditAddressDialog
setAddress	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setAddress(const QString &address)$/;"	f	class:SendCoinsDialog
setAddress	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setAddress(const QString &address)$/;"	f	class:SendCoinsEntry
setAddressPrefix	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setAddressPrefix(const QString &_addrPrefix)$/;"	f	class:TransactionFilterProxy
setAddress_SM	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setAddress_SM(const QString &address)$/;"	f	class:SignVerifyMessageDialog
setAddress_VM	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setAddress_VM(const QString &address)$/;"	f	class:SignVerifyMessageDialog
setArray	univalue/lib/univalue.cpp	/^bool UniValue::setArray()$/;"	f	class:UniValue
setAskFor	net.h	/^    std::set<uint256> setAskFor;$/;"	m	class:CNode
setBalance	qt/overviewpage.cpp	/^void OverviewPage::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance, const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance)$/;"	f	class:OverviewPage
setBalance	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,$/;"	f	class:SendCoinsDialog
setBanned	net.h	/^    banmap_t setBanned;$/;"	m	class:CConnman
setBannedIsDirty	net.h	/^    bool setBannedIsDirty;$/;"	m	class:CConnman
setWiFicoinGUI	qt/walletview.cpp	/^void WalletView::setWiFicoinGUI(WiFicoinGUI *gui)$/;"	f	class:WalletView
setBlockIndexCandidates	validation.cpp	/^    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;$/;"	m	namespace:__anon43	file:
setBool	univalue/lib/univalue.cpp	/^bool UniValue::setBool(bool val_)$/;"	f	class:UniValue
setBreakAction	qt/splashscreen.cpp	/^void SplashScreen::setBreakAction(const std::function<void(void)> &action)$/;"	f	class:SplashScreen
setCheckValidator	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setCheckValidator(const QValidator *v)$/;"	f	class:QValidatedLineEdit
setClientModel	qt/wificoingui.cpp	/^void WiFicoinGUI::setClientModel(ClientModel *_clientModel)$/;"	f	class:WiFicoinGUI
setClientModel	qt/overviewpage.cpp	/^void OverviewPage::setClientModel(ClientModel *model)$/;"	f	class:OverviewPage
setClientModel	qt/rpcconsole.cpp	/^void RPCConsole::setClientModel(ClientModel *model)$/;"	f	class:RPCConsole
setClientModel	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setClientModel(ClientModel *_clientModel)$/;"	f	class:SendCoinsDialog
setClientModel	qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::setClientModel(ClientModel *model)$/;"	f	class:TrafficGraphWidget
setClientModel	qt/walletframe.cpp	/^void WalletFrame::setClientModel(ClientModel *_clientModel)$/;"	f	class:WalletFrame
setClientModel	qt/walletview.cpp	/^void WalletView::setClientModel(ClientModel *_clientModel)$/;"	f	class:WalletView
setClipboard	qt/guiutil.cpp	/^void setClipboard(const QString& str)$/;"	f	namespace:GUIUtil
setCurrentWallet	qt/wificoingui.cpp	/^bool WiFicoinGUI::setCurrentWallet(const QString& name)$/;"	f	class:WiFicoinGUI
setCurrentWallet	qt/walletframe.cpp	/^bool WalletFrame::setCurrentWallet(const QString& name)$/;"	f	class:WalletFrame
setData	qt/addresstablemodel.cpp	/^bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value, int role)$/;"	f	class:AddressTableModel
setData	qt/optionsmodel.cpp	/^bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)$/;"	f	class:OptionsModel
setData	qt/recentrequeststablemodel.cpp	/^bool RecentRequestsTableModel::setData(const QModelIndex &index, const QVariant &value, int role)$/;"	f	class:RecentRequestsTableModel
setDataDirectory	qt/intro.cpp	/^void Intro::setDataDirectory(const QString &dataDir)$/;"	f	class:Intro
setDateRange	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setDateRange(const QDateTime &from, const QDateTime &to)$/;"	f	class:TransactionFilterProxy
setDirtyBlockIndex	validation.cpp	/^    std::set<CBlockIndex*> setDirtyBlockIndex;$/;"	m	namespace:__anon43	file:
setDirtyFileInfo	validation.cpp	/^    std::set<int> setDirtyFileInfo;$/;"	m	namespace:__anon43	file:
setDisplayUnit	qt/wificoinamountfield.cpp	/^    void setDisplayUnit(int unit)$/;"	f	class:AmountSpinBox
setDisplayUnit	qt/wificoinamountfield.cpp	/^void WiFicoinAmountField::setDisplayUnit(int newUnit)$/;"	f	class:WiFicoinAmountField
setDisplayUnit	qt/optionsmodel.cpp	/^void OptionsModel::setDisplayUnit(const QVariant &value)$/;"	f	class:OptionsModel
setEnabled	qt/wificoinamountfield.cpp	/^void WiFicoinAmountField::setEnabled(bool fEnabled)$/;"	f	class:WiFicoinAmountField
setEnabled	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setEnabled(bool enabled)$/;"	f	class:QValidatedLineEdit
setEncryptionStatus	qt/wificoingui.cpp	/^void WiFicoinGUI::setEncryptionStatus(int status)$/;"	f	class:WiFicoinGUI
setEntries	txmempool.h	/^    typedef std::set<txiter, CompareIteratorByHash> setEntries;$/;"	t	class:CTxMemPool
setExpect	univalue/lib/univalue_read.cpp	246;"	d	file:
setExternalKeyPool	wallet/wallet.h	/^    std::set<int64_t> setExternalKeyPool;$/;"	m	class:CWallet
setFloat	univalue/lib/univalue.cpp	/^bool UniValue::setFloat(double val_)$/;"	f	class:UniValue
setFocus	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setFocus()$/;"	f	class:SendCoinsEntry
setFontSize	qt/rpcconsole.cpp	/^void RPCConsole::setFontSize(int newSize)$/;"	f	class:RPCConsole
setGraphRangeMins	qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::setGraphRangeMins(int mins)$/;"	f	class:TrafficGraphWidget
setHDStatus	qt/wificoingui.cpp	/^void WiFicoinGUI::setHDStatus(int hdEnabled)$/;"	f	class:WiFicoinGUI
setInfo	qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::setInfo(const SendCoinsRecipient &_info)$/;"	f	class:ReceiveRequestDialog
setInt	univalue/include/univalue.h	/^    bool setInt(int val_) { return setInt((int64_t)val_); }$/;"	f	class:UniValue
setInt	univalue/lib/univalue.cpp	/^bool UniValue::setInt(int64_t val_)$/;"	f	class:UniValue
setInt	univalue/lib/univalue.cpp	/^bool UniValue::setInt(uint64_t val_)$/;"	f	class:UniValue
setInternalKeyPool	wallet/wallet.h	/^    std::set<int64_t> setInternalKeyPool;$/;"	m	class:CWallet
setInventoryTxToSend	net.h	/^    std::set<uint256> setInventoryTxToSend;$/;"	m	class:CNode
setKnown	net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setKnownBestHeight	qt/modaloverlay.cpp	/^void ModalOverlay::setKnownBestHeight(int count, const QDateTime& blockDate)$/;"	f	class:ModalOverlay
setLimit	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setLimit(int limit)$/;"	f	class:TransactionFilterProxy
setLockedCoins	wallet/wallet.h	/^    std::set<COutPoint> setLockedCoins;$/;"	m	class:CWallet
setMapper	qt/optionsdialog.cpp	/^void OptionsDialog::setMapper()$/;"	f	class:OptionsDialog
setMempoolSize	qt/rpcconsole.cpp	/^void RPCConsole::setMempoolSize(long numberOfTxs, size_t dynUsage)$/;"	f	class:RPCConsole
setMinAmount	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setMinAmount(const CAmount& minimum)$/;"	f	class:TransactionFilterProxy
setMinimumFee	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setMinimumFee()$/;"	f	class:SendCoinsDialog
setModel	qt/addressbookpage.cpp	/^void AddressBookPage::setModel(AddressTableModel *_model)$/;"	f	class:AddressBookPage
setModel	qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::setModel(WalletModel *_model)$/;"	f	class:AskPassphraseDialog
setModel	qt/coincontroldialog.cpp	/^void CoinControlDialog::setModel(WalletModel *_model)$/;"	f	class:CoinControlDialog
setModel	qt/csvmodelwriter.cpp	/^void CSVModelWriter::setModel(const QAbstractItemModel *_model)$/;"	f	class:CSVModelWriter
setModel	qt/editaddressdialog.cpp	/^void EditAddressDialog::setModel(AddressTableModel *_model)$/;"	f	class:EditAddressDialog
setModel	qt/optionsdialog.cpp	/^void OptionsDialog::setModel(OptionsModel *_model)$/;"	f	class:OptionsDialog
setModel	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::setModel(WalletModel *_model)$/;"	f	class:ReceiveCoinsDialog
setModel	qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::setModel(OptionsModel *_model)$/;"	f	class:ReceiveRequestDialog
setModel	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setModel(WalletModel *_model)$/;"	f	class:SendCoinsDialog
setModel	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setModel(WalletModel *_model)$/;"	f	class:SendCoinsEntry
setModel	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setModel(WalletModel *_model)$/;"	f	class:SignVerifyMessageDialog
setModel	qt/transactionview.cpp	/^void TransactionView::setModel(WalletModel *_model)$/;"	f	class:TransactionView
setNetworkActive	qt/wificoingui.cpp	/^void WiFicoinGUI::setNetworkActive(bool networkActive)$/;"	f	class:WiFicoinGUI
setNetworkActive	qt/clientmodel.cpp	/^void ClientModel::setNetworkActive(bool active)$/;"	f	class:ClientModel
setNetworkActive	qt/rpcconsole.cpp	/^void RPCConsole::setNetworkActive(bool networkActive)$/;"	f	class:RPCConsole
setNull	univalue/lib/univalue.cpp	/^bool UniValue::setNull()$/;"	f	class:UniValue
setNumBlocks	qt/wificoingui.cpp	/^void WiFicoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header)$/;"	f	class:WiFicoinGUI
setNumBlocks	qt/rpcconsole.cpp	/^void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers)$/;"	f	class:RPCConsole
setNumConnections	qt/wificoingui.cpp	/^void WiFicoinGUI::setNumConnections(int count)$/;"	f	class:WiFicoinGUI
setNumConnections	qt/rpcconsole.cpp	/^void RPCConsole::setNumConnections(int count)$/;"	f	class:RPCConsole
setNumStr	univalue/lib/univalue.cpp	/^bool UniValue::setNumStr(const string& val_)$/;"	f	class:UniValue
setObject	univalue/lib/univalue.cpp	/^bool UniValue::setObject()$/;"	f	class:UniValue
setOkButtonState	qt/optionsdialog.cpp	/^void OptionsDialog::setOkButtonState(bool fState)$/;"	f	class:OptionsDialog
setOptionsModel	qt/wificoingui.cpp	/^void UnitDisplayStatusBarControl::setOptionsModel(OptionsModel *_optionsModel)$/;"	f	class:UnitDisplayStatusBarControl
setOptionsModel	qt/paymentserver.cpp	/^void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)$/;"	f	class:PaymentServer
setProcessingQueuedTransactions	qt/transactiontablemodel.h	/^    void setProcessingQueuedTransactions(bool value) { fProcessingQueuedTransactions = value; }$/;"	f	class:TransactionTableModel
setReadOnly	qt/wificoinamountfield.cpp	/^void WiFicoinAmountField::setReadOnly(bool fReadOnly)$/;"	f	class:WiFicoinAmountField
setRestartRequired	qt/optionsmodel.cpp	/^void OptionsModel::setRestartRequired(bool fRequired)$/;"	f	class:OptionsModel
setRole	qt/qvaluecombobox.cpp	/^void QValueComboBox::setRole(int _role)$/;"	f	class:QValueComboBox
setSanityCheck	txmempool.h	/^    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967295.0; }$/;"	f	class:CTxMemPool
setSelected	wallet/coincontrol.h	/^    std::set<COutPoint> setSelected;$/;"	m	class:CCoinControl
setShowInactive	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setShowInactive(bool _showInactive)$/;"	f	class:TransactionFilterProxy
setSingleStep	qt/wificoinamountfield.cpp	/^    void setSingleStep(const CAmount& step)$/;"	f	class:AmountSpinBox
setSingleStep	qt/wificoinamountfield.cpp	/^void WiFicoinAmountField::setSingleStep(const CAmount& step)$/;"	f	class:WiFicoinAmountField
setStatus	qt/intro.cpp	/^void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable)$/;"	f	class:Intro
setStr	univalue/lib/univalue.cpp	/^bool UniValue::setStr(const string& val_)$/;"	f	class:UniValue
setTabFocus	qt/rpcconsole.cpp	/^void RPCConsole::setTabFocus(enum TabTypes tabType)$/;"	f	class:RPCConsole
setTrafficGraphRange	qt/rpcconsole.cpp	/^void RPCConsole::setTrafficGraphRange(int mins)$/;"	f	class:RPCConsole
setTransactionFee	qt/walletmodeltransaction.cpp	/^void WalletModelTransaction::setTransactionFee(const CAmount& newFee)$/;"	f	class:WalletModelTransaction
setTrayIconVisible	qt/wificoingui.cpp	/^void WiFicoinGUI::setTrayIconVisible(bool fHideTrayIcon)$/;"	f	class:WiFicoinGUI
setTypeFilter	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setTypeFilter(quint32 modes)$/;"	f	class:TransactionFilterProxy
setValid	qt/wificoinamountfield.cpp	/^void WiFicoinAmountField::setValid(bool valid)$/;"	f	class:WiFicoinAmountField
setValid	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setValid(bool _valid)$/;"	f	class:QValidatedLineEdit
setValid	script/sigcache.cpp	/^    map_type setValid;$/;"	m	class:__anon96::CSignatureCache	file:
setValue	qt/wificoinamountfield.cpp	/^    void setValue(const CAmount& value)$/;"	f	class:AmountSpinBox
setValue	qt/wificoinamountfield.cpp	/^void WiFicoinAmountField::setValue(const CAmount& value)$/;"	f	class:WiFicoinAmountField
setValue	qt/qvaluecombobox.cpp	/^void QValueComboBox::setValue(const QVariant &value)$/;"	f	class:QValueComboBox
setValue	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setValue(const SendCoinsRecipient &value)$/;"	f	class:SendCoinsEntry
setViewHeaderResizeMode	qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
setWalletActionsEnabled	qt/wificoingui.cpp	/^void WiFicoinGUI::setWalletActionsEnabled(bool enabled)$/;"	f	class:WiFicoinGUI
setWalletEncrypted	qt/walletmodel.cpp	/^bool WalletModel::setWalletEncrypted(bool encrypted, const SecureString &passphrase)$/;"	f	class:WalletModel
setWalletLocked	qt/walletmodel.cpp	/^bool WalletModel::setWalletLocked(bool locked, const SecureString &passPhrase)$/;"	f	class:WalletModel
setWalletModel	qt/overviewpage.cpp	/^void OverviewPage::setWalletModel(WalletModel *model)$/;"	f	class:OverviewPage
setWalletModel	qt/walletview.cpp	/^void WalletView::setWalletModel(WalletModel *_walletModel)$/;"	f	class:WalletView
setWatchOnly	keystore.h	/^    WatchOnlySet setWatchOnly;$/;"	m	class:CBasicKeyStore
setWatchOnlyFilter	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setWatchOnlyFilter(WatchOnlyFilter filter)$/;"	f	class:TransactionFilterProxy
set_base_from	secp256k1/build-aux/depcomp	/^set_base_from ()$/;"	f
set_base_from	univalue/build-aux/depcomp	/^set_base_from ()$/;"	f
set_dir_from	secp256k1/build-aux/depcomp	/^set_dir_from ()$/;"	f
set_dir_from	univalue/build-aux/depcomp	/^set_dir_from ()$/;"	f
set_error	script/wificoinconsensus.cpp	/^inline int set_error(wificoinconsensus_error* ret, wificoinconsensus_error serror)$/;"	f	namespace:__anon95
set_error	script/interpreter.cpp	/^inline bool set_error(ScriptError* ret, const ScriptError serror)$/;"	f	namespace:__anon98
set_index_handle	leveldb/table/format.h	/^  void set_index_handle(const BlockHandle& h) {$/;"	f	class:leveldb::Footer
set_metaindex_handle	leveldb/table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_offset	leveldb/table/format.h	/^  void set_offset(uint64_t offset) { offset_ = offset; }$/;"	f	class:leveldb::BlockHandle
set_size	leveldb/table/format.h	/^  void set_size(uint64_t size) { size_ = size; }$/;"	f	class:leveldb::BlockHandle
set_success	script/interpreter.cpp	/^inline bool set_success(ScriptError* ret)$/;"	f	namespace:__anon98
set_vch	script/script.h	/^    static int64_t set_vch(const std::vector<unsigned char>& vch)$/;"	f	class:CScriptNum
set_vch	test/scriptnum10.h	/^    static int64_t set_vch(const std::vector<unsigned char>& vch)$/;"	f	class:CScriptNum10
setaccount	wallet/rpcwallet.cpp	/^UniValue setaccount(const JSONRPCRequest& request)$/;"	f
setban	rpc/net.cpp	/^UniValue setban(const JSONRPCRequest& request)$/;"	f
setmocktime	rpc/misc.cpp	/^UniValue setmocktime(const JSONRPCRequest& request)$/;"	f
setnetworkactive	rpc/net.cpp	/^UniValue setnetworkactive(const JSONRPCRequest& request)$/;"	f
settxfee	wallet/rpcwallet.cpp	/^UniValue settxfee(const JSONRPCRequest& request)$/;"	f
setup	cuckoocache.h	/^    inline void setup(uint32_t b)$/;"	f	class:CuckooCache::bit_packed_atomic_flags
setup	cuckoocache.h	/^    uint32_t setup(uint32_t new_size)$/;"	f	class:CuckooCache::cache
setupAddressWidget	qt/guiutil.cpp	/^void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent)$/;"	f	namespace:GUIUtil
setupAmountWidget	qt/guiutil.cpp	/^void setupAmountWidget(QLineEdit *widget, QWidget *parent)$/;"	f	namespace:GUIUtil
setupTabChain	qt/wificoinamountfield.cpp	/^QWidget *WiFicoinAmountField::setupTabChain(QWidget *prev)$/;"	f	class:WiFicoinAmountField
setupTabChain	qt/sendcoinsdialog.cpp	/^QWidget *SendCoinsDialog::setupTabChain(QWidget *prev)$/;"	f	class:SendCoinsDialog
setupTabChain	qt/sendcoinsentry.cpp	/^QWidget *SendCoinsEntry::setupTabChain(QWidget *prev)$/;"	f	class:SendCoinsEntry
setup_bytes	cuckoocache.h	/^    uint32_t setup_bytes(size_t bytes)$/;"	f	class:CuckooCache::cache
setup_bytes	script/sigcache.cpp	/^    uint32_t setup_bytes(size_t n)$/;"	f	class:__anon96::CSignatureCache
sha	hash.h	/^    CSHA256 sha;$/;"	m	class:CHash160
sha	hash.h	/^    CSHA256 sha;$/;"	m	class:CHash256
sha1	crypto/sha1.cpp	/^namespace sha1$/;"	n	namespace:__anon90	file:
sha256	crypto/sha256.cpp	/^namespace sha256$/;"	n	namespace:__anon87	file:
sha256_sse4	crypto/sha256.cpp	/^namespace sha256_sse4$/;"	n	file:
sha256_sse4	crypto/sha256_sse4.cpp	/^namespace sha256_sse4$/;"	n	file:
sha512	crypto/sha512.cpp	/^namespace sha512$/;"	n	namespace:__anon88	file:
shard_	leveldb/util/cache.cc	/^  LRUCache shard_[kNumShards];$/;"	m	class:leveldb::__anon13::ShardedLRUCache	file:
shared	leveldb/db/db_bench.cc	/^    SharedState* shared;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
shared	leveldb/db/db_bench.cc	/^  SharedState* shared;$/;"	m	struct:leveldb::__anon18::ThreadState	file:
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	secp256k1/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	univalue/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shiftArrayLeft	test/arith_uint256_tests.cpp	/^void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)$/;"	f
shiftArrayRight	test/arith_uint256_tests.cpp	/^void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)$/;"	f
shortStats	policy/fees.h	/^    TxConfirmStats* shortStats;$/;"	m	class:CBlockPolicyEstimator
shorttxidk0	blockencodings.h	/^    mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxidk1	blockencodings.h	/^    mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxids	blockencodings.h	/^    std::vector<uint64_t> shorttxids;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxids	test/blockencodings_tests.cpp	/^    std::vector<uint64_t> shorttxids;$/;"	m	class:TestHeaderAndShortIDs	file:
shouldShow	qt/bantablemodel.cpp	/^bool BanTableModel::shouldShow()$/;"	f	class:BanTableModel
shouldStop	scheduler.h	/^    bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }$/;"	f	class:CScheduler
showBanTableContextMenu	qt/rpcconsole.cpp	/^void RPCConsole::showBanTableContextMenu(const QPoint& point)$/;"	f	class:RPCConsole
showDebugWindow	qt/wificoingui.cpp	/^void WiFicoinGUI::showDebugWindow()$/;"	f	class:WiFicoinGUI
showDebugWindowActivateConsole	qt/wificoingui.cpp	/^void WiFicoinGUI::showDebugWindowActivateConsole()$/;"	f	class:WiFicoinGUI
showDetails	qt/transactionview.cpp	/^void TransactionView::showDetails()$/;"	f	class:TransactionView
showEvent	qt/wificoingui.cpp	/^void WiFicoinGUI::showEvent(QShowEvent *event)$/;"	f	class:WiFicoinGUI
showEvent	qt/rpcconsole.cpp	/^void RPCConsole::showEvent(QShowEvent *event)$/;"	f	class:RPCConsole
showHelpMessageAction	qt/wificoingui.h	/^    QAction *showHelpMessageAction;$/;"	m	class:WiFicoinGUI
showHelpMessageClicked	qt/wificoingui.cpp	/^void WiFicoinGUI::showHelpMessageClicked()$/;"	f	class:WiFicoinGUI
showHide	qt/modaloverlay.cpp	/^void ModalOverlay::showHide(bool hide, bool userRequested)$/;"	f	class:ModalOverlay
showInactive	qt/transactionfilterproxy.h	/^    bool showInactive;$/;"	m	class:TransactionFilterProxy
showMenu	qt/coincontroldialog.cpp	/^void CoinControlDialog::showMenu(const QPoint &point)$/;"	f	class:CoinControlDialog
showMenu	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::showMenu(const QPoint &point)$/;"	f	class:ReceiveCoinsDialog
showMessage	qt/splashscreen.cpp	/^void SplashScreen::showMessage(const QString &message, int alignment, const QColor &color)$/;"	f	class:SplashScreen
showModalOverlay	qt/wificoingui.cpp	/^void WiFicoinGUI::showModalOverlay()$/;"	f	class:WiFicoinGUI
showNormalIfMinimized	qt/wificoingui.cpp	/^void WiFicoinGUI::showNormalIfMinimized(bool fToggleHidden)$/;"	f	class:WiFicoinGUI
showOrHideBanTableIfRequired	qt/rpcconsole.cpp	/^void RPCConsole::showOrHideBanTableIfRequired()$/;"	f	class:RPCConsole
showOrPrint	qt/utilitydialog.cpp	/^void HelpMessageDialog::showOrPrint()$/;"	f	class:HelpMessageDialog
showOutOfSyncWarning	qt/overviewpage.cpp	/^void OverviewPage::showOutOfSyncWarning(bool fShow)$/;"	f	class:OverviewPage
showOutOfSyncWarning	qt/walletframe.cpp	/^void WalletFrame::showOutOfSyncWarning(bool fShow)$/;"	f	class:WalletFrame
showOutOfSyncWarning	qt/walletview.cpp	/^void WalletView::showOutOfSyncWarning(bool fShow)$/;"	f	class:WalletView
showPeersTableContextMenu	qt/rpcconsole.cpp	/^void RPCConsole::showPeersTableContextMenu(const QPoint& point)$/;"	f	class:RPCConsole
showProgress	qt/wificoingui.cpp	/^void WiFicoinGUI::showProgress(const QString &title, int nProgress)$/;"	f	class:WiFicoinGUI
showProgress	qt/walletview.cpp	/^void WalletView::showProgress(const QString &title, int nProgress)$/;"	f	class:WalletView
showRestartWarning	qt/optionsdialog.cpp	/^void OptionsDialog::showRestartWarning(bool fPersistent)$/;"	f	class:OptionsDialog
showShutdownWindow	qt/utilitydialog.cpp	/^QWidget *ShutdownWindow::showShutdownWindow(WiFicoinGUI *window)$/;"	f	class:ShutdownWindow
showTab_SM	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::showTab_SM(bool fShow)$/;"	f	class:SignVerifyMessageDialog
showTab_VM	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::showTab_VM(bool fShow)$/;"	f	class:SignVerifyMessageDialog
showTransaction	qt/transactionrecord.cpp	/^bool TransactionRecord::showTransaction(const CWalletTx &wtx)$/;"	f	class:TransactionRecord
showTransaction	qt/transactiontablemodel.cpp	/^    bool showTransaction;$/;"	m	struct:TransactionNotification	file:
shrink_to_fit	prevector.h	/^    void shrink_to_fit() {$/;"	f	class:prevector
shrink_to_fit	test/prevector_tests.cpp	/^    void shrink_to_fit() {$/;"	f	class:prevector_tester
shutdown	qt/wificoin.cpp	/^void WiFicoinCore::shutdown()$/;"	f	class:WiFicoinCore
shutdownResult	qt/wificoin.cpp	/^void WiFicoinApplication::shutdownResult()$/;"	f	class:WiFicoinApplication
shutdownWindow	qt/wificoin.cpp	/^    std::unique_ptr<QWidget> shutdownWindow;$/;"	m	class:WiFicoinApplication	file:
shutting_down_	leveldb/db/db_impl.h	/^  port::AtomicPointer shutting_down_;$/;"	m	class:leveldb::DBImpl
sig	secp256k1/src/bench_recover.c	/^    unsigned char sig[64];$/;"	m	struct:__anon63	file:
sig	secp256k1/src/bench_verify.c	/^    unsigned char sig[72];$/;"	m	struct:__anon55	file:
sigOpCost	test/test_wificoin.h	/^    unsigned int sigOpCost;$/;"	m	struct:TestMemPoolEntryHelper
sigOpCost	txmempool.h	/^    int64_t sigOpCost;         \/\/!< Total sigop cost$/;"	m	class:CTxMemPoolEntry
sighash	test/data/sighash.json.h	/^static unsigned const char sighash[] = {$/;"	m	namespace:json_tests
sighashOptions	wificoin-tx.cpp	/^} sighashOptions[N_SIGHASH_OPTS] = {$/;"	v	typeref:struct:__anon45	file:
siglen	secp256k1/src/bench_verify.c	/^    size_t siglen;$/;"	m	struct:__anon55	file:
sigma	crypto/chacha20.cpp	/^static const unsigned char sigma[] = "expand 32-byte k";$/;"	v	file:
sigma0	crypto/sha256.cpp	/^uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x << 14) ^ (x >> 3); }$/;"	f	namespace:__anon87::sha256
sigma0	crypto/sha512.cpp	/^uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x << 56) ^ (x >> 7); }$/;"	f	namespace:__anon88::sha512
sigma0	secp256k1/src/hash_impl.h	20;"	d
sigma0	secp256k1/src/hash_impl.h	275;"	d
sigma1	crypto/sha256.cpp	/^uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }$/;"	f	namespace:__anon87::sha256
sigma1	crypto/sha512.cpp	/^uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }$/;"	f	namespace:__anon88::sha512
sigma1	secp256k1/src/hash_impl.h	21;"	d
sigma1	secp256k1/src/hash_impl.h	274;"	d
sign	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static byte[] sign(byte[] data, byte[] sec) throws AssertFailException{$/;"	m	class:NativeSecp256k1
signMessageAction	qt/wificoingui.h	/^    QAction *signMessageAction;$/;"	m	class:WiFicoinGUI
signTransaction	wallet/feebumper.cpp	/^bool CFeeBumper::signTransaction(CWallet *pWallet)$/;"	f	class:CFeeBumper
sign_multisig	test/multisig_tests.cpp	/^sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction, int whichIn)$/;"	f
sign_multisig	test/script_tests.cpp	/^sign_multisig(CScript scriptPubKey, const CKey &key, CTransaction transaction)$/;"	f
sign_multisig	test/script_tests.cpp	/^sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)$/;"	f
signalRbf	wallet/coincontrol.h	/^    bool signalRbf;$/;"	m	class:CCoinControl
signalled	qt/intro.h	/^    bool signalled;$/;"	m	class:Intro
signatureCache	script/sigcache.cpp	/^static CSignatureCache signatureCache;$/;"	m	namespace:__anon96	file:
signmessage	wallet/rpcwallet.cpp	/^UniValue signmessage(const JSONRPCRequest& request)$/;"	f
signmessagewithprivkey	rpc/misc.cpp	/^UniValue signmessagewithprivkey(const JSONRPCRequest& request)$/;"	f
signrawtransaction	rpc/rawtransaction.cpp	/^UniValue signrawtransaction(const JSONRPCRequest& request)$/;"	f
singleColor	qt/platformstyle.h	/^    QColor singleColor;$/;"	m	class:PlatformStyle
singleStep	qt/wificoinamountfield.cpp	/^    CAmount singleStep;$/;"	m	class:AmountSpinBox	file:
siphash_4_2_testvec	test/hash_tests.cpp	/^uint64_t siphash_4_2_testvec[] = {$/;"	v
size	addrman.h	/^    size_t size() const$/;"	f	class:CAddrMan
size	arith_uint256.h	/^    unsigned int size() const$/;"	f	class:base_uint
size	cuckoocache.h	/^    uint32_t size;$/;"	m	class:CuckooCache::cache
size	indirectmap.h	/^    size_type size() const          { return m.size(); }$/;"	f	class:indirectmap
size	key.h	/^    unsigned int size() const { return (fValid ? keydata.size() : 0); }$/;"	f	class:CKey
size	leveldb/include/leveldb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	leveldb/table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	leveldb/table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size	limitedmap.h	/^    size_type size() const { return map.size(); }$/;"	f	class:limitedmap
size	prevector.h	/^    size_type size() const {$/;"	f	class:prevector
size	pubkey.h	/^    unsigned int size() const { return GetLen(vch[0]); }$/;"	f	class:CPubKey
size	qt/addresstablemodel.cpp	/^    int size()$/;"	f	class:AddressTablePriv
size	qt/bantablemodel.cpp	/^    int size() const$/;"	f	class:BanTablePriv
size	qt/peertablemodel.cpp	/^    int size() const$/;"	f	class:PeerTablePriv
size	qt/transactiontablemodel.cpp	/^    int size()$/;"	f	class:TransactionTablePriv
size	serialize.h	/^    size_t size() const {$/;"	f	class:CSizeComputer
size	streams.h	/^    size_type size() const                           { return vch.size() - nReadPos; }$/;"	f	class:CDataStream
size	support/lockedpool.h	/^        size_t size;$/;"	m	class:LockedPool::LockedPageArena
size	test/prevector_tests.cpp	/^    Size size() {$/;"	f	class:prevector_tester
size	timedata.h	/^    int size() const$/;"	f	class:CMedianFilter
size	txmempool.h	/^    unsigned long size()$/;"	f	class:CTxMemPool
size	uint256.h	/^    unsigned int size() const$/;"	f	class:base_blob
size	univalue/include/univalue.h	/^    size_t size() const { return values.size(); }$/;"	f	class:UniValue
sizeHint	qt/overviewpage.cpp	/^    inline QSize sizeHint(const QStyleOptionViewItem &option, const QModelIndex &index) const$/;"	f	class:TxViewDelegate
size_	leveldb/helpers/memenv/memenv.cc	/^  uint64_t size_;$/;"	m	class:leveldb::__anon16::FileState	file:
size_	leveldb/include/leveldb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	leveldb/table/block.h	/^  size_t size_;$/;"	m	class:leveldb::Block
size_	leveldb/table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
size_estimate	dbwrapper.h	/^    size_t size_estimate;$/;"	m	class:CDBBatch
size_threshold	qt/guiutil.h	/^        int size_threshold;$/;"	m	class:GUIUtil::ToolTipToRichTextFilter
size_type	indirectmap.h	/^    typedef typename base::size_type size_type;$/;"	t	class:indirectmap
size_type	limitedmap.h	/^    typedef typename std::map<K, V>::size_type size_type;$/;"	t	class:limitedmap
size_type	prevector.h	/^    typedef Size size_type;$/;"	t	class:prevector
size_type	streams.h	/^    typedef vector_type::size_type        size_type;$/;"	t	class:CDataStream
size_type	support/allocators/secure.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:secure_allocator
size_type	support/allocators/zeroafterfree.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:zero_after_free_allocator
sleep_for	threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::milliseconds rel_time)$/;"	f	class:CThreadInterrupt
sleep_for	threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::minutes rel_time)$/;"	f	class:CThreadInterrupt
sleep_for	threadinterrupt.cpp	/^bool CThreadInterrupt::sleep_for(std::chrono::seconds rel_time)$/;"	f	class:CThreadInterrupt
slice	crypto/ctaes/ctaes.h	/^    uint16_t slice[8];$/;"	m	struct:__anon83
slotFinish	qt/splashscreen.cpp	/^void SplashScreen::slotFinish(QWidget *mainWin)$/;"	f	class:SplashScreen
smallest	leveldb/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
smallest	leveldb/db/version_edit.h	/^  InternalKey smallest;       \/\/ Smallest internal key served by table$/;"	m	struct:leveldb::FileMetaData
smallest_snapshot	leveldb/db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
snapshot	leveldb/include/leveldb/options.h	/^  const Snapshot* snapshot;$/;"	m	struct:leveldb::ReadOptions
snapshots_	leveldb/db/db_impl.h	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::DBImpl
snprintf	leveldb/port/port_win.h	35;"	d
socket	net.h	/^        SOCKET socket;$/;"	m	struct:CConnman::ListenSocket
sort	qt/bantablemodel.cpp	/^void BanTableModel::sort(int column, Qt::SortOrder order)$/;"	f	class:BanTableModel
sort	qt/peertablemodel.cpp	/^void PeerTableModel::sort(int column, Qt::SortOrder order)$/;"	f	class:PeerTableModel
sort	qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::sort(int column, Qt::SortOrder order)$/;"	f	class:RecentRequestsTableModel
sortColumn	qt/bantablemodel.cpp	/^    int sortColumn;$/;"	m	class:BanTablePriv	file:
sortColumn	qt/coincontroldialog.h	/^    int sortColumn;$/;"	m	class:CoinControlDialog
sortColumn	qt/peertablemodel.cpp	/^    int sortColumn;$/;"	m	class:PeerTablePriv	file:
sortKey	qt/transactionrecord.h	/^    std::string sortKey;$/;"	m	class:TransactionStatus
sortOrder	qt/bantablemodel.cpp	/^    Qt::SortOrder sortOrder;$/;"	m	class:BanTablePriv	file:
sortOrder	qt/coincontroldialog.h	/^    Qt::SortOrder sortOrder;$/;"	m	class:CoinControlDialog
sortOrder	qt/peertablemodel.cpp	/^    Qt::SortOrder sortOrder;$/;"	m	class:PeerTablePriv	file:
sortView	qt/coincontroldialog.cpp	/^void CoinControlDialog::sortView(int column, Qt::SortOrder order)$/;"	f	class:CoinControlDialog
sorted	timedata.h	/^    std::vector<T> sorted() const$/;"	f	class:CMedianFilter
source	addrman.h	/^    CNetAddr source;$/;"	m	class:CAddrInfo
source	hash.h	/^    Source* source;$/;"	m	class:CHashVerifier
source	qt/rpcconsole.cpp	/^    const char *source;$/;"	m	struct:__anon110	file:
sourceFile	sync.cpp	/^    std::string sourceFile;$/;"	m	struct:CLockLocation	file:
sourceLine	sync.cpp	/^    int sourceLine;$/;"	m	struct:CLockLocation	file:
source_	leveldb/db/log_test.cc	/^  StringSource source_;$/;"	m	class:leveldb::log::LogTest	file:
source_	leveldb/table/table_test.cc	/^  StringSource* source_;$/;"	m	class:leveldb::TableConstructor	file:
space_	leveldb/db/dbformat.h	/^  char space_[200];      \/\/ Avoid allocation for short keys$/;"	m	class:leveldb::LookupKey
spendTx	test/script_tests.cpp	/^    CMutableTransaction spendTx;$/;"	m	class:__anon80::TestBuilder	file:
spendsCoinbase	test/test_wificoin.h	/^    bool spendsCoinbase;$/;"	m	struct:TestMemPoolEntryHelper
spendsCoinbase	txmempool.h	/^    bool spendsCoinbase;       \/\/!< keep track of transactions that spend a coinbase$/;"	m	class:CTxMemPoolEntry
spinnerFrame	qt/wificoingui.h	/^    int spinnerFrame;$/;"	m	class:WiFicoinGUI
src	streams.h	/^    FILE *src;            \/\/ source file$/;"	m	class:CBufferedFile
srcdir	Makefile	/^srcdir = .$/;"	m
srcdir	secp256k1/Makefile	/^srcdir = .$/;"	m
srcdir	univalue/Makefile	/^srcdir = .$/;"	m
ssKey	dbwrapper.h	/^    CDataStream ssKey;$/;"	m	class:CDBBatch
ssValue	dbwrapper.h	/^    CDataStream ssValue;$/;"	m	class:CDBBatch
ss_	leveldb/util/testharness.h	/^  std::stringstream ss_;$/;"	m	class:leveldb::test::Tester
stack	script/script.h	/^    std::vector<std::vector<unsigned char> > stack;$/;"	m	struct:CScriptWitness
stacktop	script/interpreter.cpp	55;"	d	file:
start	leveldb/db/db_bench.cc	/^  bool start;$/;"	m	struct:leveldb::__anon18::SharedState	file:
start	leveldb/include/leveldb/db.h	/^  Slice start;          \/\/ Included in the range$/;"	m	struct:leveldb::Range
start	policy/fees.h	/^    double start = -1;$/;"	m	struct:EstimatorBucket
startAutoRefresh	qt/peertablemodel.cpp	/^void PeerTableModel::startAutoRefresh()$/;"	f	class:PeerTableModel
startExecutor	qt/rpcconsole.cpp	/^void RPCConsole::startExecutor()$/;"	f	class:RPCConsole
startThread	qt/wificoin.cpp	/^void WiFicoinApplication::startThread()$/;"	f	class:WiFicoinApplication
startThread	qt/intro.cpp	/^void Intro::startThread()$/;"	f	class:Intro
start_	leveldb/db/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::__anon18::Stats	file:
start_	leveldb/db/dbformat.h	/^  const char* start_;$/;"	m	class:leveldb::LookupKey
start_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	leveldb/doc/bench/db_bench_tree_db.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	leveldb/table/filter_block.h	/^  std::vector<size_t> start_;     \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FilterBlockBuilder
started_bgthread_	leveldb/util/env_posix.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon11::PosixEnv	file:
starts_with	leveldb/include/leveldb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state	leveldb/db/db_test.cc	/^  MTState* state;$/;"	m	struct:leveldb::__anon30::MTThread	file:
state	leveldb/db/version_set.cc	/^  SaverState state;$/;"	m	struct:leveldb::__anon22::Saver	file:
state	rpc/mining.cpp	/^    CValidationState state;$/;"	m	class:submitblock_StateCatcher	file:
state	test/addrman_tests.cpp	/^    uint64_t state;$/;"	m	class:CAddrManTest	file:
state	univalue/lib/univalue_utffilter.h	/^    int state; \/\/ Top bit to be filled in for next UTF-8 byte, or 0$/;"	m	class:JSONUTF8StringFilter
state_	leveldb/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_comparator_t	file:
state_	leveldb/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_filterpolicy_t	file:
state_	leveldb/db/fault_injection_test.cc	/^  FileState state_;$/;"	m	class:leveldb::TestWritableFile	file:
state_	leveldb/db/skiplist_test.cc	/^  ReaderState state_;$/;"	m	class:leveldb::TestState	file:
state_	leveldb/include/leveldb/status.h	/^  const char* state_;$/;"	m	class:leveldb::Status
state_cv_	leveldb/db/skiplist_test.cc	/^  port::CondVar state_cv_;$/;"	m	class:leveldb::TestState	file:
stats	leveldb/db/db_bench.cc	/^  Stats stats;$/;"	m	struct:leveldb::__anon18::ThreadState	file:
stats	support/lockedpool.cpp	/^Arena::Stats Arena::stats() const$/;"	f	class:Arena
stats	support/lockedpool.cpp	/^LockedPool::Stats LockedPool::stats() const$/;"	f	class:LockedPool
stats_	leveldb/db/db_impl.h	/^  CompactionStats stats_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
status	wificoin-cli.cpp	/^    int status;$/;"	m	struct:HTTPReply	file:
status	leveldb/db/db_impl.cc	/^  Status status;$/;"	m	struct:leveldb::DBImpl::Writer	file:
status	leveldb/db/db_iter.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon20::DBIter
status	leveldb/db/db_test.cc	/^    virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::ModelDB::ModelIter
status	leveldb/db/memtable.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::MemTableIterator
status	leveldb/db/version_set.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::Version::LevelFileNumIterator
status	leveldb/table/block.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::Block::Iter
status	leveldb/table/iterator.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::__anon42::EmptyIterator
status	leveldb/table/iterator_wrapper.h	/^  Status status() const     { assert(iter_); return iter_->status(); }$/;"	f	class:leveldb::IteratorWrapper
status	leveldb/table/merger.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon36::MergingIterator
status	leveldb/table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep	file:
status	leveldb/table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
status	leveldb/table/table_builder.cc	/^Status TableBuilder::status() const {$/;"	f	class:leveldb::TableBuilder
status	leveldb/table/table_test.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::KeyConvertingIterator
status	leveldb/table/two_level_iterator.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
status	qt/transactionrecord.h	/^    Status status;$/;"	m	class:TransactionStatus
status	qt/transactionrecord.h	/^    TransactionStatus status;$/;"	m	class:TransactionRecord
status	qt/transactiontablemodel.cpp	/^    ChangeType status;$/;"	m	struct:TransactionNotification	file:
status	qt/walletmodel.h	/^        StatusCode status;$/;"	m	struct:WalletModel::SendCoinsReturn
statusUpdateNeeded	qt/transactionrecord.cpp	/^bool TransactionRecord::statusUpdateNeeded()$/;"	f	class:TransactionRecord
status_	leveldb/db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon20::DBIter	file:
status_	leveldb/table/block.cc	/^  Status status_;$/;"	m	class:leveldb::Block::Iter	file:
status_	leveldb/table/iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon42::EmptyIterator	file:
status_	leveldb/table/table_test.cc	/^  mutable Status status_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
status_	leveldb/table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon39::TwoLevelIterator	file:
stepBy	qt/wificoinamountfield.cpp	/^    void stepBy(int steps)$/;"	f	class:AmountSpinBox
stepEnabled	qt/wificoinamountfield.cpp	/^    StepEnabled stepEnabled() const$/;"	f	class:AmountSpinBox
stl_shared_counter	memusage.h	/^struct stl_shared_counter$/;"	s	namespace:memusage
stl_tree_node	memusage.h	/^struct stl_tree_node$/;"	s	namespace:memusage
stop	leveldb/db/db_test.cc	/^  port::AtomicPointer stop;$/;"	m	struct:leveldb::__anon30::MTState	file:
stop	rpc/server.cpp	/^UniValue stop(const JSONRPCRequest& jsonRequest)$/;"	f
stop	scheduler.cpp	/^void CScheduler::stop(bool drain)$/;"	f	class:CScheduler
stopAutoRefresh	qt/peertablemodel.cpp	/^void PeerTableModel::stopAutoRefresh()$/;"	f	class:PeerTableModel
stopRequested	scheduler.h	/^    bool stopRequested;$/;"	m	class:CScheduler
stopWhenEmpty	scheduler.h	/^    bool stopWhenEmpty;$/;"	m	class:CScheduler
store	script/sigcache.h	/^    bool store;$/;"	m	class:CachingTransactionSignatureChecker
str	streams.h	/^    std::string str() const$/;"	f	class:CDataStream
str	test/dbwrapper_tests.cpp	/^    std::string str;$/;"	m	struct:StringContentsSerializer	file:
str	univalue/lib/univalue_utffilter.h	/^    std::string &str;$/;"	m	class:JSONUTF8StringFilter
strAccount	wallet/wallet.h	/^    std::string strAccount;$/;"	m	class:CAccountingEntry
strAddedNode	net.h	/^    std::string strAddedNode;$/;"	m	struct:AddedNodeInfo
strComment	wallet/wallet.h	/^    std::string strComment;$/;"	m	class:CAccountingEntry
strComment	wallet/wallet.h	/^    std::string strComment;$/;"	m	class:CWalletKey
strDataDir	chainparamsbase.h	/^    std::string strDataDir;$/;"	m	class:CBaseChainParams
strDebugMessage	consensus/validation.h	/^    std::string strDebugMessage;$/;"	m	class:CValidationState
strFile	wallet/db.h	/^    std::string strFile;$/;"	m	class:CDB
strFile	wallet/db.h	/^    std::string strFile;$/;"	m	class:CWalletDBWrapper
strFromAccount	wallet/wallet.h	/^    std::string strFromAccount;$/;"	m	class:CWalletTx
strHexMaster	test/bip32_tests.cpp	/^    std::string strHexMaster;$/;"	m	struct:TestVector	file:
strMessageMagic	validation.cpp	/^const std::string strMessageMagic = "WiFicoin Signed Message:\\n";$/;"	v
strMethod	rpc/server.h	/^    std::string strMethod;$/;"	m	class:JSONRPCRequest
strMiscWarning	warnings.cpp	/^std::string strMiscWarning;$/;"	v
strNetworkID	chainparams.h	/^    std::string strNetworkID;$/;"	m	class:CChainParams
strOtherAccount	wallet/wallet.h	/^    std::string strOtherAccount;$/;"	m	class:CAccountingEntry
strOverriddenByCommandLine	qt/optionsmodel.h	/^    QString strOverriddenByCommandLine;$/;"	m	class:OptionsModel
strPath	wallet/db.h	/^    std::string strPath;$/;"	m	class:CDBEnv
strRPCUserColonPass	httprpc.cpp	/^static std::string strRPCUserColonPass;$/;"	v	file:
strRejectReason	consensus/validation.h	/^    std::string strRejectReason;$/;"	m	class:CValidationState
strRejectReason	net_processing.cpp	/^    std::string strRejectReason;$/;"	m	struct:__anon50::CBlockReject	file:
strSubVer	net.h	/^    std::string strSubVer, cleanSubVer;$/;"	m	class:CNode
strSubVersion	net.cpp	/^std::string strSubVersion;$/;"	v
strThirdPartyTxUrls	qt/optionsmodel.h	/^    QString strThirdPartyTxUrls;$/;"	m	class:OptionsModel
stream	streams.h	/^    Stream* stream;$/;"	m	class:OverrideStream
streamStateFromFormat	tinyformat.h	/^inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,$/;"	f	namespace:tinyformat::detail
stretchColumnWidth	qt/guiutil.cpp	/^void TableViewLastColumnResizingFixer::stretchColumnWidth(int column)$/;"	f	class:GUIUtil::TableViewLastColumnResizingFixer
stride	qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
string	serialize.h	/^    std::string& string;$/;"	m	class:LimitedString
stringval	test/serialize_tests.cpp	/^    std::string stringval;$/;"	m	class:CSerializeMethodsTestSingle	file:
strnlen	compat/strnlen.cpp	/^size_t strnlen( const char *start, size_t max_len)$/;"	f
strprintf	tinyformat.h	1054;"	d
subdir	Makefile	/^subdir = src$/;"	m
subdir	secp256k1/Makefile	/^subdir = .$/;"	m
subdir	univalue/Makefile	/^subdir = .$/;"	m
subdirs	Makefile	/^subdirs =  src\/univalue src\/secp256k1$/;"	m
submitblock	rpc/mining.cpp	/^UniValue submitblock(const JSONRPCRequest& request)$/;"	f
submitblock_StateCatcher	rpc/mining.cpp	/^    submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}$/;"	f	class:submitblock_StateCatcher
submitblock_StateCatcher	rpc/mining.cpp	/^class submitblock_StateCatcher : public CValidationInterface$/;"	c	file:
subnet	qt/bantablemodel.h	/^    CSubNet subnet;$/;"	m	struct:CCombinedBan
subscribeToCoreSignals	qt/wificoingui.cpp	/^void WiFicoinGUI::subscribeToCoreSignals()$/;"	f	class:WiFicoinGUI
subscribeToCoreSignals	qt/clientmodel.cpp	/^void ClientModel::subscribeToCoreSignals()$/;"	f	class:ClientModel
subscribeToCoreSignals	qt/splashscreen.cpp	/^void SplashScreen::subscribeToCoreSignals()$/;"	f	class:SplashScreen
subscribeToCoreSignals	qt/transactiontablemodel.cpp	/^void TransactionTableModel::subscribeToCoreSignals()$/;"	f	class:TransactionTableModel
subscribeToCoreSignals	qt/walletmodel.cpp	/^void WalletModel::subscribeToCoreSignals()$/;"	f	class:WalletModel
succeed	tinyformat.h	/^        struct succeed { char dummy; };$/;"	s	struct:tinyformat::detail::is_convertible
sum	bench/Examples.cpp	/^volatile double sum = 0.0; \/\/ volatile, global so not optimized away$/;"	v
sum_	leveldb/util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	leveldb/util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sumadd	secp256k1/src/scalar_4x64_impl.h	238;"	d
sumadd	secp256k1/src/scalar_4x64_impl.h	883;"	d
sumadd	secp256k1/src/scalar_8x32_impl.h	317;"	d
sumadd	secp256k1/src/scalar_8x32_impl.h	639;"	d
sumadd_fast	secp256k1/src/scalar_4x64_impl.h	247;"	d
sumadd_fast	secp256k1/src/scalar_4x64_impl.h	884;"	d
sumadd_fast	secp256k1/src/scalar_8x32_impl.h	326;"	d
sumadd_fast	secp256k1/src/scalar_8x32_impl.h	640;"	d
supportsServiceBitsFiltering	chainparams.h	/^    bool supportsServiceBitsFiltering;$/;"	m	struct:CDNSSeedData
surpair	univalue/lib/univalue_utffilter.h	/^    unsigned int surpair; \/\/ First half of open UTF-16 surrogate pair, or 0$/;"	m	class:JSONUTF8StringFilter
swap	prevector.h	/^    void swap(prevector<N, T, Size, Diff>& other) {$/;"	f	class:prevector
swap	test/checkqueue_tests.cpp	/^    void swap(FailingCheck& x)$/;"	f	struct:FailingCheck
swap	test/checkqueue_tests.cpp	/^    void swap(FakeCheck& x){};$/;"	f	struct:FakeCheck
swap	test/checkqueue_tests.cpp	/^    void swap(FakeCheckCheckCompletion& x){};$/;"	f	struct:FakeCheckCheckCompletion
swap	test/checkqueue_tests.cpp	/^    void swap(FrozenCleanupCheck& x){std::swap(should_freeze, x.should_freeze);};$/;"	f	struct:FrozenCleanupCheck
swap	test/checkqueue_tests.cpp	/^    void swap(MemoryCheck& x) { std::swap(b, x.b); };$/;"	f	struct:MemoryCheck
swap	test/checkqueue_tests.cpp	/^    void swap(UniqueCheck& x) { std::swap(x.check_id, check_id); };$/;"	f	struct:UniqueCheck
swap	test/prevector_tests.cpp	/^    void swap() {$/;"	f	class:prevector_tester
swap	validation.h	/^    void swap(CScriptCheck &check) {$/;"	f	class:CScriptCheck
sync	leveldb/db/db_impl.cc	/^  bool sync;$/;"	m	struct:leveldb::DBImpl::Writer	file:
sync	leveldb/include/leveldb/options.h	/^  bool sync;$/;"	m	struct:leveldb::WriteOptions
syncoptions	dbwrapper.h	/^    leveldb::WriteOptions syncoptions;$/;"	m	class:CDBWrapper
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	secp256k1/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	univalue/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
t_	leveldb/db/skiplist_test.cc	/^  ConcurrentTest t_;$/;"	m	class:leveldb::TestState	file:
tab	qt/addressbookpage.h	/^    Tabs tab;$/;"	m	class:AddressBookPage
table	cuckoocache.h	/^    std::vector<Element> table;$/;"	m	class:CuckooCache::cache
table	leveldb/db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile	file:
table0_	leveldb/util/crc32c.cc	/^static const uint32_t table0_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table1_	leveldb/util/crc32c.cc	/^static const uint32_t table1_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table2_	leveldb/util/crc32c.cc	/^static const uint32_t table2_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table3_	leveldb/util/crc32c.cc	/^static const uint32_t table3_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
tableRPC	rpc/server.cpp	/^CRPCTable tableRPC;$/;"	v
tableView	qt/guiutil.h	/^            QTableView* tableView;$/;"	m	class:GUIUtil::TableViewLastColumnResizingFixer
table_	leveldb/db/memtable.h	/^  Table table_;$/;"	m	class:leveldb::MemTable
table_	leveldb/table/table_test.cc	/^  Table* table_;$/;"	m	class:leveldb::TableConstructor	file:
table_	leveldb/util/cache.cc	/^  HandleTable table_;$/;"	m	class:leveldb::__anon13::LRUCache	file:
table_cache_	leveldb/db/db_impl.h	/^  TableCache* table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	leveldb/db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon26::Repairer	file:
table_cache_	leveldb/db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	leveldb/db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon26::Repairer	file:
tables_	leveldb/db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon26::Repairer	file:
tagSequence	test/raii_event_tests.cpp	/^static uint16_t tagSequence = 0;$/;"	v	file:
tag_free	test/raii_event_tests.cpp	/^static void tag_free(void* mem) {$/;"	f	file:
tag_malloc	test/raii_event_tests.cpp	/^static void* tag_malloc(size_t sz) {$/;"	f	file:
tags	test/raii_event_tests.cpp	/^static std::map<void*, short> tags;$/;"	v	file:
tallyitem	wallet/rpcwallet.cpp	/^    tallyitem()$/;"	f	struct:tallyitem
tallyitem	wallet/rpcwallet.cpp	/^struct tallyitem$/;"	s	file:
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
tardir	univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	univalue/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target	leveldb/include/leveldb/env.h	/^  Env* target() const { return target_; }$/;"	f	class:leveldb::EnvWrapper
target	torcontrol.cpp	/^    std::string target;$/;"	m	class:TorController	file:
target_	leveldb/db/fault_injection_test.cc	/^  WritableFile* target_;$/;"	m	class:leveldb::TestWritableFile	file:
target_	leveldb/include/leveldb/env.h	/^  Env* target_;$/;"	m	class:leveldb::EnvWrapper
target_alias	Makefile	/^target_alias = $/;"	m
target_alias	secp256k1/Makefile	/^target_alias = $/;"	m
target_alias	univalue/Makefile	/^target_alias = $/;"	m
taskQueue	scheduler.h	/^    std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;$/;"	m	class:CScheduler
tau	crypto/chacha20.cpp	/^static const unsigned char tau[] = "expand 16-byte k";$/;"	v	file:
templock	reverselock.h	/^    Lock templock;$/;"	m	class:reverse_lock
temporary_fd_	leveldb/util/env_posix.cc	/^  bool temporary_fd_;  \/\/ If true, fd_ is -1 and we open on every read.$/;"	m	class:leveldb::__anon11::PosixRandomAccessFile	file:
test	leveldb/db/db_test.cc	/^  DBTest* test;$/;"	m	struct:leveldb::__anon30::MTState	file:
test	leveldb/util/testharness.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	leveldb/util/testharness.h	/^namespace test {$/;"	n	namespace:leveldb
test	leveldb/util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	leveldb/util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
test	test/prevector_tests.cpp	/^    void test() {$/;"	f	class:prevector_tester	file:
test1	test/bip32_tests.cpp	/^TestVector test1 =$/;"	v
test1	test/crypto_tests.cpp	/^const std::string test1 = LongTestString();$/;"	v
test2	test/bip32_tests.cpp	/^TestVector test2 =$/;"	v
test3	test/bip32_tests.cpp	/^TestVector test3 =$/;"	v
testCreateECDHSecret	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testCreateECDHSecret() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakAdd_1	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakAdd_1() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakAdd_2	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakAdd_2() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakMul_1	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakMul_1() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPrivKeyTweakMul_2	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testPrivKeyTweakMul_2() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testPubKeyCreateNeg	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testPubKeyCreateNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testPubKeyCreatePos	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testPubKeyCreatePos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testRandomize	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testRandomize() throws AssertFailException {$/;"	m	class:NativeSecp256k1Test
testSecKeyVerifyNeg	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testSecKeyVerifyNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testSecKeyVerifyPos	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testSecKeyVerifyPos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testSignNeg	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testSignNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testSignPos	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testSignPos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testVerifyNeg	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testVerifyNeg() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testVerifyPos	secp256k1/src/java/org/wificoin/NativeSecp256k1Test.java	/^    public static void testVerifyPos() throws AssertFailException{$/;"	m	class:NativeSecp256k1Test
testWallet	wallet/test/wallet_tests.cpp	/^static const CWallet testWallet;$/;"	v	file:
test_add_neg_y_diff_x	secp256k1/src/tests.c	/^void test_add_neg_y_diff_x(void) {$/;"	f
test_bad_scalar	secp256k1/src/modules/ecdh/tests_impl.h	/^void test_bad_scalar(void) {$/;"	f
test_cache	test/cuckoocache_tests.cpp	/^double test_cache(size_t megabytes, double load)$/;"	f
test_cache_erase	test/cuckoocache_tests.cpp	/^void test_cache_erase(size_t megabytes)$/;"	f
test_cache_erase_parallel	test/cuckoocache_tests.cpp	/^void test_cache_erase_parallel(size_t megabytes)$/;"	f
test_cache_generations	test/cuckoocache_tests.cpp	/^void test_cache_generations()$/;"	f
test_constant_wnaf	secp256k1/src/tests.c	/^void test_constant_wnaf(const secp256k1_scalar *number, int w) {$/;"	f
test_constant_wnaf_negate	secp256k1/src/tests.c	/^void test_constant_wnaf_negate(const secp256k1_scalar *number) {$/;"	f
test_ec_combine	secp256k1/src/tests.c	/^void test_ec_combine(void) {$/;"	f
test_ecdh_api	secp256k1/src/modules/ecdh/tests_impl.h	/^void test_ecdh_api(void) {$/;"	f
test_ecdh_generator_basepoint	secp256k1/src/modules/ecdh/tests_impl.h	/^void test_ecdh_generator_basepoint(void) {$/;"	f
test_ecdsa_der_parse	secp256k1/src/tests.c	/^int test_ecdsa_der_parse(const unsigned char *sig, size_t siglen, int certainly_der, int certainly_not_der) {$/;"	f
test_ecdsa_edge_cases	secp256k1/src/tests.c	/^void test_ecdsa_edge_cases(void) {$/;"	f
test_ecdsa_end_to_end	secp256k1/src/tests.c	/^void test_ecdsa_end_to_end(void) {$/;"	f
test_ecdsa_openssl	secp256k1/src/tests.c	/^void test_ecdsa_openssl(void) {$/;"	f
test_ecdsa_recovery_api	secp256k1/src/modules/recovery/tests_impl.h	/^void test_ecdsa_recovery_api(void) {$/;"	f
test_ecdsa_recovery_edge_cases	secp256k1/src/modules/recovery/tests_impl.h	/^void test_ecdsa_recovery_edge_cases(void) {$/;"	f
test_ecdsa_recovery_end_to_end	secp256k1/src/modules/recovery/tests_impl.h	/^void test_ecdsa_recovery_end_to_end(void) {$/;"	f
test_ecdsa_sign_verify	secp256k1/src/tests.c	/^void test_ecdsa_sign_verify(void) {$/;"	f
test_ecmult_constants	secp256k1/src/tests.c	/^void test_ecmult_constants(void) {$/;"	f
test_ecmult_gen_blind	secp256k1/src/tests.c	/^void test_ecmult_gen_blind(void) {$/;"	f
test_ecmult_gen_blind_reset	secp256k1/src/tests.c	/^void test_ecmult_gen_blind_reset(void) {$/;"	f
test_exhaustive_addition	secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_addition(const secp256k1_ge *group, const secp256k1_gej *groupj, int order) {$/;"	f
test_exhaustive_ecmult	secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_ecmult(const secp256k1_context *ctx, const secp256k1_ge *group, const secp256k1_gej *groupj, int order) {$/;"	f
test_exhaustive_endomorphism	secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_endomorphism(const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_recovery_sign	secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_recovery_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_recovery_verify	secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_recovery_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_sign	secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_sign(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_exhaustive_verify	secp256k1/src/tests_exhaustive.c	/^void test_exhaustive_verify(const secp256k1_context *ctx, const secp256k1_ge *group, int order) {$/;"	f
test_failed	univalue/test/unitester.cpp	/^static bool test_failed = false;$/;"	v	file:
test_ge	secp256k1/src/tests.c	/^void test_ge(void) {$/;"	f
test_group_decompress	secp256k1/src/tests.c	/^void test_group_decompress(const secp256k1_fe* x) {$/;"	f
test_num_add_sub	secp256k1/src/tests.c	/^void test_num_add_sub(void) {$/;"	f
test_num_jacobi	secp256k1/src/tests.c	/^void test_num_jacobi(void) {$/;"	f
test_num_mod	secp256k1/src/tests.c	/^void test_num_mod(void) {$/;"	f
test_num_negate	secp256k1/src/tests.c	/^void test_num_negate(void) {$/;"	f
test_point_times_order	secp256k1/src/tests.c	/^void test_point_times_order(const secp256k1_gej *point) {$/;"	f
test_rand_bits	secp256k1/src/tests.c	/^void test_rand_bits(int rand32, int bits) {$/;"	f
test_rand_int	secp256k1/src/tests.c	/^void test_rand_int(uint32_t range, uint32_t subrange) {$/;"	f
test_random_pubkeys	secp256k1/src/tests.c	/^void test_random_pubkeys(void) {$/;"	f
test_scalar_split	secp256k1/src/tests.c	/^void test_scalar_split(void) {$/;"	f
test_sqrt	secp256k1/src/tests.c	/^void test_sqrt(const secp256k1_fe *a, const secp256k1_fe *k) {$/;"	f
test_test_wificoin_CPPFLAGS	Makefile	/^test_test_wificoin_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES) -I$(builddir)\/test\/ $(TESTDEFS) $(EVENT_CFLAGS)$/;"	m
test_test_wificoin_CXXFLAGS	Makefile	/^test_test_wificoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
test_test_wificoin_DEPENDENCIES	Makefile	/^test_test_wificoin_DEPENDENCIES = $(am__append_23) \\$/;"	m
test_test_wificoin_LDADD	Makefile	/^test_test_wificoin_LDADD = $(am__append_23) \\$/;"	m
test_test_wificoin_LDFLAGS	Makefile	/^test_test_wificoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static$/;"	m
test_test_wificoin_LINK	Makefile	/^test_test_wificoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_test_wificoin_OBJECTS	Makefile	/^test_test_wificoin_OBJECTS = $(am_test_test_wificoin_OBJECTS) \\$/;"	m
test_test_wificoin_SOURCES	Makefile	/^test_test_wificoin_SOURCES = $(WIFICOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)$/;"	m
test_test_wificoin_fuzzy_CPPFLAGS	Makefile	/^test_test_wificoin_fuzzy_CPPFLAGS = $(AM_CPPFLAGS) $(WIFICOIN_INCLUDES)$/;"	m
test_test_wificoin_fuzzy_CXXFLAGS	Makefile	/^test_test_wificoin_fuzzy_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)$/;"	m
test_test_wificoin_fuzzy_DEPENDENCIES	Makefile	/^test_test_wificoin_fuzzy_DEPENDENCIES =  \\$/;"	m
test_test_wificoin_fuzzy_LDADD	Makefile	/^test_test_wificoin_fuzzy_LDADD = $(LIBUNIVALUE) \\$/;"	m
test_test_wificoin_fuzzy_LDFLAGS	Makefile	/^test_test_wificoin_fuzzy_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_test_wificoin_fuzzy_LINK	Makefile	/^test_test_wificoin_fuzzy_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_test_wificoin_fuzzy_OBJECTS	Makefile	/^test_test_wificoin_fuzzy_OBJECTS =  \\$/;"	m
test_test_wificoin_fuzzy_SOURCES	Makefile	/^test_test_wificoin_fuzzy_SOURCES = test\/test_wificoin_fuzzy.cpp$/;"	m
test_unitester_CXXFLAGS	univalue/Makefile	/^test_unitester_CXXFLAGS = -I$(top_srcdir)\/include -DJSON_TEST_SRC=\\"$(srcdir)\/$(TEST_DATA_DIR)\\"$/;"	m
test_unitester_DEPENDENCIES	univalue/Makefile	/^test_unitester_DEPENDENCIES = libunivalue.la$/;"	m
test_unitester_LDADD	univalue/Makefile	/^test_unitester_LDADD = libunivalue.la$/;"	m
test_unitester_LDFLAGS	univalue/Makefile	/^test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)$/;"	m
test_unitester_LINK	univalue/Makefile	/^test_unitester_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_unitester_OBJECTS	univalue/Makefile	/^test_unitester_OBJECTS = $(am_test_unitester_OBJECTS)$/;"	m
test_unitester_SOURCES	univalue/Makefile	/^test_unitester_SOURCES = test\/unitester.cpp$/;"	m
test_wnaf	secp256k1/src/tests.c	/^void test_wnaf(const secp256k1_scalar *number, int w) {$/;"	f
tests	leveldb/util/testharness.cc	/^std::vector<Test>* tests;$/;"	m	namespace:leveldb::test::__anon15	file:
tests_CPPFLAGS	secp256k1/Makefile	/^tests_CPPFLAGS = -DSECP256K1_BUILD -I$(top_srcdir)\/src \\$/;"	m
tests_DEPENDENCIES	secp256k1/Makefile	/^tests_DEPENDENCIES = $(am__DEPENDENCIES_2) \\$/;"	m
tests_LDADD	secp256k1/Makefile	/^tests_LDADD = $(SECP_LIBS) $(SECP_TEST_LIBS) $(COMMON_LIB)$/;"	m
tests_LDFLAGS	secp256k1/Makefile	/^tests_LDFLAGS = -static$/;"	m
tests_LINK	secp256k1/Makefile	/^tests_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
tests_OBJECTS	secp256k1/Makefile	/^tests_OBJECTS = $(am_tests_OBJECTS)$/;"	m
tests_SOURCES	secp256k1/Makefile	/^tests_SOURCES = src\/tests.c$/;"	m
text	qt/utilitydialog.h	/^    QString text;$/;"	m	class:HelpMessageDialog
textChanged	qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::textChanged()$/;"	f	class:AskPassphraseDialog
textColor	qt/platformstyle.h	/^    QColor textColor;$/;"	m	class:PlatformStyle
thread	leveldb/db/db_bench.cc	/^    ThreadState* thread;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
thread	qt/intro.h	/^    QThread *thread;$/;"	m	class:Intro
thread	qt/rpcconsole.h	/^    QThread thread;$/;"	m	class:RPCConsole
threadDNSAddressSeed	net.h	/^    std::thread threadDNSAddressSeed;$/;"	m	class:CConnman
threadGroup	qt/wificoin.cpp	/^    boost::thread_group threadGroup;$/;"	m	class:WiFicoinCore	file:
threadGroup	test/test_wificoin.h	/^    boost::thread_group threadGroup;$/;"	m	struct:TestingSetup
threadHTTP	httpserver.cpp	/^std::thread threadHTTP;$/;"	v
threadMessageHandler	net.h	/^    std::thread threadMessageHandler;$/;"	m	class:CConnman
threadOpenAddedConnections	net.h	/^    std::thread threadOpenAddedConnections;$/;"	m	class:CConnman
threadOpenConnections	net.h	/^    std::thread threadOpenConnections;$/;"	m	class:CConnman
threadResult	httpserver.cpp	/^std::future<bool> threadResult;$/;"	v
threadSocketHandler	net.h	/^    std::thread threadSocketHandler;$/;"	m	class:CConnman
thread_done	leveldb/db/db_test.cc	/^  port::AtomicPointer thread_done[kNumThreads];$/;"	m	struct:leveldb::__anon30::MTState	file:
threshold	versionbits.h	/^    int threshold;$/;"	m	struct:BIP9Stats
tid	leveldb/db/db_bench.cc	/^  int tid;             \/\/ 0..n-1 when running in n threads$/;"	m	struct:leveldb::__anon18::ThreadState	file:
time	qt/transactionrecord.h	/^    qint64 time;$/;"	m	class:TransactionRecord
time	txmempool.h	/^    int64_t time;$/;"	m	struct:LockPoints
timeLastMempoolReq	net.h	/^    std::atomic<int64_t> timeLastMempoolReq;$/;"	m	class:CNode
timeout	qt/rpcconsole.cpp	/^    void timeout() { func(); }$/;"	f	class:QtRPCTimerBase	file:
timer	qt/peertablemodel.h	/^    QTimer *timer;$/;"	m	class:PeerTableModel
timer	qt/rpcconsole.cpp	/^    QTimer timer;$/;"	m	class:QtRPCTimerBase	file:
timer	qt/trafficgraphwidget.h	/^    QTimer *timer;$/;"	m	class:TrafficGraphWidget
timerInterface	rpc/server.cpp	/^static RPCTimerInterface* timerInterface = nullptr;$/;"	v	file:
tiny_cache_	leveldb/db/autocompact_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::AutoCompactTest	file:
tiny_cache_	leveldb/db/corruption_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::CorruptionTest	file:
tiny_cache_	leveldb/db/fault_injection_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::FaultInjectionTest	file:
tinyformat	tinyformat.h	/^namespace tinyformat {$/;"	n
tinyformat	tinyformat.h	/^namespace tinyformat {}$/;"	n
tinyformat_wchar_is_not_supported	tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	t	struct:tinyformat::detail::is_wchar
tipUpdate	qt/modaloverlay.cpp	/^void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVerificationProgress)$/;"	f	class:ModalOverlay
title	qt/csvmodelwriter.h	/^        QString title;$/;"	m	struct:CSVModelWriter::Column
titleAddText	qt/networkstyle.cpp	/^    const char *titleAddText;$/;"	m	struct:__anon107	file:
titleAddText	qt/networkstyle.h	/^    QString titleAddText;$/;"	m	class:NetworkStyle
tmp	hash.h	/^    uint64_t tmp;$/;"	m	class:CSipHasher
tmp_	leveldb/db/memtable.cc	/^  std::string tmp_;       \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator	file:
tmp_batch_	leveldb/db/db_impl.h	/^  WriteBatch* tmp_batch_;$/;"	m	class:leveldb::DBImpl
tmp_keys_	leveldb/table/filter_block.h	/^  std::vector<Slice> tmp_keys_;   \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FilterBlockBuilder
tmp_storage	leveldb/db/db_impl.h	/^    InternalKey tmp_storage;    \/\/ Used to keep track of compaction progress$/;"	m	struct:leveldb::DBImpl::ManualCompaction
toHTML	qt/transactiondesc.cpp	/^QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionRecord *rec, int unit)$/;"	f	class:TransactionDesc
toInt	tinyformat.h	/^        int toInt() const$/;"	f	class:tinyformat::detail::FormatArg
toIntImpl	tinyformat.h	/^        TINYFORMAT_HIDDEN static int toIntImpl(const void* value)$/;"	f	class:tinyformat::detail::FormatArg
toPosixTime	scheduler.cpp	/^static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)$/;"	f	file:
toVariant	qt/notificator.cpp	/^QVariant FreedesktopImage::toVariant(const QImage &img)$/;"	f	class:FreedesktopImage
toggleHidden	qt/wificoingui.cpp	/^void WiFicoinGUI::toggleHidden()$/;"	f	class:WiFicoinGUI
toggleHideAction	qt/wificoingui.h	/^    QAction *toggleHideAction;$/;"	m	class:WiFicoinGUI
toggleNetworkActive	qt/wificoingui.cpp	/^void WiFicoinGUI::toggleNetworkActive()$/;"	f	class:WiFicoinGUI
toggleVisibility	qt/modaloverlay.cpp	/^void ModalOverlay::toggleVisibility()$/;"	f	class:ModalOverlay
top_build_prefix	Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	secp256k1/Makefile	/^top_build_prefix = $/;"	m
top_build_prefix	univalue/Makefile	/^top_build_prefix = $/;"	m
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_builddir	secp256k1/Makefile	/^top_builddir = .$/;"	m
top_builddir	univalue/Makefile	/^top_builddir = .$/;"	m
top_distdir	secp256k1/Makefile	/^top_distdir = $(distdir)$/;"	m
top_distdir	univalue/Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	secp256k1/Makefile	/^top_srcdir = .$/;"	m
top_srcdir	univalue/Makefile	/^top_srcdir = .$/;"	m
torControlThread	torcontrol.cpp	/^static boost::thread torControlThread;$/;"	v	file:
total	leveldb/db/db_bench.cc	/^  int total;$/;"	m	struct:leveldb::__anon18::SharedState	file:
total	support/lockedpool.h	/^        size_t total;$/;"	m	struct:Arena::Stats
total	support/lockedpool.h	/^        size_t total;$/;"	m	struct:LockedPool::Stats
totalConfirmed	policy/fees.h	/^    double totalConfirmed = 0;$/;"	m	struct:EstimatorBucket
totalTxSize	txmempool.h	/^    uint64_t totalTxSize;      \/\/!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.$/;"	m	class:CTxMemPool
total_bytes	leveldb/db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
trackPackageRemoved	txmempool.cpp	/^void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {$/;"	f	class:CTxMemPool
trackedTxs	policy/fees.h	/^    unsigned int trackedTxs;$/;"	m	class:CBlockPolicyEstimator
transactionCanBeAbandoned	qt/walletmodel.cpp	/^bool WalletModel::transactionCanBeAbandoned(uint256 hash) const$/;"	f	class:WalletModel
transactionCanBeBumped	qt/walletmodel.cpp	/^bool WalletModel::transactionCanBeBumped(uint256 hash) const$/;"	f	class:WalletModel
transactionProxyModel	qt/transactionview.h	/^    TransactionFilterProxy *transactionProxyModel;$/;"	m	class:TransactionView
transactionTableModel	qt/walletmodel.h	/^    TransactionTableModel *transactionTableModel;$/;"	m	class:WalletModel
transactionView	qt/transactionview.h	/^    QTableView *transactionView;$/;"	m	class:TransactionView
transactionView	qt/walletview.h	/^    TransactionView *transactionView;$/;"	m	class:WalletView
transactionsPage	qt/walletview.h	/^    QWidget *transactionsPage;$/;"	m	class:WalletView
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
transform	secp256k1/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	univalue/Makefile	/^transform = $(program_transform_name)$/;"	m
transformNamedArguments	rpc/server.cpp	/^static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, const std::vector<std::string>& argNames)$/;"	f	file:
translateTransactionType	qt/addresstablemodel.cpp	/^static AddressTableEntry::Type translateTransactionType(const QString &strPurpose, bool isMine)$/;"	f	file:
translationInterface	util.cpp	/^CTranslationInterface translationInterface;$/;"	v
trayAndWindowIcon	qt/networkstyle.h	/^    QIcon trayAndWindowIcon;$/;"	m	class:NetworkStyle
trayIcon	qt/wificoingui.h	/^    QSystemTrayIcon *trayIcon;$/;"	m	class:WiFicoinGUI
trayIcon	qt/notificator.h	/^    QSystemTrayIcon *trayIcon;$/;"	m	class:Notificator
trayIconActivated	qt/wificoingui.cpp	/^void WiFicoinGUI::trayIconActivated(QSystemTrayIcon::ActivationReason reason)$/;"	f	class:WiFicoinGUI
trayIconMenu	qt/wificoingui.h	/^    QMenu *trayIconMenu;$/;"	m	class:WiFicoinGUI
trigger	httpserver.cpp	/^void HTTPEvent::trigger(struct timeval* tv)$/;"	f	class:HTTPEvent
try_wait	sync.h	/^    bool try_wait()$/;"	f	class:CSemaphore
tx	blockencodings.h	/^    CTransactionRef tx;$/;"	m	struct:PrefilledTransaction
tx	blockencodings.h	/^    CTransactionRef& tx;$/;"	m	struct:TransactionCompressor
tx	net_processing.cpp	/^    CTransactionRef tx;$/;"	m	struct:COrphanTx	file:
tx	script/sign.h	/^    CTransaction tx;$/;"	m	class:MutableTransactionSignatureCreator
tx	test/DoS_tests.cpp	/^    CTransactionRef tx;$/;"	m	struct:COrphanTx	file:
tx	txmempool.h	/^    CTransactionRef tx;$/;"	m	class:CTxMemPoolEntry
tx	txmempool.h	/^    CTransactionRef tx;$/;"	m	struct:TxMempoolInfo
tx	wallet/wallet.h	/^    CTransactionRef tx;$/;"	m	class:CMerkleTx
tx	wallet/wallet.h	/^    const CWalletTx *tx;$/;"	m	class:COutput
txAddressDecoration	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txAddressDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
txCtAvg	policy/fees.cpp	/^    std::vector<double> txCtAvg;$/;"	m	class:TxConfirmStats	file:
txStatusDecoration	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
txTo	script/interpreter.cpp	/^    const CTransaction& txTo;  \/\/!< reference to the spending transaction (the one being serialized)$/;"	m	class:__anon99::CTransactionSignatureSerializer	file:
txTo	script/interpreter.h	/^    const CTransaction txTo;$/;"	m	class:MutableTransactionSignatureChecker
txTo	script/interpreter.h	/^    const CTransaction* txTo;$/;"	m	class:TransactionSignatureChecker
txTo	script/sign.h	/^    const CTransaction* txTo;$/;"	m	class:TransactionSignatureCreator
txWatchonlyDecoration	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txWatchonlyDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
tx_invalid	test/data/tx_invalid.json.h	/^static unsigned const char tx_invalid[] = {$/;"	m	namespace:json_tests
tx_valid	test/data/tx_valid.json.h	/^static unsigned const char tx_valid[] = {$/;"	m	namespace:json_tests
txdata	script/interpreter.h	/^    const PrecomputedTransactionData* txdata;$/;"	m	class:TransactionSignatureChecker
txdata	validation.h	/^    PrecomputedTransactionData *txdata;$/;"	m	class:CScriptCheck
txdelegate	qt/overviewpage.h	/^    TxViewDelegate *txdelegate;$/;"	m	class:OverviewPage
txid	wallet/feebumper.h	/^    const uint256 txid;$/;"	m	class:CFeeBumper
txid_index	txmempool.h	/^struct txid_index {};$/;"	s
txids	wallet/rpcwallet.cpp	/^    std::vector<uint256> txids;$/;"	m	struct:tallyitem	file:
txiter	txmempool.h	/^    typedef indexed_transaction_set::nth_index<0>::type::iterator txiter;$/;"	t	class:CTxMemPool
txlinksMap	txmempool.h	/^    typedef std::map<txiter, TxLinks, CompareIteratorByHash> txlinksMap;$/;"	t	class:CTxMemPool
txn	blockencodings.h	/^    std::vector<CTransactionRef> txn;$/;"	m	class:BlockTransactions
txn	merkleblock.h	/^    CPartialMerkleTree txn;$/;"	m	class:CMerkleBlock
txn_available	blockencodings.h	/^    std::vector<CTransactionRef> txn_available;$/;"	m	class:PartiallyDownloadedBlock
txnouttype	script/standard.h	/^enum txnouttype$/;"	g
txout	compressor.h	/^    CTxOut &txout;$/;"	m	class:CTxOutCompressor
txout	undo.h	/^    Coin* txout;$/;"	m	class:TxInUndoDeserializer
txout	undo.h	/^    const Coin* txout;$/;"	m	class:TxInUndoSerializer
txout	wallet/wallet.h	/^    CTxOut txout;$/;"	m	class:CInputCoin
txval	test/serialize_tests.cpp	/^    CTransactionRef txval;$/;"	m	class:CSerializeMethodsTestSingle	file:
typ	univalue/include/univalue.h	/^    UniValue::VType typ;$/;"	m	class:UniValue
type	leveldb/db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type	leveldb/table/table_test.cc	/^  TestType type;$/;"	m	struct:leveldb::TestArgs	file:
type	protocol.h	/^    int type;$/;"	m	class:CInv
type	qt/addresstablemodel.cpp	/^    Type type;$/;"	m	struct:AddressTableEntry	file:
type	qt/transactionrecord.h	/^    Type type;$/;"	m	class:TransactionRecord
type	rpc/server.h	/^    UniValue::VType type;$/;"	m	struct:UniValueType
type	univalue/include/univalue.h	/^    enum VType type() const { return getType(); }$/;"	f	class:UniValue
type	zmq/zmqabstractnotifier.h	/^    std::string type;$/;"	m	class:CZMQAbstractNotifier
typeAny	rpc/server.h	/^    bool typeAny;$/;"	m	struct:UniValueType
typeFilter	qt/transactionfilterproxy.h	/^    quint32 typeFilter;$/;"	m	class:TransactionFilterProxy
typeWidget	qt/transactionview.h	/^    QComboBox *typeWidget;$/;"	m	class:TransactionView
type_crc_	leveldb/db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
uWFC	qt/wificoinunits.h	/^        uWFC$/;"	e	enum:WiFicoinUnits::Unit
ucmp	leveldb/db/version_set.cc	/^  const Comparator* ucmp;$/;"	m	struct:leveldb::__anon22::Saver	file:
ui	qt/addressbookpage.h	/^    Ui::AddressBookPage *ui;$/;"	m	class:AddressBookPage
ui	qt/askpassphrasedialog.h	/^    Ui::AskPassphraseDialog *ui;$/;"	m	class:AskPassphraseDialog
ui	qt/coincontroldialog.h	/^    Ui::CoinControlDialog *ui;$/;"	m	class:CoinControlDialog
ui	qt/editaddressdialog.h	/^    Ui::EditAddressDialog *ui;$/;"	m	class:EditAddressDialog
ui	qt/intro.h	/^    Ui::Intro *ui;$/;"	m	class:Intro
ui	qt/modaloverlay.h	/^    Ui::ModalOverlay *ui;$/;"	m	class:ModalOverlay
ui	qt/openuridialog.h	/^    Ui::OpenURIDialog *ui;$/;"	m	class:OpenURIDialog
ui	qt/optionsdialog.h	/^    Ui::OptionsDialog *ui;$/;"	m	class:OptionsDialog
ui	qt/overviewpage.h	/^    Ui::OverviewPage *ui;$/;"	m	class:OverviewPage
ui	qt/receivecoinsdialog.h	/^    Ui::ReceiveCoinsDialog *ui;$/;"	m	class:ReceiveCoinsDialog
ui	qt/receiverequestdialog.h	/^    Ui::ReceiveRequestDialog *ui;$/;"	m	class:ReceiveRequestDialog
ui	qt/rpcconsole.h	/^    Ui::RPCConsole *ui;$/;"	m	class:RPCConsole
ui	qt/sendcoinsdialog.h	/^    Ui::SendCoinsDialog *ui;$/;"	m	class:SendCoinsDialog
ui	qt/sendcoinsentry.h	/^    Ui::SendCoinsEntry *ui;$/;"	m	class:SendCoinsEntry
ui	qt/signverifymessagedialog.h	/^    Ui::SignVerifyMessageDialog *ui;$/;"	m	class:SignVerifyMessageDialog
ui	qt/transactiondescdialog.h	/^    Ui::TransactionDescDialog *ui;$/;"	m	class:TransactionDescDialog
ui	qt/utilitydialog.h	/^    Ui::HelpMessageDialog *ui;$/;"	m	class:HelpMessageDialog
uiInterface	net.h	/^        CClientUIInterface* uiInterface = nullptr;$/;"	m	struct:CConnman::Options
uiInterface	ui_interface.cpp	/^CClientUIInterface uiInterface;$/;"	v
uiReady	qt/paymentserver.cpp	/^void PaymentServer::uiReady()$/;"	f	class:PaymentServer
uint128_t	secp256k1/src/util.h	/^SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;$/;"	t
uint160	uint256.h	/^    explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}$/;"	f	class:uint160
uint160	uint256.h	/^    uint160() {}$/;"	f	class:uint160
uint160	uint256.h	/^    uint160(const base_blob<160>& b) : base_blob<160>(b) {}$/;"	f	class:uint160
uint160	uint256.h	/^class uint160 : public base_blob<160> {$/;"	c
uint160S	test/uint256_tests.cpp	/^inline uint160 uint160S(const char *str)$/;"	f
uint160S	test/uint256_tests.cpp	/^inline uint160 uint160S(const std::string& str)$/;"	f
uint16_t	leveldb/port/win/stdint.h	/^typedef unsigned short        uint16_t;$/;"	t
uint256	uint256.h	/^    explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}$/;"	f	class:uint256
uint256	uint256.h	/^    uint256() {}$/;"	f	class:uint256
uint256	uint256.h	/^    uint256(const base_blob<256>& b) : base_blob<256>(b) {}$/;"	f	class:uint256
uint256	uint256.h	/^class uint256 : public base_blob<256> {$/;"	c
uint256S	uint256.h	/^inline uint256 uint256S(const char *str)$/;"	f
uint256S	uint256.h	/^inline uint256 uint256S(const std::string& str)$/;"	f
uint32_t	chain.h	/^enum BlockStatus: uint32_t {$/;"	g
uint32_t	leveldb/port/win/stdint.h	/^typedef unsigned int          uint32_t;$/;"	t
uint64_t	leveldb/port/win/stdint.h	/^typedef unsigned long long    uint64_t;$/;"	t
uint64_t	protocol.h	/^enum ServiceFlags : uint64_t {$/;"	g
uint8_t	leveldb/port/win/stdint.h	/^typedef unsigned char         uint8_t;$/;"	t
uint8_t	netbase.cpp	/^enum SOCKS5Atyp: uint8_t {$/;"	g	file:
uint8_t	netbase.cpp	/^enum SOCKS5Command: uint8_t {$/;"	g	file:
uint8_t	netbase.cpp	/^enum SOCKS5Method: uint8_t {$/;"	g	file:
uint8_t	netbase.cpp	/^enum SOCKS5Reply: uint8_t {$/;"	g	file:
uint8_t	netbase.cpp	/^enum SOCKSVersion: uint8_t {$/;"	g	file:
uint_error	arith_uint256.h	/^    explicit uint_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:uint_error
uint_error	arith_uint256.h	/^class uint_error : public std::runtime_error {$/;"	c
unbanSelectedNode	qt/rpcconsole.cpp	/^void RPCConsole::unbanSelectedNode()$/;"	f	class:RPCConsole
unconfTxs	policy/fees.cpp	/^    std::vector<std::vector<int> > unconfTxs;  \/\/unconfTxs[Y][X]$/;"	m	class:TxConfirmStats	file:
uncounting_illegal_callback_fn	secp256k1/src/tests.c	/^static void uncounting_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
unescape_unicode_test	univalue/test/unitester.cpp	/^void unescape_unicode_test()$/;"	f
unit	qt/wificoinamountfield.h	/^    QValueComboBox *unit;$/;"	m	class:WiFicoinAmountField
unit	qt/overviewpage.cpp	/^    int unit;$/;"	m	class:TxViewDelegate	file:
unitChanged	qt/wificoinamountfield.cpp	/^void WiFicoinAmountField::unitChanged(int idx)$/;"	f	class:WiFicoinAmountField
unitDisplayControl	qt/wificoingui.h	/^    UnitDisplayStatusBarControl *unitDisplayControl;$/;"	m	class:WiFicoinGUI
unitlist	qt/wificoinunits.h	/^    QList<WiFicoinUnits::Unit> unitlist;$/;"	m	class:WiFicoinUnits
unlockAction	qt/coincontroldialog.h	/^    QAction *unlockAction;$/;"	m	class:CoinControlDialog
unlockCoin	qt/coincontroldialog.cpp	/^void CoinControlDialog::unlockCoin()$/;"	f	class:CoinControlDialog
unlockCoin	qt/walletmodel.cpp	/^void WalletModel::unlockCoin(COutPoint& output)$/;"	f	class:WalletModel
unlockWallet	qt/walletframe.cpp	/^void WalletFrame::unlockWallet()$/;"	f	class:WalletFrame
unlockWallet	qt/walletview.cpp	/^void WalletView::unlockWallet()$/;"	f	class:WalletView
unordered_node	memusage.h	/^struct unordered_node : private X$/;"	s	namespace:memusage
unsubscribeFromCoreSignals	qt/wificoingui.cpp	/^void WiFicoinGUI::unsubscribeFromCoreSignals()$/;"	f	class:WiFicoinGUI
unsubscribeFromCoreSignals	qt/clientmodel.cpp	/^void ClientModel::unsubscribeFromCoreSignals()$/;"	f	class:ClientModel
unsubscribeFromCoreSignals	qt/splashscreen.cpp	/^void SplashScreen::unsubscribeFromCoreSignals()$/;"	f	class:SplashScreen
unsubscribeFromCoreSignals	qt/transactiontablemodel.cpp	/^void TransactionTableModel::unsubscribeFromCoreSignals()$/;"	f	class:TransactionTableModel
unsubscribeFromCoreSignals	qt/walletmodel.cpp	/^void WalletModel::unsubscribeFromCoreSignals()$/;"	f	class:WalletModel
untrackedTxs	policy/fees.h	/^    unsigned int untrackedTxs;$/;"	m	class:CBlockPolicyEstimator
update	limitedmap.h	/^    void update(const_iterator itIn, const mapped_type& v)$/;"	f	class:limitedmap
update	qt/receiverequestdialog.cpp	/^void ReceiveRequestDialog::update()$/;"	f	class:ReceiveRequestDialog
update	test/prevector_tests.cpp	/^    void update(Size pos, const T& value) {$/;"	f	class:prevector_tester
updateAddressBook	qt/walletmodel.cpp	/^void WalletModel::updateAddressBook(const QString &address, const QString &label,$/;"	f	class:WalletModel
updateAlert	qt/clientmodel.cpp	/^void ClientModel::updateAlert()$/;"	f	class:ClientModel
updateAlerts	qt/overviewpage.cpp	/^void OverviewPage::updateAlerts(const QString &warnings)$/;"	f	class:OverviewPage
updateAmountColumnTitle	qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::updateAmountColumnTitle()$/;"	f	class:RecentRequestsTableModel
updateAmountColumnTitle	qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateAmountColumnTitle()$/;"	f	class:TransactionTableModel
updateBanlist	qt/clientmodel.cpp	/^void ClientModel::updateBanlist()$/;"	f	class:ClientModel
updateCoinControlState	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)$/;"	f	class:SendCoinsDialog
updateConfirmations	qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateConfirmations()$/;"	f	class:TransactionTableModel
updateDefaultProxyNets	qt/optionsdialog.cpp	/^void OptionsDialog::updateDefaultProxyNets()$/;"	f	class:OptionsDialog
updateDisplayUnit	qt/wificoingui.cpp	/^void UnitDisplayStatusBarControl::updateDisplayUnit(int newUnits)$/;"	f	class:UnitDisplayStatusBarControl
updateDisplayUnit	qt/overviewpage.cpp	/^void OverviewPage::updateDisplayUnit()$/;"	f	class:OverviewPage
updateDisplayUnit	qt/receivecoinsdialog.cpp	/^void ReceiveCoinsDialog::updateDisplayUnit()$/;"	f	class:ReceiveCoinsDialog
updateDisplayUnit	qt/recentrequeststablemodel.cpp	/^void RecentRequestsTableModel::updateDisplayUnit()$/;"	f	class:RecentRequestsTableModel
updateDisplayUnit	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateDisplayUnit()$/;"	f	class:SendCoinsDialog
updateDisplayUnit	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::updateDisplayUnit()$/;"	f	class:SendCoinsEntry
updateDisplayUnit	qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateDisplayUnit()$/;"	f	class:TransactionTableModel
updateEncryptionStatus	qt/walletview.cpp	/^void WalletView::updateEncryptionStatus()$/;"	f	class:WalletView
updateEntry	qt/addresstablemodel.cpp	/^    void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status)$/;"	f	class:AddressTablePriv
updateEntry	qt/addresstablemodel.cpp	/^void AddressTableModel::updateEntry(const QString &address,$/;"	f	class:AddressTableModel
updateFeeMinimizedLabel	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateFeeMinimizedLabel()$/;"	f	class:SendCoinsDialog
updateFeeSectionControls	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateFeeSectionControls()$/;"	f	class:SendCoinsDialog
updateHeadersSyncProgressLabel	qt/wificoingui.cpp	/^void WiFicoinGUI::updateHeadersSyncProgressLabel()$/;"	f	class:WiFicoinGUI
updateLabel	qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::updateLabel(const QString &address)$/;"	f	class:SendCoinsEntry
updateLabelLocked	qt/coincontroldialog.cpp	/^void CoinControlDialog::updateLabelLocked()$/;"	f	class:CoinControlDialog
updateLabels	qt/coincontroldialog.cpp	/^void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)$/;"	f	class:CoinControlDialog
updateMinFeeLabel	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateMinFeeLabel()$/;"	f	class:SendCoinsDialog
updateNetworkActive	qt/clientmodel.cpp	/^void ClientModel::updateNetworkActive(bool networkActive)$/;"	f	class:ClientModel
updateNetworkState	qt/wificoingui.cpp	/^void WiFicoinGUI::updateNetworkState()$/;"	f	class:WiFicoinGUI
updateNetworkState	qt/rpcconsole.cpp	/^void RPCConsole::updateNetworkState()$/;"	f	class:RPCConsole
updateNodeDetail	qt/rpcconsole.cpp	/^void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)$/;"	f	class:RPCConsole
updateNumConnections	qt/clientmodel.cpp	/^void ClientModel::updateNumConnections(int numConnections)$/;"	f	class:ClientModel
updateProxyValidationState	qt/optionsdialog.cpp	/^void OptionsDialog::updateProxyValidationState()$/;"	f	class:OptionsDialog
updateRates	qt/trafficgraphwidget.cpp	/^void TrafficGraphWidget::updateRates()$/;"	f	class:TrafficGraphWidget
updateSmartFeeLabel	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateSmartFeeLabel()$/;"	f	class:SendCoinsDialog
updateStatus	qt/transactionrecord.cpp	/^void TransactionRecord::updateStatus(const CWalletTx &wtx)$/;"	f	class:TransactionRecord
updateStatus	qt/walletmodel.cpp	/^void WalletModel::updateStatus()$/;"	f	class:WalletModel
updateTabsAndLabels	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateTabsAndLabels()$/;"	f	class:SendCoinsDialog
updateTimer	qt/clientmodel.cpp	/^void ClientModel::updateTimer()$/;"	f	class:ClientModel
updateTrafficStats	qt/rpcconsole.cpp	/^void RPCConsole::updateTrafficStats(quint64 totalBytesIn, quint64 totalBytesOut)$/;"	f	class:RPCConsole
updateTransaction	qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)$/;"	f	class:TransactionTableModel
updateTransaction	qt/walletmodel.cpp	/^void WalletModel::updateTransaction()$/;"	f	class:WalletModel
updateView	qt/coincontroldialog.cpp	/^void CoinControlDialog::updateView()$/;"	f	class:CoinControlDialog
updateWallet	qt/transactiontablemodel.cpp	/^    void updateWallet(const uint256 &hash, int status, bool showTransaction)$/;"	f	class:TransactionTablePriv
updateWatchOnlyColumn	qt/transactionview.cpp	/^void TransactionView::updateWatchOnlyColumn(bool fHaveWatchOnly)$/;"	f	class:TransactionView
updateWatchOnlyFlag	qt/walletmodel.cpp	/^void WalletModel::updateWatchOnlyFlag(bool fHaveWatchonly)$/;"	f	class:WalletModel
updateWatchOnlyLabels	qt/overviewpage.cpp	/^void OverviewPage::updateWatchOnlyLabels(bool showWatchOnly)$/;"	f	class:OverviewPage
updateYesButton	qt/sendcoinsdialog.cpp	/^void SendConfirmationDialog::updateYesButton()$/;"	f	class:SendConfirmationDialog
update_ancestor_state	txmempool.h	/^    update_ancestor_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount, int64_t _modifySigOpsCost) :$/;"	f	struct:update_ancestor_state
update_ancestor_state	txmempool.h	/^struct update_ancestor_state$/;"	s
update_descendant_state	txmempool.h	/^    update_descendant_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount) :$/;"	f	struct:update_descendant_state
update_descendant_state	txmempool.h	/^struct update_descendant_state$/;"	s
update_fee_delta	txmempool.h	/^    update_fee_delta(int64_t _feeDelta) : feeDelta(_feeDelta) { }$/;"	f	struct:update_fee_delta
update_fee_delta	txmempool.h	/^struct update_fee_delta$/;"	s
update_for_parent_inclusion	miner.h	/^    update_for_parent_inclusion(CTxMemPool::txiter it) : iter(it) {}$/;"	f	struct:update_for_parent_inclusion
update_for_parent_inclusion	miner.h	/^struct update_for_parent_inclusion$/;"	s
update_lock_points	txmempool.h	/^    update_lock_points(const LockPoints& _lp) : lp(_lp) { }$/;"	f	struct:update_lock_points
update_lock_points	txmempool.h	/^struct update_lock_points$/;"	s
uptime	rpc/server.cpp	/^UniValue uptime(const JSONRPCRequest& jsonRequest)$/;"	f
uriServer	qt/paymentserver.h	/^    QLocalServer* uriServer;$/;"	m	class:PaymentServer
uriTests	qt/test/uritests.cpp	/^void URITests::uriTests()$/;"	f	class:URITests
uri_prefixes	rest.cpp	/^} uri_prefixes[] = {$/;"	v	typeref:struct:__anon6	file:
url	qt/rpcconsole.cpp	/^    const char *url;$/;"	m	struct:__anon110	file:
urlDecode	httpserver.cpp	/^std::string urlDecode(const std::string &urlEncoded) {$/;"	f
usage	test/coins_tests.cpp	/^    size_t& usage() { return cachedCoinsUsage; }$/;"	f	class:__anon79::CCoinsViewCacheTest
usage_	leveldb/util/cache.cc	/^  size_t usage_;$/;"	m	class:leveldb::__anon13::LRUCache	file:
usage_error	secp256k1/build-aux/test-driver	/^usage_error ()$/;"	f
usage_error	univalue/build-aux/test-driver	/^usage_error ()$/;"	f
useExtraSpacing	qt/platformstyle.cpp	/^    const bool useExtraSpacing;$/;"	m	struct:__anon112	file:
useExtraSpacing	qt/platformstyle.h	/^    bool useExtraSpacing;$/;"	m	class:PlatformStyle
use_count	memusage.h	/^    size_t use_count;$/;"	m	struct:memusage::stl_shared_counter
used	support/lockedpool.h	/^        size_t used;$/;"	m	struct:Arena::Stats
used	support/lockedpool.h	/^        size_t used;$/;"	m	struct:LockedPool::Stats
usedReceivingAddresses	qt/walletframe.cpp	/^void WalletFrame::usedReceivingAddresses()$/;"	f	class:WalletFrame
usedReceivingAddresses	qt/walletview.cpp	/^void WalletView::usedReceivingAddresses()$/;"	f	class:WalletView
usedReceivingAddressesAction	qt/wificoingui.h	/^    QAction *usedReceivingAddressesAction;$/;"	m	class:WiFicoinGUI
usedReceivingAddressesPage	qt/walletview.h	/^    AddressBookPage *usedReceivingAddressesPage;$/;"	m	class:WalletView
usedSendingAddresses	qt/walletframe.cpp	/^void WalletFrame::usedSendingAddresses()$/;"	f	class:WalletFrame
usedSendingAddresses	qt/walletview.cpp	/^void WalletView::usedSendingAddresses()$/;"	f	class:WalletView
usedSendingAddressesAction	qt/wificoingui.h	/^    QAction *usedSendingAddressesAction;$/;"	m	class:WiFicoinGUI
usedSendingAddressesPage	qt/walletview.h	/^    AddressBookPage *usedSendingAddressesPage;$/;"	m	class:WalletView
userClosed	qt/modaloverlay.h	/^    bool userClosed;$/;"	m	class:ModalOverlay
user_comparator	leveldb/db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	leveldb/db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	leveldb/db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon20::DBIter	file:
user_comparator_	leveldb/db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_function	leveldb/util/env_posix.cc	/^  void (*user_function)(void*);$/;"	m	struct:leveldb::__anon11::__anon12::StartThreadState	file:
user_key	leveldb/db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	leveldb/db/dbformat.h	/^  Slice user_key() const { return Slice(kstart_, end_ - kstart_ - 8); }$/;"	f	class:leveldb::LookupKey
user_key	leveldb/db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
user_key	leveldb/db/version_set.cc	/^  Slice user_key;$/;"	m	struct:leveldb::__anon22::Saver	file:
user_policy_	leveldb/db/dbformat.h	/^  const FilterPolicy* const user_policy_;$/;"	m	class:leveldb::InternalFilterPolicy
username	netbase.cpp	/^    std::string username;$/;"	m	struct:ProxyCredentials	file:
utf8	qt/guiutil.cpp	/^static fs::detail::utf8_codecvt_facet utf8;$/;"	v	file:
utxoData	test/coins_tests.cpp	/^UtxoData utxoData;$/;"	v
uvTypeName	univalue/lib/univalue.cpp	/^const char *uvTypeName(UniValue::VType t)$/;"	f
v	hash.h	/^    uint64_t v[4];$/;"	m	class:CSipHasher
v	secp256k1/src/hash.h	/^    unsigned char v[32];$/;"	m	struct:__anon62
vAddedNodes	net.h	/^    std::vector<std::string> vAddedNodes;$/;"	m	class:CConnman
vAddrToSend	net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vBinds	net.h	/^        std::vector<CService> vBinds, vWhiteBinds;$/;"	m	struct:CConnman::Options
vBits	merkleblock.h	/^    std::vector<bool> vBits;$/;"	m	class:CPartialMerkleTree
vBlockHashesToAnnounce	net.h	/^    std::vector<uint256> vBlockHashesToAnnounce;$/;"	m	class:CNode
vBlocksInFlight	net_processing.cpp	/^    std::list<QueuedBlock> vBlocksInFlight;$/;"	m	struct:__anon50::CNodeState	file:
vChain	chain.h	/^    std::vector<CBlockIndex*> vChain;$/;"	m	class:CChain
vCoins	wallet/test/wallet_tests.cpp	/^static std::vector<COutput> vCoins;$/;"	v	file:
vData	bloom.h	/^    std::vector<unsigned char> vData;$/;"	m	class:CBloomFilter
vDeployments	consensus/params.h	/^    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];$/;"	m	struct:Consensus::Params
vDerive	test/bip32_tests.cpp	/^    std::vector<TestDerivation> vDerive;$/;"	m	struct:TestVector	file:
vErrors	wallet/feebumper.h	/^    std::vector<std::string> vErrors;$/;"	m	class:CFeeBumper
vExtraTxnForCompactIt	net_processing.cpp	/^static size_t vExtraTxnForCompactIt = 0;$/;"	v	file:
vFixedSeeds	chainparams.h	/^    std::vector<SeedSpec6> vFixedSeeds;$/;"	m	class:CChainParams
vHash	merkleblock.h	/^    std::vector<uint256> vHash;$/;"	m	class:CPartialMerkleTree
vHave	primitives/block.h	/^    std::vector<uint256> vHave;$/;"	m	struct:CBlockLocator
vHeightInFlight	net_processing.h	/^    std::vector<int> vHeightInFlight;$/;"	m	struct:CNodeStateStats
vInventoryBlockToSend	net.h	/^    std::vector<uint256> vInventoryBlockToSend;$/;"	m	class:CNode
vKeys	wallet/wallet.cpp	/^    std::vector<CKeyID> &vKeys;$/;"	m	class:CAffectedKeysVisitor	file:
vMasterKey	wallet/crypter.h	/^    CKeyingMaterial vMasterKey;$/;"	m	class:CCryptoKeyStore
vMatchedTxn	merkleblock.h	/^    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;$/;"	m	class:CMerkleBlock
vMsgsBeforeOpenLog	util.cpp	/^static std::list<std::string>* vMsgsBeforeOpenLog;$/;"	v	file:
vNodes	net.h	/^    std::vector<CNode*> vNodes;$/;"	m	class:CConnman
vNodesDisconnected	net.h	/^    std::list<CNode*> vNodesDisconnected;$/;"	m	class:CConnman
vOneShots	net.h	/^    std::deque<std::string> vOneShots;$/;"	m	class:CConnman
vOrderForm	wallet/wallet.h	/^    std::vector<std::pair<std::string, std::string> > vOrderForm;$/;"	m	class:CWalletTx
vProcessMsg	net.h	/^    std::list<CNetMessage> vProcessMsg;$/;"	m	class:CNode
vQueueNotifications	qt/transactiontablemodel.cpp	/^static std::vector< TransactionNotification > vQueueNotifications;$/;"	v	file:
vRPCCommands	qt/test/rpcnestedtests.cpp	/^static const CRPCCommand vRPCCommands[] =$/;"	v	file:
vRPCCommands	rpc/server.cpp	/^static const CRPCCommand vRPCCommands[] =$/;"	v	file:
vRPCConvertParams	rpc/client.cpp	/^static const CRPCConvertParam vRPCConvertParams[] =$/;"	v	file:
vRandom	addrman.h	/^    std::vector<int> vRandom;$/;"	m	class:CAddrMan
vRecv	net.h	/^    CDataStream vRecv;              \/\/ received message data$/;"	m	class:CNetMessage
vRecvGetData	net.h	/^    std::deque<CInv> vRecvGetData;$/;"	m	class:CNode
vRecvMsg	net.h	/^    std::list<CNetMessage> vRecvMsg;  \/\/ Used only by SocketHandler thread$/;"	m	class:CNode
vRelayExpiration	net_processing.cpp	/^    std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration;$/;"	m	namespace:__anon49	file:
vSamplesIn	qt/trafficgraphwidget.h	/^    QQueue<float> vSamplesIn;$/;"	m	class:TrafficGraphWidget
vSamplesOut	qt/trafficgraphwidget.h	/^    QQueue<float> vSamplesOut;$/;"	m	class:TrafficGraphWidget
vSeedNodes	net.h	/^        std::vector<std::string> vSeedNodes;$/;"	m	struct:CConnman::Options
vSeeds	chainparams.h	/^    std::vector<CDNSSeedData> vSeeds;$/;"	m	class:CChainParams
vSendMsg	net.h	/^    std::deque<std::vector<unsigned char>> vSendMsg;$/;"	m	class:CNode
vSorted	timedata.h	/^    std::vector<T> vSorted;$/;"	m	class:CMedianFilter
vTxFees	miner.h	/^    std::vector<CAmount> vTxFees;$/;"	m	struct:CBlockTemplate
vTxHashes	txmempool.h	/^    std::vector<std::pair<uint256, txiter> > vTxHashes; \/\/!< All tx witness hashes\/entries in mapTx, in random order$/;"	m	class:CTxMemPool
vTxHashesIdx	txmempool.h	/^    mutable size_t vTxHashesIdx; \/\/!< Index in mempool's vTxHashes$/;"	m	class:CTxMemPoolEntry
vTxSigOpsCost	miner.h	/^    std::vector<int64_t> vTxSigOpsCost;$/;"	m	struct:CBlockTemplate
vValues	timedata.h	/^    std::vector<T> vValues;$/;"	m	class:CMedianFilter
vWalletUpgrade	wallet/walletdb.cpp	/^    std::vector<uint256> vWalletUpgrade;$/;"	m	class:CWalletScanState	file:
vWhiteBinds	net.h	/^        std::vector<CService> vBinds, vWhiteBinds;$/;"	m	struct:CConnman::Options
vWhitelistedRange	net.h	/^        std::vector<CSubNet> vWhitelistedRange;$/;"	m	struct:CConnman::Options
vWhitelistedRange	net.h	/^    std::vector<CSubNet> vWhitelistedRange;$/;"	m	class:CConnman
va_copy	leveldb/util/env_win.cc	30;"	d	file:
val	leveldb/util/env_test.cc	/^  int val;$/;"	m	struct:leveldb::State	file:
val	univalue/include/univalue.h	/^    std::string val;                       \/\/ numbers are stored as C++ strings$/;"	m	class:UniValue
valid	netaddress.h	/^        bool valid;$/;"	m	class:CSubNet
valid	qt/wificoinunits.cpp	/^bool WiFicoinUnits::valid(int unit)$/;"	f	class:WiFicoinUnits
valid	qt/qvalidatedlineedit.h	/^    bool valid;$/;"	m	class:QValidatedLineEdit
valid	qt/walletmodel.h	/^        bool valid;$/;"	m	class:WalletModel::UnlockContext
validNumStr	univalue/lib/univalue.cpp	/^static bool validNumStr(const string& s)$/;"	f	file:
valid_	leveldb/db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon20::DBIter	file:
valid_	leveldb/table/iterator_wrapper.h	/^  bool valid_;$/;"	m	class:leveldb::IteratorWrapper
validate	qt/wificoinaddressvalidator.cpp	/^QValidator::State WiFicoinAddressCheckValidator::validate(QString &input, int &pos) const$/;"	f	class:WiFicoinAddressCheckValidator
validate	qt/wificoinaddressvalidator.cpp	/^QValidator::State WiFicoinAddressEntryValidator::validate(QString &input, int &pos) const$/;"	f	class:WiFicoinAddressEntryValidator
validate	qt/wificoinamountfield.cpp	/^    QValidator::State validate(QString &text, int &pos) const$/;"	f	class:AmountSpinBox
validate	qt/wificoinamountfield.cpp	/^bool WiFicoinAmountField::validate()$/;"	f	class:WiFicoinAmountField
validate	qt/optionsdialog.cpp	/^QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) const$/;"	f	class:ProxyAddressValidator
validate	qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::validate()$/;"	f	class:SendCoinsEntry
validateAddress	qt/walletmodel.cpp	/^bool WalletModel::validateAddress(const QString &address)$/;"	f	class:WalletModel
validateaddress	rpc/misc.cpp	/^UniValue validateaddress(const JSONRPCRequest& request)$/;"	f
valtype	script/interpreter.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	script/ismine.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	script/sign.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	script/standard.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
valtype	test/transaction_tests.cpp	/^typedef std::vector<unsigned char> valtype;$/;"	t	file:
value	leveldb/db/db_iter.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon20::DBIter
value	leveldb/db/db_test.cc	/^    virtual Slice value() const { return iter_->second; }$/;"	f	class:leveldb::ModelDB::ModelIter
value	leveldb/db/memtable.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::MemTableIterator
value	leveldb/db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
value	leveldb/db/version_set.cc	/^  std::string* value;$/;"	m	struct:leveldb::__anon22::Saver	file:
value	leveldb/table/block.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::Block::Iter
value	leveldb/table/iterator.cc	/^  Slice value() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon42::EmptyIterator
value	leveldb/table/iterator_wrapper.h	/^  Slice value() const       { assert(Valid()); return iter_->value(); }$/;"	f	class:leveldb::IteratorWrapper
value	leveldb/table/merger.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon36::MergingIterator
value	leveldb/table/table_test.cc	/^  virtual Slice value() const { return iter_->value(); }$/;"	f	class:leveldb::KeyConvertingIterator
value	leveldb/table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
value	leveldb/util/cache.cc	/^  void* value;$/;"	m	struct:leveldb::__anon13::LRUHandle	file:
value	qt/wificoinamountfield.cpp	/^    CAmount value(bool *valid_out=0) const$/;"	f	class:AmountSpinBox
value	qt/wificoinamountfield.cpp	/^CAmount WiFicoinAmountField::value(bool *valid_out) const$/;"	f	class:WiFicoinAmountField
value	qt/qvaluecombobox.cpp	/^QVariant QValueComboBox::value() const$/;"	f	class:QValueComboBox
value	sync.h	/^    int value;$/;"	m	class:CSemaphore
value	tinyformat.h	/^        static const bool value =$/;"	m	struct:tinyformat::detail::is_convertible
value_	leveldb/table/block.cc	/^  Slice value_;$/;"	m	class:leveldb::Block::Iter	file:
value_buf_	leveldb/db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
value_size_	leveldb/db/db_bench.cc	/^  int value_size_;$/;"	m	class:leveldb::Benchmark	file:
value_type	indirectmap.h	/^    typedef typename base::value_type value_type;$/;"	t	class:indirectmap
value_type	limitedmap.h	/^    typedef std::pair<const key_type, mapped_type> value_type;$/;"	t	class:limitedmap
value_type	prevector.h	/^        typedef T value_type;$/;"	t	class:prevector::iterator
value_type	prevector.h	/^        typedef T value_type;$/;"	t	class:prevector::reverse_iterator
value_type	prevector.h	/^        typedef const T value_type;$/;"	t	class:prevector::const_iterator
value_type	prevector.h	/^        typedef const T value_type;$/;"	t	class:prevector::const_reverse_iterator
value_type	prevector.h	/^    typedef T value_type;$/;"	t	class:prevector
value_type	streams.h	/^    typedef vector_type::value_type       value_type;$/;"	t	class:CDataStream
value_type	support/allocators/secure.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:secure_allocator
value_type	support/allocators/zeroafterfree.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:zero_after_free_allocator
values	test/scriptnum_tests.cpp	/^static const int64_t values[] = { 0, 1, -2, 127, 128, -255, 256, (1LL << 15) - 1, -(1LL << 16), (1LL << 24) - 1, (1LL << 31), 1 - (1LL << 32), 1LL << 40 };$/;"	v	file:
values	univalue/include/univalue.h	/^    std::vector<UniValue> values;$/;"	m	class:UniValue
vch	pubkey.h	/^    unsigned char vch[65];$/;"	m	class:CPubKey
vch	streams.h	/^    vector_type vch;$/;"	m	class:CDataStream
vchBuf	streams.h	/^    std::vector<char> vchBuf; \/\/ the buffer$/;"	m	class:CBufferedFile
vchCoinbaseCommitment	miner.h	/^    std::vector<unsigned char> vchCoinbaseCommitment;$/;"	m	struct:CBlockTemplate
vchCryptedKey	wallet/crypter.h	/^    std::vector<unsigned char> vchCryptedKey;$/;"	m	class:CMasterKey
vchData	base58.h	/^    vector_uchar vchData;$/;"	m	class:CBase58Data
vchData	streams.h	/^    std::vector<unsigned char>& vchData;$/;"	m	class:CVectorWriter
vchDefaultKey	wallet/wallet.h	/^    CPubKey vchDefaultKey;$/;"	m	class:CWallet
vchFingerprint	key.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtKey
vchFingerprint	pubkey.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtPubKey
vchIV	wallet/crypter.h	/^    std::vector<unsigned char, secure_allocator<unsigned char>> vchIV;$/;"	m	class:CCrypter
vchKey	wallet/crypter.h	/^    std::vector<unsigned char, secure_allocator<unsigned char>> vchKey;$/;"	m	class:CCrypter
vchKey0	test/script_tests.cpp	/^const unsigned char vchKey0[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};$/;"	m	namespace:__anon80	file:
vchKey1	test/script_tests.cpp	/^const unsigned char vchKey1[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0};$/;"	m	namespace:__anon80	file:
vchKey2	test/script_tests.cpp	/^const unsigned char vchKey2[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0};$/;"	m	namespace:__anon80	file:
vchOtherDerivationParameters	wallet/crypter.h	/^    std::vector<unsigned char> vchOtherDerivationParameters;$/;"	m	class:CMasterKey
vchPrivKey	wallet/wallet.h	/^    CPrivKey vchPrivKey;$/;"	m	class:CWalletKey
vchPubKey	wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CAccount
vchPubKey	wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CKeyPool
vchPubKey	wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CReserveKey
vchSalt	wallet/crypter.h	/^    std::vector<unsigned char> vchSalt;$/;"	m	class:CMasterKey
vchVersion	base58.h	/^    std::vector<unsigned char> vchVersion;$/;"	m	class:CBase58Data
vector_type	streams.h	/^    typedef CSerializeData vector_type;$/;"	t	class:CDataStream
vector_uchar	base58.h	/^    typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;$/;"	t	class:CBase58Data
verify	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    public static boolean verify(byte[] data, byte[] signature, byte[] pub) throws AssertFailException{$/;"	m	class:NativeSecp256k1
verify	test/scriptnum_tests.cpp	/^static bool verify(const CScriptNum10& bignum, const CScriptNum& scriptnum)$/;"	f	file:
verifyAmount	qt/paymentserver.cpp	/^bool PaymentServer::verifyAmount(const CAmount& requestAmount)$/;"	f	class:PaymentServer
verifyExpired	qt/paymentserver.cpp	/^bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails)$/;"	f	class:PaymentServer
verifyMessageAction	qt/wificoingui.h	/^    QAction *verifyMessageAction;$/;"	m	class:WiFicoinGUI
verifyNetwork	qt/paymentserver.cpp	/^bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails)$/;"	f	class:PaymentServer
verifySize	qt/paymentserver.cpp	/^bool PaymentServer::verifySize(qint64 requestSize)$/;"	f	class:PaymentServer
verify_checksums	leveldb/include/leveldb/options.h	/^  bool verify_checksums;$/;"	m	struct:leveldb::ReadOptions
verify_flags	script/wificoinconsensus.cpp	/^static bool verify_flags(unsigned int flags)$/;"	f	file:
verify_script	script/wificoinconsensus.cpp	/^static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, CAmount amount,$/;"	f	file:
verifychain	rpc/blockchain.cpp	/^UniValue verifychain(const JSONRPCRequest& request)$/;"	f
verifymessage	rpc/misc.cpp	/^UniValue verifymessage(const JSONRPCRequest& request)$/;"	f
verifytxoutproof	rpc/rawtransaction.cpp	/^UniValue verifytxoutproof(const JSONRPCRequest& request)$/;"	f
version	leveldb/db/db_impl.cc	/^  Version* version;$/;"	m	struct:leveldb::__anon27::IterState	file:
versionbitscache	validation.cpp	/^VersionBitsCache versionbitscache;$/;"	v
versions_	leveldb/db/db_impl.h	/^  VersionSet* versions_;$/;"	m	class:leveldb::DBImpl
vfLimited	net.cpp	/^static bool vfLimited[NET_MAX] = {};$/;"	v	file:
vformat	tinyformat.h	/^inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)$/;"	f	namespace:tinyformat
vhListenSocket	net.h	/^    std::vector<ListenSocket> vhListenSocket;$/;"	m	class:CConnman
viewItemChanged	qt/coincontroldialog.cpp	/^void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)$/;"	f	class:CoinControlDialog
vin	primitives/transaction.h	/^    const std::vector<CTxIn> vin;$/;"	m	class:CTransaction
vin	primitives/transaction.h	/^    std::vector<CTxIn> vin;$/;"	m	struct:CMutableTransaction
vinfoBlockFile	validation.cpp	/^    std::vector<CBlockFileInfo> vinfoBlockFile;$/;"	m	namespace:__anon43	file:
vout	primitives/transaction.h	/^    const std::vector<CTxOut> vout;$/;"	m	class:CTransaction
vout	primitives/transaction.h	/^    std::vector<CTxOut> vout;$/;"	m	struct:CMutableTransaction
vout	txdb.cpp	/^    std::vector<CTxOut> vout;$/;"	m	class:__anon77::CCoins	file:
vout	wallet/wallet.h	/^    int vout;$/;"	m	struct:COutputEntry
vpblock	test/versionbits_tests.cpp	/^    std::vector<CBlockIndex*> vpblock;$/;"	m	class:VersionBitsTester	file:
vprevout	undo.h	/^    std::vector<Coin> vprevout;$/;"	m	class:CTxUndo
vpwallets	wallet/wallet.cpp	/^std::vector<CWalletRef> vpwallets;$/;"	v
vset_	leveldb/db/version_set.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::VersionSet::Builder	file:
vset_	leveldb/db/version_set.h	/^  VersionSet* vset_;            \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
vtx	primitives/block.h	/^    std::vector<CTransactionRef> vtx;$/;"	m	class:CBlock
vtxundo	undo.h	/^    std::vector<CTxUndo> vtxundo; \/\/ for all but the coinbase$/;"	m	class:CBlockUndo
vvNew	addrman.h	/^    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];$/;"	m	class:CAddrMan
vvTried	addrman.h	/^    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];$/;"	m	class:CAddrMan
w	secp256k1/src/java/org/wificoin/NativeSecp256k1.java	/^    private static final Lock w = rwl.writeLock();$/;"	f	class:NativeSecp256k1	file:
wait	sync.h	/^    void wait()$/;"	f	class:CSemaphore
wait_mtx_	leveldb/port/port_win.h	/^  Mutex wait_mtx_;$/;"	m	class:leveldb::port::CondVar
waitforblock	rpc/blockchain.cpp	/^UniValue waitforblock(const JSONRPCRequest& request)$/;"	f
waitforblockheight	rpc/blockchain.cpp	/^UniValue waitforblockheight(const JSONRPCRequest& request)$/;"	f
waitfornewblock	rpc/blockchain.cpp	/^UniValue waitfornewblock(const JSONRPCRequest& request)$/;"	f
waiting_	leveldb/port/port_win.h	/^  long waiting_;$/;"	m	class:leveldb::port::CondVar
walk	support/lockedpool.cpp	/^void Arena::walk() const$/;"	f	class:Arena
wallet	qt/addresstablemodel.cpp	/^    CWallet *wallet;$/;"	m	class:AddressTablePriv	file:
wallet	qt/addresstablemodel.h	/^    CWallet *wallet;$/;"	m	class:AddressTableModel
wallet	qt/transactiontablemodel.cpp	/^    CWallet *wallet;$/;"	m	class:TransactionTablePriv	file:
wallet	qt/transactiontablemodel.h	/^    CWallet* wallet;$/;"	m	class:TransactionTableModel
wallet	qt/walletmodel.h	/^        WalletModel *wallet;$/;"	m	class:WalletModel::UnlockContext
wallet	qt/walletmodel.h	/^    CWallet *wallet;$/;"	m	class:WalletModel
wallet	wallet/test/wallet_tests.cpp	/^    std::unique_ptr<CWallet> wallet;$/;"	m	class:ListCoinsTestingSetup	file:
walletFrame	qt/wificoingui.h	/^    WalletFrame *walletFrame;$/;"	m	class:WiFicoinGUI
walletModel	qt/addresstablemodel.h	/^    WalletModel *walletModel;$/;"	m	class:AddressTableModel
walletModel	qt/wificoin.cpp	/^    WalletModel *walletModel;$/;"	m	class:WiFicoinApplication	file:
walletModel	qt/overviewpage.h	/^    WalletModel *walletModel;$/;"	m	class:OverviewPage
walletModel	qt/recentrequeststablemodel.h	/^    WalletModel *walletModel;$/;"	m	class:RecentRequestsTableModel
walletModel	qt/transactiontablemodel.h	/^    WalletModel *walletModel;$/;"	m	class:TransactionTableModel
walletModel	qt/walletview.h	/^    WalletModel *walletModel;$/;"	m	class:WalletView
walletStack	qt/walletframe.h	/^    QStackedWidget *walletStack;$/;"	m	class:WalletFrame
walletTests	qt/test/wallettests.cpp	/^void WalletTests::walletTests()$/;"	f	class:WalletTests
walletTransaction	qt/walletmodeltransaction.h	/^    CWalletTx *walletTransaction;$/;"	m	class:WalletModelTransaction
wallet_crypto	wallet/crypter.h	/^namespace wallet_crypto$/;"	n
walletlock	wallet/rpcwallet.cpp	/^UniValue walletlock(const JSONRPCRequest& request)$/;"	f
walletpassphrase	wallet/rpcwallet.cpp	/^UniValue walletpassphrase(const JSONRPCRequest& request)$/;"	f
walletpassphrasechange	wallet/rpcwallet.cpp	/^UniValue walletpassphrasechange(const JSONRPCRequest& request)$/;"	f
warningcache	validation.cpp	/^static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS];$/;"	v	file:
watchOnlyFilter	qt/transactionfilterproxy.h	/^    WatchOnlyFilter watchOnlyFilter;$/;"	m	class:TransactionFilterProxy
watchOnlyWidget	qt/transactionview.h	/^    QComboBox *watchOnlyWidget;$/;"	m	class:TransactionView
weak_count	memusage.h	/^    size_t weak_count;$/;"	m	struct:memusage::stl_shared_counter
whitelisted	net.h	/^        bool whitelisted;$/;"	m	struct:CConnman::ListenSocket
width	qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
window	qt/wificoin.cpp	/^    WiFicoinGUI *window;$/;"	m	class:WiFicoinApplication	file:
withinTarget	policy/fees.h	/^    double withinTarget = 0;$/;"	m	struct:EstimatorBucket
witness	script/sign.cpp	/^    std::vector<valtype> witness;$/;"	m	struct:__anon102::Stacks	file:
witscript	test/script_tests.cpp	/^    CScript witscript;$/;"	m	class:__anon80::TestBuilder	file:
wnaf	secp256k1/src/bench_internal.c	/^    int wnaf[256];$/;"	m	struct:__anon66	file:
workQueue	httpserver.cpp	/^static WorkQueue<HTTPClosure>* workQueue = 0;$/;"	v	file:
wq	httpserver.cpp	/^        WorkQueue &wq;$/;"	m	class:WorkQueue::ThreadCounter	file:
writable_file_error_	leveldb/util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
writable_file_opened_	leveldb/db/fault_injection_test.cc	/^  bool writable_file_opened_;$/;"	m	class:leveldb::TestWritableFile	file:
write	hash.h	/^    void write(const char *pch, size_t size) {$/;"	f	class:CHashWriter
write	qt/csvmodelwriter.cpp	/^bool CSVModelWriter::write()$/;"	f	class:CSVModelWriter
write	serialize.h	/^    void write(const char *psz, size_t _nSize)$/;"	f	class:CSizeComputer
write	streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CAutoFile
write	streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CDataStream
write	streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:CVectorWriter
write	streams.h	/^    void write(const char* pch, size_t nSize)$/;"	f	class:OverrideStream
write	univalue/lib/univalue_write.cpp	/^string UniValue::write(unsigned int prettyIndent,$/;"	f	class:UniValue
writeArray	univalue/lib/univalue_write.cpp	/^void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const$/;"	f	class:UniValue
writeNewline	qt/csvmodelwriter.cpp	/^static void writeNewline(QTextStream &f)$/;"	f	file:
writeObject	univalue/lib/univalue_write.cpp	/^void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const$/;"	f	class:UniValue
writeSep	qt/csvmodelwriter.cpp	/^static void writeSep(QTextStream &f)$/;"	f	file:
writeValue	qt/csvmodelwriter.cpp	/^static void writeValue(QTextStream &f, const QString &value)$/;"	f	file:
write_buffer_size	leveldb/include/leveldb/options.h	/^  size_t write_buffer_size;$/;"	m	struct:leveldb::Options
write_options_	leveldb/db/db_bench.cc	/^  WriteOptions write_options_;$/;"	m	class:leveldb::Benchmark	file:
writeoptions	dbwrapper.h	/^    leveldb::WriteOptions writeoptions;$/;"	m	class:CDBWrapper
writer_	leveldb/db/log_test.cc	/^  Writer* writer_;$/;"	m	class:leveldb::log::LogTest	file:
writers_	leveldb/db/db_impl.h	/^  std::deque<Writer*> writers_;$/;"	m	class:leveldb::DBImpl
wtxOrdered	wallet/wallet.h	/^    TxItems wtxOrdered;$/;"	m	class:CWallet
wtxn	wallet/test/wallet_tests.cpp	/^std::vector<std::unique_ptr<CWalletTx>> wtxn;$/;"	v
x	memusage.h	/^    X x;$/;"	m	struct:memusage::stl_tree_node
x	secp256k1/src/group.h	/^    secp256k1_fe x; \/* actual X: x\/z^2 *\/$/;"	m	struct:__anon71
x	secp256k1/src/group.h	/^    secp256k1_fe x;$/;"	m	struct:__anon70
x	secp256k1/src/group.h	/^    secp256k1_fe_storage x;$/;"	m	struct:__anon72
y	secp256k1/src/group.h	/^    secp256k1_fe y; \/* actual Y: y\/z^3 *\/$/;"	m	struct:__anon71
y	secp256k1/src/group.h	/^    secp256k1_fe y;$/;"	m	struct:__anon70
y	secp256k1/src/group.h	/^    secp256k1_fe_storage y;$/;"	m	struct:__anon72
yesButton	qt/sendcoinsdialog.h	/^    QAbstractButton *yesButton;$/;"	m	class:SendConfirmationDialog
z	secp256k1/src/group.h	/^    secp256k1_fe z;$/;"	m	struct:__anon71
zero_after_free_allocator	support/allocators/zeroafterfree.h	/^    zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	support/allocators/zeroafterfree.h	/^    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	support/allocators/zeroafterfree.h	/^    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	support/allocators/zeroafterfree.h	/^struct zero_after_free_allocator : public std::allocator<T> {$/;"	s
zmqError	zmq/zmqnotificationinterface.cpp	/^void zmqError(const char *str)$/;"	f
zmq_send_multipart	zmq/zmqpublishnotifier.cpp	/^static int zmq_send_multipart(void *sock, const void* data, size_t size, ...)$/;"	f	file:
~AES128CBCDecrypt	crypto/aes.cpp	/^AES128CBCDecrypt::~AES128CBCDecrypt()$/;"	f	class:AES128CBCDecrypt
~AES128CBCEncrypt	crypto/aes.cpp	/^AES128CBCEncrypt::~AES128CBCEncrypt()$/;"	f	class:AES128CBCEncrypt
~AES128Decrypt	crypto/aes.cpp	/^AES128Decrypt::~AES128Decrypt()$/;"	f	class:AES128Decrypt
~AES128Encrypt	crypto/aes.cpp	/^AES128Encrypt::~AES128Encrypt()$/;"	f	class:AES128Encrypt
~AES256CBCDecrypt	crypto/aes.cpp	/^AES256CBCDecrypt::~AES256CBCDecrypt()$/;"	f	class:AES256CBCDecrypt
~AES256CBCEncrypt	crypto/aes.cpp	/^AES256CBCEncrypt::~AES256CBCEncrypt()$/;"	f	class:AES256CBCEncrypt
~AES256Decrypt	crypto/aes.cpp	/^AES256Decrypt::~AES256Decrypt()$/;"	f	class:AES256Decrypt
~AES256Encrypt	crypto/aes.cpp	/^AES256Encrypt::~AES256Encrypt()$/;"	f	class:AES256Encrypt
~AddressBookPage	qt/addressbookpage.cpp	/^AddressBookPage::~AddressBookPage()$/;"	f	class:AddressBookPage
~AddressTableModel	qt/addresstablemodel.cpp	/^AddressTableModel::~AddressTableModel()$/;"	f	class:AddressTableModel
~Arena	leveldb/util/arena.cc	/^Arena::~Arena() {$/;"	f	class:leveldb::Arena
~Arena	support/lockedpool.cpp	/^Arena::~Arena()$/;"	f	class:Arena
~AskPassphraseDialog	qt/askpassphrasedialog.cpp	/^AskPassphraseDialog::~AskPassphraseDialog()$/;"	f	class:AskPassphraseDialog
~AutoCompactTest	leveldb/db/autocompact_test.cc	/^  ~AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
~BanTableModel	qt/bantablemodel.cpp	/^BanTableModel::~BanTableModel()$/;"	f	class:BanTableModel
~BaseSignatureChecker	script/interpreter.h	/^    virtual ~BaseSignatureChecker() {}$/;"	f	class:BaseSignatureChecker
~BaseSignatureCreator	script/sign.h	/^    virtual ~BaseSignatureCreator() {}$/;"	f	class:BaseSignatureCreator
~BasicTestingSetup	test/test_wificoin.cpp	/^BasicTestingSetup::~BasicTestingSetup()$/;"	f	class:BasicTestingSetup
~Benchmark	leveldb/db/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	leveldb/doc/bench/db_bench_sqlite3.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	leveldb/doc/bench/db_bench_tree_db.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~WiFicoinApplication	qt/wificoin.cpp	/^WiFicoinApplication::~WiFicoinApplication()$/;"	f	class:WiFicoinApplication
~WiFicoinGUI	qt/wificoingui.cpp	/^WiFicoinGUI::~WiFicoinGUI()$/;"	f	class:WiFicoinGUI
~Block	leveldb/table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~BlockConstructor	leveldb/table/table_test.cc	/^  ~BlockConstructor() {$/;"	f	class:leveldb::BlockConstructor
~BloomTest	leveldb/util/bloom_test.cc	/^  ~BloomTest() {$/;"	f	class:leveldb::BloomTest
~Builder	leveldb/db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~CAddrMan	addrman.h	/^    ~CAddrMan()$/;"	f	class:CAddrMan
~CAutoFile	streams.h	/^    ~CAutoFile()$/;"	f	class:CAutoFile
~CBlockPolicyEstimator	policy/fees.cpp	/^CBlockPolicyEstimator::~CBlockPolicyEstimator()$/;"	f	class:CBlockPolicyEstimator
~CBufferedFile	streams.h	/^    ~CBufferedFile()$/;"	f	class:CBufferedFile
~CCheckQueue	checkqueue.h	/^    ~CCheckQueue()$/;"	f	class:CCheckQueue
~CCheckQueueControl	checkqueue.h	/^    ~CCheckQueueControl()$/;"	f	class:CCheckQueueControl
~CCoinsView	coins.h	/^    virtual ~CCoinsView() {}$/;"	f	class:CCoinsView
~CCoinsViewCursor	coins.h	/^    virtual ~CCoinsViewCursor() {}$/;"	f	class:CCoinsViewCursor
~CCoinsViewDBCursor	txdb.h	/^    ~CCoinsViewDBCursor() {}$/;"	f	class:CCoinsViewDBCursor
~CConnman	net.cpp	/^CConnman::~CConnman()$/;"	f	class:CConnman
~CCriticalSection	sync.h	/^    ~CCriticalSection() {$/;"	f	class:CCriticalSection
~CCrypter	wallet/crypter.h	/^    ~CCrypter()$/;"	f	class:CCrypter
~CDB	wallet/db.h	/^    ~CDB() { Close(); }$/;"	f	class:CDB
~CDBEnv	wallet/db.cpp	/^CDBEnv::~CDBEnv()$/;"	f	class:CDBEnv
~CDBIterator	dbwrapper.cpp	/^CDBIterator::~CDBIterator() { delete piter; }$/;"	f	class:CDBIterator
~CDBWrapper	dbwrapper.cpp	/^CDBWrapper::~CDBWrapper()$/;"	f	class:CDBWrapper
~CImportingNow	init.cpp	/^    ~CImportingNow() {$/;"	f	struct:CImportingNow
~CInit	util.cpp	/^    ~CInit()$/;"	f	class:CInit
~CKey	key.h	/^    ~CKey()$/;"	f	class:CKey
~CKeyStore	keystore.h	/^    virtual ~CKeyStore() {}$/;"	f	class:CKeyStore
~CMainCleanup	validation.cpp	/^    ~CMainCleanup() {$/;"	f	class:CMainCleanup
~CNetCleanup	net.cpp	/^    ~CNetCleanup()$/;"	f	class:CNetCleanup
~CNetProcessingCleanup	net_processing.cpp	/^    ~CNetProcessingCleanup() {$/;"	f	class:CNetProcessingCleanup
~CNode	net.cpp	/^CNode::~CNode()$/;"	f	class:CNode
~CReserveKey	wallet/wallet.h	/^    ~CReserveKey()$/;"	f	class:CReserveKey
~CReserveScript	script/script.h	/^    virtual ~CReserveScript() {}$/;"	f	class:CReserveScript
~CScheduler	scheduler.cpp	/^CScheduler::~CScheduler()$/;"	f	class:CScheduler
~CSemaphoreGrant	sync.h	/^    ~CSemaphoreGrant()$/;"	f	class:CSemaphoreGrant
~CVerifyDB	validation.cpp	/^CVerifyDB::~CVerifyDB()$/;"	f	class:CVerifyDB
~CWallet	wallet/wallet.h	/^    ~CWallet()$/;"	f	class:CWallet
~CZMQAbstractNotifier	zmq/zmqabstractnotifier.cpp	/^CZMQAbstractNotifier::~CZMQAbstractNotifier()$/;"	f	class:CZMQAbstractNotifier
~CZMQNotificationInterface	zmq/zmqnotificationinterface.cpp	/^CZMQNotificationInterface::~CZMQNotificationInterface()$/;"	f	class:CZMQNotificationInterface
~Cache	leveldb/util/cache.cc	/^Cache::~Cache() {$/;"	f	class:leveldb::Cache
~CacheTest	leveldb/util/cache_test.cc	/^  ~CacheTest() {$/;"	f	class:leveldb::CacheTest
~ClientModel	qt/clientmodel.cpp	/^ClientModel::~ClientModel()$/;"	f	class:ClientModel
~CoinControlDialog	qt/coincontroldialog.cpp	/^CoinControlDialog::~CoinControlDialog()$/;"	f	class:CoinControlDialog
~Compaction	leveldb/db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~Comparator	leveldb/util/comparator.cc	/^Comparator::~Comparator() { }$/;"	f	class:leveldb::Comparator
~CondVar	leveldb/port/port_posix.cc	/^CondVar::~CondVar() { PthreadCall("destroy cv", pthread_cond_destroy(&cv_)); }$/;"	f	class:leveldb::port::CondVar
~CondVar	leveldb/port/port_win.cc	/^CondVar::~CondVar() {$/;"	f	class:leveldb::port::CondVar
~ConnectTrace	validation.cpp	/^    ~ConnectTrace() {$/;"	f	class:ConnectTrace
~Constructor	leveldb/table/table_test.cc	/^  virtual ~Constructor() { }$/;"	f	class:leveldb::Constructor
~CorruptionTest	leveldb/db/corruption_test.cc	/^  ~CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
~DB	leveldb/db/db_impl.cc	/^DB::~DB() { }$/;"	f	class:leveldb::DB
~DBConstructor	leveldb/table/table_test.cc	/^  ~DBConstructor() {$/;"	f	class:leveldb::DBConstructor
~DBImpl	leveldb/db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBIter	leveldb/db/db_iter.cc	/^  virtual ~DBIter() {$/;"	f	class:leveldb::__anon20::DBIter
~DBTest	leveldb/db/db_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~DisconnectedBlockTransactions	txmempool.h	/^    ~DisconnectedBlockTransactions() { assert(queuedTx.empty()); }$/;"	f	struct:DisconnectedBlockTransactions
~ECCVerifyHandle	pubkey.cpp	/^ECCVerifyHandle::~ECCVerifyHandle()$/;"	f	class:ECCVerifyHandle
~EditAddressDialog	qt/editaddressdialog.cpp	/^EditAddressDialog::~EditAddressDialog()$/;"	f	class:EditAddressDialog
~Env	leveldb/util/env.cc	/^Env::~Env() {$/;"	f	class:leveldb::Env
~EnvWrapper	leveldb/util/env.cc	/^EnvWrapper::~EnvWrapper() {$/;"	f	class:leveldb::EnvWrapper
~FaultInjectionTest	leveldb/db/fault_injection_test.cc	/^  ~FaultInjectionTest() {$/;"	f	class:leveldb::FaultInjectionTest
~FaultInjectionTestEnv	leveldb/db/fault_injection_test.cc	/^  virtual ~FaultInjectionTestEnv() { }$/;"	f	class:leveldb::FaultInjectionTestEnv
~FileLock	leveldb/util/env.cc	/^FileLock::~FileLock() {$/;"	f	class:leveldb::FileLock
~FileState	leveldb/helpers/memenv/memenv.cc	/^  ~FileState() {$/;"	f	class:leveldb::__anon16::FileState	file:
~FilterPolicy	leveldb/util/filter_policy.cc	/^FilterPolicy::~FilterPolicy() { }$/;"	f	class:leveldb::FilterPolicy
~FindFileTest	leveldb/db/version_set_test.cc	/^  ~FindFileTest() {$/;"	f	class:leveldb::FindFileTest
~FrozenCleanupCheck	test/checkqueue_tests.cpp	/^    ~FrozenCleanupCheck()$/;"	f	struct:FrozenCleanupCheck
~HTTPClosure	httpserver.h	/^    virtual ~HTTPClosure() {}$/;"	f	class:HTTPClosure
~HTTPEvent	httpserver.cpp	/^HTTPEvent::~HTTPEvent()$/;"	f	class:HTTPEvent
~HTTPRequest	httpserver.cpp	/^HTTPRequest::~HTTPRequest()$/;"	f	class:HTTPRequest
~HandleTable	leveldb/util/cache.cc	/^  ~HandleTable() { delete[] list_; }$/;"	f	class:leveldb::__anon13::HandleTable
~Handler	leveldb/db/write_batch.cc	/^WriteBatch::Handler::~Handler() { }$/;"	f	class:leveldb::WriteBatch::Handler
~Harness	leveldb/table/table_test.cc	/^  ~Harness() {$/;"	f	class:leveldb::Harness
~HelpMessageDialog	qt/utilitydialog.cpp	/^HelpMessageDialog::~HelpMessageDialog()$/;"	f	class:HelpMessageDialog
~Histogram	leveldb/util/histogram.h	/^  ~Histogram() { }$/;"	f	class:leveldb::Histogram
~InMemoryEnv	leveldb/helpers/memenv/memenv.cc	/^  virtual ~InMemoryEnv() {$/;"	f	class:leveldb::__anon16::InMemoryEnv
~Intro	qt/intro.cpp	/^Intro::~Intro()$/;"	f	class:Intro
~Iterator	leveldb/table/iterator.cc	/^Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	leveldb/table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~KeyConvertingIterator	leveldb/table/table_test.cc	/^  virtual ~KeyConvertingIterator() { delete iter_; }$/;"	f	class:leveldb::KeyConvertingIterator
~LRUCache	leveldb/util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon13::LRUCache
~ListCoinsTestingSetup	wallet/test/wallet_tests.cpp	/^    ~ListCoinsTestingSetup()$/;"	f	class:ListCoinsTestingSetup
~LockData	sync.cpp	/^    ~LockData() { available = false; }$/;"	f	struct:LockData
~LockedPageAllocator	support/lockedpool.h	/^    virtual ~LockedPageAllocator() {}$/;"	f	class:LockedPageAllocator
~LockedPageArena	support/lockedpool.cpp	/^LockedPool::LockedPageArena::~LockedPageArena()$/;"	f	class:LockedPool::LockedPageArena
~LockedPool	support/lockedpool.cpp	/^LockedPool::~LockedPool()$/;"	f	class:LockedPool
~LogTest	leveldb/db/log_test.cc	/^  ~LogTest() {$/;"	f	class:leveldb::log::LogTest
~Logger	leveldb/util/env.cc	/^Logger::~Logger() {$/;"	f	class:leveldb::Logger
~LookupKey	leveldb/db/dbformat.h	/^inline LookupKey::~LookupKey() {$/;"	f	class:leveldb::LookupKey
~MemEnvTest	leveldb/helpers/memenv/memenv_test.cc	/^  ~MemEnvTest() {$/;"	f	class:leveldb::MemEnvTest
~MemTable	leveldb/db/memtable.cc	/^MemTable::~MemTable() {$/;"	f	class:leveldb::MemTable
~MemTableConstructor	leveldb/table/table_test.cc	/^  ~MemTableConstructor() {$/;"	f	class:leveldb::MemTableConstructor
~MemoryCheck	test/checkqueue_tests.cpp	/^    ~MemoryCheck(){$/;"	f	struct:MemoryCheck
~MergingIterator	leveldb/table/merger.cc	/^  virtual ~MergingIterator() {$/;"	f	class:leveldb::__anon36::MergingIterator
~ModalOverlay	qt/modaloverlay.cpp	/^ModalOverlay::~ModalOverlay()$/;"	f	class:ModalOverlay
~ModelDB	leveldb/db/db_test.cc	/^  ~ModelDB() { }$/;"	f	class:leveldb::ModelDB
~ModelIter	leveldb/db/db_test.cc	/^    ~ModelIter() {$/;"	f	class:leveldb::ModelDB::ModelIter
~Mutex	leveldb/port/port_posix.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~Mutex	leveldb/port/port_win.cc	/^Mutex::~Mutex() {$/;"	f	class:leveldb::port::Mutex
~Notificator	qt/notificator.cpp	/^Notificator::~Notificator()$/;"	f	class:Notificator
~OpenURIDialog	qt/openuridialog.cpp	/^OpenURIDialog::~OpenURIDialog()$/;"	f	class:OpenURIDialog
~OptionsDialog	qt/optionsdialog.cpp	/^OptionsDialog::~OptionsDialog()$/;"	f	class:OptionsDialog
~OverviewPage	qt/overviewpage.cpp	/^OverviewPage::~OverviewPage()$/;"	f	class:OverviewPage
~PaymentServer	qt/paymentserver.cpp	/^PaymentServer::~PaymentServer()$/;"	f	class:PaymentServer
~PeerTableModel	qt/peertablemodel.cpp	/^PeerTableModel::~PeerTableModel()$/;"	f	class:PeerTableModel
~PosixEnv	leveldb/util/env_posix.cc	/^  virtual ~PosixEnv() {$/;"	f	class:leveldb::__anon11::PosixEnv
~PosixLogger	leveldb/util/posix_logger.h	/^  virtual ~PosixLogger() {$/;"	f	class:leveldb::PosixLogger
~PosixMmapReadableFile	leveldb/util/env_posix.cc	/^  virtual ~PosixMmapReadableFile() {$/;"	f	class:leveldb::__anon11::PosixMmapReadableFile
~PosixRandomAccessFile	leveldb/util/env_posix.cc	/^  virtual ~PosixRandomAccessFile() {$/;"	f	class:leveldb::__anon11::PosixRandomAccessFile
~PosixSequentialFile	leveldb/util/env_posix.cc	/^  virtual ~PosixSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon11::PosixSequentialFile
~PosixWritableFile	leveldb/util/env_posix.cc	/^  ~PosixWritableFile() {$/;"	f	class:leveldb::__anon11::PosixWritableFile
~QtRPCTimerBase	qt/rpcconsole.cpp	/^    ~QtRPCTimerBase() {}$/;"	f	class:QtRPCTimerBase
~QtRPCTimerInterface	qt/rpcconsole.cpp	/^    ~QtRPCTimerInterface() {}$/;"	f	class:QtRPCTimerInterface
~RPCConsole	qt/rpcconsole.cpp	/^RPCConsole::~RPCConsole()$/;"	f	class:RPCConsole
~RPCTimerBase	rpc/server.h	/^    virtual ~RPCTimerBase() {}$/;"	f	class:RPCTimerBase
~RPCTimerInterface	rpc/server.h	/^    virtual ~RPCTimerInterface() {}$/;"	f	class:RPCTimerInterface
~RandomAccessFile	leveldb/util/env.cc	/^RandomAccessFile::~RandomAccessFile() {$/;"	f	class:leveldb::RandomAccessFile
~RandomAccessFileImpl	leveldb/helpers/memenv/memenv.cc	/^  ~RandomAccessFileImpl() {$/;"	f	class:leveldb::__anon16::RandomAccessFileImpl
~Reader	leveldb/db/log_reader.cc	/^Reader::~Reader() {$/;"	f	class:leveldb::log::Reader
~ReceiveCoinsDialog	qt/receivecoinsdialog.cpp	/^ReceiveCoinsDialog::~ReceiveCoinsDialog()$/;"	f	class:ReceiveCoinsDialog
~ReceiveRequestDialog	qt/receiverequestdialog.cpp	/^ReceiveRequestDialog::~ReceiveRequestDialog()$/;"	f	class:ReceiveRequestDialog
~RecentRequestsTableModel	qt/recentrequeststablemodel.cpp	/^RecentRequestsTableModel::~RecentRequestsTableModel()$/;"	f	class:RecentRequestsTableModel
~RecoveryTest	leveldb/db/recovery_test.cc	/^  ~RecoveryTest() {$/;"	f	class:leveldb::RecoveryTest
~Rep	leveldb/table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	leveldb/db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon26::Repairer
~Reporter	leveldb/db/log_reader.cc	/^Reader::Reporter::~Reporter() {$/;"	f	class:leveldb::log::Reader::Reporter
~Secp256k1Init	wificoin-tx.cpp	/^    ~Secp256k1Init() {$/;"	f	class:Secp256k1Init
~SendCoinsDialog	qt/sendcoinsdialog.cpp	/^SendCoinsDialog::~SendCoinsDialog()$/;"	f	class:SendCoinsDialog
~SendCoinsEntry	qt/sendcoinsentry.cpp	/^SendCoinsEntry::~SendCoinsEntry()$/;"	f	class:SendCoinsEntry
~SequentialFile	leveldb/util/env.cc	/^SequentialFile::~SequentialFile() {$/;"	f	class:leveldb::SequentialFile
~SequentialFileImpl	leveldb/helpers/memenv/memenv.cc	/^  ~SequentialFileImpl() {$/;"	f	class:leveldb::__anon16::SequentialFileImpl
~ShardedLRUCache	leveldb/util/cache.cc	/^  virtual ~ShardedLRUCache() { }$/;"	f	class:leveldb::__anon13::ShardedLRUCache
~SignVerifyMessageDialog	qt/signverifymessagedialog.cpp	/^SignVerifyMessageDialog::~SignVerifyMessageDialog()$/;"	f	class:SignVerifyMessageDialog
~Snapshot	leveldb/db/db_impl.cc	/^Snapshot::~Snapshot() {$/;"	f	class:leveldb::Snapshot
~SplashScreen	qt/splashscreen.cpp	/^SplashScreen::~SplashScreen()$/;"	f	class:SplashScreen
~Status	leveldb/include/leveldb/status.h	/^  ~Status() { delete[] state_; }$/;"	f	class:leveldb::Status
~StringSink	leveldb/table/table_test.cc	/^  ~StringSink() { }$/;"	f	class:leveldb::StringSink
~StringSource	leveldb/table/table_test.cc	/^  virtual ~StringSource() { }$/;"	f	class:leveldb::StringSource
~Table	leveldb/table/table.cc	/^Table::~Table() {$/;"	f	class:leveldb::Table
~TableBuilder	leveldb/table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	leveldb/db/table_cache.cc	/^TableCache::~TableCache() {$/;"	f	class:leveldb::TableCache
~TableConstructor	leveldb/table/table_test.cc	/^  ~TableConstructor() {$/;"	f	class:leveldb::TableConstructor
~TestChain100Setup	test/test_wificoin.cpp	/^TestChain100Setup::~TestChain100Setup()$/;"	f	class:TestChain100Setup
~TestWritableFile	leveldb/db/fault_injection_test.cc	/^TestWritableFile::~TestWritableFile() {$/;"	f	class:leveldb::TestWritableFile
~Tester	leveldb/util/testharness.h	/^  ~Tester() {$/;"	f	class:leveldb::test::Tester
~TestingSetup	test/test_wificoin.cpp	/^TestingSetup::~TestingSetup()$/;"	f	class:TestingSetup
~ThreadCounter	httpserver.cpp	/^        ~ThreadCounter()$/;"	f	class:WorkQueue::ThreadCounter
~TorControlConnection	torcontrol.cpp	/^TorControlConnection::~TorControlConnection()$/;"	f	class:TorControlConnection
~TorController	torcontrol.cpp	/^TorController::~TorController()$/;"	f	class:TorController
~TransactionDescDialog	qt/transactiondescdialog.cpp	/^TransactionDescDialog::~TransactionDescDialog()$/;"	f	class:TransactionDescDialog
~TransactionTableModel	qt/transactiontablemodel.cpp	/^TransactionTableModel::~TransactionTableModel()$/;"	f	class:TransactionTableModel
~TwoLevelIterator	leveldb/table/two_level_iterator.cc	/^TwoLevelIterator::~TwoLevelIterator() {$/;"	f	class:leveldb::__anon39::TwoLevelIterator
~UniValue	univalue/include/univalue.h	/^    ~UniValue() {}$/;"	f	class:UniValue
~UnlockContext	qt/walletmodel.cpp	/^WalletModel::UnlockContext::~UnlockContext()$/;"	f	class:WalletModel::UnlockContext
~Version	leveldb/db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionBitsTester	test/versionbits_tests.cpp	/^    ~VersionBitsTester() {$/;"	f	class:VersionBitsTester
~VersionEdit	leveldb/db/version_edit.h	/^  ~VersionEdit() { }$/;"	f	class:leveldb::VersionEdit
~VersionSet	leveldb/db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~WalletFrame	qt/walletframe.cpp	/^WalletFrame::~WalletFrame()$/;"	f	class:WalletFrame
~WalletModel	qt/walletmodel.cpp	/^WalletModel::~WalletModel()$/;"	f	class:WalletModel
~WalletModelTransaction	qt/walletmodeltransaction.cpp	/^WalletModelTransaction::~WalletModelTransaction()$/;"	f	class:WalletModelTransaction
~WalletTestingSetup	wallet/test/wallet_test_fixture.cpp	/^WalletTestingSetup::~WalletTestingSetup()$/;"	f	class:WalletTestingSetup
~WalletView	qt/walletview.cpp	/^WalletView::~WalletView()$/;"	f	class:WalletView
~Win32Env	leveldb/util/env_win.cc	/^Win32Env::~Win32Env()$/;"	f	class:leveldb::Win32::Win32Env
~Win32FileLock	leveldb/util/env_win.cc	/^Win32FileLock::~Win32FileLock()$/;"	f	class:leveldb::Win32::Win32FileLock
~Win32Logger	leveldb/util/env_win.cc	/^Win32Logger::~Win32Logger()$/;"	f	class:leveldb::Win32::Win32Logger
~Win32RandomAccessFile	leveldb/util/env_win.cc	/^Win32RandomAccessFile::~Win32RandomAccessFile()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
~Win32SequentialFile	leveldb/util/env_win.cc	/^Win32SequentialFile::~Win32SequentialFile()$/;"	f	class:leveldb::Win32::Win32SequentialFile
~Win32WritableFile	leveldb/util/env_win.cc	/^Win32WritableFile::~Win32WritableFile()$/;"	f	class:leveldb::Win32::Win32WritableFile
~WorkQueue	httpserver.cpp	/^    ~WorkQueue()$/;"	f	class:WorkQueue
~WritableFile	leveldb/util/env.cc	/^WritableFile::~WritableFile() {$/;"	f	class:leveldb::WritableFile
~WritableFileImpl	leveldb/helpers/memenv/memenv.cc	/^  ~WritableFileImpl() {$/;"	f	class:leveldb::__anon16::WritableFileImpl
~WriteBatch	leveldb/db/write_batch.cc	/^WriteBatch::~WriteBatch() { }$/;"	f	class:leveldb::WriteBatch
~Writer	leveldb/db/log_writer.cc	/^Writer::~Writer() {$/;"	f	class:leveldb::log::Writer
~leveldb_comparator_t	leveldb/db/c.cc	/^  virtual ~leveldb_comparator_t() {$/;"	f	struct:leveldb_comparator_t
~leveldb_filterpolicy_t	leveldb/db/c.cc	/^  virtual ~leveldb_filterpolicy_t() {$/;"	f	struct:leveldb_filterpolicy_t
~prevector	prevector.h	/^    ~prevector() {$/;"	f	class:prevector
~prevector_tester	test/prevector_tests.cpp	/^    ~prevector_tester() {$/;"	f	class:prevector_tester
~reverse_lock	reverselock.h	/^    ~reverse_lock() {$/;"	f	class:reverse_lock
~secure_allocator	support/allocators/secure.h	/^    ~secure_allocator() throw() {}$/;"	f	struct:secure_allocator
~zero_after_free_allocator	support/allocators/zeroafterfree.h	/^    ~zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
